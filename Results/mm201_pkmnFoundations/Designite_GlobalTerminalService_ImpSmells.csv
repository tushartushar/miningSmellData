Implementation smell,Namespace,Class,File,Method,Description
Long Method,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The method has 268 lines of code.
Long Method,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The method has 221 lines of code.
Complex Method,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,Cyclomatic complexity of the method is 30
Complex Method,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,Cyclomatic complexity of the method is 25
Long Parameter List,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,GTServerBase,The method has 5 parameters. Parameters: port' useSsl' threads' timeout' certificate
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,GetDefaultCertificate,The length of the statement  "            X509Certificate2Collection cers = store.Certificates.Find(X509FindType.FindBySubjectName' "pkgdsprod.nintendo.co.jp"' false); " is 125.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,GetDefaultCertificate,The length of the statement  "            LogHelper.Write("X.509 certificate not found. Please add a certificate with subject \"pkgdsprod.nintendo.co.jp\" to the store. Using dummy certificate."); " is 154.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,GetDefaultCertificate,The length of the statement  "            return new X509Certificate2(AppDomain.CurrentDomain.BaseDirectory + Path.DirectorySeparatorChar + "cert.pfx"' "letmein"); " is 121.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,BeginPolling,The length of the statement  "                LogHelper.Write(String.Format("{0} server running on port {1} with {2} threads."' Title' ((IPEndPoint)m_listener.LocalEndpoint).Port' Threads)); " is 144.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The length of the statement  "                                LogHelper.Write(String.Format("Indicated request length is over limit.\nHost: {0}"' c.Client.RemoteEndPoint)' EventLogEntryType.FailureAudit); " is 142.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The length of the statement  "                                LogHelper.Write(String.Format("Indicated request length is under limit.\nHost: {0}"' c.Client.RemoteEndPoint)' EventLogEntryType.FailureAudit); " is 143.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The length of the statement  "                                LogHelper.Write(String.Format("The client disconnected prematurely.\nHost: {0}"' c.Client.RemoteEndPoint)' EventLogEntryType.FailureAudit); " is 139.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The length of the statement  "                            LogHelper.Write(String.Format("Unhandled exception while handling request:\nHost: {0}\nException: {1}"' c.Client.RemoteEndPoint' ex.Message)' EventLogEntryType.Error); " is 167.
Long Statement,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The length of the statement  "                    LogHelper.Write(String.Format("Unhandled exception while handling request:\nException: {0}"' ex.Message)' EventLogEntryType.Error); " is 131.
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,Initialize,The following statement contains a magic number: m_pad = new byte[256];
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: RequestTypes4 requestType = (RequestTypes4)data[4];
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: response.Write(new byte[] { 0x00' 0x00' 0x00' 0x00 }' 0' 4);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: response.WriteByte(data[5]);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: int pid = BitConverter.ToInt32(data' 8);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Box upload                      case RequestTypes4.BoxUpload:                      {                          if (data.Length != 0x360)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x140);                          byte[] boxData = new byte[0x21c];                          Array.Copy(data' 0x144' boxData' 0' 0x21c);                          BoxRecord4 record = new BoxRecord4(pid' label' 0' boxData);                          ulong serial = Database.Instance.BoxUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded box already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Box {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BoxSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BoxLabels4 label = (BoxLabels4)BitConverter.ToInt32(data' 0x144);                            logEntry.AppendFormat("Searching for {0} boxes."' label);                          logEntry.AppendLine();                            BoxRecord4[] results = Database.Instance.BoxSearch4(label' 20);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BoxRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes((int)result.Label)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x21c);                          }                          logEntry.AppendFormat("Retrieved {0} boxes."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Dressup                      case RequestTypes4.DressupUpload:                      {                          if (data.Length != 0x220)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] dressupData = new byte[0xe0];                          Array.Copy(data' 0x140' dressupData' 0' 0xe0);                          DressupRecord4 record = new DressupRecord4(pid' 0' dressupData);                          ulong serial = Database.Instance.DressupUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded dressup already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Dressup {0} uploaded successfully."' serial);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.DressupSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for dressups of species {0}."' species);                          logEntry.AppendLine();                            DressupRecord4[] results = Database.Instance.DressupSearch4(species' 10);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (DressupRecord4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe0);                          }                          logEntry.AppendFormat("Retrieved {0} dressup results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes4.BattleVideoUpload:                      {                          if (data.Length != 0x1e8c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x1d4c];                          Array.Copy(data' 0x140' battlevidData' 0' 0x1d4c);                          BattleVideoRecord4 record = new BattleVideoRecord4(pid' 0' battlevidData);                          ulong serial = Database.Instance.BattleVideoUpload4(record);                            if (serial == 0)                          {                              logEntry.AppendFormat("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes4.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings4 ranking = (BattleVideoRankings4)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames4 meta = (BattleVideoMetagames4)data[0x146];                          byte country = data[0x147];                          byte region = data[0x148];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings4.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            if ((byte)meta == 254)                          {                              // todo: Figure out how to make the game perform this search!                              logEntry.AppendLine("Reverting to latest 30.");                              meta = BattleVideoMetagames4.SearchLatest30;                          }                            BattleVideoHeader4[] results = Database.Instance.BattleVideoSearch4(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader4 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xe4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord4 record = Database.Instance.BattleVideoGet4(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xe4);                          response.Write(record.Data' 0' 0x1c68);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes4.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved4(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,CryptMessage,The following statement contains a magic number: message.Length < 5
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer4,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer4.cs,CryptMessage,The following statement contains a magic number: byte padOffset = (byte)(message[0] + message[4]);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: RequestTypes5 requestType = (RequestTypes5)data[4];
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: response.Write(new byte[] { 0x00' 0x00' 0x00' 0x00 }' 0' 4);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: response.WriteByte(data[5]);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: int pid = BitConverter.ToInt32(data' 8);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServer5,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServer5.cs,ProcessRequest,The following statement contains a magic number: switch (requestType)                  {                      #region Musicals                      case RequestTypes5.MusicalUpload:                      {                          if (data.Length != 0x370)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] musicalData = new byte[0x230];                          Array.Copy(data' 0x140' musicalData' 0' 0x230);                          MusicalRecord5 record = new MusicalRecord5(pid' 0' musicalData);                          ulong serial = Database.Instance.MusicalUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded musical already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Musical {0} uploaded successfully."' serial);                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.MusicalSearch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          ushort species = BitConverter.ToUInt16(data' 0x144);                            logEntry.AppendFormat("Searching for musical photos of species {0}."' species);                          logEntry.AppendLine();                            MusicalRecord5[] results = Database.Instance.MusicalSearch5(species' 5);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (MusicalRecord5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0x230);                          }                          logEntry.AppendFormat("Retrieved {0} musical results."' results.Length);                          logEntry.AppendLine();                        } break;                      #endregion                        #region Battle videos                      case RequestTypes5.BattleVideoUpload:                      {                          if (data.Length != 0x1ae8)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                          int sigLength = BitConverter.ToInt32(data' 0x19e4);                          if (sigLength > 0x100 || sigLength < 0x00)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            byte[] battlevidData = new byte[0x18a4];                            Array.Copy(data' 0x140' battlevidData' 0' 0x18a4);                          BattleVideoRecord5 record = new BattleVideoRecord5(pid' 0' battlevidData);                          byte[] vldtSignature = new byte[sigLength];                          Array.Copy(data' 0x19e8' vldtSignature' 0' sigLength);                          // todo: validate signature.                            ulong serial = Database.Instance.BattleVideoUpload5(record);                            if (serial == 0)                          {                              logEntry.AppendLine("Uploaded battle video already in server.");                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            logEntry.AppendFormat("Battle video {0} uploaded successfully."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(serial)' 0' 8);                        } break;                      case RequestTypes5.BattleVideoSearch:                      {                          if (data.Length != 0x15c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            // todo: validate or log some of this?                          BattleVideoRankings5 ranking = (BattleVideoRankings5)BitConverter.ToUInt32(data' 0x140);                          ushort species = BitConverter.ToUInt16(data' 0x144);                          BattleVideoMetagames5 meta = (BattleVideoMetagames5)data[0x146];                                                    // Byte 148 contains a magic number related to the searched metagame.                          // If 0' disable metagame search. Metagame being 00 is insufficient                          // since that value could mean Battle Subway Single.                          if (data[0x148] == 0x00) meta = BattleVideoMetagames5.SearchNone;                            byte country = data[0x14a];                          byte region = data[0x14b];                            logEntry.Append("Searching for ");                          if (ranking != BattleVideoRankings5.None)                              logEntry.AppendFormat("{0}"' ranking);                          else                          {                              if (species != 0xffff)                                  logEntry.AppendFormat("species {0}' "' species);                              logEntry.AppendFormat("{0}"' meta);                              if (country != 0xff)                                  logEntry.AppendFormat("' country {0}"' country);                              if (region != 0xff)                                  logEntry.AppendFormat("' region {0}"' region);                          }                          logEntry.AppendLine(".");                            BattleVideoHeader5[] results = Database.Instance.BattleVideoSearch5(species' ranking' meta' country' region' 30);                          response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(results.Length)' 0' 4);                            foreach (BattleVideoHeader5 result in results)                          {                              response.Write(BitConverter.GetBytes(result.PID)' 0' 4);                              response.Write(BitConverter.GetBytes(result.SerialNumber)' 0' 8);                              response.Write(result.Data' 0' 0xc4);                          }                          logEntry.AppendFormat("Retrieved {0} battle video results."' results.Length);                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoWatch:                      {                          if (data.Length != 0x14c)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                          BattleVideoRecord5 record = Database.Instance.BattleVideoGet5(serial' true);                          if (record == null)                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                              type = EventLogEntryType.FailureAudit;                              break;                          }                            response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                          response.Write(BitConverter.GetBytes(record.PID)' 0' 4);                          response.Write(BitConverter.GetBytes(record.SerialNumber)' 0' 8);                          response.Write(record.Header.Data' 0' 0xc4);                          response.Write(record.Data' 0' 0x17e0);                          logEntry.AppendFormat("Retrieved battle video {0}."' BattleVideoHeader4.FormatSerial(serial));                          logEntry.AppendLine();                        } break;                      case RequestTypes5.BattleVideoSaved:                      {                          if (data.Length != 0x148)                          {                              logEntry.AppendLine("Length did not validate.");                              type = EventLogEntryType.FailureAudit;                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              break;                          }                            ulong serial = BitConverter.ToUInt64(data' 0x140);                            if (Database.Instance.BattleVideoFlagSaved5(serial))                          {                              response.Write(new byte[] { 0x00' 0x00 }' 0' 2); // result code (0 for OK)                              logEntry.AppendFormat("Battle video {0} flagged saved."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                          else                          {                              response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                              logEntry.AppendFormat("Requested battle video {0} was missing."' BattleVideoHeader4.FormatSerial(serial));                              logEntry.AppendLine();                          }                      } break;                      #endregion                        default:                          logEntry.AppendLine("Unrecognized request type.");                          response.Write(new byte[] { 0x02' 0x00 }' 0' 2);                          break;                  }
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,EndPolling,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: length > 7820
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: length < 320
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: int actualLength = br.ReadBlock(data' 4' length - 4);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: int actualLength = br.ReadBlock(data' 4' length - 4);
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,MainLoop,The following statement contains a magic number: actualLength + 4 != length
Magic Number,PkmnFoundations.GlobalTerminalService,GTServerBase,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\GTServerBase.cs,WriteLength,The following statement contains a magic number: Array.Copy(data' 0' message' 0' 4);
Magic Number,PkmnFoundations.GlobalTerminalService,Program,D:\research\architectureSmells\repos\mm201_pkmnFoundations\GlobalTerminalService\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
