Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NCrash.Core,SerializableException,C:\repos\akurdyukov_NCrash\NCrash\Core\SerializableException.cs,SerializableException,Cyclomatic complexity of the method is 14
Complex Method,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,NCrash,ErrorReporter,C:\repos\akurdyukov_NCrash\NCrash\ErrorReporter.cs,Report,Cyclomatic complexity of the method is 9
Complex Method,NCrash.Sender,HttpSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\HttpSender.cs,UploadFiles,Cyclomatic complexity of the method is 12
Complex Method,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,Cyclomatic complexity of the method is 26
Complex Method,NCrash.Storage,IsolatedStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\IsolatedStorageBackend.cs,TruncateReportFiles,Cyclomatic complexity of the method is 8
Complex Method,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,AddToZip,Cyclomatic complexity of the method is 9
Long Parameter List,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,MiniDumpWriteDump,The method has 7 parameters.
Long Parameter List,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,MiniDumpWriteDump,The method has 7 parameters.
Long Parameter List,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,AddStream,The method has 5 parameters.
Long Statement,NCrash.Core,GeneralInfo,C:\repos\akurdyukov_NCrash\NCrash\Core\GeneralInfo.cs,ToString,The length of the statement  "	return string.Format ("{{ClrVersion: {0}' DateTime: {1}' ExceptionMessage: {2}' ExceptionType: {3}' HostApplication: {4}' HostApplicationVersion: {5}' NCrashVersion: {6}' TargetSite: {7}' UserDescription: {8}}}"' ClrVersion' DateTime' ExceptionMessage' ExceptionType' HostApplication' HostApplicationVersion' NCrashVersion' TargetSite' UserDescription); " is 353.
Long Statement,NCrash.Core,SerializableDictionary,C:\repos\akurdyukov_NCrash\NCrash\Core\SerializableDictionary.cs,ReadXml,The length of the statement  "			Add ((TKey)Convert.ChangeType (element.Name.ToString ()' typeof(TKey))' (TValue)Convert.ChangeType (element.Value' typeof(TValue))); " is 132.
Long Statement,NCrash.Core,SerializableException,C:\repos\akurdyukov_NCrash\NCrash\Core\SerializableException.cs,ToString,The length of the statement  "	return string.Format ("{{ExtendedInformation: {0}' HelpLink: {1}' InnerException: {2}' InnerExceptions: {3}' Message: {4}' Source: {5}' StackTrace: {6}' TargetSite: {7}' Type: {8}}}"' ExtendedInformation' HelpLink' InnerException' sb' Message' Source' StackTrace' TargetSite' Type); " is 282.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		// ToDo: Create the minidump at a seperate process! Use this to deal with access errors: http://social.msdn.microsoft.com/Forums/en/csharpgeneral/thread/c314e6ca-4892-41e7-ae19-b3a36ad640e9 " is 189.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		// Bug: In process minidumps causes all sorts of access problems (i.e. one of them is explained below' debugger prevents accessing private memory) " is 146.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		// Bug: Combination of WithPrivateReadWriteMemory + WithDataSegs hangs Visual Studio 2010 SP1 on some cases while loading the minidump for debugging in mixed mode which was created in by a release build application " is 214.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		return Write (fileHandle' DumpTypeFlag.WithPrivateReadWriteMemory | DumpTypeFlag.WithDataSegs | DumpTypeFlag.WithHandleData | DumpTypeFlag.WithUnloadedModules); " is 160.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "			bRet = MiniDumpWriteDump (currentProcessHandle' currentProcessId' fileHandle' (uint)dumpTypeFlag' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 137.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "			bRet = MiniDumpWriteDump (currentProcessHandle' currentProcessId' fileHandle' (uint)dumpTypeFlag' ref exp' IntPtr.Zero' IntPtr.Zero); " is 133.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		Logger.Warn ("dbghelp.dll was not found inside the application folder' the system path or SDK folder. Minidump was not generated. If you are not planning on using the minidump feature' you can disable it with the Configurator tool."); " is 234.
Long Statement,NCrash.Core.MiniDump,DumpWriter,C:\repos\akurdyukov_NCrash\NCrash\Core\MiniDump\DumpWriter.cs,Write,The length of the statement  "		Logger.Error ("Cannot write the minidump. MiniDumpWriteDump (dbghelp.dll) function returned error code: " + errorCode + " message: " + errorMessage); " is 149.
Long Statement,NCrash,ErrorReporter,C:\repos\akurdyukov_NCrash\NCrash\ErrorReporter.cs,ThreadExceptionHandler,The length of the statement  "	// WinForms UI thread exceptions do not propagate to more general handlers unless: Application.SetUnhandledExceptionMode(UnhandledExceptionMode.ThrowException); " is 160.
Long Statement,NCrash,ErrorReporter,C:\repos\akurdyukov_NCrash\NCrash\ErrorReporter.cs,Report,The length of the statement  "			if (_settings.StopReportingAfter >= 0 && InstallationDate.AddDays (_settings.StopReportingAfter).CompareTo (DateTime.Now) <= 0) { " is 129.
Long Statement,NCrash,ErrorReporter,C:\repos\akurdyukov_NCrash\NCrash\ErrorReporter.cs,Report,The length of the statement  "				Logger.Trace ("As per setting 'Settings.StopReportingAfter(" + _settings.StopReportingAfter + ")'' bug reporting feature was enabled for a certain amount of time which has now expired: Truncating all expired bug reports. Bug reporting is now disabled."); " is 254.
Long Statement,NCrash.Sender,HttpSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\HttpSender.cs,UploadFiles,The length of the statement  "			buffer = Encoding.ASCII.GetBytes (string.Format ("Content-Disposition: form-data; name=\"{0}\"{1}{1}"' name' Environment.NewLine)); " is 131.
Long Statement,NCrash.Sender,HttpSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\HttpSender.cs,UploadFiles,The length of the statement  "			buffer = Encoding.UTF8.GetBytes (string.Format ("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"{2}"' file.Name' file.Filename' Environment.NewLine)); " is 165.
Long Statement,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The length of the statement  "				message.Subject = "NCrash: " + report.GeneralInfo.HostApplication + " (" + report.GeneralInfo.HostApplicationVersion + "): " + report.GeneralInfo.ExceptionType + " @ " + report.GeneralInfo.TargetSite; " is 200.
Long Statement,NCrash.Storage,DirectoryStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\DirectoryStorageBackend.cs,GetFirstReportFile,The length of the statement  "		Logger.Error ("Cannot access the report file at Windows temp directory (it is probably locked' see the inner exception): " + filePath' exception); " is 146.
Long Statement,NCrash.Storage,IsolatedStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\IsolatedStorageBackend.cs,GetReportCount,The length of the statement  "	using (var isoFile = IsolatedStorageFile.GetStore (IsolatedStorageScope.User | IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain' null' null)) { " is 154.
Long Statement,NCrash.Storage,IsolatedStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\IsolatedStorageBackend.cs,TruncateReportFiles,The length of the statement  "	using (IsolatedStorageFile isoFile = IsolatedStorageFile.GetStore (IsolatedStorageScope.User | IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain' null' null)) { " is 170.
Long Statement,NCrash.Storage,IsolatedStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\IsolatedStorageBackend.cs,GetFirstReportFile,The length of the statement  "	_isoStore = IsolatedStorageFile.GetStore (IsolatedStorageScope.User | IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain' null' null); " is 143.
Long Statement,NCrash.Storage,IsolatedStorageBackend,C:\repos\akurdyukov_NCrash\NCrash\Storage\IsolatedStorageBackend.cs,GetFirstReportFile,The length of the statement  "		Logger.Error ("Cannot access the report file at isolated storage (it is probably locked' see the inner exception): [Isolated Storage Directory]\\" + fileName' exception); " is 170.
Long Statement,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,Write,The length of the statement  "				var minidumpFilePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.CommonApplicationData)' "Exception_MiniDump_" + DateTime.UtcNow.ToFileTime () + ".mdmp"); " is 179.
Long Statement,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,Write,The length of the statement  "			Logger.Trace ("Created a new report file. Currently the number of report files queued to be send is: " + _settings.StorageBackend.GetReportCount ()); " is 149.
Long Statement,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,Write,The length of the statement  "		Logger.Trace ("Current report count is at its limit as per 'Settings.MaxQueuedReports (" + ex.MaxQueuedReports + ")' setting: Skipping bug report generation."); " is 160.
Long Statement,NCrash.Storage,ReportStorage,C:\repos\akurdyukov_NCrash\NCrash\Storage\ReportStorage.cs,WriteReport,The length of the statement  "				Logger.Error (string.Format ("The given custom info of type [{0}] cannot be serialized. Make sure that given type and inner types are XML serializable."' report.CustomInfo.GetType ())' exception); " is 196.
Long Statement,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Open,The length of the statement  "	Stream stream = new FileStream (filename' FileMode.Open' access == FileAccess.Read ? FileAccess.Read : FileAccess.ReadWrite); " is 125.
Long Statement,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The length of the statement  "	return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25)); " is 131.
Long Statement,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The length of the statement  "	return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2); " is 152.
Long Statement,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The length of the statement  "	if (_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize) { " is 123.
Complex Conditional,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The conditional expression  "_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize"  is complex.
Empty Catch Block,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The method has an empty catch block.
Magic Number,NCrash,DefaultSettings,C:\repos\akurdyukov_NCrash\NCrash\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: MaxQueuedReports = 10;  
Magic Number,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The following statement contains a magic number: if (Port == int.MinValue) {  	Port = UseSsl ? 465 : 25;  }  
Magic Number,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The following statement contains a magic number: if (Port == int.MinValue) {  	Port = UseSsl ? 465 : 25;  }  
Magic Number,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The following statement contains a magic number: Port = UseSsl ? 465 : 25;  
Magic Number,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The following statement contains a magic number: Port = UseSsl ? 465 : 25;  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: CrcTable = new uint[256];  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++) {  	var c = (UInt32)i;  	for (int j = 0; j < 8; j++) {  		if ((c & 1) != 0) {  			c = 3988292384 ^ (c >> 1);  		}  		else {  			c >>= 1;  		}  	}  	CrcTable [i] = c;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++) {  	var c = (UInt32)i;  	for (int j = 0; j < 8; j++) {  		if ((c & 1) != 0) {  			c = 3988292384 ^ (c >> 1);  		}  		else {  			c >>= 1;  		}  	}  	CrcTable [i] = c;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((c & 1) != 0) {  		c = 3988292384 ^ (c >> 1);  	}  	else {  		c >>= 1;  	}  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((c & 1) != 0) {  		c = 3988292384 ^ (c >> 1);  	}  	else {  		c >>= 1;  	}  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: if ((c & 1) != 0) {  	c = 3988292384 ^ (c >> 1);  }  else {  	c >>= 1;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ZipStorer,The following statement contains a magic number: c = 3988292384 ^ (c >> 1);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ExtractFile,The following statement contains a magic number: _zipFileStream.Read (signature' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < _centralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (_centralDirImage' pointer);  	if (signature != 0x02014b50) {  		break;  	}  	bool encodeUTF8 = (BitConverter.ToUInt16 (_centralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (_centralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (_centralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (_centralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (_centralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (_centralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (_centralDirImage' pointer + 42);  	var headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	var zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0) {  		zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	}  	result.Add (zfe);  	pointer += 46 + filenameSize + extraSize + commentSize;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: zfe.FilenameInZip = encoder.GetString (_centralDirImage' pointer + 46' filenameSize);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: if (commentSize > 0) {  	zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: zfe.Comment = encoder.GetString (_centralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: pointer += 46 + filenameSize + extraSize + commentSize;  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((dt.Second / 2) | (dt.Minute << 5) | (dt.Hour << 11) | (dt.Day << 16) | (dt.Month << 21) | ((dt.Year - 1980) << 25));  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(dt >> 25) + 1980' (int)(dt >> 21) & 15' (int)(dt >> 16) & 31' (int)(dt >> 11) & 31' (int)(dt >> 5) & 63' (int)(dt & 31) * 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this._zipFileStream.Seek (headerOffset + 26' SeekOrigin.Begin);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this._zipFileStream.Read (buffer' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this._zipFileStream.Read (buffer' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: return (uint)(30 + filenameSize + extraSize + headerOffset);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: if (this._zipFileStream.Length < 22) {  	return false;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try {  	this._zipFileStream.Seek (-17' SeekOrigin.End);  	var br = new BinaryReader (this._zipFileStream);  	do {  		this._zipFileStream.Seek (-5' SeekOrigin.Current);  		uint sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this._zipFileStream.Seek (6' SeekOrigin.Current);  			ushort entries = br.ReadUInt16 ();  			int centralSize = br.ReadInt32 ();  			uint centralDirOffset = br.ReadUInt32 ();  			ushort commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  				return false;  			}  			// Copy entire central directory to a memory buffer  			this._existingFiles = entries;  			this._centralDirImage = new byte[centralSize];  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	}  	while (this._zipFileStream.Position > 0);  }  catch {  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try {  	this._zipFileStream.Seek (-17' SeekOrigin.End);  	var br = new BinaryReader (this._zipFileStream);  	do {  		this._zipFileStream.Seek (-5' SeekOrigin.Current);  		uint sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this._zipFileStream.Seek (6' SeekOrigin.Current);  			ushort entries = br.ReadUInt16 ();  			int centralSize = br.ReadInt32 ();  			uint centralDirOffset = br.ReadUInt32 ();  			ushort commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  				return false;  			}  			// Copy entire central directory to a memory buffer  			this._existingFiles = entries;  			this._centralDirImage = new byte[centralSize];  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	}  	while (this._zipFileStream.Position > 0);  }  catch {  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try {  	this._zipFileStream.Seek (-17' SeekOrigin.End);  	var br = new BinaryReader (this._zipFileStream);  	do {  		this._zipFileStream.Seek (-5' SeekOrigin.Current);  		uint sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this._zipFileStream.Seek (6' SeekOrigin.Current);  			ushort entries = br.ReadUInt16 ();  			int centralSize = br.ReadInt32 ();  			uint centralDirOffset = br.ReadUInt32 ();  			ushort commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  				return false;  			}  			// Copy entire central directory to a memory buffer  			this._existingFiles = entries;  			this._centralDirImage = new byte[centralSize];  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	}  	while (this._zipFileStream.Position > 0);  }  catch {  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: this._zipFileStream.Seek (-17' SeekOrigin.End);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: do {  	this._zipFileStream.Seek (-5' SeekOrigin.Current);  	uint sig = br.ReadUInt32 ();  	if (sig == 0x06054b50) {  		this._zipFileStream.Seek (6' SeekOrigin.Current);  		ushort entries = br.ReadUInt16 ();  		int centralSize = br.ReadInt32 ();  		uint centralDirOffset = br.ReadUInt32 ();  		ushort commentSize = br.ReadUInt16 ();  		// check if comment field is the very last data in file  		if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  			return false;  		}  		// Copy entire central directory to a memory buffer  		this._existingFiles = entries;  		this._centralDirImage = new byte[centralSize];  		this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  		// Leave the pointer at the begining of central dir' to append new files  		this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		return true;  	}  }  while (this._zipFileStream.Position > 0);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: do {  	this._zipFileStream.Seek (-5' SeekOrigin.Current);  	uint sig = br.ReadUInt32 ();  	if (sig == 0x06054b50) {  		this._zipFileStream.Seek (6' SeekOrigin.Current);  		ushort entries = br.ReadUInt16 ();  		int centralSize = br.ReadInt32 ();  		uint centralDirOffset = br.ReadUInt32 ();  		ushort commentSize = br.ReadUInt16 ();  		// check if comment field is the very last data in file  		if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  			return false;  		}  		// Copy entire central directory to a memory buffer  		this._existingFiles = entries;  		this._centralDirImage = new byte[centralSize];  		this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  		// Leave the pointer at the begining of central dir' to append new files  		this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		return true;  	}  }  while (this._zipFileStream.Position > 0);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: this._zipFileStream.Seek (-5' SeekOrigin.Current);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: if (sig == 0x06054b50) {  	this._zipFileStream.Seek (6' SeekOrigin.Current);  	ushort entries = br.ReadUInt16 ();  	int centralSize = br.ReadInt32 ();  	uint centralDirOffset = br.ReadUInt32 ();  	ushort commentSize = br.ReadUInt16 ();  	// check if comment field is the very last data in file  	if (this._zipFileStream.Position + commentSize != this._zipFileStream.Length) {  		return false;  	}  	// Copy entire central directory to a memory buffer  	this._existingFiles = entries;  	this._centralDirImage = new byte[centralSize];  	this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  	this._zipFileStream.Read (this._centralDirImage' 0' centralSize);  	// Leave the pointer at the begining of central dir' to append new files  	this._zipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  	return true;  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: this._zipFileStream.Seek (6' SeekOrigin.Current);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The following statement contains a magic number: do {  	bytesRead = _source.Read (buffer' 0' buffer.Length);  	totalRead += (uint)bytesRead;  	if (bytesRead > 0) {  		outStream.Write (buffer' 0' bytesRead);  		for (uint i = 0; i < bytesRead; i++) {  			_zfe.Crc32 = CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  		}  	}  }  while (bytesRead == buffer.Length);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The following statement contains a magic number: if (bytesRead > 0) {  	outStream.Write (buffer' 0' bytesRead);  	for (uint i = 0; i < bytesRead; i++) {  		_zfe.Crc32 = CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  	}  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The following statement contains a magic number: for (uint i = 0; i < bytesRead; i++) {  	_zfe.Crc32 = CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  }  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,Store,The following statement contains a magic number: _zfe.Crc32 = CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Position = _zfe.HeaderOffset + 8;  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Position = _zfe.HeaderOffset + 14;  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.Crc32)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.CompressedSize)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.FileSize)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (this.DateTimeToDosTime (_zfe.ModifyTime))' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.Crc32)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.CompressedSize)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.FileSize)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)encodedFilename.Length)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)encodedComment.Length)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0x8100)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_zfe.HeaderOffset)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)this._files.Count + this._existingFiles)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)this._files.Count + this._existingFiles)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_size)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (_offset)' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)encodedComment.Length)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes (this.DateTimeToDosTime (_zfe.ModifyTime))' 0' 4);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }' 0' 12);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)encodedFilename.Length)' 0' 2);  
Magic Number,NCrash.Storage,ZipStorer,C:\repos\akurdyukov_NCrash\NCrash\Storage\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this._zipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Missing Default,NCrash.Sender,MailSender,C:\repos\akurdyukov_NCrash\NCrash\Sender\MailSender.cs,Send,The following switch statement is missing a default case: switch (Priority.ToLower ()) {  case "high":  	message.Priority = MailPriority.High;  	break;  case "normal":  	message.Priority = MailPriority.Normal;  	break;  case "low":  	message.Priority = MailPriority.Low;  	break;  }  
