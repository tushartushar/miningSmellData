Implementation smell,Namespace,Class,File,Method,Description
Long Method,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Check,The method has 131 lines of code.
Complex Method,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Check,Cyclomatic complexity of the method is 47
Complex Method,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,Cyclomatic complexity of the method is 13
Long Statement,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,OnStart,The length of the statement  "	//   if configuration is non existent' poll and wait for configuration to be found (either through tcp or a file to appear) " is 123.
Long Statement,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The length of the statement  "				configurationData = ConfigurationData.LoadConfiguration (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon\configuration.xml"); " is 162.
Long Statement,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The length of the statement  "	//should fill this in if its not in here' for whatever reason' then any clients requesting it will have it filled out for sure " is 126.
Long Statement,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The length of the statement  "								Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ()); " is 123.
Empty Catch Block,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The method has an empty catch block.
Empty Catch Block,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The method has an empty catch block.
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Start,The following statement contains a magic number: if (_check == null)  	_check = new Thread (Check);  else if (_check.IsAlive) {  	_check.Join (50);  	_check = new Thread (Check);  }  
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Start,The following statement contains a magic number: if (_check.IsAlive) {  	_check.Join (50);  	_check = new Thread (Check);  }  
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Start,The following statement contains a magic number: _check.Join (50);  
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Stop,The following statement contains a magic number: _check.Join (100);  
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Check,The following statement contains a magic number: while (!kill) {  	List<Command> commands = new List<Command> (_listener.GetCommands ());  	foreach (Command cmd in commands) {  		try {  			switch (cmd.CommandType) {  			case Commands.GetResults:  				Int64 lastcount = Convert.ToInt64 (cmd.Data);  				if (lastcount < ResultChecker.GetLastResultCounter (cmd.FromIp' cmd.FromNamespace)) {  					Results results = ResultChecker.GetLatestResults (cmd.FromIp' cmd.FromNamespace);  					if (results != null && results.Count > 0) {  						Command cmdResults = new Command {  							CommandType = Commands.GetResultsResponse'  							Data = results'  							ToNamespace = cmd.FromNamespace'  							ToIp = cmd.FromIp  						};  						_listener.SendCommand (cmdResults);  						ResultChecker.ClearResults (cmd.FromIp' cmd.FromNamespace);  					}  				}  				break;  			case Commands.StartScheduler:  				MonitorScheduler.Scheduler.SetMonitors (NetworkMonitor.Configuration);  				MonitorScheduler.Scheduler.Start ();  				_listener.SendCommand (new Command {  					CommandType = Commands.SchedulerStatus'  					Data = MonitorScheduler.Scheduler.Running'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.StopScheduler:  				MonitorScheduler.Scheduler.Kill ();  				_listener.SendCommand (new Command {  					CommandType = Commands.SchedulerStatus'  					Data = MonitorScheduler.Scheduler.Running'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.SchedulerStatus:  				//need enum to show status better  				_listener.SendCommand (new Command {  					CommandType = Commands.SchedulerStatus'  					Data = MonitorScheduler.Scheduler.Running'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.ServiceStatus:  				//need enum to show status better  				_listener.SendCommand (new Command {  					CommandType = Commands.ServiceStatus'  					Data = true'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.UpdateConfiguration:  				if (cmd.Data != null) {  					NetworkMonitor.SetConfiguration ((ConfigurationData)cmd.Data);  					//NetworkMonitor.Configuration = (ConfigurationData)cmd.Data;  					//save it once i get it.  					NetworkMonitor.Configuration.ExportToXml (_configPath);  				}  				_listener.SendCommand (new Command {  					CommandType = Commands.UpdateConfigurationResponse'  					Data = true'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.GetConfiguration:  				_listener.SendCommand (new Command {  					CommandType = Commands.GetConfigurationResponse'  					Data = NetworkMonitor.Configuration'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				});  				break;  			case Commands.GetConfigurationResponse:  				if (cmd.Data != null) {  					//NetworkMonitor.Configuration = (ConfigurationData)cmd.Data;  					NetworkMonitor.SetConfiguration ((ConfigurationData)cmd.Data);  					//save it once i get it.  					NetworkMonitor.Configuration.ExportToXml (_configPath);  				}  				break;  			case Commands.ResultsSync:  				if (NetworkMonitor.ConfigurationLoaded) {  					SyncDatas localdatas = new SyncDatas {  						Counter = ResultChecker.GetLastResultCounter (cmd.FromIp' cmd.FromNamespace)  					};  					//List<SyncData> localdatas = new List<SyncData>();  					foreach (IMonitor monitor in NetworkMonitor.Configuration.ToEnumerable ()) {  						localdatas.Add (new SyncData {  							FriendlyName = monitor.FriendlyName'  							GuidHash = monitor.Hash'  							IntHash = monitor.GetHashCode ()  						});  					}  					_listener.SendCommand (new Command {  						CommandType = Commands.ResultsSyncResponse'  						Data = localdatas'  						ToNamespace = cmd.FromNamespace'  						ToIp = cmd.FromIp  					});  				}  				break;  			case Commands.GetAlertResults:  				Results alertResults = ResultChecker.GetLatestAlertResults (cmd.FromIp' cmd.FromNamespace);  				Command cmdAlertResults = new Command {  					CommandType = Commands.GetAlertResultsResponse'  					Data = alertResults'  					ToNamespace = cmd.FromNamespace'  					ToIp = cmd.FromIp  				};  				_listener.SendCommand (cmdAlertResults);  				ResultChecker.ClearResults (cmd.FromIp' cmd.FromNamespace);  				break;  			}  		}  		catch (Exception ex) {  			Logger.Instance.Log (this.GetType ()' LogType.Debug' "Command Type: " + cmd.CommandType);  			Logger.Instance.LogException (this.GetType ()' ex);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Check,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: while (!configLoaded) {  	try {  		if (Environment.CurrentDirectory.Contains ("system32")) {  			if (!Directory.Exists (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon"))  				Directory.CreateDirectory (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon");  			configurationData = ConfigurationData.LoadConfiguration (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon\configuration.xml");  		}  		else  			configurationData = ConfigurationData.LoadConfiguration (@"configuration.xml");  	}  	catch (Exception) {  		//Logger.Instance.LogException(this.GetType()' ex);  	}  	try {  		if (configurationData == null) {  			CommandChecker.SendCommandToAll (new Command {  				CommandType = Commands.GetConfiguration  			});  			Thread.Sleep (60000);  		}  	}  	catch (Exception) {  		//Logger.Instance.LogException(this.GetType()' ex);  	}  	if (configurationData != null) {  		configLoaded = true;  		Logger.Instance.Log (typeof(NetworkMonitor)' LogType.Info' "Configuration Loaded.");  	}  	if (!configLoaded)  		Logger.Instance.Log (typeof(NetworkMonitor)' LogType.Info' "Unable to find configuration.");  	Thread.Sleep (10000);  }  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: while (!configLoaded) {  	try {  		if (Environment.CurrentDirectory.Contains ("system32")) {  			if (!Directory.Exists (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon"))  				Directory.CreateDirectory (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon");  			configurationData = ConfigurationData.LoadConfiguration (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + @"\RemoteMon\configuration.xml");  		}  		else  			configurationData = ConfigurationData.LoadConfiguration (@"configuration.xml");  	}  	catch (Exception) {  		//Logger.Instance.LogException(this.GetType()' ex);  	}  	try {  		if (configurationData == null) {  			CommandChecker.SendCommandToAll (new Command {  				CommandType = Commands.GetConfiguration  			});  			Thread.Sleep (60000);  		}  	}  	catch (Exception) {  		//Logger.Instance.LogException(this.GetType()' ex);  	}  	if (configurationData != null) {  		configLoaded = true;  		Logger.Instance.Log (typeof(NetworkMonitor)' LogType.Info' "Configuration Loaded.");  	}  	if (!configLoaded)  		Logger.Instance.Log (typeof(NetworkMonitor)' LogType.Info' "Unable to find configuration.");  	Thread.Sleep (10000);  }  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: try {  	if (configurationData == null) {  		CommandChecker.SendCommandToAll (new Command {  			CommandType = Commands.GetConfiguration  		});  		Thread.Sleep (60000);  	}  }  catch (Exception) {  	//Logger.Instance.LogException(this.GetType()' ex);  }  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: if (configurationData == null) {  	CommandChecker.SendCommandToAll (new Command {  		CommandType = Commands.GetConfiguration  	});  	Thread.Sleep (60000);  }  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,RemoteMon_Service,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\NetworkMonitor.cs,ConfigurationSetup,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Start,The following statement contains a magic number: if (_check == null) {  	_check = new Thread (Check);  }  else if (_check.IsAlive)  	_check.Join (50);  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Start,The following statement contains a magic number: if (_check.IsAlive)  	_check.Join (50);  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Start,The following statement contains a magic number: _check.Join (50);  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Stop,The following statement contains a magic number: _check.Join (100);  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: while (!kill) {  	//loop and check status and add to alert queue  	Results r = null;  	try {  		lock (result_locker) {  			r = MonitorScheduler.GetResults ();  			//results.AddRange(r.ToEnumerable());  			foreach (Namespace nKey in latest_results.Keys) {  				foreach (String sKey in latest_results [nKey].Keys) {  					ResultsCounter rc = latest_results [nKey] [sKey];  					rc.Counter++;  					if (rc.Results == null)  						rc.Results = new Results (r.ToEnumerable ());  					else  						rc.Results.AddRange (r.ToEnumerable ());  				}  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	try {  		if (r == null)  			continue;  		foreach (IResult result in r.ToEnumerable ()) {  			if (!result.Ok) {  				CountTime tmp;  				if (!_counts.ContainsKey (result.MonitorHash))  					tmp = _counts [result.MonitorHash] = new CountTime ();  				else  					tmp = _counts [result.MonitorHash];  				Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  				if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  					tmp.Count++;  				}  				else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  					//if the breach count is 1' increase it - should fire an alert if so  					tmp.Count++;  				else  					tmp.Count = 0;  				if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  				 {  					if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  					 {  						Boolean send = result.SendAlert ();  						send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  						if (!send)  							Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  						else  							tmp.LastSent = DateTime.Now;  						//only if it sent successfully  					}  					//}  					tmp.Count = 0;  				}  				tmp.Last = result.RunTime;  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	Thread.Sleep (500);  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: while (!kill) {  	//loop and check status and add to alert queue  	Results r = null;  	try {  		lock (result_locker) {  			r = MonitorScheduler.GetResults ();  			//results.AddRange(r.ToEnumerable());  			foreach (Namespace nKey in latest_results.Keys) {  				foreach (String sKey in latest_results [nKey].Keys) {  					ResultsCounter rc = latest_results [nKey] [sKey];  					rc.Counter++;  					if (rc.Results == null)  						rc.Results = new Results (r.ToEnumerable ());  					else  						rc.Results.AddRange (r.ToEnumerable ());  				}  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	try {  		if (r == null)  			continue;  		foreach (IResult result in r.ToEnumerable ()) {  			if (!result.Ok) {  				CountTime tmp;  				if (!_counts.ContainsKey (result.MonitorHash))  					tmp = _counts [result.MonitorHash] = new CountTime ();  				else  					tmp = _counts [result.MonitorHash];  				Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  				if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  					tmp.Count++;  				}  				else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  					//if the breach count is 1' increase it - should fire an alert if so  					tmp.Count++;  				else  					tmp.Count = 0;  				if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  				 {  					if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  					 {  						Boolean send = result.SendAlert ();  						send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  						if (!send)  							Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  						else  							tmp.LastSent = DateTime.Now;  						//only if it sent successfully  					}  					//}  					tmp.Count = 0;  				}  				tmp.Last = result.RunTime;  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	Thread.Sleep (500);  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: while (!kill) {  	//loop and check status and add to alert queue  	Results r = null;  	try {  		lock (result_locker) {  			r = MonitorScheduler.GetResults ();  			//results.AddRange(r.ToEnumerable());  			foreach (Namespace nKey in latest_results.Keys) {  				foreach (String sKey in latest_results [nKey].Keys) {  					ResultsCounter rc = latest_results [nKey] [sKey];  					rc.Counter++;  					if (rc.Results == null)  						rc.Results = new Results (r.ToEnumerable ());  					else  						rc.Results.AddRange (r.ToEnumerable ());  				}  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	try {  		if (r == null)  			continue;  		foreach (IResult result in r.ToEnumerable ()) {  			if (!result.Ok) {  				CountTime tmp;  				if (!_counts.ContainsKey (result.MonitorHash))  					tmp = _counts [result.MonitorHash] = new CountTime ();  				else  					tmp = _counts [result.MonitorHash];  				Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  				if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  					tmp.Count++;  				}  				else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  					//if the breach count is 1' increase it - should fire an alert if so  					tmp.Count++;  				else  					tmp.Count = 0;  				if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  				 {  					if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  					 {  						Boolean send = result.SendAlert ();  						send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  						if (!send)  							Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  						else  							tmp.LastSent = DateTime.Now;  						//only if it sent successfully  					}  					//}  					tmp.Count = 0;  				}  				tmp.Last = result.RunTime;  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	Thread.Sleep (500);  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: try {  	if (r == null)  		continue;  	foreach (IResult result in r.ToEnumerable ()) {  		if (!result.Ok) {  			CountTime tmp;  			if (!_counts.ContainsKey (result.MonitorHash))  				tmp = _counts [result.MonitorHash] = new CountTime ();  			else  				tmp = _counts [result.MonitorHash];  			Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  			if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  				tmp.Count++;  			}  			else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  				//if the breach count is 1' increase it - should fire an alert if so  				tmp.Count++;  			else  				tmp.Count = 0;  			if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  			 {  				if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  				 {  					Boolean send = result.SendAlert ();  					send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  					if (!send)  						Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  					else  						tmp.LastSent = DateTime.Now;  					//only if it sent successfully  				}  				//}  				tmp.Count = 0;  			}  			tmp.Last = result.RunTime;  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: try {  	if (r == null)  		continue;  	foreach (IResult result in r.ToEnumerable ()) {  		if (!result.Ok) {  			CountTime tmp;  			if (!_counts.ContainsKey (result.MonitorHash))  				tmp = _counts [result.MonitorHash] = new CountTime ();  			else  				tmp = _counts [result.MonitorHash];  			Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  			if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  				tmp.Count++;  			}  			else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  				//if the breach count is 1' increase it - should fire an alert if so  				tmp.Count++;  			else  				tmp.Count = 0;  			if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  			 {  				if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  				 {  					Boolean send = result.SendAlert ();  					send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  					if (!send)  						Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  					else  						tmp.LastSent = DateTime.Now;  					//only if it sent successfully  				}  				//}  				tmp.Count = 0;  			}  			tmp.Last = result.RunTime;  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: foreach (IResult result in r.ToEnumerable ()) {  	if (!result.Ok) {  		CountTime tmp;  		if (!_counts.ContainsKey (result.MonitorHash))  			tmp = _counts [result.MonitorHash] = new CountTime ();  		else  			tmp = _counts [result.MonitorHash];  		Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  		if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  			tmp.Count++;  		}  		else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  			//if the breach count is 1' increase it - should fire an alert if so  			tmp.Count++;  		else  			tmp.Count = 0;  		if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  		 {  			if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  			 {  				Boolean send = result.SendAlert ();  				send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  				if (!send)  					Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  				else  					tmp.LastSent = DateTime.Now;  				//only if it sent successfully  			}  			//}  			tmp.Count = 0;  		}  		tmp.Last = result.RunTime;  	}  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: foreach (IResult result in r.ToEnumerable ()) {  	if (!result.Ok) {  		CountTime tmp;  		if (!_counts.ContainsKey (result.MonitorHash))  			tmp = _counts [result.MonitorHash] = new CountTime ();  		else  			tmp = _counts [result.MonitorHash];  		Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  		if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  			tmp.Count++;  		}  		else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  			//if the breach count is 1' increase it - should fire an alert if so  			tmp.Count++;  		else  			tmp.Count = 0;  		if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  		 {  			if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  			 {  				Boolean send = result.SendAlert ();  				send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  				if (!send)  					Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  				else  					tmp.LastSent = DateTime.Now;  				//only if it sent successfully  			}  			//}  			tmp.Count = 0;  		}  		tmp.Last = result.RunTime;  	}  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: if (!result.Ok) {  	CountTime tmp;  	if (!_counts.ContainsKey (result.MonitorHash))  		tmp = _counts [result.MonitorHash] = new CountTime ();  	else  		tmp = _counts [result.MonitorHash];  	Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  	if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  		tmp.Count++;  	}  	else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  		//if the breach count is 1' increase it - should fire an alert if so  		tmp.Count++;  	else  		tmp.Count = 0;  	if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  	 {  		if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  		 {  			Boolean send = result.SendAlert ();  			send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  			if (!send)  				Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  			else  				tmp.LastSent = DateTime.Now;  			//only if it sent successfully  		}  		//}  		tmp.Count = 0;  	}  	tmp.Last = result.RunTime;  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: if (!result.Ok) {  	CountTime tmp;  	if (!_counts.ContainsKey (result.MonitorHash))  		tmp = _counts [result.MonitorHash] = new CountTime ();  	else  		tmp = _counts [result.MonitorHash];  	Double totalMilliseconds = (result.RunTime - tmp.Last).TotalMilliseconds;  	if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  		tmp.Count++;  	}  	else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  		//if the breach count is 1' increase it - should fire an alert if so  		tmp.Count++;  	else  		tmp.Count = 0;  	if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid  	 {  		if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  		 {  			Boolean send = result.SendAlert ();  			send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  			if (!send)  				Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  			else  				tmp.LastSent = DateTime.Now;  			//only if it sent successfully  		}  		//}  		tmp.Count = 0;  	}  	tmp.Last = result.RunTime;  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: if (totalMilliseconds < ((((IMonitor)result.Monitor).UpdateFrequency) * 2)) {  	tmp.Count++;  }  else if (((IMonitor)result.Monitor).ThresholdBreachCount == 1)  	//if the breach count is 1' increase it - should fire an alert if so  	tmp.Count++;  else  	tmp.Count = 0;  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: if (tmp.Count >= ((IMonitor)result.Monitor).ThresholdBreachCount)//its it has passed the breach count then its valid   {  	if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.  	 {  		Boolean send = result.SendAlert ();  		send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  		if (!send)  			Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  		else  			tmp.LastSent = DateTime.Now;  		//only if it sent successfully  	}  	//}  	tmp.Count = 0;  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: if ((DateTime.Now - tmp.LastSent).TotalMinutes >= 5)//only alert every 5 minutes at most? - don't want to spam.   {  	Boolean send = result.SendAlert ();  	send = NetworkMonitor.Configuration.Settings.DefaultAlerts.SendAlerts (result) & send;  	if (!send)  		Logger.Instance.Log (this.GetType ()' LogType.Info' "Failed to send all alerts for monitor result: " + result.ToString ());  	else  		tmp.LastSent = DateTime.Now;  	//only if it sent successfully  }  
Magic Number,RemoteMon_Service,ResultChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\ResultChecker.cs,Check,The following statement contains a magic number: Thread.Sleep (500);  
Missing Default,RemoteMon_Service,CommandChecker,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon Service\CommandChecker.cs,Check,The following switch statement is missing a default case: switch (cmd.CommandType) {  case Commands.GetResults:  	Int64 lastcount = Convert.ToInt64 (cmd.Data);  	if (lastcount < ResultChecker.GetLastResultCounter (cmd.FromIp' cmd.FromNamespace)) {  		Results results = ResultChecker.GetLatestResults (cmd.FromIp' cmd.FromNamespace);  		if (results != null && results.Count > 0) {  			Command cmdResults = new Command {  				CommandType = Commands.GetResultsResponse'  				Data = results'  				ToNamespace = cmd.FromNamespace'  				ToIp = cmd.FromIp  			};  			_listener.SendCommand (cmdResults);  			ResultChecker.ClearResults (cmd.FromIp' cmd.FromNamespace);  		}  	}  	break;  case Commands.StartScheduler:  	MonitorScheduler.Scheduler.SetMonitors (NetworkMonitor.Configuration);  	MonitorScheduler.Scheduler.Start ();  	_listener.SendCommand (new Command {  		CommandType = Commands.SchedulerStatus'  		Data = MonitorScheduler.Scheduler.Running'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.StopScheduler:  	MonitorScheduler.Scheduler.Kill ();  	_listener.SendCommand (new Command {  		CommandType = Commands.SchedulerStatus'  		Data = MonitorScheduler.Scheduler.Running'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.SchedulerStatus:  	//need enum to show status better  	_listener.SendCommand (new Command {  		CommandType = Commands.SchedulerStatus'  		Data = MonitorScheduler.Scheduler.Running'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.ServiceStatus:  	//need enum to show status better  	_listener.SendCommand (new Command {  		CommandType = Commands.ServiceStatus'  		Data = true'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.UpdateConfiguration:  	if (cmd.Data != null) {  		NetworkMonitor.SetConfiguration ((ConfigurationData)cmd.Data);  		//NetworkMonitor.Configuration = (ConfigurationData)cmd.Data;  		//save it once i get it.  		NetworkMonitor.Configuration.ExportToXml (_configPath);  	}  	_listener.SendCommand (new Command {  		CommandType = Commands.UpdateConfigurationResponse'  		Data = true'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.GetConfiguration:  	_listener.SendCommand (new Command {  		CommandType = Commands.GetConfigurationResponse'  		Data = NetworkMonitor.Configuration'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	});  	break;  case Commands.GetConfigurationResponse:  	if (cmd.Data != null) {  		//NetworkMonitor.Configuration = (ConfigurationData)cmd.Data;  		NetworkMonitor.SetConfiguration ((ConfigurationData)cmd.Data);  		//save it once i get it.  		NetworkMonitor.Configuration.ExportToXml (_configPath);  	}  	break;  case Commands.ResultsSync:  	if (NetworkMonitor.ConfigurationLoaded) {  		SyncDatas localdatas = new SyncDatas {  			Counter = ResultChecker.GetLastResultCounter (cmd.FromIp' cmd.FromNamespace)  		};  		//List<SyncData> localdatas = new List<SyncData>();  		foreach (IMonitor monitor in NetworkMonitor.Configuration.ToEnumerable ()) {  			localdatas.Add (new SyncData {  				FriendlyName = monitor.FriendlyName'  				GuidHash = monitor.Hash'  				IntHash = monitor.GetHashCode ()  			});  		}  		_listener.SendCommand (new Command {  			CommandType = Commands.ResultsSyncResponse'  			Data = localdatas'  			ToNamespace = cmd.FromNamespace'  			ToIp = cmd.FromIp  		});  	}  	break;  case Commands.GetAlertResults:  	Results alertResults = ResultChecker.GetLatestAlertResults (cmd.FromIp' cmd.FromNamespace);  	Command cmdAlertResults = new Command {  		CommandType = Commands.GetAlertResultsResponse'  		Data = alertResults'  		ToNamespace = cmd.FromNamespace'  		ToIp = cmd.FromIp  	};  	_listener.SendCommand (cmdAlertResults);  	ResultChecker.ClearResults (cmd.FromIp' cmd.FromNamespace);  	break;  }  
