Implementation smell,Namespace,Class,File,Method,Description
Long Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The method has 107 lines of code.
Long Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerFormClosed,The method has 102 lines of code.
Long Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,UpdateDataGridViewWithResults,The method has 201 lines of code.
Long Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The method has 286 lines of code.
Long Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateGridViewFromServerInfo,The method has 174 lines of code.
Long Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The method has 109 lines of code.
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,Cyclomatic complexity of the method is 34
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,Cyclomatic complexity of the method is 44
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerOkBtnClick,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerFormClosed,Cyclomatic complexity of the method is 14
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerTabControlSelectedIndexChanged,Cyclomatic complexity of the method is 35
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerBaseTabControlSelectedIndexChanged,Cyclomatic complexity of the method is 34
Complex Method,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,Validator,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,UpdateDataGridViewWithResults,Cyclomatic complexity of the method is 39
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,Cyclomatic complexity of the method is 40
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationData,Cyclomatic complexity of the method is 9
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,Cyclomatic complexity of the method is 58
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateGridViewFromServerInfo,Cyclomatic complexity of the method is 34
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,Cyclomatic complexity of the method is 8
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,Cyclomatic complexity of the method is 31
Complex Method,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,Cyclomatic complexity of the method is 50
Long Parameter List,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,The method has 5 parameters.
Long Parameter List,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,The method has 6 parameters.
Long Parameter List,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,Paint,The method has 11 parameters.
Long Parameter List,RemoteMon,NativeMethods,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NativeMethods.cs,NetServerEnum,The method has 9 parameters.
Long Statement,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The length of the statement  "							perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%"; " is 124.
Long Statement,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,Paint,The length of the statement  "		this.ToolTipText = "Current Value: " + CurrentValue + "' Current Min: " + _currentMin + "' Current Max: " + _currentMax; " is 120.
Long Statement,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,Paint,The length of the statement  "		graphics.DrawLine (_lightGrayPen' cellBounds.Location.X' cellBounds.Location.Y + _bitMap.Height - 1' cellBounds.Location.X + cellBounds.Width' cellBounds.Location.Y + _bitMap.Height - 1); " is 187.
Long Statement,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,Paint,The length of the statement  "		//graphics.DrawString("potatos" + rowIndex.ToString()' new Font(new FontFamily(System.Drawing.Text.GenericFontFamilies.Serif)' 12f)' new SolidBrush(Color.Green)' cellBounds); " is 174.
Long Statement,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,Paint,The length of the statement  "		base.Paint (graphics' clipBounds' cellBounds' rowIndex' elementState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts); " is 148.
Long Statement,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,GetPoints,The length of the statement  "		Pen p = _lessThan ? (f > _warningValue ? (f > _panicValue ? _greenPen : _orangePen) : _redPen) : (f < _panicValue ? (f < _warningValue ? _greenPen : _orangePen) : _redPen); " is 172.
Long Statement,RemoteMon,Logger_GARBAGE,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Logger.cs,LogException,The length of the statement  "	_toLog.Add (DateTime.Now + "\t" + LogType_GARBAGE.Exception + "\t" + type.ToString () + " " + methodName + " threw exception: " + exception.Message.Replace ("\r\n"' "") + innerExceptions); " is 188.
Long Statement,RemoteMon,NetworkBrowser,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkBrowser.cs,GetNetworkWin32Api,The length of the statement  "		int ret = NativeMethods.NetServerEnum (null' 100' ref buffer' MAX_PREFERRED_LENGTH' out entriesRead' out totalEntries' SV_TYPE_ALL' //SV_TYPE_WORKSTATION | SV_TYPE_SERVER | SV_TYPE_WINDOWS'  " is 189.
Long Statement,RemoteMon,NetworkBrowser,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkBrowser.cs,GetNetworkWin32Api,The length of the statement  "				NativeMethods._SERVER_INFO_100 svrInfo = (NativeMethods._SERVER_INFO_100)Marshal.PtrToStructure (tmpBuffer' typeof(NativeMethods._SERVER_INFO_100)); " is 148.
Long Statement,RemoteMon,NetworkBrowser,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkBrowser.cs,GetNetworkWin32Api,The length of the statement  "		MessageBox.Show ("Problem with acessing " + "network computers in NetworkBrowser " + "\r\n\r\n\r\n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 167.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The length of the statement  "				//ignore this exception - can happen rarely when app is closed and the handle is destroyed between the check and the invoke call " is 128.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,UpdateDataGridViewWithResults,The length of the statement  "		//    //Logger.Instance.Log(this.GetType()' LogType.Monitor' "Monitor: " + configurationData[result.MonitorHash].FriendlyName + " threw an exception when attempting to check the status."); " is 188.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServiceControllerPoller,The length of the statement  "			Invoke (new UpdateLogDelegate (UpdateLog)' "Unable to connect to Service machine: network monitor service status unknown"); " is 123.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The length of the statement  "					//NOTE: may need to convert this to some sort of overlay window that isn't a modal dialog box so it doesn't block this thread " is 125.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The length of the statement  "					MessageBox.Show ("Configuration Retrived from the RemoteMon Service."' "Configuration Retrieved"' MessageBoxButtons.OK); " is 120.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The length of the statement  "						DialogResult dr = MessageBox.Show ("The RemoteMon Service has requested your configuration' because it does not have any.  \n\r\n\rDo you want to upload your configuration to the service?"' "Service needs a configuration"' MessageBoxButtons.YesNo); " is 248.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,AddNewServerShow,The length of the statement  "	AddServer addserver = new AddServer (String.Empty' String.Empty' tab' baseTab' configurationData.Settings.DefaultAlerts); " is 121.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,AddSelServerShow,The length of the statement  "	AddServer addserver = new AddServer (serverBrowser.SelectedNode.Text' serverBrowser.SelectedNode.Text' tab' baseTab' configurationData.Settings.DefaultAlerts); " is 159.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The length of the statement  "	Boolean alertsExist = alerts.Count > 0 && (addServerForm.addServerAlertEmailOption.Checked | addServerForm.addServerAlertSmsOption.Checked); " is 140.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The length of the statement  "				Logger.Instance.Log (this.GetType ()' LogType.Info' "CommonType had an invalid value: unable to populate a Monitor correctly"); " is 127.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The length of the statement  "		MessageBox.Show (this' "Unable to save the Monitor' please check the log for details."' "Error Saving Monitor"' MessageBoxButtons.OK); " is 134.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateGridViewFromServerInfo,The length of the statement  "			Logger.Instance.Log (this.GetType ()' LogType.Info' "Monitor Type was unindentifiable for monitor: " + monitor.ToString ()); " is 124.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshServers,The length of the statement  "	else if (_refreshThread.IsAlive || _refreshThread.ThreadState == ThreadState.Running || _refreshThread.ThreadState == ThreadState.Stopped || _refreshThread.ThreadState == ThreadState.Suspended || _refreshThread.ThreadState == ThreadState.WaitSleepJoin) { " is 254.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,LogPaneMouseEnter,The length of the statement  "	networkMonitorBaseContainer.SplitterDistance = networkMonitorBaseContainer.Height - (networkMonitorBaseContainer.Height / 3); " is 125.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,LoadConfigurationToolStripMenuItemClick,The length of the statement  "			MessageBox.Show ("Please confirm the file location and format' and try again."' "Load Configuration Failed"' MessageBoxButtons.OK); " is 131.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PushConfigurationToolStripMenuItemClick,The length of the statement  "		MessageBox.Show ("Service not found' please make sure the service is running and the Ip/Hostname and Port are set in the Settings"' "Cannot find service"' MessageBoxButtons.OK); " is 177.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetConfigurationToolStripMenuItemClick,The length of the statement  "		MessageBox.Show ("Service not found' please make sure the service is running and the Ip/Hostname and Port are set in the Settings"' "Cannot find service"' MessageBoxButtons.OK); " is 177.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "					settings.settingsMailServerPortMaskedTextBox.Text = emailAlert.EmailServerPort != -1 ? emailAlert.EmailServerPort.ToString () : ""; " is 131.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "					EmailServerPort = (settings.settingsMailServerPortMaskedTextBox.Text != "" ? Convert.ToInt32 (settings.settingsMailServerPortMaskedTextBox.ValidateText ()) : -1)' " is 162.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "			configurationData.Settings.ClientLogPath = settings.settingsLoggingClientPathTextBox.Text == "" ? _logPath : settings.settingsLoggingClientPathTextBox.Text; " is 156.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "			Logger.Instance.SetFileName (settings.settingsLoggingClientPathTextBox.Text == "" ? _logPath : settings.settingsLoggingClientPathTextBox.Text); " is 143.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "				Logger.Instance.Log (this.GetType ()' LogType.Info' @"Failed to save settings: Configuration Data or Filename was empty - " + @"make sure you have permissions to the [Current User]\AppData\Roaming\RemoteMon directory.  " + @"If this problem persists' delete the configuration.xml file in that directory and try again."); " is 320.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SettingsToolStripMenuItemClick,The length of the statement  "		MessageBox.Show (this' "Unable to save or load settings' please check log for details."' "Error"' MessageBoxButtons.OK); " is 120.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' basic.AlertInfo' basic); " is 136.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' configurationData.Settings.DefaultAlerts' basic); " is 161.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' basic.AlertInfo); " is 129.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' configurationData.Settings.DefaultAlerts' basic); " is 161.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' events.AlertInfo' events); " is 146.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' events); " is 170.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' events.AlertInfo' events); " is 146.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' events); " is 170.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Common' pfc.AlertInfo' pfc); " is 140.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' pfc); " is 167.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Advanced' pfc.AlertInfo' pfc); " is 142.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' pfc); " is 169.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Common' service.AlertInfo' service); " is 149.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' service); " is 172.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Advanced' service.AlertInfo' service); " is 151.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' service); " is 174.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' wmi.AlertInfo' wmi); " is 125.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' wmi); " is 152.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' wmi.AlertInfo' wmi); " is 125.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The length of the statement  "				wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' wmi); " is 152.
Long Statement,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListUserDeletingRow,The length of the statement  "		MessageBox.Show ("Could not delete the row from the configuration.  Please see the logs for more information."' "Error deleting row"' MessageBoxButtons.OK); " is 156.
Long Statement,RemoteMon,Settings,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Settings.cs,SettingsEmailTestClick,The length of the statement  "	MailMessage message = new MailMessage (settingsAlertEmailFromTextBox.Text' settingsAlertEmailToTextBox.Text' "Test email from RemoteMon:  It worked."' "This is only a test."); " is 175.
Long Statement,RemoteMon,Settings,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Settings.cs,SettingsEmailTestClick,The length of the statement  "		client.Credentials = new System.Net.NetworkCredential (settingsAlertEmailAccountTextBox.Text' settingsAlertEmailPasswordTextBox.Text); " is 134.
Long Statement,RemoteMon,Settings,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Settings.cs,SettingsEmailTestClick,The length of the statement  "	//    MessageBox.Show("Port is invalid.  Please enter a proper port value."' "Unable to validate Port value."' MessageBoxButtons.OK); " is 133.
Long Statement,RemoteMon,Settings,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Settings.cs,SettingsOkButtonClick,The length of the statement  "			//MessageBox.Show("Port is invalid.  Please enter a proper port value."' "Unable to validate Port value."' MessageBoxButtons.OK); " is 129.
Complex Conditional,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshServers,The conditional expression  "_refreshThread.IsAlive || _refreshThread.ThreadState == ThreadState.Running || _refreshThread.ThreadState == ThreadState.Stopped || _refreshThread.ThreadState == ThreadState.Suspended || _refreshThread.ThreadState == ThreadState.WaitSleepJoin"  is complex.
Empty Catch Block,RemoteMon,Logger_GARBAGE,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Logger.cs,Log,The method has an empty catch block.
Empty Catch Block,RemoteMon,Logger_GARBAGE,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\Logger.cs,LogException,The method has an empty catch block.
Empty Catch Block,RemoteMon,NetworkBrowser,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkBrowser.cs,GetNetworkWin32Api,The method has an empty catch block.
Empty Catch Block,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The method has an empty catch block.
Empty Catch Block,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshBg,The method has an empty catch block.
Empty Catch Block,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshBg,The method has an empty catch block.
Empty Catch Block,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,OnLoad,The method has an empty catch block.
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,GetAlerts,The following statement contains a magic number: alerts = new List<Alert> (2);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (_perfCounterPopulation != null) {  	if (!_perfCounterPopulation.IsAlive) {  		_perfCounterPopulation = null;  		_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  			Name = "PerformanceCounter AfterIP"  		};  		_perfCounterPopulation.Start ();  	}  	else {  		_perfCounterPopulation.Join (50);  		_perfCounterPopulation = null;  		_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  			Name = "PerformanceCounter AfterIP"  		};  		_perfCounterPopulation.Start ();  	}  }  else {  	_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  		Name = "PerformanceCounter AfterIP"  	};  	_perfCounterPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (!_perfCounterPopulation.IsAlive) {  	_perfCounterPopulation = null;  	_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  		Name = "PerformanceCounter AfterIP"  	};  	_perfCounterPopulation.Start ();  }  else {  	_perfCounterPopulation.Join (50);  	_perfCounterPopulation = null;  	_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  		Name = "PerformanceCounter AfterIP"  	};  	_perfCounterPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: _perfCounterPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (_eventMonitorPopulation != null) {  	if (!_eventMonitorPopulation.IsAlive) {  		_eventMonitorPopulation = null;  		_eventMonitorPopulation = new Thread (GetEvents) {  			Name = "EventMonitor AfterIP"  		};  		_eventMonitorPopulation.Start ();  	}  	else {  		_eventMonitorPopulation.Join (50);  		_eventMonitorPopulation = null;  		_eventMonitorPopulation = new Thread (GetEvents) {  			Name = "EventMonitor AfterIP"  		};  		_eventMonitorPopulation.Start ();  	}  }  else {  	_eventMonitorPopulation = new Thread (GetEvents) {  		Name = "EventMonitor AfterIP"  	};  	_eventMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (!_eventMonitorPopulation.IsAlive) {  	_eventMonitorPopulation = null;  	_eventMonitorPopulation = new Thread (GetEvents) {  		Name = "EventMonitor AfterIP"  	};  	_eventMonitorPopulation.Start ();  }  else {  	_eventMonitorPopulation.Join (50);  	_eventMonitorPopulation = null;  	_eventMonitorPopulation = new Thread (GetEvents) {  		Name = "EventMonitor AfterIP"  	};  	_eventMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: _eventMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (_serviceMonitorPopulation != null) {  	if (!_serviceMonitorPopulation.IsAlive) {  		_serviceMonitorPopulation = null;  		_serviceMonitorPopulation = new Thread (GetServices) {  			Name = "ServiceMonitor AfterIP"  		};  		_serviceMonitorPopulation.Start ();  	}  	else {  		_serviceMonitorPopulation.Join (50);  		_serviceMonitorPopulation = null;  		_serviceMonitorPopulation = new Thread (GetServices) {  			Name = "ServiceMonitor AfterIP"  		};  		_serviceMonitorPopulation.Start ();  	}  }  else {  	_serviceMonitorPopulation = new Thread (GetServices) {  		Name = "ServiceMonitor AfterIP"  	};  	_serviceMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (!_serviceMonitorPopulation.IsAlive) {  	_serviceMonitorPopulation = null;  	_serviceMonitorPopulation = new Thread (GetServices) {  		Name = "ServiceMonitor AfterIP"  	};  	_serviceMonitorPopulation.Start ();  }  else {  	_serviceMonitorPopulation.Join (50);  	_serviceMonitorPopulation = null;  	_serviceMonitorPopulation = new Thread (GetServices) {  		Name = "ServiceMonitor AfterIP"  	};  	_serviceMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: _serviceMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (_commonMonitorPopulation != null) {  	if (!_commonMonitorPopulation.IsAlive) {  		_commonMonitorPopulation = null;  		_commonMonitorPopulation = new Thread (GetCommon) {  			Name = "CommonMonitor AfterIP"  		};  		_commonMonitorPopulation.Start ();  	}  	else {  		_commonMonitorPopulation.Join (50);  		_commonMonitorPopulation = null;  		_commonMonitorPopulation = new Thread (GetCommon) {  			Name = "CommonMonitor AfterIP"  		};  		_commonMonitorPopulation.Start ();  	}  }  else {  	_commonMonitorPopulation = new Thread (GetCommon) {  		Name = "CommonMonitor AfterIP"  	};  	_commonMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: if (!_commonMonitorPopulation.IsAlive) {  	_commonMonitorPopulation = null;  	_commonMonitorPopulation = new Thread (GetCommon) {  		Name = "CommonMonitor AfterIP"  	};  	_commonMonitorPopulation.Start ();  }  else {  	_commonMonitorPopulation.Join (50);  	_commonMonitorPopulation = null;  	_commonMonitorPopulation = new Thread (GetCommon) {  		Name = "CommonMonitor AfterIP"  	};  	_commonMonitorPopulation.Start ();  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingRemakeThreads,The following statement contains a magic number: _commonMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (_perfCounterPopulation != null) {  	if (_perfCounterPopulation.IsAlive) {  		_perfCounterPopulation.Join (50);  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (_perfCounterPopulation.IsAlive) {  	_perfCounterPopulation.Join (50);  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: _perfCounterPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (_eventMonitorPopulation != null) {  	if (!_eventMonitorPopulation.IsAlive) {  		_eventMonitorPopulation.Join (50);  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (!_eventMonitorPopulation.IsAlive) {  	_eventMonitorPopulation.Join (50);  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: _eventMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (_serviceMonitorPopulation != null) {  	if (!_serviceMonitorPopulation.IsAlive) {  		_serviceMonitorPopulation.Join (50);  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (!_serviceMonitorPopulation.IsAlive) {  	_serviceMonitorPopulation.Join (50);  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: _serviceMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (_commonMonitorPopulation != null) {  	if (!_commonMonitorPopulation.IsAlive) {  		_commonMonitorPopulation.Join (50);  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: if (!_commonMonitorPopulation.IsAlive) {  	_commonMonitorPopulation.Join (50);  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AfterPingKillThreads,The following statement contains a magic number: _commonMonitorPopulation.Join (50);  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: if (testMonitorRunPerf || _testMonitorCommon)// || TestMonitorRunEvent || TestMonitorRunBasic || TestMonitorRunService)    {  	switch ((MonitorBaseType)addServerBaseTabControl.SelectedIndex) {  	case MonitorBaseType.Advanced:  		switch ((FullMonitorType)addServerTabControl.SelectedIndex) {  		case FullMonitorType.PerformanceCounter:  			try {  				if (TestMonitorData.ToString () != "None") {  					PerformanceCounterType pct = ((PerformanceCounter)TestMonitorData).CounterType;  					//perfCounterTestDataHelpText.ForeColor = Color.Black;  					perfCounterTestDataHelpText.Text = ((PerformanceCounter)TestMonitorData).CounterHelp;  					switch (pct) {  					case PerformanceCounterType.RawFraction:  					case PerformanceCounterType.SampleFraction:  						perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "%";  						perfCounterTestDataType.Text = pct.ToString ();  						break;  					case PerformanceCounterType.Timer100Ns:  					case PerformanceCounterType.Timer100NsInverse:  					case PerformanceCounterType.CounterTimer:  					case PerformanceCounterType.CounterTimerInverse:  						perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "% Avg";  						perfCounterTestDataType.Text = pct.ToString ();  						break;  					case PerformanceCounterType.SampleCounter:  					case PerformanceCounterType.RateOfCountsPerSecond64:  					case PerformanceCounterType.RateOfCountsPerSecond32:  						perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "/sec";  						perfCounterTestDataType.Text = pct.ToString ();  						break;  					case PerformanceCounterType.NumberOfItems32:  					case PerformanceCounterType.NumberOfItems64:  					case PerformanceCounterType.NumberOfItemsHEX32:  					case PerformanceCounterType.NumberOfItemsHEX64:  						perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f");  						perfCounterTestDataType.Text = pct.ToString ();  						break;  					case PerformanceCounterType.AverageBase:  					case PerformanceCounterType.AverageCount64:  					case PerformanceCounterType.AverageTimer32:  					case PerformanceCounterType.CounterDelta32:  					case PerformanceCounterType.CounterDelta64:  					case PerformanceCounterType.CounterMultiBase:  					case PerformanceCounterType.CounterMultiTimer:  					case PerformanceCounterType.CounterMultiTimer100Ns:  					case PerformanceCounterType.CounterMultiTimer100NsInverse:  					case PerformanceCounterType.CounterMultiTimerInverse:  					case PerformanceCounterType.CountPerTimeInterval32:  					case PerformanceCounterType.CountPerTimeInterval64:  					case PerformanceCounterType.ElapsedTime:  					case PerformanceCounterType.RawBase:  					case PerformanceCounterType.SampleBase:  					default:  						perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ();  						perfCounterTestDataType.Text = pct.ToString ();  						break;  					}  				}  				if (!String.IsNullOrEmpty (perfCounterTestDataThresholdWarningTextBox.Text)) {  					Double threshold = 0;  					Double currentcounter = 1;  					//NOTE:avoid divide by zero down below  					String countersplit = perfCounterTestData.Text;  					try {  						threshold = Convert.ToDouble (perfCounterTestDataThresholdWarningTextBox.Text);  						if (countersplit.Contains ("%"))  							countersplit = countersplit.Split (new[] {  								'%'  							}) [0];  						else if (countersplit.Contains ("/"))  							countersplit = countersplit.Split (new[] {  								'/'  							}) [0];  						currentcounter = Convert.ToDouble (countersplit);  					}  					catch (Exception ex) {  						Logger.Instance.LogException (this.GetType ()' ex);  					}  					if (currentcounter > threshold) {  						perfCounterTestDataStatus.ForeColor = Color.Red;  						perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  					}  					else {  						perfCounterTestDataStatus.ForeColor = Color.Green;  						perfCounterTestDataStatus.Text = "OK";  					}  				}  			}  			catch (Exception ex) {  				Logger.Instance.LogException (this.GetType ()' ex);  				perfCounterTestData.Text = "Unable to populate";  			}  			break;  		case FullMonitorType.Service:  		case FullMonitorType.EventLog:  			break;  		}  		break;  	case MonitorBaseType.Basic:  		break;  	case MonitorBaseType.Common:  		CommonUpdateSelectedMonitor ();  		break;  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: switch ((MonitorBaseType)addServerBaseTabControl.SelectedIndex) {  case MonitorBaseType.Advanced:  	switch ((FullMonitorType)addServerTabControl.SelectedIndex) {  	case FullMonitorType.PerformanceCounter:  		try {  			if (TestMonitorData.ToString () != "None") {  				PerformanceCounterType pct = ((PerformanceCounter)TestMonitorData).CounterType;  				//perfCounterTestDataHelpText.ForeColor = Color.Black;  				perfCounterTestDataHelpText.Text = ((PerformanceCounter)TestMonitorData).CounterHelp;  				switch (pct) {  				case PerformanceCounterType.RawFraction:  				case PerformanceCounterType.SampleFraction:  					perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "%";  					perfCounterTestDataType.Text = pct.ToString ();  					break;  				case PerformanceCounterType.Timer100Ns:  				case PerformanceCounterType.Timer100NsInverse:  				case PerformanceCounterType.CounterTimer:  				case PerformanceCounterType.CounterTimerInverse:  					perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "% Avg";  					perfCounterTestDataType.Text = pct.ToString ();  					break;  				case PerformanceCounterType.SampleCounter:  				case PerformanceCounterType.RateOfCountsPerSecond64:  				case PerformanceCounterType.RateOfCountsPerSecond32:  					perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "/sec";  					perfCounterTestDataType.Text = pct.ToString ();  					break;  				case PerformanceCounterType.NumberOfItems32:  				case PerformanceCounterType.NumberOfItems64:  				case PerformanceCounterType.NumberOfItemsHEX32:  				case PerformanceCounterType.NumberOfItemsHEX64:  					perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f");  					perfCounterTestDataType.Text = pct.ToString ();  					break;  				case PerformanceCounterType.AverageBase:  				case PerformanceCounterType.AverageCount64:  				case PerformanceCounterType.AverageTimer32:  				case PerformanceCounterType.CounterDelta32:  				case PerformanceCounterType.CounterDelta64:  				case PerformanceCounterType.CounterMultiBase:  				case PerformanceCounterType.CounterMultiTimer:  				case PerformanceCounterType.CounterMultiTimer100Ns:  				case PerformanceCounterType.CounterMultiTimer100NsInverse:  				case PerformanceCounterType.CounterMultiTimerInverse:  				case PerformanceCounterType.CountPerTimeInterval32:  				case PerformanceCounterType.CountPerTimeInterval64:  				case PerformanceCounterType.ElapsedTime:  				case PerformanceCounterType.RawBase:  				case PerformanceCounterType.SampleBase:  				default:  					perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ();  					perfCounterTestDataType.Text = pct.ToString ();  					break;  				}  			}  			if (!String.IsNullOrEmpty (perfCounterTestDataThresholdWarningTextBox.Text)) {  				Double threshold = 0;  				Double currentcounter = 1;  				//NOTE:avoid divide by zero down below  				String countersplit = perfCounterTestData.Text;  				try {  					threshold = Convert.ToDouble (perfCounterTestDataThresholdWarningTextBox.Text);  					if (countersplit.Contains ("%"))  						countersplit = countersplit.Split (new[] {  							'%'  						}) [0];  					else if (countersplit.Contains ("/"))  						countersplit = countersplit.Split (new[] {  							'/'  						}) [0];  					currentcounter = Convert.ToDouble (countersplit);  				}  				catch (Exception ex) {  					Logger.Instance.LogException (this.GetType ()' ex);  				}  				if (currentcounter > threshold) {  					perfCounterTestDataStatus.ForeColor = Color.Red;  					perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  				}  				else {  					perfCounterTestDataStatus.ForeColor = Color.Green;  					perfCounterTestDataStatus.Text = "OK";  				}  			}  		}  		catch (Exception ex) {  			Logger.Instance.LogException (this.GetType ()' ex);  			perfCounterTestData.Text = "Unable to populate";  		}  		break;  	case FullMonitorType.Service:  	case FullMonitorType.EventLog:  		break;  	}  	break;  case MonitorBaseType.Basic:  	break;  case MonitorBaseType.Common:  	CommonUpdateSelectedMonitor ();  	break;  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: switch ((FullMonitorType)addServerTabControl.SelectedIndex) {  case FullMonitorType.PerformanceCounter:  	try {  		if (TestMonitorData.ToString () != "None") {  			PerformanceCounterType pct = ((PerformanceCounter)TestMonitorData).CounterType;  			//perfCounterTestDataHelpText.ForeColor = Color.Black;  			perfCounterTestDataHelpText.Text = ((PerformanceCounter)TestMonitorData).CounterHelp;  			switch (pct) {  			case PerformanceCounterType.RawFraction:  			case PerformanceCounterType.SampleFraction:  				perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "%";  				perfCounterTestDataType.Text = pct.ToString ();  				break;  			case PerformanceCounterType.Timer100Ns:  			case PerformanceCounterType.Timer100NsInverse:  			case PerformanceCounterType.CounterTimer:  			case PerformanceCounterType.CounterTimerInverse:  				perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "% Avg";  				perfCounterTestDataType.Text = pct.ToString ();  				break;  			case PerformanceCounterType.SampleCounter:  			case PerformanceCounterType.RateOfCountsPerSecond64:  			case PerformanceCounterType.RateOfCountsPerSecond32:  				perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "/sec";  				perfCounterTestDataType.Text = pct.ToString ();  				break;  			case PerformanceCounterType.NumberOfItems32:  			case PerformanceCounterType.NumberOfItems64:  			case PerformanceCounterType.NumberOfItemsHEX32:  			case PerformanceCounterType.NumberOfItemsHEX64:  				perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f");  				perfCounterTestDataType.Text = pct.ToString ();  				break;  			case PerformanceCounterType.AverageBase:  			case PerformanceCounterType.AverageCount64:  			case PerformanceCounterType.AverageTimer32:  			case PerformanceCounterType.CounterDelta32:  			case PerformanceCounterType.CounterDelta64:  			case PerformanceCounterType.CounterMultiBase:  			case PerformanceCounterType.CounterMultiTimer:  			case PerformanceCounterType.CounterMultiTimer100Ns:  			case PerformanceCounterType.CounterMultiTimer100NsInverse:  			case PerformanceCounterType.CounterMultiTimerInverse:  			case PerformanceCounterType.CountPerTimeInterval32:  			case PerformanceCounterType.CountPerTimeInterval64:  			case PerformanceCounterType.ElapsedTime:  			case PerformanceCounterType.RawBase:  			case PerformanceCounterType.SampleBase:  			default:  				perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ();  				perfCounterTestDataType.Text = pct.ToString ();  				break;  			}  		}  		if (!String.IsNullOrEmpty (perfCounterTestDataThresholdWarningTextBox.Text)) {  			Double threshold = 0;  			Double currentcounter = 1;  			//NOTE:avoid divide by zero down below  			String countersplit = perfCounterTestData.Text;  			try {  				threshold = Convert.ToDouble (perfCounterTestDataThresholdWarningTextBox.Text);  				if (countersplit.Contains ("%"))  					countersplit = countersplit.Split (new[] {  						'%'  					}) [0];  				else if (countersplit.Contains ("/"))  					countersplit = countersplit.Split (new[] {  						'/'  					}) [0];  				currentcounter = Convert.ToDouble (countersplit);  			}  			catch (Exception ex) {  				Logger.Instance.LogException (this.GetType ()' ex);  			}  			if (currentcounter > threshold) {  				perfCounterTestDataStatus.ForeColor = Color.Red;  				perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  			}  			else {  				perfCounterTestDataStatus.ForeColor = Color.Green;  				perfCounterTestDataStatus.Text = "OK";  			}  		}  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  		perfCounterTestData.Text = "Unable to populate";  	}  	break;  case FullMonitorType.Service:  case FullMonitorType.EventLog:  	break;  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: try {  	if (TestMonitorData.ToString () != "None") {  		PerformanceCounterType pct = ((PerformanceCounter)TestMonitorData).CounterType;  		//perfCounterTestDataHelpText.ForeColor = Color.Black;  		perfCounterTestDataHelpText.Text = ((PerformanceCounter)TestMonitorData).CounterHelp;  		switch (pct) {  		case PerformanceCounterType.RawFraction:  		case PerformanceCounterType.SampleFraction:  			perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "%";  			perfCounterTestDataType.Text = pct.ToString ();  			break;  		case PerformanceCounterType.Timer100Ns:  		case PerformanceCounterType.Timer100NsInverse:  		case PerformanceCounterType.CounterTimer:  		case PerformanceCounterType.CounterTimerInverse:  			perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "% Avg";  			perfCounterTestDataType.Text = pct.ToString ();  			break;  		case PerformanceCounterType.SampleCounter:  		case PerformanceCounterType.RateOfCountsPerSecond64:  		case PerformanceCounterType.RateOfCountsPerSecond32:  			perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f") + "/sec";  			perfCounterTestDataType.Text = pct.ToString ();  			break;  		case PerformanceCounterType.NumberOfItems32:  		case PerformanceCounterType.NumberOfItems64:  		case PerformanceCounterType.NumberOfItemsHEX32:  		case PerformanceCounterType.NumberOfItemsHEX64:  			perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ("f");  			perfCounterTestDataType.Text = pct.ToString ();  			break;  		case PerformanceCounterType.AverageBase:  		case PerformanceCounterType.AverageCount64:  		case PerformanceCounterType.AverageTimer32:  		case PerformanceCounterType.CounterDelta32:  		case PerformanceCounterType.CounterDelta64:  		case PerformanceCounterType.CounterMultiBase:  		case PerformanceCounterType.CounterMultiTimer:  		case PerformanceCounterType.CounterMultiTimer100Ns:  		case PerformanceCounterType.CounterMultiTimer100NsInverse:  		case PerformanceCounterType.CounterMultiTimerInverse:  		case PerformanceCounterType.CountPerTimeInterval32:  		case PerformanceCounterType.CountPerTimeInterval64:  		case PerformanceCounterType.ElapsedTime:  		case PerformanceCounterType.RawBase:  		case PerformanceCounterType.SampleBase:  		default:  			perfCounterTestData.Text = ((PerformanceCounter)TestMonitorData).NextValue ().ToString ();  			perfCounterTestDataType.Text = pct.ToString ();  			break;  		}  	}  	if (!String.IsNullOrEmpty (perfCounterTestDataThresholdWarningTextBox.Text)) {  		Double threshold = 0;  		Double currentcounter = 1;  		//NOTE:avoid divide by zero down below  		String countersplit = perfCounterTestData.Text;  		try {  			threshold = Convert.ToDouble (perfCounterTestDataThresholdWarningTextBox.Text);  			if (countersplit.Contains ("%"))  				countersplit = countersplit.Split (new[] {  					'%'  				}) [0];  			else if (countersplit.Contains ("/"))  				countersplit = countersplit.Split (new[] {  					'/'  				}) [0];  			currentcounter = Convert.ToDouble (countersplit);  		}  		catch (Exception ex) {  			Logger.Instance.LogException (this.GetType ()' ex);  		}  		if (currentcounter > threshold) {  			perfCounterTestDataStatus.ForeColor = Color.Red;  			perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  		}  		else {  			perfCounterTestDataStatus.ForeColor = Color.Green;  			perfCounterTestDataStatus.Text = "OK";  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  	perfCounterTestData.Text = "Unable to populate";  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: if (!String.IsNullOrEmpty (perfCounterTestDataThresholdWarningTextBox.Text)) {  	Double threshold = 0;  	Double currentcounter = 1;  	//NOTE:avoid divide by zero down below  	String countersplit = perfCounterTestData.Text;  	try {  		threshold = Convert.ToDouble (perfCounterTestDataThresholdWarningTextBox.Text);  		if (countersplit.Contains ("%"))  			countersplit = countersplit.Split (new[] {  				'%'  			}) [0];  		else if (countersplit.Contains ("/"))  			countersplit = countersplit.Split (new[] {  				'/'  			}) [0];  		currentcounter = Convert.ToDouble (countersplit);  	}  	catch (Exception ex) {  		Logger.Instance.LogException (this.GetType ()' ex);  	}  	if (currentcounter > threshold) {  		perfCounterTestDataStatus.ForeColor = Color.Red;  		perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  	}  	else {  		perfCounterTestDataStatus.ForeColor = Color.Green;  		perfCounterTestDataStatus.Text = "OK";  	}  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: if (currentcounter > threshold) {  	perfCounterTestDataStatus.ForeColor = Color.Red;  	perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  }  else {  	perfCounterTestDataStatus.ForeColor = Color.Green;  	perfCounterTestDataStatus.Text = "OK";  }  
Magic Number,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,TestMonitorUpdateTick,The following statement contains a magic number: perfCounterTestDataStatus.Text = "Threshold exceeded by " + (((currentcounter / threshold) - 1) * 100).ToString ("f") + "%";  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,GetValuesInOrder,The following statement contains a magic number: for (Int32 x = 0; x < 10; x++) {  	ints.Add (i);  	if (i < 9) {  		i++;  		if (i == _currentIndex) {  			ints.Add (i);  			break;  		}  	}  	else {  		i = 0;  		if (i == _currentIndex) {  			ints.Add (i);  			break;  		}  	}  }  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,GetValuesInOrder,The following statement contains a magic number: for (Int32 x = 0; x < 10; x++) {  	ints.Add (i);  	if (i < 9) {  		i++;  		if (i == _currentIndex) {  			ints.Add (i);  			break;  		}  	}  	else {  		i = 0;  		if (i == _currentIndex) {  			ints.Add (i);  			break;  		}  	}  }  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,GetValuesInOrder,The following statement contains a magic number: if (i < 9) {  	i++;  	if (i == _currentIndex) {  		ints.Add (i);  		break;  	}  }  else {  	i = 0;  	if (i == _currentIndex) {  		ints.Add (i);  		break;  	}  }  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,DataGridViewGraphCell,The following statement contains a magic number: _values = new Single[10];  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,DataGridViewGraphCell,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	_values [i] = 0f;  
Magic Number,RemoteMon,DataGridViewGraphCell,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\DataGridViewGraph.cs,GetPoints,The following statement contains a magic number: foreach (Single f in GetValuesInOrder ())//F is the value   {  	Single x = cellBounds.Location.X + (++i * ((cellBounds.Width - 2f) / 9f));  	//Single range = 1 / (max - min);  	//Single val = (f - min) / range;  	Single tmp = ((f - min) / (max - min));  	//25  	Single y = cellBounds.Location.Y + (cellBounds.Height - (tmp * cellBounds.Height)) - 2;  	// -(cellBounds.Size.Height - 1);  	Pen p = _lessThan ? (f > _warningValue ? (f > _panicValue ? _greenPen : _orangePen) : _redPen) : (f < _panicValue ? (f < _warningValue ? _greenPen : _orangePen) : _redPen);  	points.Add (new PointPen (p' new PointF (x' y)));  }  
Magic Number,RemoteMon,NetworkBrowser,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkBrowser.cs,GetNetworkWin32Api,The following statement contains a magic number: try {  	int resHandle = 0;  	int totalEntries = 0;  	int entriesRead = 0;  	int ret = NativeMethods.NetServerEnum (null' 100' ref buffer' MAX_PREFERRED_LENGTH' out entriesRead' out totalEntries' SV_TYPE_ALL' //SV_TYPE_WORKSTATION | SV_TYPE_SERVER | SV_TYPE_WINDOWS'   	null' out resHandle);  	if (ret == 0) {  		for (int i = 0; i < totalEntries; i++) {  			IntPtr tmpBuffer = new IntPtr ((int)buffer + (i * sizeofInfo));  			NativeMethods._SERVER_INFO_100 svrInfo = (NativeMethods._SERVER_INFO_100)Marshal.PtrToStructure (tmpBuffer' typeof(NativeMethods._SERVER_INFO_100));  			networkComputers.Add (svrInfo.sv100_name);  		}  	}  }  catch (ThreadAbortException) {  }  catch (Exception ex) {  	MessageBox.Show ("Problem with acessing " + "network computers in NetworkBrowser " + "\r\n\r\n\r\n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	return null;  }  finally {  	NativeMethods.NetApiBufferFree (buffer);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: Thread.Sleep (30000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: while (!kill) {  	if (ServiceActive) {  		if (talker != null && talker.Connected) {  			if (!synced) {  				talker.SendCommand (new Command {  					CommandType = Commands.ResultsSync'  					ToNamespace = Namespace.Service  				});  				Thread.Sleep (10000);  			}  			else  				talker.SendCommand (new Command {  					CommandType = Commands.GetResults'  					Data = counter'  					ToNamespace = Namespace.Service  				});  		}  	}  	else {  		synced = false;  		List<IResult> results = new List<IResult> (MonitorScheduler.GetResults ().ToEnumerable ());  		try {  			if (results.Count > 0 && this.IsHandleCreated)  				//nullreferenceexception? wat.  				//this.Invoke(new UpdateGridViewRowsDelegate(UpdateDataGridViewWithResults)' results);  				UpdateDataGridViewWithResults (results);  		}  		catch (ObjectDisposedException) {  			//ignore this exception - can happen rarely when app is closed and the handle is destroyed between the check and the invoke call  		}  	}  	Thread.Sleep (5000);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: while (!kill) {  	if (ServiceActive) {  		if (talker != null && talker.Connected) {  			if (!synced) {  				talker.SendCommand (new Command {  					CommandType = Commands.ResultsSync'  					ToNamespace = Namespace.Service  				});  				Thread.Sleep (10000);  			}  			else  				talker.SendCommand (new Command {  					CommandType = Commands.GetResults'  					Data = counter'  					ToNamespace = Namespace.Service  				});  		}  	}  	else {  		synced = false;  		List<IResult> results = new List<IResult> (MonitorScheduler.GetResults ().ToEnumerable ());  		try {  			if (results.Count > 0 && this.IsHandleCreated)  				//nullreferenceexception? wat.  				//this.Invoke(new UpdateGridViewRowsDelegate(UpdateDataGridViewWithResults)' results);  				UpdateDataGridViewWithResults (results);  		}  		catch (ObjectDisposedException) {  			//ignore this exception - can happen rarely when app is closed and the handle is destroyed between the check and the invoke call  		}  	}  	Thread.Sleep (5000);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: if (ServiceActive) {  	if (talker != null && talker.Connected) {  		if (!synced) {  			talker.SendCommand (new Command {  				CommandType = Commands.ResultsSync'  				ToNamespace = Namespace.Service  			});  			Thread.Sleep (10000);  		}  		else  			talker.SendCommand (new Command {  				CommandType = Commands.GetResults'  				Data = counter'  				ToNamespace = Namespace.Service  			});  	}  }  else {  	synced = false;  	List<IResult> results = new List<IResult> (MonitorScheduler.GetResults ().ToEnumerable ());  	try {  		if (results.Count > 0 && this.IsHandleCreated)  			//nullreferenceexception? wat.  			//this.Invoke(new UpdateGridViewRowsDelegate(UpdateDataGridViewWithResults)' results);  			UpdateDataGridViewWithResults (results);  	}  	catch (ObjectDisposedException) {  		//ignore this exception - can happen rarely when app is closed and the handle is destroyed between the check and the invoke call  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: if (talker != null && talker.Connected) {  	if (!synced) {  		talker.SendCommand (new Command {  			CommandType = Commands.ResultsSync'  			ToNamespace = Namespace.Service  		});  		Thread.Sleep (10000);  	}  	else  		talker.SendCommand (new Command {  			CommandType = Commands.GetResults'  			Data = counter'  			ToNamespace = Namespace.Service  		});  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: if (!synced) {  	talker.SendCommand (new Command {  		CommandType = Commands.ResultsSync'  		ToNamespace = Namespace.Service  	});  	Thread.Sleep (10000);  }  else  	talker.SendCommand (new Command {  		CommandType = Commands.GetResults'  		Data = counter'  		ToNamespace = Namespace.Service  	});  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,RefreshResults,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServiceControllerUpdate,The following statement contains a magic number: while (!kill) {  	ServiceControllerPoller ();  	//GC.Collect();  	//Int64 total = GC.GetTotalMemory(false);  	//Int32 maxgen = GC.MaxGeneration;  	Thread.Sleep (60000);  	//check every minute  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServiceControllerUpdate,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The following statement contains a magic number: while (!kill) {  	if (talker != null) {  		Command cmd = talker.GetCommand ();  		if (cmd != null) {  			lastMessage = DateTime.Now;  			ServiceActive = true;  			switch (cmd.CommandType) {  			case Commands.GetResultsResponse:  				Results results = (Results)cmd.Data;  				if (results != null) {  					counter++;  					if (results.Count > 0)  						UpdateDataGridViewWithResults (results.ToEnumerable ());  				}  				break;  			case Commands.GetConfigurationResponse:  				configurationData = (ConfigurationData)cmd.Data;  				configurationLoaded = true;  				if (serverMonitorList.InvokeRequired) {  					Invoke (new MethodInvoker (() => serverMonitorList.Rows.Clear ()));  				}  				else  					serverMonitorList.Rows.Clear ();  				PopulateGridView ();  				configurationData.ExportToXml ("configuration.xml");  				//NOTE: may need to convert this to some sort of overlay window that isn't a modal dialog box so it doesn't block this thread  				MessageBox.Show ("Configuration Retrived from the RemoteMon Service."' "Configuration Retrieved"' MessageBoxButtons.OK);  				break;  			case Commands.UpdateConfigurationResponse:  				if ((Boolean)cmd.Data)  					MessageBox.Show ("Configuration Updated successfully."' "Service Configuration Updated"' MessageBoxButtons.OK);  				break;  			case Commands.ServiceStatus:  				//Boolean oldValue = serviceActive;  				ServiceActive = (Boolean)cmd.Data;  				statusBarLabelServiceStatus.Text = "Service Status: " + (ServiceActive ? "Running" : "Stopped");  				if (ServiceActive && MonitorScheduler.Scheduler.Running) {  					Logger.Instance.Log (this.GetType ()' LogType.Info' "Stopping Monitoring");  					MonitorScheduler.Scheduler.Kill ();  				}  				break;  			case Commands.GetConfiguration:  				//if the service requests a configuration' then pop a dialog box asking whether or not to give it.  				if (!ignoreServiceConfigRequest) {  					DialogResult dr = MessageBox.Show ("The RemoteMon Service has requested your configuration' because it does not have any.  \n\r\n\rDo you want to upload your configuration to the service?"' "Service needs a configuration"' MessageBoxButtons.YesNo);  					if (dr == DialogResult.Yes) {  						talker.SendCommand (new Command {  							CommandType = Commands.GetConfigurationResponse'  							Data = configurationData'  							ToNamespace = cmd.FromNamespace'  							ToIp = cmd.FromIp  						});  						synced = false;  						ignoreServiceConfigRequest = false;  					}  					else  						ignoreServiceConfigRequest = true;  				}  				break;  			case Commands.ResultsSyncResponse:  				if (cmd.Data != null && configurationLoaded) {  					SyncDatas servicedatas = (SyncDatas)cmd.Data;  					SyncDatas localdatas = new SyncDatas ();  					counter = servicedatas.Counter;  					foreach (IMonitor monitor in configurationData.ToEnumerable ()) {  						localdatas.Add (new SyncData {  							FriendlyName = monitor.FriendlyName'  							GuidHash = monitor.Hash'  							IntHash = monitor.GetHashCode ()  						});  					}  					syncDict.Clear ();  					foreach (SyncData ld in localdatas) {  						//loop through each and create a dictionary of the guid from service to guid from local configuration  						SyncData local = ld;  						SyncData match = GetMatch (servicedatas' local);  						if (match != null)  							syncDict.Add (match.GuidHash' ld.GuidHash);  						//shouldn't be duplicates  					}  					//mark synced as true  					synced = true;  				}  				break;  			}  		}  	}  	Thread.Sleep (250);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SchedulerConfigurationUpdate,The following statement contains a magic number: Thread.Sleep (30000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SchedulerConfigurationUpdate,The following statement contains a magic number: while (!kill) {  	if (configurationLoaded && !ServiceActive && !MonitorScheduler.Scheduler.Running) {  		statusBarLabelMonitoringStatus.Text = "Monitoring Status: Locally";  		Invoke (new UpdateLogDelegate (UpdateLog)' "Starting monitors... ");  		Logger.Instance.Log (this.GetType ()' LogType.Info' "Starting monitors.");  		MonitorScheduler.Scheduler.SetMonitors (configurationData' true);  		Invoke (new UpdateLogDelegate (UpdateLog)' "Done");  	}  	if (ServiceActive && MonitorScheduler.Scheduler.Running)  		MonitorScheduler.Scheduler.Kill ();  	if ((lastMessage - DateTime.Now).TotalMinutes >= 1.5f && ServiceActive) {  		ServiceActive = false;  		//if service was active' but its not anywmore' log it  		Invoke (new UpdateLogDelegate (UpdateLog)' "Service inactive.");  		Logger.Instance.Log (this.GetType ()' LogType.Info' "Service found inactive or unresponsive");  		Logger.Instance.Log (this.GetType ()' LogType.Info' "Starting Monitoring");  		MonitorScheduler.Scheduler.Start ();  	}  	Thread.Sleep (1000);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,SchedulerConfigurationUpdate,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The following statement contains a magic number: try {  	switch (addServerForm.ReturnValue) {  	case FullMonitorType.Basic:  		#region Basic  		BasicMonitor basicMonitor = addServerForm.GetBasicMonitor ();  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				basicMonitor.AlertInfo.Add (alert);  				//}  			}  		}  		//else  		//{  		//    basicMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		if (addServerForm.Tag == null)  			configurationData.BasicMonitors.Add (basicMonitor);  		else {  			configurationData.BasicMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.BasicMonitors.Add (basicMonitor);  		}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return basicMonitor;  	#endregion  	case FullMonitorType.Common:  		#region Common  		/*                           * - Hard Drive Usage (dropdown list of C:\' D:\' etc)                          * - Memory Usage                          * - Swap/page file usage                          * - CPU Usage                          * - Process State (e.g. explorer.exe)                          * - Service State (e.g. Intelligent Background Transfer Service)                          */List<Alert> validAlerts = new List<Alert> (2);  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				validAlerts.Add (alert);  				//}  			}  		}  		switch (addServerForm.CommonType) {  		case CommonMonitorType.HddUsage:  			//Pfc  			PfcMonitor hddUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  			hddUsage.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.PfcMonitors.Add (hddUsage);  			else {  				configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.PfcMonitors.Add (hddUsage);  			}  			//if (!alertsExist)  			//{  			//    hddUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return hddUsage;  		case CommonMonitorType.CpuUsage:  			//Pfc  			PfcMonitor cpuUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  			cpuUsage.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.PfcMonitors.Add (cpuUsage);  			else {  				configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.PfcMonitors.Add (cpuUsage);  			}  			//if (!alertsExist)  			//{  			//    cpuUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return cpuUsage;  		case CommonMonitorType.MemoryUsage:  			//Wmi  			WmiMonitor memoryUsage = (WmiMonitor)addServerForm.GetCommonMonitor ();  			memoryUsage.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.WmiMonitors.Add (memoryUsage);  			else {  				configurationData.WmiMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.WmiMonitors.Add (memoryUsage);  			}  			//if (!alertsExist)  			//{  			//    memoryUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return memoryUsage;  		case CommonMonitorType.ProcessState:  			//Pfc  			PfcMonitor processState = (PfcMonitor)addServerForm.GetCommonMonitor ();  			processState.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.PfcMonitors.Add (processState);  			else {  				configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.PfcMonitors.Add (processState);  			}  			//if (!alertsExist)  			//{  			//    processState.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return processState;  		case CommonMonitorType.ServiceState:  			//Service  			ServiceMonitor serviceState = (ServiceMonitor)addServerForm.GetCommonMonitor ();  			serviceState.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.ServiceMonitors.Add (serviceState);  			else {  				configurationData.ServiceMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.ServiceMonitors.Add (serviceState);  			}  			//if (!alertsExist)  			//{  			//    serviceState.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return serviceState;  		case CommonMonitorType.SwapFileUsage:  			//Pfc  			PfcMonitor swapFileUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  			swapFileUsage.AlertInfo.AddRange (validAlerts);  			if (addServerForm.Tag == null)  				configurationData.PfcMonitors.Add (swapFileUsage);  			else {  				configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  				configurationData.PfcMonitors.Add (swapFileUsage);  			}  			//if (!alertsExist)  			//{  			//    swapFileUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  			//}  			configurationData.ExportToXml (_configPath);  			MonitorScheduler.Scheduler.SetMonitors (configurationData);  			return swapFileUsage;  		case CommonMonitorType.None:  		default:  			Logger.Instance.Log (this.GetType ()' LogType.Info' "CommonType had an invalid value: unable to populate a Monitor correctly");  			break;  		}  		return null;  	#endregion  	case FullMonitorType.EventLog:  		#region Events  		EventMonitor eventMonitor = addServerForm.GetEventMonitor ();  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				eventMonitor.AlertInfo.Add (alert);  				//}  			}  		}  		//else  		//{  		//    eventMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		if (addServerForm.Tag == null)  			configurationData.EventMonitors.Add (eventMonitor);  		else {  			configurationData.EventMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.EventMonitors.Add (eventMonitor);  		}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return eventMonitor;  	#endregion  	case FullMonitorType.PerformanceCounter:  		#region PerfCounters  		PfcMonitor pfcMonitor = addServerForm.GetPfcMonitor ();  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				pfcMonitor.AlertInfo.Add (alert);  				//}  			}  		}  		//else  		//{  		//    pfcMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		if (addServerForm.Tag == null)  			configurationData.PfcMonitors.Add (pfcMonitor);  		else {  			configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.PfcMonitors.Add (pfcMonitor);  		}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return pfcMonitor;  	#endregion  	case FullMonitorType.Service:  		#region Services  		ServiceMonitor serviceMonitor = addServerForm.GetServiceMonitor ();  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				serviceMonitor.AlertInfo.Add (alert);  				//}  			}  		}  		//else  		//{  		//    serviceMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		if (addServerForm.Tag == null)  			configurationData.ServiceMonitors.Add (serviceMonitor);  		else {  			configurationData.ServiceMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.ServiceMonitors.Add (serviceMonitor);  		}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return serviceMonitor;  	#endregion  	case FullMonitorType.Wmi:  		#region Wmi (For future use)  		WmiMonitor wmiMonitor = (WmiMonitor)addServerForm.GetCommonMonitor ();  		//NOTE: need a GetWmiMonitor() later on' potentially  		if (alertsExist) {  			foreach (Alert alert in alerts) {  				//if (!configurationData.Settings.IsDefaultAlert(alert))  				//{  				wmiMonitor.AlertInfo.Add (alert);  				//}  			}  		}  		//else  		//{  		//    wmiMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		if (addServerForm.Tag == null)  			configurationData.WmiMonitors.Add (wmiMonitor);  		else {  			configurationData.WmiMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.WmiMonitors.Add (wmiMonitor);  		}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return wmiMonitor;  	#endregion  	case FullMonitorType.None:  	default:  		return null;  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  	MessageBox.Show (this' "Unable to save the Monitor' please check the log for details."' "Error Saving Monitor"' MessageBoxButtons.OK);  	return null;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,PopulateConfigurationDataFromServerInfo,The following statement contains a magic number: switch (addServerForm.ReturnValue) {  case FullMonitorType.Basic:  	#region Basic  	BasicMonitor basicMonitor = addServerForm.GetBasicMonitor ();  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			basicMonitor.AlertInfo.Add (alert);  			//}  		}  	}  	//else  	//{  	//    basicMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  	//}  	if (addServerForm.Tag == null)  		configurationData.BasicMonitors.Add (basicMonitor);  	else {  		configurationData.BasicMonitors.Remove (addServerForm.Tag.ToString ());  		configurationData.BasicMonitors.Add (basicMonitor);  	}  	configurationData.ExportToXml (_configPath);  	MonitorScheduler.Scheduler.SetMonitors (configurationData);  	return basicMonitor;  #endregion  case FullMonitorType.Common:  	#region Common  	/*                           * - Hard Drive Usage (dropdown list of C:\' D:\' etc)                          * - Memory Usage                          * - Swap/page file usage                          * - CPU Usage                          * - Process State (e.g. explorer.exe)                          * - Service State (e.g. Intelligent Background Transfer Service)                          */List<Alert> validAlerts = new List<Alert> (2);  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			validAlerts.Add (alert);  			//}  		}  	}  	switch (addServerForm.CommonType) {  	case CommonMonitorType.HddUsage:  		//Pfc  		PfcMonitor hddUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  		hddUsage.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.PfcMonitors.Add (hddUsage);  		else {  			configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.PfcMonitors.Add (hddUsage);  		}  		//if (!alertsExist)  		//{  		//    hddUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return hddUsage;  	case CommonMonitorType.CpuUsage:  		//Pfc  		PfcMonitor cpuUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  		cpuUsage.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.PfcMonitors.Add (cpuUsage);  		else {  			configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.PfcMonitors.Add (cpuUsage);  		}  		//if (!alertsExist)  		//{  		//    cpuUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return cpuUsage;  	case CommonMonitorType.MemoryUsage:  		//Wmi  		WmiMonitor memoryUsage = (WmiMonitor)addServerForm.GetCommonMonitor ();  		memoryUsage.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.WmiMonitors.Add (memoryUsage);  		else {  			configurationData.WmiMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.WmiMonitors.Add (memoryUsage);  		}  		//if (!alertsExist)  		//{  		//    memoryUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return memoryUsage;  	case CommonMonitorType.ProcessState:  		//Pfc  		PfcMonitor processState = (PfcMonitor)addServerForm.GetCommonMonitor ();  		processState.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.PfcMonitors.Add (processState);  		else {  			configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.PfcMonitors.Add (processState);  		}  		//if (!alertsExist)  		//{  		//    processState.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return processState;  	case CommonMonitorType.ServiceState:  		//Service  		ServiceMonitor serviceState = (ServiceMonitor)addServerForm.GetCommonMonitor ();  		serviceState.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.ServiceMonitors.Add (serviceState);  		else {  			configurationData.ServiceMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.ServiceMonitors.Add (serviceState);  		}  		//if (!alertsExist)  		//{  		//    serviceState.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return serviceState;  	case CommonMonitorType.SwapFileUsage:  		//Pfc  		PfcMonitor swapFileUsage = (PfcMonitor)addServerForm.GetCommonMonitor ();  		swapFileUsage.AlertInfo.AddRange (validAlerts);  		if (addServerForm.Tag == null)  			configurationData.PfcMonitors.Add (swapFileUsage);  		else {  			configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  			configurationData.PfcMonitors.Add (swapFileUsage);  		}  		//if (!alertsExist)  		//{  		//    swapFileUsage.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  		//}  		configurationData.ExportToXml (_configPath);  		MonitorScheduler.Scheduler.SetMonitors (configurationData);  		return swapFileUsage;  	case CommonMonitorType.None:  	default:  		Logger.Instance.Log (this.GetType ()' LogType.Info' "CommonType had an invalid value: unable to populate a Monitor correctly");  		break;  	}  	return null;  #endregion  case FullMonitorType.EventLog:  	#region Events  	EventMonitor eventMonitor = addServerForm.GetEventMonitor ();  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			eventMonitor.AlertInfo.Add (alert);  			//}  		}  	}  	//else  	//{  	//    eventMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  	//}  	if (addServerForm.Tag == null)  		configurationData.EventMonitors.Add (eventMonitor);  	else {  		configurationData.EventMonitors.Remove (addServerForm.Tag.ToString ());  		configurationData.EventMonitors.Add (eventMonitor);  	}  	configurationData.ExportToXml (_configPath);  	MonitorScheduler.Scheduler.SetMonitors (configurationData);  	return eventMonitor;  #endregion  case FullMonitorType.PerformanceCounter:  	#region PerfCounters  	PfcMonitor pfcMonitor = addServerForm.GetPfcMonitor ();  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			pfcMonitor.AlertInfo.Add (alert);  			//}  		}  	}  	//else  	//{  	//    pfcMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  	//}  	if (addServerForm.Tag == null)  		configurationData.PfcMonitors.Add (pfcMonitor);  	else {  		configurationData.PfcMonitors.Remove (addServerForm.Tag.ToString ());  		configurationData.PfcMonitors.Add (pfcMonitor);  	}  	configurationData.ExportToXml (_configPath);  	MonitorScheduler.Scheduler.SetMonitors (configurationData);  	return pfcMonitor;  #endregion  case FullMonitorType.Service:  	#region Services  	ServiceMonitor serviceMonitor = addServerForm.GetServiceMonitor ();  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			serviceMonitor.AlertInfo.Add (alert);  			//}  		}  	}  	//else  	//{  	//    serviceMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  	//}  	if (addServerForm.Tag == null)  		configurationData.ServiceMonitors.Add (serviceMonitor);  	else {  		configurationData.ServiceMonitors.Remove (addServerForm.Tag.ToString ());  		configurationData.ServiceMonitors.Add (serviceMonitor);  	}  	configurationData.ExportToXml (_configPath);  	MonitorScheduler.Scheduler.SetMonitors (configurationData);  	return serviceMonitor;  #endregion  case FullMonitorType.Wmi:  	#region Wmi (For future use)  	WmiMonitor wmiMonitor = (WmiMonitor)addServerForm.GetCommonMonitor ();  	//NOTE: need a GetWmiMonitor() later on' potentially  	if (alertsExist) {  		foreach (Alert alert in alerts) {  			//if (!configurationData.Settings.IsDefaultAlert(alert))  			//{  			wmiMonitor.AlertInfo.Add (alert);  			//}  		}  	}  	//else  	//{  	//    wmiMonitor.AlertInfo.AddRange(configurationData.Settings.DefaultAlerts);  	//}  	if (addServerForm.Tag == null)  		configurationData.WmiMonitors.Add (wmiMonitor);  	else {  		configurationData.WmiMonitors.Remove (addServerForm.Tag.ToString ());  		configurationData.WmiMonitors.Add (wmiMonitor);  	}  	configurationData.ExportToXml (_configPath);  	MonitorScheduler.Scheduler.SetMonitors (configurationData);  	return wmiMonitor;  #endregion  case FullMonitorType.None:  default:  	return null;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: try {  	IPAddress[] addies = Dns.GetHostAddresses (Environment.MachineName);  	foreach (IPAddress addy in addies) {  		if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  			String[] splits = addy.ToString ().Split (new[] {  				'.'  			});  			if (splits.Length > 3)  				splits [3] = "1";  			else  				continue;  			mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  			splits [3] = "255";  			mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  			break;  		}  	}  	DialogResult dr = mis.ShowDialog (this);  	if (dr == DialogResult.OK) {  		Byte[] startAddress = IpFromDotString (mis.ManualIpSelection_StartRange_Txt.Text.Split (new[] {  			'.'  		}));  		if (startAddress != null) {  			Byte[] endAddress = IpFromDotString (mis.ManualIpSelection_EndRange_Txt.Text.Split (new[] {  				'.'  			}));  			if (endAddress != null)  				ManualRefreshServers (startAddress' endAddress);  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  }  finally {  	mis.Dispose ();  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: try {  	IPAddress[] addies = Dns.GetHostAddresses (Environment.MachineName);  	foreach (IPAddress addy in addies) {  		if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  			String[] splits = addy.ToString ().Split (new[] {  				'.'  			});  			if (splits.Length > 3)  				splits [3] = "1";  			else  				continue;  			mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  			splits [3] = "255";  			mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  			break;  		}  	}  	DialogResult dr = mis.ShowDialog (this);  	if (dr == DialogResult.OK) {  		Byte[] startAddress = IpFromDotString (mis.ManualIpSelection_StartRange_Txt.Text.Split (new[] {  			'.'  		}));  		if (startAddress != null) {  			Byte[] endAddress = IpFromDotString (mis.ManualIpSelection_EndRange_Txt.Text.Split (new[] {  				'.'  			}));  			if (endAddress != null)  				ManualRefreshServers (startAddress' endAddress);  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  }  finally {  	mis.Dispose ();  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: try {  	IPAddress[] addies = Dns.GetHostAddresses (Environment.MachineName);  	foreach (IPAddress addy in addies) {  		if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  			String[] splits = addy.ToString ().Split (new[] {  				'.'  			});  			if (splits.Length > 3)  				splits [3] = "1";  			else  				continue;  			mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  			splits [3] = "255";  			mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  			break;  		}  	}  	DialogResult dr = mis.ShowDialog (this);  	if (dr == DialogResult.OK) {  		Byte[] startAddress = IpFromDotString (mis.ManualIpSelection_StartRange_Txt.Text.Split (new[] {  			'.'  		}));  		if (startAddress != null) {  			Byte[] endAddress = IpFromDotString (mis.ManualIpSelection_EndRange_Txt.Text.Split (new[] {  				'.'  			}));  			if (endAddress != null)  				ManualRefreshServers (startAddress' endAddress);  		}  	}  }  catch (Exception ex) {  	Logger.Instance.LogException (this.GetType ()' ex);  }  finally {  	mis.Dispose ();  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: foreach (IPAddress addy in addies) {  	if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  		String[] splits = addy.ToString ().Split (new[] {  			'.'  		});  		if (splits.Length > 3)  			splits [3] = "1";  		else  			continue;  		mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  		splits [3] = "255";  		mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  		break;  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: foreach (IPAddress addy in addies) {  	if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  		String[] splits = addy.ToString ().Split (new[] {  			'.'  		});  		if (splits.Length > 3)  			splits [3] = "1";  		else  			continue;  		mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  		splits [3] = "255";  		mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  		break;  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: foreach (IPAddress addy in addies) {  	if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  		String[] splits = addy.ToString ().Split (new[] {  			'.'  		});  		if (splits.Length > 3)  			splits [3] = "1";  		else  			continue;  		mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  		splits [3] = "255";  		mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  		break;  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  	String[] splits = addy.ToString ().Split (new[] {  		'.'  	});  	if (splits.Length > 3)  		splits [3] = "1";  	else  		continue;  	mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  	splits [3] = "255";  	mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  	break;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  	String[] splits = addy.ToString ().Split (new[] {  		'.'  	});  	if (splits.Length > 3)  		splits [3] = "1";  	else  		continue;  	mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  	splits [3] = "255";  	mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  	break;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: if (!addy.IsIPv6LinkLocal && !addy.IsIPv6Multicast && !addy.IsIPv6SiteLocal) {  	String[] splits = addy.ToString ().Split (new[] {  		'.'  	});  	if (splits.Length > 3)  		splits [3] = "1";  	else  		continue;  	mis.ManualIpSelection_StartRange_Txt.Text = String.Join ("."' splits);  	splits [3] = "255";  	mis.ManualIpSelection_EndRange_Txt.Text = String.Join ("."' splits);  	break;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: if (splits.Length > 3)  	splits [3] = "1";  else  	continue;  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: if (splits.Length > 3)  	splits [3] = "1";  else  	continue;  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: splits [3] = "1";  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualprovideIpRangeToolStripMenuItemClick,The following statement contains a magic number: splits [3] = "255";  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,IpFromDotString,The following statement contains a magic number: if (ip.Length == 4) {  	byte[] ipbytes = new Byte[4];  	int x = 0;  	foreach (String s in ip) {  		Byte b;  		if (Byte.TryParse (s' out b)) {  			ipbytes [x] = b;  		}  		else  			return null;  		x++;  	}  	return ipbytes;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,IpFromDotString,The following statement contains a magic number: if (ip.Length == 4) {  	byte[] ipbytes = new Byte[4];  	int x = 0;  	foreach (String s in ip) {  		Byte b;  		if (Byte.TryParse (s' out b)) {  			ipbytes [x] = b;  		}  		else  			return null;  		x++;  	}  	return ipbytes;  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: if (startRange.Length == 4 && endRange.Length == 4) {  	//NOTE: more control than Ping.SendAsync - this forces 10 at a time at most  	ThreadPool.SetMaxThreads (10' 10);  	for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  		for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  			for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  				for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  					String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  					ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  				}  			}  		}  	}  }  else  	MessageBox.Show (this' "Invalid IP addresses provided"' "Invalid IP"' MessageBoxButtons.OK' MessageBoxIcon.Error);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: ThreadPool.SetMaxThreads (10' 10);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: ThreadPool.SetMaxThreads (10' 10);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  	for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  		for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  			for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  				String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  				ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  			}  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  	for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  		for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  			for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  				String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  				ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  			}  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  	for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  		for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  			for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  				String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  				ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  			}  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte0 = startRange [0]; byte0 <= endRange [0]; byte0++) {  	for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  		for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  			for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  				String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  				ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  			}  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  	for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  		for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  			String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  			ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  	for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  		for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  			String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  			ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  	for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  		for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  			String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  			ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte1 = startRange [1]; byte1 <= endRange [1]; byte1++) {  	for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  		for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  			String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  			ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  		}  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  	for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  		String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  		ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  	for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  		String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  		ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  	for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  		String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  		ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte2 = startRange [2]; byte2 <= endRange [2]; byte2++) {  	for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  		String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  		ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  	}  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  	String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  	ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ManualRefreshServers,The following statement contains a magic number: for (int byte3 = startRange [3]; byte3 <= endRange [3]; byte3++) {  	String ip = byte0 + "." + byte1 + "." + byte2 + "." + byte3;  	ThreadPool.QueueUserWorkItem (ManualPingServer' ip);  }  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,LogPaneMouseEnter,The following statement contains a magic number: networkMonitorBaseContainer.SplitterDistance = networkMonitorBaseContainer.Height - (networkMonitorBaseContainer.Height / 3);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,LogPaneMouseLeave,The following statement contains a magic number: networkMonitorBaseContainer.SplitterDistance = networkMonitorBaseContainer.Height - 25;  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: if (_refreshThread != null && _refreshThread.IsAlive)  	_refreshThread.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: _refreshThread.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: if (_resultTimer != null && _resultTimer.IsAlive)  	_resultTimer.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: _resultTimer.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: if (_commandPoller != null && _commandPoller.IsAlive)  	_commandPoller.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: _commandPoller.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: if (_serviceControllerPoller != null && _serviceControllerPoller.IsAlive)  	_serviceControllerPoller.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: _serviceControllerPoller.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: if (_schedulerConfigurationPoller != null && _schedulerConfigurationPoller.IsAlive)  	_schedulerConfigurationPoller.Join (200);  
Magic Number,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,NetworkMonitorFormClosing,The following statement contains a magic number: _schedulerConfigurationPoller.Join (200);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromPathBtnClick,The following statement contains a magic number: this.Height = 190;  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromPathBtnClick,The following statement contains a magic number: this.okBtn.Location = new Point (87' 117);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromPathBtnClick,The following statement contains a magic number: this.okBtn.Location = new Point (87' 117);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromPathBtnClick,The following statement contains a magic number: this.cancelBtn.Location = new Point (213' 117);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromPathBtnClick,The following statement contains a magic number: this.cancelBtn.Location = new Point (213' 117);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromServiceBtnClick,The following statement contains a magic number: this.Height = 217;  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromServiceBtnClick,The following statement contains a magic number: this.okBtn.Location = new Point (87' 157);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromServiceBtnClick,The following statement contains a magic number: this.okBtn.Location = new Point (87' 157);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromServiceBtnClick,The following statement contains a magic number: this.cancelBtn.Location = new Point (213' 157);  
Magic Number,RemoteMon,NoConfigurationFound,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NoConfigurationFound.cs,LoadFromServiceBtnClick,The following statement contains a magic number: this.cancelBtn.Location = new Point (213' 157);  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,The following switch statement is missing a default case: switch (c.Type) {  case AlertType.Email:  	addServerAlertEmailTextBox.Text = c.Info;  	break;  case AlertType.Phone:  	addServerAlertSmsTextBox.Text = c.Info;  	break;  }  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServer,The following switch statement is missing a default case: switch (c.Type) {  case AlertType.Email:  	addServerAlertEmailTextBox.Text = c.Info;  	break;  case AlertType.Phone:  	addServerAlertSmsTextBox.Text = c.Info;  	break;  }  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerOkBtnClick,The following switch statement is missing a default case: switch ((MonitorBaseType)addServerBaseTabControl.SelectedIndex) {  case MonitorBaseType.Advanced:  	ReturnValue = (FullMonitorType)addServerTabControl.SelectedIndex;  	break;  case MonitorBaseType.Basic:  	ReturnValue = FullMonitorType.Basic;  	break;  case MonitorBaseType.Common:  	ReturnValue = FullMonitorType.Common;  	break;  }  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,AddServerBaseTabControlSelectedIndexChanged,The following switch statement is missing a default case: switch ((MonitorBaseType)addServerBaseTabControl.SelectedIndex) {  case MonitorBaseType.Advanced:  	if (_perfCounterPopulation != null) {  		_perfCounterPopulation.Abort ();  		_perfCounterPopulation = null;  	}  	if (_serviceMonitorPopulation != null) {  		_serviceMonitorPopulation.Abort ();  		_serviceMonitorPopulation = null;  	}  	if (_eventMonitorPopulation != null) {  		_eventMonitorPopulation.Abort ();  		_eventMonitorPopulation = null;  	}  	ReturnValue = (FullMonitorType)addServerTabControl.SelectedIndex;  	commonFourLabel.Visible = false;  	_perfCounterPopulation = new Thread (GetPerfCounterTypes) {  		Name = "PerformanceCounter TabSwitch"  	};  	_perfCounterPopulation.Start ();  	break;  case MonitorBaseType.Basic:  	if (_perfCounterPopulation != null) {  		_perfCounterPopulation.Abort ();  		_perfCounterPopulation = null;  	}  	if (_serviceMonitorPopulation != null) {  		_serviceMonitorPopulation.Abort ();  		_serviceMonitorPopulation = null;  	}  	if (_eventMonitorPopulation != null) {  		_eventMonitorPopulation.Abort ();  		_eventMonitorPopulation = null;  	}  	commonFourLabel.Visible = false;  	ReturnValue = FullMonitorType.Basic;  	break;  case MonitorBaseType.Common:  	if (_perfCounterPopulation != null) {  		_perfCounterPopulation.Abort ();  		_perfCounterPopulation = null;  	}  	if (_serviceMonitorPopulation != null) {  		_serviceMonitorPopulation.Abort ();  		_serviceMonitorPopulation = null;  	}  	if (_eventMonitorPopulation != null) {  		_eventMonitorPopulation.Abort ();  		_eventMonitorPopulation = null;  	}  	ReturnValue = FullMonitorType.Common;  	commonFourLabel.Visible = true;  	_commonMonitorPopulation = new Thread (GetCommon) {  		Name = "CommonMonitor TabSwitch"  	};  	_commonMonitorPopulation.Start ();  	break;  }  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,Validator,The following switch statement is missing a default case: switch ((MonitorBaseType)addServerBaseTabControl.SelectedIndex) {  case MonitorBaseType.Advanced:  	switch ((FullMonitorType)addServerTabControl.SelectedIndex) {  	case FullMonitorType.EventLog:  		ValidateEventMonitors ();  		break;  	case FullMonitorType.PerformanceCounter:  		ValidatePerfCounters ();  		break;  	case FullMonitorType.Service:  		ValidateServiceMonitors ();  		break;  	}  	break;  case MonitorBaseType.Basic:  	ValidateBasicMonitors ();  	break;  case MonitorBaseType.Common:  	ValidateCommonMonitors ();  	break;  }  
Missing Default,RemoteMon,AddServer,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\AddServer.cs,Validator,The following switch statement is missing a default case: switch ((FullMonitorType)addServerTabControl.SelectedIndex) {  case FullMonitorType.EventLog:  	ValidateEventMonitors ();  	break;  case FullMonitorType.PerformanceCounter:  	ValidatePerfCounters ();  	break;  case FullMonitorType.Service:  	ValidateServiceMonitors ();  	break;  }  
Missing Default,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,UpdateDataGridViewWithResults,The following switch statement is missing a default case: switch (result.Type) {  #region Basic  case FullMonitorType.Basic:  	BasicResult br = (BasicResult)result;  	BasicMonitor bm = (BasicMonitor)configurationData [FullMonitorType.Basic' hash];  	if (bm != null) {  		if (serverMonitorList.InvokeRequired) {  			serverMonitorList.Invoke (new MethodInvoker (() => row.SetValues (new Object[] {  				bm.Server'  				bm.FriendlyName'  				"Basic"'  				br.Ok ? "OK" : "Panic"'  				br.Exception ? "Unknown" : br.Value.ToString ()'  				br.Exception ? "Check logs for details." : bm.ToString ()  			})));  		}  		else {  			row.SetValues (new Object[] {  				bm.Server'  				bm.FriendlyName'  				"Basic"'  				br.Ok ? "OK" : "Panic"'  				br.Exception ? "Unknown" : br.Value.ToString ()'  				br.Exception ? "Check logs for details." : bm.ToString ()  			});  		}  	}  	break;  #endregion  #region EventLog  case FullMonitorType.EventLog:  	EventResult er = (EventResult)result;  	EventMonitor em = (EventMonitor)configurationData [FullMonitorType.EventLog' hash];  	if (em != null) {  		if (serverMonitorList.InvokeRequired) {  			serverMonitorList.Invoke (new MethodInvoker (() => row.SetValues (new Object[] {  				em.Server'  				em.FriendlyName'  				"Event Log"'  				er.Ok ? "OK" : "Panic"'  				er.Exception ? "Unknown" : ((EventResultMatches)er.Value).ToString ()'  				er.Exception ? "Check logs for details." : em.ToString ()  			})));  		}  		else {  			row.SetValues (new Object[] {  				em.Server'  				em.FriendlyName'  				"Event Log"'  				er.Ok ? "OK" : "Panic"'  				er.Exception ? "Unknown" : ((EventResultMatches)er.Value).ToString ()'  				er.Exception ? "Check logs for details." : em.ToString ()  			});  		}  	}  	break;  #endregion  #region PerformanceCounter  case FullMonitorType.PerformanceCounter:  	PfcResult pr = (PfcResult)result;  	PfcMonitor pm = (PfcMonitor)configurationData [FullMonitorType.PerformanceCounter' hash];  	if (pm != null) {  		DataGridViewGraphCell cell = (DataGridViewGraphCell)row.Cells ["serverMonitorListStatusValueColumn"];  		cell.SetPanic (pm.ThresholdPanicSingle);  		cell.SetWarning (pm.ThresholdWarningSingle);  		cell.LessThan (pm.ThresholdLessThan);  		cell.SetValue (pr.Value);  		if (serverMonitorList.InvokeRequired) {  			serverMonitorList.Invoke (new MethodInvoker (() => row.SetValues (new Object[] {  				pm.Server'  				pm.FriendlyName'  				"Performance Counter"'  				pr.Ok ? "OK" : (pr.Critical ? "Panic" : "Warning")'  				pr.Exception ? "Unknown" : pr.Value'  				pr.Exception ? "Check logs for details." : pm.ToString ()  			})));  		}  		else {  			row.SetValues (new Object[] {  				pm.Server'  				pm.FriendlyName'  				"Performance Counter"'  				pr.Ok ? "OK" : (pr.Critical ? "Panic" : "Warning")'  				pr.Exception ? "Unknown" : pr.Value'  				pr.Exception ? "Check logs for details." : pm.ToString ()  			});  		}  	}  	break;  #endregion  #region Services  case FullMonitorType.Service:  	ServiceResult sr = (ServiceResult)result;  	ServiceMonitor sm = (ServiceMonitor)configurationData [FullMonitorType.Service' hash];  	if (sm != null) {  		if (serverMonitorList.InvokeRequired) {  			serverMonitorList.Invoke (new MethodInvoker (() => row.SetValues (new Object[] {  				sm.Server'  				sm.FriendlyName'  				"Service"'  				sr.Ok ? "OK" : "Panic"'  				sr.Exception ? "Unknown" : ((ServiceResultStatuses)sr.Value).ToString ()'  				sr.Exception ? "Check logs for details." : sm.ToString ()  			})));  		}  		else {  			row.SetValues (new Object[] {  				sm.Server'  				sm.FriendlyName'  				"Service"'  				sr.Ok ? "OK" : "Panic"'  				sr.Exception ? "Unknown" : ((ServiceResultStatuses)sr.Value).ToString ()'  				sr.Exception ? "Check logs for details." : sm.ToString ()  			});  		}  	}  	break;  #endregion  #region Wmi  case FullMonitorType.Wmi:  	WmiResult wr = (WmiResult)result;  	WmiMonitor wm = (WmiMonitor)configurationData [FullMonitorType.Wmi' hash];  	if (wm != null) {  		DataGridViewGraphCell cell = (DataGridViewGraphCell)row.Cells ["serverMonitorListStatusValueColumn"];  		cell.SetPanic (wm.ThresholdPanicSingle);  		cell.SetWarning (wm.ThresholdWarningSingle);  		cell.LessThan (wm.ThresholdLessThan);  		cell.SetValue (wr.Value);  		if (serverMonitorList.InvokeRequired) {  			serverMonitorList.Invoke (new MethodInvoker (() => row.SetValues (new Object[] {  				wm.Server'  				wm.FriendlyName'  				"Wmi"'  				wr.Ok ? "OK" : "Panic"'  				wr.Exception ? "Unknown" : wr.Value'  				wr.Exception ? "Check logs for details." : wm.ToString ()  			})));  		}  		else {  			row.SetValues (new Object[] {  				wm.Server'  				wm.FriendlyName'  				"Wmi"'  				wr.Ok ? "OK" : "Panic"'  				wr.Exception ? "Unknown" : wr.Value'  				wr.Exception ? "Check logs for details." : wm.ToString ()  			});  		}  	}  	break;  #endregion  }  
Missing Default,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,GetCommands,The following switch statement is missing a default case: switch (cmd.CommandType) {  case Commands.GetResultsResponse:  	Results results = (Results)cmd.Data;  	if (results != null) {  		counter++;  		if (results.Count > 0)  			UpdateDataGridViewWithResults (results.ToEnumerable ());  	}  	break;  case Commands.GetConfigurationResponse:  	configurationData = (ConfigurationData)cmd.Data;  	configurationLoaded = true;  	if (serverMonitorList.InvokeRequired) {  		Invoke (new MethodInvoker (() => serverMonitorList.Rows.Clear ()));  	}  	else  		serverMonitorList.Rows.Clear ();  	PopulateGridView ();  	configurationData.ExportToXml ("configuration.xml");  	//NOTE: may need to convert this to some sort of overlay window that isn't a modal dialog box so it doesn't block this thread  	MessageBox.Show ("Configuration Retrived from the RemoteMon Service."' "Configuration Retrieved"' MessageBoxButtons.OK);  	break;  case Commands.UpdateConfigurationResponse:  	if ((Boolean)cmd.Data)  		MessageBox.Show ("Configuration Updated successfully."' "Service Configuration Updated"' MessageBoxButtons.OK);  	break;  case Commands.ServiceStatus:  	//Boolean oldValue = serviceActive;  	ServiceActive = (Boolean)cmd.Data;  	statusBarLabelServiceStatus.Text = "Service Status: " + (ServiceActive ? "Running" : "Stopped");  	if (ServiceActive && MonitorScheduler.Scheduler.Running) {  		Logger.Instance.Log (this.GetType ()' LogType.Info' "Stopping Monitoring");  		MonitorScheduler.Scheduler.Kill ();  	}  	break;  case Commands.GetConfiguration:  	//if the service requests a configuration' then pop a dialog box asking whether or not to give it.  	if (!ignoreServiceConfigRequest) {  		DialogResult dr = MessageBox.Show ("The RemoteMon Service has requested your configuration' because it does not have any.  \n\r\n\rDo you want to upload your configuration to the service?"' "Service needs a configuration"' MessageBoxButtons.YesNo);  		if (dr == DialogResult.Yes) {  			talker.SendCommand (new Command {  				CommandType = Commands.GetConfigurationResponse'  				Data = configurationData'  				ToNamespace = cmd.FromNamespace'  				ToIp = cmd.FromIp  			});  			synced = false;  			ignoreServiceConfigRequest = false;  		}  		else  			ignoreServiceConfigRequest = true;  	}  	break;  case Commands.ResultsSyncResponse:  	if (cmd.Data != null && configurationLoaded) {  		SyncDatas servicedatas = (SyncDatas)cmd.Data;  		SyncDatas localdatas = new SyncDatas ();  		counter = servicedatas.Counter;  		foreach (IMonitor monitor in configurationData.ToEnumerable ()) {  			localdatas.Add (new SyncData {  				FriendlyName = monitor.FriendlyName'  				GuidHash = monitor.Hash'  				IntHash = monitor.GetHashCode ()  			});  		}  		syncDict.Clear ();  		foreach (SyncData ld in localdatas) {  			//loop through each and create a dictionary of the guid from service to guid from local configuration  			SyncData local = ld;  			SyncData match = GetMatch (servicedatas' local);  			if (match != null)  				syncDict.Add (match.GuidHash' ld.GuidHash);  			//shouldn't be duplicates  		}  		//mark synced as true  		synced = true;  	}  	break;  }  
Missing Default,RemoteMon,NetworkMonitor,C:\repos\fronn_win-net-mon\WinNetMon\RemoteMon\NetworkMonitor.cs,ServerMonitorListCellDoubleClick,The following switch statement is missing a default case: switch (monitor.Type) {  case FullMonitorType.Basic:  	#region Basic  	BasicMonitor basic = (BasicMonitor)monitor;  	AddServer basicAddServer;  	if (basic.Common) {  		if (basic.AlertInfo.Count > 0)  			basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' basic.AlertInfo' basic);  		else  			basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' configurationData.Settings.DefaultAlerts' basic);  	}  	else {  		if (basic.AlertInfo.Count > 0)  			basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' basic.AlertInfo);  		else  			basicAddServer = new AddServer (basic.FriendlyName' String.Empty' FullMonitorType.Basic' MonitorBaseType.Basic' configurationData.Settings.DefaultAlerts' basic);  	}  	basicAddServer.Tag = hash;  	RepopulateSelServer (basicAddServer);  	break;  #endregion  case FullMonitorType.EventLog:  	#region EventLog  	EventMonitor events = (EventMonitor)monitor;  	AddServer eventAddServer;  	if (events.Common) {  		if (events.AlertInfo.Count > 0)  			eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' events.AlertInfo' events);  		else  			eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' events);  	}  	else {  		if (events.AlertInfo.Count > 0)  			eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' events.AlertInfo' events);  		else  			eventAddServer = new AddServer (events.FriendlyName' events.Server' FullMonitorType.EventLog' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' events);  	}  	eventAddServer.Tag = hash;  	RepopulateSelServer (eventAddServer);  	break;  #endregion  case FullMonitorType.PerformanceCounter:  	#region PerformanceCounter  	PfcMonitor pfc = (PfcMonitor)monitor;  	AddServer pfcAddServer;  	if (pfc.Common) {  		if (pfc.AlertInfo.Count > 0)  			pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Common' pfc.AlertInfo' pfc);  		else  			pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' pfc);  	}  	else {  		if (pfc.AlertInfo.Count > 0)  			pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Advanced' pfc.AlertInfo' pfc);  		else  			pfcAddServer = new AddServer (pfc.FriendlyName' pfc.Server' FullMonitorType.PerformanceCounter' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' pfc);  	}  	pfcAddServer.Tag = hash;  	RepopulateSelServer (pfcAddServer);  	break;  #endregion  case FullMonitorType.Service:  	#region Service  	ServiceMonitor service = (ServiceMonitor)monitor;  	AddServer serviceAddServer;  	if (service.Common) {  		if (service.AlertInfo.Count > 0)  			serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Common' service.AlertInfo' service);  		else  			serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' service);  	}  	else {  		if (service.AlertInfo.Count > 0)  			serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Advanced' service.AlertInfo' service);  		else  			serviceAddServer = new AddServer (service.FriendlyName' service.Server' FullMonitorType.Service' MonitorBaseType.Advanced' configurationData.Settings.DefaultAlerts' service);  	}  	serviceAddServer.Tag = hash;  	RepopulateSelServer (serviceAddServer);  	break;  #endregion  case FullMonitorType.Wmi:  	#region Wmi  	WmiMonitor wmi = (WmiMonitor)monitor;  	AddServer wmiAddServer;  	if (wmi.Common) {  		if (wmi.AlertInfo.Count > 0)  			wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' wmi.AlertInfo' wmi);  		else  			wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' wmi);  	}  	else {  		if (wmi.AlertInfo.Count > 0)  			wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' wmi.AlertInfo' wmi);  		else  			wmiAddServer = new AddServer (wmi.FriendlyName' wmi.Server' FullMonitorType.Wmi' MonitorBaseType.Common' configurationData.Settings.DefaultAlerts' wmi);  	}  	wmiAddServer.Tag = hash;  	RepopulateSelServer (wmiAddServer);  	break;  #endregion  }  
