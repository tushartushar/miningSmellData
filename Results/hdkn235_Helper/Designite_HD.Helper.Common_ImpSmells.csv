Implementation smell,Namespace,Class,File,Method,Description
Long Method,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,Get39Html,The method has 121 lines of code.
Long Method,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The method has 115 lines of code.
Long Method,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The method has 135 lines of code.
Long Method,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,The method has 135 lines of code.
Long Method,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,The method has 158 lines of code.
Long Method,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The method has 107 lines of code.
Complex Method,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,Cyclomatic complexity of the method is 11
Complex Method,HD.Helper.Common,GridViewHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\GridViewHelper.cs,GridView2DataTable,Cyclomatic complexity of the method is 10
Complex Method,HD.Helper.Common,GridViewHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\GridViewHelper.cs,ToDataTable,Cyclomatic complexity of the method is 8
Complex Method,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,Cyclomatic complexity of the method is 9
Complex Method,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,Cyclomatic complexity of the method is 11
Complex Method,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,Cyclomatic complexity of the method is 9
Complex Method,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,Cyclomatic complexity of the method is 12
Complex Method,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,Cyclomatic complexity of the method is 11
Complex Method,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,Cyclomatic complexity of the method is 13
Complex Method,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,Cyclomatic complexity of the method is 16
Complex Method,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,Cyclomatic complexity of the method is 9
Complex Method,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,Cyclomatic complexity of the method is 8
Complex Method,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,Cyclomatic complexity of the method is 8
Complex Method,HD.Helper.Common,ZipHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Zip\ZipHelper.cs,UnZip,Cyclomatic complexity of the method is 8
Long Parameter List,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,ResponseFile,The method has 5 parameters. Parameters: _Request' _Response' _fileName' _fullPath' _speed
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,GetShowModalWindowScript,The method has 5 parameters. Parameters: wid' title' width' height' url
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowModalWindow,The method has 5 parameters. Parameters: wid' title' width' height' url
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentModalWindow,The method has 8 parameters. Parameters: wid' control' eventName' title' width' height' url' isScriptEnd
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentModalWindow,The method has 8 parameters. Parameters: wid' cell' eventName' title' width' height' url' isScriptEnd
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentConfirm,The method has 6 parameters. Parameters: control' eventName' title' width' height' message
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowModalDialogWindow,The method has 5 parameters. Parameters: webFormUrl' width' height' top' left
Long Parameter List,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,OpenWebFormSize,The method has 5 parameters. Parameters: url' width' heigth' top' left
Long Parameter List,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The method has 5 parameters. Parameters: mailSubjct' mailBody' mailFrom' mailAddress' HostIP
Long Parameter List,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The method has 7 parameters. Parameters: mailSubjct' mailBody' mailFrom' mailAddress' HostIP' username' password
Long Parameter List,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The method has 9 parameters. Parameters: mailSubjct' mailBody' mailFrom' mailAddress' HostIP' filename' username' password' ssl
Long Parameter List,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The method has 11 parameters. Parameters: mailSubjct' mailBody' mailFrom' mailAddress' HostIP' port' username' password' ssl' replyTo' sendOK
Long Parameter List,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The method has 5 parameters. Parameters: url' para' sumpage' page' myPaging
Long Parameter List,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The method has 5 parameters. Parameters: url' para' sumpage' page' count
Long Parameter List,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,MakeThumbnail,The method has 5 parameters. Parameters: originalImagePath' thumbnailPath' width' height' mode
Long Parameter List,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,LetterWatermark,The method has 5 parameters. Parameters: path' size' letter' color' location
Long Parameter List,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,FTPClient,The method has 5 parameters. Parameters: remoteHost' remotePath' remoteUser' remotePass' remotePort
Long Parameter List,HD.Helper.Common,FTPHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPHelper.cs,AddMSCFile,The method has 5 parameters. Parameters: ftpFolder' ftpFileName' localFolder' localFileName' BscInfo
Long Parameter List,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Long Parameter List,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' defVal' retVal' size' filePath
Long Parameter List,HD.Helper.Common,MailSmtpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailSmtpHelper.cs,SendByConfig,The method has 9 parameters. Parameters: server' sender' recipient' subject' body' isBodyHtml' encoding' isAuthentication' files
Long Parameter List,HD.Helper.Common,PDFOperation,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\PDF\PDFOperation.cs,PDFOperation,The method has 5 parameters. Parameters: type' marginLeft' marginRight' marginTop' marginBottom
Long Parameter List,HD.Helper.Common,PDFOperation,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\PDF\PDFOperation.cs,AddParagraph,The method has 6 parameters. Parameters: content' fontsize' Alignment' SpacingAfter' SpacingBefore' MultipliedLeading
Long Parameter List,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The method has 6 parameters. Parameters: filePath' maxSize' fileType' TargetFile' saveFileName' fileSize
Long Parameter List,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The method has 5 parameters. Parameters: filePath' maxSize' fileType' filename' TargetFile
Long Parameter List,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Insert,The method has 5 parameters. Parameters: path' node' element' attribute' value
Long Parameter List,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,UpdateXmlRow,The method has 5 parameters. Parameters: strXmlPath' Columns' ColumnValue' strWhereColumnName' strWhereColumnValue
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,Get39Html,The length of the statement  "                result_html += "<div style=\"width:" + width + "px;height:" + height + "px;float:left;background:" + color + ";\"></div>"; " is 122.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,Get39Html,The length of the statement  "                result_html += "<div style=\"width:" + (width * (len + 1)) + "px;float:left;color:#000000;text-align:center;\">" + c + "</div>"; " is 128.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,Get39Html,The length of the statement  "            return "<div style=\"background:#FFFFFF;padding:5px;font-size:" + (width * 10) + "px;font-family:'楷体';\">" + result_html + "</div>"; " is 132.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "                result_html += "<div style=\"width:" + width + "px;height:" + height + "px;float:left;background:" + color + ";\"></div>"; " is 122.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;color:#000000;width:" + (width * 9) + "px;text-align:center;\">" + s[0] + "</div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#FFFFFF;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "                result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#FFFFFF;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#FFFFFF;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#FFFFFF;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "                result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#FFFFFF;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            result_html += "<div style=\"float:left;width:" + width + "px;height:" + height_bottom + "px;background:#000000;\"></div>"; " is 123.
Long Statement,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The length of the statement  "            return "<div style=\"background:#FFFFFF;padding:0px;font-size:" + (width * 10) + "px;font-family:'楷体';\">" + result_html + "</div>"; " is 132.
Long Statement,HD.Helper.Common,CacheHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Cache\CacheHelper.cs,SetCache,The length of the statement  "            objCache.Insert(CacheKey' objObject' null' DateTime.MaxValue' Timeout' System.Web.Caching.CacheItemPriority.NotRemovable' null); " is 128.
Long Statement,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The length of the statement  "            Color[] c = { Color.Black' Color.Red' Color.DarkBlue' Color.Green' Color.Chocolate' Color.Brown' Color.DarkCyan' Color.Purple }; " is 128.
Long Statement,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Encrypt,The length of the statement  "            des.Key = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8)); " is 144.
Long Statement,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Encrypt,The length of the statement  "            des.IV = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8)); " is 143.
Long Statement,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The length of the statement  "            des.Key = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8)); " is 144.
Long Statement,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The length of the statement  "            des.IV = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8)); " is 143.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA);  " is 136.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA);  " is 136.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA);  " is 136.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureFormatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter(RSA);  " is 136.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA);  " is 142.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA);  " is 142.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA);  " is 142.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider();  " is 120.
Long Statement,HD.Helper.Common,RSADEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\RSADEncrypt.cs,SignatureDeformatter,The length of the statement  "				System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(RSA);  " is 142.
Long Statement,HD.Helper.Common,DirectoryHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\DirectoryHelper.cs,CreateFile,The length of the statement  "            System.IO.StreamWriter sw = new System.IO.StreamWriter(System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\" + dir' false' System.Text.Encoding.GetEncoding("GB2312")); " is 183.
Long Statement,HD.Helper.Common,DirectoryHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\DirectoryHelper.cs,MoveFile,The length of the statement  "                File.Move(System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\" + dir1' System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\" + dir2); " is 166.
Long Statement,HD.Helper.Common,DirectoryHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\DirectoryHelper.cs,CopyFile,The length of the statement  "                File.Copy(System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\" + dir1' System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\" + dir2' true); " is 172.
Long Statement,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,ResponseFile,The length of the statement  "                    _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8)); " is 129.
Long Statement,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,DownLoad,The length of the statement  "                HttpContext.Current.Response.AppendHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(Path.GetFileName(destFileName)' System.Text.Encoding.UTF8)); " is 172.
Long Statement,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,DownLoadBlock,The length of the statement  "                HttpContext.Current.Response.AddHeader("Content-Disposition"' "attachement;filename=" + HttpUtility.UrlEncode(Path.GetFileName(filePath))); " is 139.
Long Statement,HD.Helper.Common,FileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileHelper.cs,GetFileAttibe,The length of the statement  "            str += "详细路径:" + objFI.FullName + "<br>文件名称:" + objFI.Name + "<br>文件长度:" + objFI.Length.ToString() + "字节<br>创建时间" + objFI.CreationTime.ToString() + "<br>最后访问时间:" + objFI.LastAccessTime.ToString() + "<br>修改时间:" + objFI.LastWriteTime.ToString() + "<br>所在目录:" + objFI.DirectoryName + "<br>扩展名:" + objFI.Extension; " is 310.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExpress,The length of the statement  "                    strTemp = strExpression.Substring(strExpression.IndexOf("*") + 1' strExpression.Length - strExpression.IndexOf("*") - 1); " is 121.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExpress,The length of the statement  "                    strTemp = strExpression.Substring(strExpression.IndexOf("/") + 1' strExpression.Length - strExpression.IndexOf("/") - 1); " is 121.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExpress,The length of the statement  "                    strTemp = strExpression.Substring(strExpression.IndexOf("+") + 1' strExpression.Length - strExpression.IndexOf("+") - 1); " is 121.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExpress,The length of the statement  "                    strTemp = strExpression.Substring(strExpression.IndexOf("-") + 1' strExpression.Length - strExpression.IndexOf("-") - 1); " is 121.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,SpiltExpression,The length of the statement  "                strTemp = strExpression.Substring(strExpression.LastIndexOf("(") + 1' strExpression.Length - strExpression.LastIndexOf("(") - 1); " is 129.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("N") + 1' strExpression.Length - 1 - strExpression.IndexOf("N"))' EnumFormula.Sin).ToString(); " is 166.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("S") + 1' strExpression.Length - 1 - strExpression.IndexOf("S"))' EnumFormula.Cos).ToString(); " is 166.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("N") + 1' strExpression.Length - 1 - strExpression.IndexOf("N"))' EnumFormula.Tan).ToString(); " is 166.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("N") + 1' strExpression.Length - 1 - strExpression.IndexOf("N"))' EnumFormula.ATan).ToString(); " is 167.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("T") + 1' strExpression.Length - 1 - strExpression.IndexOf("T"))' EnumFormula.Sqrt).ToString(); " is 167.
Long Statement,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetExpType,The length of the statement  "                return CalculateExExpress(strExpression.Substring(strExpression.IndexOf("W") + 1' strExpression.Length - 1 - strExpression.IndexOf("W"))' EnumFormula.Pow).ToString(); " is 166.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,RegisterScriptBlock,The length of the statement  "            page.ClientScript.RegisterStartupScript(page.GetType()' "scriptblock"' "<script type='text/javascript'>" + _ScriptString + "</script>"); " is 136.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,GetShowModalWindowScript,The length of the statement  "            return string.Format("setTimeout(\"showModalWindow('{0}'''{1}''{2}'{3}''{4}')\"'100);"' wid' title' width' height' url); " is 120.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentModalWindow,The length of the statement  "            control.Attributes[eventName] = string.Format("showModalWindow('{0}'''{1}''{2}'{3}''{4}');" + script' wid' title' width' height' url); " is 134.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentModalWindow,The length of the statement  "            cell.Attributes[eventName] = string.Format("showModalWindow('{0}'''{1}''{2}'{3}''{4}');" + script' wid' title' width' height' url); " is 131.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentConfirm,The length of the statement  "            control.Attributes[eventName] = string.Format("return showConfirm('{0}''{1}'{2}''{3}'''{4}');"' title' width' height' message' control.ClientID); " is 145.
Long Statement,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,OpenWebFormSize,The length of the statement  "            string js = @"<Script language='JavaScript'>window.open('" + url + @"''''''height=" + heigth + "'width=" + width + "'top=" + top + "'left=" + left + "'location=no'menubar=no'resizable=yes'scrollbars=yes'status=yes'titlebar=no'toolbar=no'directories=no');</Script>"; " is 265.
Long Statement,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The length of the statement  "                new SmtpClient { UseDefaultCredentials = false' DeliveryMethod = SmtpDeliveryMethod.PickupDirectoryFromIis' Host = HostIP' Port = (char)0x19 }.Send(message); " is 157.
Long Statement,HD.Helper.Common,MailHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Email\MailHelper.cs,sendMail,The length of the statement  "            string str = sendMail(mailSubjct' mailBody' mailFrom' mailAddress' HostIP' 0x19' username' password' false' string.Empty' out flag); " is 132.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,UnLockControl,The length of the statement  "                //    page.ClientScript.RegisterStartupScript(typeof(string)' "Display" + ctl.ClientID + "Image"' "<script language=javascript>" + " is 130.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,GetRelativeLevel,The length of the statement  "            return "";//Nandasoft.Helper.NDHelperString.Repeat("../"' Nandasoft.Helper.NDHelperString.RepeatTime(HttpContext.Current.Request.Path' "/") - i); " is 145.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The length of the statement  "                        sb.Append(string.Format("<p class=\"next\"><a href=\"{0}?page={1}{2}\">{3}</a> "' new object[] { url' page + 1' para' "下一页" })); " is 128.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The length of the statement  "                            sb.Append(string.Format("<p class=\"next\"><a href=\"{0}?page={1}{2}\">{3}</a> "' new object[] { url' page - 1' para' "上一页" })); " is 128.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The length of the statement  "                    pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | "; " is 128.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                    sb.Append(string.Format("<a href=\"?page={0}{1}\"><img src=\"images/first-icon.gif\" border=\"0\"/></a>&nbsp;&nbsp;"' new object[] { 1' para })); " is 145.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                            sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page + 1' para' "<img src=\"images/right-icon.gif\" border=\"0\"/>" })); " is 147.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                                sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page - 1' para' "<img src=\"images/left-icon.gif\" border=\"0\"/>" })); " is 146.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                                sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page - 1' para' "<img src=\"images/left-icon.gif\" border=\"0\"/>" })); " is 146.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                                sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page + 1' para' "<img src=\"images/right-icon.gif\" border=\"0\"/>" })); " is 147.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging2,The length of the statement  "                    sb.Append(string.Format("&nbsp;&nbsp;<a href=\"?page={0}{1}\"><img src=\"images/last-icon.gif\" border=\"0\"/></a>&nbsp;&nbsp;"' new object[] { sumpage' para })); " is 162.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                            sb.Append(string.Format("<a>上一页</a><a href=\"{3}?page={0}{1}\">{2}</a> "' new object[] { page + 1' para' "下一页"' url })); " is 120.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                            // sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page + 1' para' "<img src=\"images/right-icon.gif\" border=\"0\"/>" })); " is 150.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                                //sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page - 1' para' "<img src=\"images/left-icon.gif\" border=\"0\"/>" })); " is 148.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                                sb.Append(string.Format("<a href=\"{3}?page={0}{1}\">{2}</a><a>下一页</a> "' new object[] { page - 1' para' "上一页"' url })); " is 120.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                                //sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page - 1' para' "<img src=\"images/left-icon.gif\" border=\"0\"/>" })); " is 148.
Long Statement,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging3,The length of the statement  "                                //sb.Append(string.Format("<a href=\"?page={0}{1}\">{2}</a>"' new object[] { page + 1' para' "<img src=\"images/right-icon.gif\" border=\"0\"/>" })); " is 149.
Long Statement,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,MakeThumbnail,The length of the statement  "            g.DrawImage(originalImage' new System.Drawing.Rectangle(0' 0' towidth' toheight)' new System.Drawing.Rectangle(x' y' ow' oh)' System.Drawing.GraphicsUnit.Pixel); " is 161.
Long Statement,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,ImageWatermark,The length of the statement  "                string filename = "" + time.Year.ToString() + time.Month.ToString() + time.Day.ToString() + time.Hour.ToString() + time.Minute.ToString() + time.Second.ToString() + time.Millisecond.ToString(); " is 193.
Long Statement,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,ImageWatermark,The length of the statement  "                g.DrawImage(waterimg' new Rectangle(int.Parse(loca[0].ToString())' int.Parse(loca[1].ToString())' waterimg.Width' waterimg.Height)); " is 132.
Long Statement,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,LetterWatermark,The length of the statement  "                string filename = "" + time.Year.ToString() + time.Month.ToString() + time.Day.ToString() + time.Hour.ToString() + time.Minute.ToString() + time.Second.ToString() + time.Millisecond.ToString(); " is 193.
Long Statement,HD.Helper.Common,FileValidation,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,IsSecureUpfilePhoto,The length of the statement  "            string str = "request|<script|.getfolder|.createfolder|.deletefolder|.createdirectory|.deletedirectory|.saveas|wscript.shell|script.encode|server.|.createobject|execute|activexobject|language="; " is 194.
Long Statement,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The length of the statement  "                        g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel); " is 206.
Long Statement,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The length of the statement  "                    if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString())) " is 122.
Long Statement,HD.Helper.Common,DataToExcel,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\DataToExcel.cs,CreateExcel,The length of the statement  "            //excel.ActiveWorkbook.SaveAs("./tt.xls"' XlFileFormat.xlExcel9795' null' null' false' false' Excel.XlSaveAsAccessMode.xlNoChange' null' null' null' null' null); " is 161.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,DataTable1Excel,The length of the statement  "                curContext.Response.Write("<meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"/>" + strWriter.ToString()); " is 125.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,DataTable3Excel,The length of the statement  "                curContext.Response.AddHeader("content-disposition"' "attachment;filename=" + HttpUtility.UrlEncode(FileName' System.Text.Encoding.UTF8) + ".xls"); " is 147.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,The length of the statement  "            string connString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ExcelFilePath + ";Extended Properties=Excel 8.0;"; " is 121.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,OutputToExcel,The length of the statement  "            string connString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ExcelFilePath + ";Extended Properties=Excel 8.0;"; " is 121.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,ExportData,The length of the statement  "            FileName = FileName + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString() + DateTime.Now.Millisecond.ToString(); " is 248.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,ExportData,The length of the statement  "                string filename = dt.Year.ToString() + dt.Month.ToString() + dt.Day.ToString() + dt.Hour.ToString() + dt.Minute.ToString() + dt.Second.ToString(); " is 146.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,GetExcelTables,The length of the statement  "                using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Excel 8.0;Data Source=" + ExcelFileName)) " is 145.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,InputFromExcel,The length of the statement  "            OleDbConnection dbcon = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ExcelFilePath + ";Extended Properties=Excel 8.0"); " is 145.
Long Statement,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,GetExcelTableColumns,The length of the statement  "                using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Excel 8.0;Data Source=" + ExcelFileName)) " is 145.
Long Statement,HD.Helper.Common,GridViewExport,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\GridViewExport.cs,OutputExcel,The length of the statement  "            s.Append("<HTML><HEAD><TITLE>" + fileName + "</TITLE><META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"></head><body>"); " is 140.
Long Statement,HD.Helper.Common,HtmlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\HtmlHelper.cs,GetImg,The length of the statement  "            if (MatchVale.IndexOf(".net") != -1 || MatchVale.IndexOf(".com") != -1 || MatchVale.IndexOf(".org") != -1 || MatchVale.IndexOf(".cn") != -1 || MatchVale.IndexOf(".cc") != -1 || MatchVale.IndexOf(".info") != -1 || MatchVale.IndexOf(".biz") != -1 || MatchVale.IndexOf(".tv") != -1) " is 279.
Long Statement,HD.Helper.Common,HtmlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\HtmlHelper.cs,alert,The length of the statement  "            System.Web.HttpContext.Current.Response.Write("<script language='javascript'>alert('" + str + "');location.href=" + url + "</script>"); " is 135.
Long Statement,HD.Helper.Common,WebClientHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\WebClientHelper.cs,CreateRequest,The length of the statement  "                ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(this.CheckValidationResult); " is 126.
Long Statement,HD.Helper.Common,WebClientHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\WebClientHelper.cs,SaveCookiesToDisk,The length of the statement  "                System.Runtime.Serialization.Formatters.Binary.BinaryFormatter formater = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); " is 143.
Long Statement,HD.Helper.Common,WebClientHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\WebClientHelper.cs,LoadCookiesFromDisk,The length of the statement  "                System.Runtime.Serialization.Formatters.Binary.BinaryFormatter formater = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); " is 143.
Long Statement,HD.Helper.Common,MessageBoxHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Message\MessageBoxHelper.cs,Show,The length of the statement  "           // page.RegisterStartupScript("message"' "<script language='javascript' defer>alert('" + msg.ToString() + "');</script>"); " is 122.
Long Statement,HD.Helper.Common,MessageBoxHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Message\MessageBoxHelper.cs,Show,The length of the statement  "            page.ClientScript.RegisterStartupScript(page.GetType()' "message"' "<script language='javascript' defer>alert('" + msg.ToString() + "');</script>"); " is 148.
Long Statement,HD.Helper.Common,MessageBoxHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Message\MessageBoxHelper.cs,ResponseScript,The length of the statement  "            page.ClientScript.RegisterStartupScript(page.GetType()' "message"' "<script language='javascript' defer>" + script + "</script>"); " is 130.
Long Statement,HD.Helper.Common,PageBase,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageBase.cs,PageBase_Load,The length of the statement  "                    Response.Write("<script defer>window.alert('您没有权限进入本页或当前登录用户已过期！\\n请重新登录或与管理员联系！');parent.location='" + virtualPath + "/Login.aspx';</script>"); " is 144.
Long Statement,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The length of the statement  "            Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3); " is 264.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsEmail,The length of the statement  "            return Regex.IsMatch(source' @"^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2'})$"' RegexOptions.IgnoreCase); " is 152.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,HasEmail,The length of the statement  "            return Regex.IsMatch(source' @"[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2'})"' RegexOptions.IgnoreCase); " is 150.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsUrl,The length of the statement  "            return Regex.IsMatch(source' @"^(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2'6})|([0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?$"' RegexOptions.IgnoreCase); " is 246.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,HasUrl,The length of the statement  "            return Regex.IsMatch(source' @"(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2'6})|([0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?"' RegexOptions.IgnoreCase); " is 244.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIP,The length of the statement  "            return Regex.IsMatch(source' @"^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$"' RegexOptions.IgnoreCase); " is 315.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,HasIP,The length of the statement  "            return Regex.IsMatch(source' @"(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])"' RegexOptions.IgnoreCase); " is 313.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The length of the statement  "            if (long.TryParse(Id.Remove(17)' out n) == false || n < Math.Pow(10' 16) || long.TryParse(Id.Replace('x'' '0').Replace('X'' '0')' out n) == false) " is 146.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The length of the statement  "            string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91"; " is 124.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The length of the statement  "            string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91"; " is 124.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsValidDate,The length of the statement  "            return Regex.IsMatch(strIn' @"^2d{3}-(?:0?[1-9]|1[0-2])-(?:0?[1-9]|[1-2]d|3[0-1])(?:0?[1-9]|1d|2[0-3]):(?:0?[1-9]|[1-5]d):(?:0?[1-9]|[1-5]d)$"); " is 144.
Long Statement,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsDate,The length of the statement  "            Regex reg = new Regex(@"^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-)) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$"); " is 349.
Long Statement,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Str,The length of the statement  "            char[] Pattern = new char[] { '0'' '1'' '2'' '3'' '4'' '5'' '6'' '7'' '8'' '9'' 'A'' 'B'' 'C'' 'D'' 'E'' 'F'' 'G'' 'H'' 'I'' 'J'' 'K'' 'L'' 'M'' 'N'' 'O'' 'P'' 'Q'' 'R'' 'S'' 'T'' 'U'' 'V'' 'W'' 'X'' 'Y'' 'Z' }; " is 211.
Long Statement,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Str_char,The length of the statement  "            char[] Pattern = new char[] { 'A'' 'B'' 'C'' 'D'' 'E'' 'F'' 'G'' 'H'' 'I'' 'J'' 'K'' 'L'' 'M'' 'N'' 'O'' 'P'' 'Q'' 'R'' 'S'' 'T'' 'U'' 'V'' 'W'' 'X'' 'Y'' 'Z' }; " is 161.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,ConvertFlv,The length of the statement  "            string Command = " -i \"" + vFileName + "\" -y -ab 32 -ar 22050 -b 800000 -s  480*360 \"" + ExportName + "\""; //FlvΈρΚ½      " is 120.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,CatchImg,The length of the statement  "            if ((!System.IO.File.Exists(ffmpegtool)) || (!System.IO.File.Exists(HttpContext.Current.Server.MapPath(vFileName)))) return ""; " is 127.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,CatchImg,The length of the statement  "                string Command = " -i " + HttpContext.Current.Server.MapPath(vFileName) + " -y -f image2 -t 0.1 -s " + sizeOfImg + " " + HttpContext.Current.Server.MapPath(flv_img_p); " is 167.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,ChangeFilePhy,The length of the statement  "            FilestartInfo.Arguments = " -i " + fileName + " -ab 56 -ar 22050 -b 500 -r 15 -s " + widthOfFile + "x" + heightOfFile + " " + flv_file; " is 135.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,CatchImg,The length of the statement  "            ImgstartInfo.Arguments = "   -i   " + fileName + "  -y  -f  image2   -ss 2 -vframes 1  -s   " + FlvImgSize + "   " + flv_img; " is 125.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,ChangeFileVir,The length of the statement  "            ImgstartInfo.Arguments = "   -i   " + fileName + "   -y   -f   image2   -t   0.001   -s   " + FlvImgSize + "   " + flv_img; " is 123.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,ChangeFileVir,The length of the statement  "            FilestartInfo.Arguments = " -i " + fileName + " -ab 56 -ar 22050 -b 500 -r 15 -s " + widthOfFile + "x" + heightOfFile + " " + flv_file; " is 135.
Long Statement,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,MChangeFilePhy,The length of the statement  "            FilestartInfo.Arguments = " " + vFileName + " -o " + flv_file + " -of lavf -lavfopts i_certify_that_my_video_stream_does_not_use_b_frames -oac mp3lame -lameopts abr:br=56 -ovc lavc -lavcopts vcodec=flv:vbitrate=200:mbd=2:mv0:trell:v4mv:cbp:last_pred=1:dia=-1:cmp=0:vb_strategy=1 -vf scale=" + widthOfFile + ":" + heightOfFile + " -ofps 12 -srate 22050"; " is 353.
Complex Conditional,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExpress,The conditional expression  "strExpression.IndexOf("+") != -1 || strExpression.IndexOf("-") != -1              || strExpression.IndexOf("*") != -1 || strExpression.IndexOf("/") != -1"  is complex.
Complex Conditional,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,SpiltExpression,The conditional expression  "strExpression.IndexOf("+") != -1 || strExpression.IndexOf("-") != -1              || strExpression.IndexOf("*") != -1 || strExpression.IndexOf("/") != -1"  is complex.
Complex Conditional,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,LockControl,The conditional expression  "ctl is Button || ctl is CheckBox || ctl is HyperLink || ctl is LinkButton                  || ctl is ListControl || ctl is TextBox"  is complex.
Complex Conditional,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,UnLockControl,The conditional expression  "ctl is Button || ctl is CheckBox || ctl is HyperLink || ctl is LinkButton                  || ctl is ListControl || ctl is TextBox"  is complex.
Complex Conditional,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The conditional expression  "!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250)"  is complex.
Complex Conditional,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The conditional expression  "!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250)"  is complex.
Complex Conditional,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The conditional expression  "!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250)"  is complex.
Complex Conditional,HD.Helper.Common,HtmlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\HtmlHelper.cs,GetImg,The conditional expression  "MatchVale.IndexOf(".net") != -1 || MatchVale.IndexOf(".com") != -1 || MatchVale.IndexOf(".org") != -1 || MatchVale.IndexOf(".cn") != -1 || MatchVale.IndexOf(".cc") != -1 || MatchVale.IndexOf(".info") != -1 || MatchVale.IndexOf(".biz") != -1 || MatchVale.IndexOf(".tv") != -1"  is complex.
Complex Conditional,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The conditional expression  "i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15)"  is complex.
Complex Conditional,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,TwistImage,The conditional expression  "nOldX >= 0 && nOldX < destBmp.Width                       && nOldY >= 0 && nOldY < destBmp.Height"  is complex.
Empty Catch Block,HD.Helper.Common,WebConfigHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Config\ConfigHelper.cs,GetConfigString,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,WebConfigHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Config\ConfigHelper.cs,GetConfigBool,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,WebConfigHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Config\ConfigHelper.cs,GetConfigDecimal,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,WebConfigHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Config\ConfigHelper.cs,GetConfigInt,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,DateDiff,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,FileValidation,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,IsAllowedExtension,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,DataToExcel,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\DataToExcel.cs,ClearFile,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,ExportData,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,XMLLoad,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,XMLLoad,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Read,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Read,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Read,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Insert,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Insert,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Update,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Update,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Update,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Delete,The method has an empty catch block.
Empty Catch Block,HD.Helper.Common,XmlHelperExt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\XML\XmlHelperExt.cs,Delete,The method has an empty catch block.
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,Get39Html,The following statement contains a magic number: return "<div style=\"background:#FFFFFF;padding:5px;font-size:" + (width * 10) + "px;font-family:'楷体';\">" + result_html + "</div>";
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: if (!Regex.IsMatch(s' @"^\d{12}$"))              {                  if (!Regex.IsMatch(s' @"^\d{13}$"))                  {                      return "存在不允许的字符！";                  }                  else                  {                      checkcode_input = int.Parse(s[12].ToString());                      s = s.Substring(0' 12);                  }              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: if (!Regex.IsMatch(s' @"^\d{12}$"))              {                  if (!Regex.IsMatch(s' @"^\d{13}$"))                  {                      return "存在不允许的字符！";                  }                  else                  {                      checkcode_input = int.Parse(s[12].ToString());                      s = s.Substring(0' 12);                  }              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 0; i < 12; i++)              {                  if (i % 2 == 0)                  {                      sum_odd += int.Parse(s[i].ToString());                  }                  else                  {                      sum_even += int.Parse(s[i].ToString());                  }              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 0; i < 12; i++)              {                  if (i % 2 == 0)                  {                      sum_odd += int.Parse(s[i].ToString());                  }                  else                  {                      sum_even += int.Parse(s[i].ToString());                  }              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: int checkcode = (10 - (sum_even * 3 + sum_odd) % 10) % 10;
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: int checkcode = (10 - (sum_even * 3 + sum_odd) % 10) % 10;
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: int checkcode = (10 - (sum_even * 3 + sum_odd) % 10) % 10;
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: int checkcode = (10 - (sum_even * 3 + sum_odd) % 10) % 10;
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 1; i < 7; i++)              {                  result_bin += ean13(s[i]' type[i - 1]);              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 7; i < 13; i++)              {                  result_bin += ean13(s[i]' 'C');              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 7; i < 13; i++)              {                  result_bin += ean13(s[i]' 'C');              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: int height_bottom = width * 5;
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: result_html += "<div style=\"float:left;color:#000000;width:" + (width * 9) + "px;text-align:center;\">" + s[0] + "</div>";
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 1; i < 7; i++)              {                  result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>";              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 1; i < 7; i++)              {                  result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>";              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 7; i < 13; i++)              {                  result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>";              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 7; i < 13; i++)              {                  result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>";              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: for (int i = 7; i < 13; i++)              {                  result_html += "<div style=\"float:left;width:" + (width * 7) + "px;color:#000000;text-align:center;\">" + s[i] + "</div>";              }
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: result_html += "<div style=\"float:left;color:#000000;width:" + (width * 9) + "px;\"></div>";
Magic Number,HD.Helper.Common,BarCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\BarCode\BarCodeHelper.cs,GetEAN13Html,The following statement contains a magic number: return "<div style=\"background:#FFFFFF;padding:0px;font-size:" + (width * 10) + "px;font-family:'楷体';\">" + result_html + "</div>";
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ChineseCalHelper,The following statement contains a magic number: for (i = 1; i <= 12; i++)              {                  //闰月                  if ((leap > 0) && (i == leap + 1) && (_cIsLeapMonth == false))                  {                      _cIsLeapMonth = true;                      i = i - 1;                      temp = GetChineseLeapMonthDays(_cYear); //计算闰月天数                  }                  else                  {                      _cIsLeapMonth = false;                      temp = GetChineseMonthDays(_cYear' i);  //计算非闰月天数                  }                    offset = offset - temp;                  if (offset <= 0) break;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseMonthDays,The following statement contains a magic number: if (BitTest32((LunarDateArray[year - MinYear] & 0x0000FFFF)' (16 - month)))              {                  return 30;              }              else              {                  return 29;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseMonthDays,The following statement contains a magic number: if (BitTest32((LunarDateArray[year - MinYear] & 0x0000FFFF)' (16 - month)))              {                  return 30;              }              else              {                  return 29;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseMonthDays,The following statement contains a magic number: if (BitTest32((LunarDateArray[year - MinYear] & 0x0000FFFF)' (16 - month)))              {                  return 30;              }              else              {                  return 29;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseLeapMonthDays,The following statement contains a magic number: if (GetChineseLeapMonth(year) != 0)              {                  if ((LunarDateArray[year - MinYear] & 0x10000) != 0)                  {                      return 30;                  }                  else                  {                      return 29;                  }              }              else              {                  return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseLeapMonthDays,The following statement contains a magic number: if (GetChineseLeapMonth(year) != 0)              {                  if ((LunarDateArray[year - MinYear] & 0x10000) != 0)                  {                      return 30;                  }                  else                  {                      return 29;                  }              }              else              {                  return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseYearDays,The following statement contains a magic number: sumDay = 348;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseYearDays,The following statement contains a magic number: for (int m = 0; m < 12; m++)              {                  f = info & i;                  if (f != 0)                  {                      sumDay++;                  }                  i = i >> 1;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: offset = _hour / 2;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: if (offset >= 12) offset = 0;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: i = ts.Days % 60;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: indexGan = ((i % 10 + 1) * 2 - 1) % 10 - 1;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: indexGan = ((i % 10 + 1) * 2 - 1) % 10 - 1;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: indexGan = ((i % 10 + 1) * 2 - 1) % 10 - 1;
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,GetChineseHour,The following statement contains a magic number: tmpGan = ganStr.Substring(indexGan) + ganStr.Substring(0' indexGan + 2);
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CheckChineseDateLimit,The following statement contains a magic number: if ((month < 1) || (month > 12))              {                  throw new Exception("非法农历日期");              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CheckChineseDateLimit,The following statement contains a magic number: if ((day < 1) || (day > 30)) //中国的月最多30天              {                  throw new Exception("非法农历日期");              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertNumToChineseNum,The following statement contains a magic number: switch (n)              {                  case '0':                      return HZNum[0].ToString();                  case '1':                      return HZNum[1].ToString();                  case '2':                      return HZNum[2].ToString();                  case '3':                      return HZNum[3].ToString();                  case '4':                      return HZNum[4].ToString();                  case '5':                      return HZNum[5].ToString();                  case '6':                      return HZNum[6].ToString();                  case '7':                      return HZNum[7].ToString();                  case '8':                      return HZNum[8].ToString();                  case '9':                      return HZNum[9].ToString();                  default:                      return "";              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,BitTest32,The following statement contains a magic number: if ((bitpostion > 31) || (bitpostion < 0))                  throw new Exception("Error Param: bitpostion[0-31]:" + bitpostion.ToString());
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,ConvertDayOfWeek,The following statement contains a magic number: switch (dayOfWeek)              {                  case DayOfWeek.Sunday:                      return 1;                  case DayOfWeek.Monday:                      return 2;                  case DayOfWeek.Tuesday:                      return 3;                  case DayOfWeek.Wednesday:                      return 4;                  case DayOfWeek.Thursday:                      return 5;                  case DayOfWeek.Friday:                      return 6;                  case DayOfWeek.Saturday:                      return 7;                  default:                      return 0;              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CompareWeekDayHoliday,The following statement contains a magic number: if (date.Month == month) //月份相同              {                  if (ConvertDayOfWeek(date.DayOfWeek) == day) //星期几相同                  {                      DateTime firstDay = new DateTime(date.Year' date.Month' 1);//生成当月第一天                      int i = ConvertDayOfWeek(firstDay.DayOfWeek);                      int firWeekDays = 7 - ConvertDayOfWeek(firstDay.DayOfWeek) + 1; //计算第一周剩余天数                        if (i > day)                      {                          if ((week - 1) * 7 + day + firWeekDays == date.Day)                          {                              ret = true;                          }                      }                      else                      {                          if (day + firWeekDays + (week - 2) * 7 == date.Day)                          {                              ret = true;                          }                      }                  }              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CompareWeekDayHoliday,The following statement contains a magic number: if (date.Month == month) //月份相同              {                  if (ConvertDayOfWeek(date.DayOfWeek) == day) //星期几相同                  {                      DateTime firstDay = new DateTime(date.Year' date.Month' 1);//生成当月第一天                      int i = ConvertDayOfWeek(firstDay.DayOfWeek);                      int firWeekDays = 7 - ConvertDayOfWeek(firstDay.DayOfWeek) + 1; //计算第一周剩余天数                        if (i > day)                      {                          if ((week - 1) * 7 + day + firWeekDays == date.Day)                          {                              ret = true;                          }                      }                      else                      {                          if (day + firWeekDays + (week - 2) * 7 == date.Day)                          {                              ret = true;                          }                      }                  }              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CompareWeekDayHoliday,The following statement contains a magic number: if (date.Month == month) //月份相同              {                  if (ConvertDayOfWeek(date.DayOfWeek) == day) //星期几相同                  {                      DateTime firstDay = new DateTime(date.Year' date.Month' 1);//生成当月第一天                      int i = ConvertDayOfWeek(firstDay.DayOfWeek);                      int firWeekDays = 7 - ConvertDayOfWeek(firstDay.DayOfWeek) + 1; //计算第一周剩余天数                        if (i > day)                      {                          if ((week - 1) * 7 + day + firWeekDays == date.Day)                          {                              ret = true;                          }                      }                      else                      {                          if (day + firWeekDays + (week - 2) * 7 == date.Day)                          {                              ret = true;                          }                      }                  }              }
Magic Number,HD.Helper.Common,ChineseCalHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\ChineseCalHelper.cs,CompareWeekDayHoliday,The following statement contains a magic number: if (date.Month == month) //月份相同              {                  if (ConvertDayOfWeek(date.DayOfWeek) == day) //星期几相同                  {                      DateTime firstDay = new DateTime(date.Year' date.Month' 1);//生成当月第一天                      int i = ConvertDayOfWeek(firstDay.DayOfWeek);                      int firWeekDays = 7 - ConvertDayOfWeek(firstDay.DayOfWeek) + 1; //计算第一周剩余天数                        if (i > day)                      {                          if ((week - 1) * 7 + day + firWeekDays == date.Day)                          {                              ret = true;                          }                      }                      else                      {                          if (day + firWeekDays + (week - 2) * 7 == date.Day)                          {                              ret = true;                          }                      }                  }              }
Magic Number,HD.Helper.Common,WebConfigHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Config\ConfigHelper.cs,GetConfigString,The following statement contains a magic number: if (objModel == null)              {                  try                  {                      objModel = ConfigurationManager.AppSettings[key];                       if (objModel != null)                      {                          CacheHelper.SetCache(CacheKey' objModel' DateTime.Now.AddMinutes(180)' TimeSpan.Zero);                      }                  }                  catch                  { }              }
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,Page_Load,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                     char rc = chars[random.Next(0' chars.Length)];                  if (validateCode.IndexOf(rc) > -1)                  {                      i--;                      continue;                  }                  validateCode += rc;              }
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The following statement contains a magic number: int iwidth = (int)(checkCode.Length * 11);
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The following statement contains a magic number: System.Drawing.Bitmap image = new System.Drawing.Bitmap(iwidth' 19);
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < checkCode.Length; i++)              {                  int cindex = rand.Next(7);                  Font f = new System.Drawing.Font("Microsoft Sans Serif"' 11);                  Brush b = new System.Drawing.SolidBrush(c[cindex]);                  g.DrawString(checkCode.Substring(i' 1)' f' b' (i * 10) + 1' 0' StringFormat.GenericDefault);              }
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < checkCode.Length; i++)              {                  int cindex = rand.Next(7);                  Font f = new System.Drawing.Font("Microsoft Sans Serif"' 11);                  Brush b = new System.Drawing.SolidBrush(c[cindex]);                  g.DrawString(checkCode.Substring(i' 1)' f' b' (i * 10) + 1' 0' StringFormat.GenericDefault);              }
Magic Number,HD.Helper.Common,ValidateImgPage,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\ValidateImgPage.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < checkCode.Length; i++)              {                  int cindex = rand.Next(7);                  Font f = new System.Drawing.Font("Microsoft Sans Serif"' 11);                  Brush b = new System.Drawing.SolidBrush(c[cindex]);                  g.DrawString(checkCode.Substring(i' 1)' f' b' (i * 10) + 1' 0' StringFormat.GenericDefault);              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following statement contains a magic number: try              {                  int intValue = Convert.ToInt32(value' from);  //先转成10进制                  string result = Convert.ToString(intValue' to);  //再转成目标进制                  if (to == 2)                  {                      int resultLength = result.Length;  //获取二进制的长度                      switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }                  }                  return result;              }              catch              {                    //LogHelper.WriteTraceLog(TraceLogLevel.Error' ex.Message);                  return "0";              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,BytesToInt32,The following statement contains a magic number: if (data.Length < 4)              {                  return 0;              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,BytesToInt32,The following statement contains a magic number: if (data.Length >= 4)              {                  //创建一个临时缓冲区                  byte[] tempBuffer = new byte[4];                    //将传入的字节数组的前4个字节复制到临时缓冲区                  Buffer.BlockCopy(data' 0' tempBuffer' 0' 4);                    //将临时缓冲区的值转换成整数，并赋给num                  num = BitConverter.ToInt32(tempBuffer' 0);              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,BytesToInt32,The following statement contains a magic number: if (data.Length >= 4)              {                  //创建一个临时缓冲区                  byte[] tempBuffer = new byte[4];                    //将传入的字节数组的前4个字节复制到临时缓冲区                  Buffer.BlockCopy(data' 0' tempBuffer' 0' 4);                    //将临时缓冲区的值转换成整数，并赋给num                  num = BitConverter.ToInt32(tempBuffer' 0);              }
Magic Number,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,BytesToInt32,The following statement contains a magic number: if (data.Length >= 4)              {                  //创建一个临时缓冲区                  byte[] tempBuffer = new byte[4];                    //将传入的字节数组的前4个字节复制到临时缓冲区                  Buffer.BlockCopy(data' 0' tempBuffer' 0' 4);                    //将临时缓冲区的值转换成整数，并赋给num                  num = BitConverter.ToInt32(tempBuffer' 0);              }
Magic Number,HD.Helper.Common,CookieHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Cookie\CookieHelper.cs,ClearCookie,The following statement contains a magic number: if (cookie != null)              {                  cookie.Expires = DateTime.Now.AddYears(-3);                  HttpContext.Current.Response.Cookies.Add(cookie);              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,SecondToMinute,The following statement contains a magic number: decimal mm = (decimal)((decimal)Second / (decimal)60);
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: int year = DateTime.Now.Year + month / 12;
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: if (month != 12)              {                  month = month % 12;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: if (month != 12)              {                  month = month % 12;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,TimeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Date\TimeHelper.cs,ReturnDateFormat,The following statement contains a magic number: switch (month)              {                  case 1:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 2:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      if (DateTime.IsLeapYear(DateTime.Now.Year))                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-29");                      else                          lastDay = DateTime.Now.ToString(year + "-0" + month + "-28");                      break;                  case 3:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString("yyyy-0" + month + "-31");                      break;                  case 4:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 5:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 6:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 7:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 8:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-31");                      break;                  case 9:                      firstDay = DateTime.Now.ToString(year + "-0" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-0" + month + "-30");                      break;                  case 10:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;                  case 11:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-30");                      break;                  default:                      firstDay = DateTime.Now.ToString(year + "-" + month + "-01");                      lastDay = DateTime.Now.ToString(year + "-" + month + "-31");                      break;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,EncodeBase64,The following statement contains a magic number: try              {                  char[] Base64Code = new char[]{'A'''B'''C'''D'''E'''F'''G'''H'''I'''J'''K'''L'''M'''N'''O'''P'''Q'''R'''S'''T''  											'U'''V'''W'''X'''Y'''Z'''a'''b'''c'''d'''e'''f'''g'''h'''i'''j'''k'''l'''m'''n''  											'o'''p'''q'''r'''s'''t'''u'''v'''w'''x'''y'''z'''0'''1'''2'''3'''4'''5'''6'''7''  											'8'''9'''+'''/'''='};                  byte empty = (byte)0;                  ArrayList byteMessage = new ArrayList(Encoding.Default.GetBytes(text));                  StringBuilder outmessage;                  int messageLen = byteMessage.Count;                  int page = messageLen / 3;                  int use = 0;                  if ((use = messageLen % 3) > 0)                  {                      for (int i = 0; i < 3 - use; i++)                          byteMessage.Add(empty);                      page++;                  }                  outmessage = new System.Text.StringBuilder(page * 4);                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[3];                      instr[0] = (byte)byteMessage[i * 3];                      instr[1] = (byte)byteMessage[i * 3 + 1];                      instr[2] = (byte)byteMessage[i * 3 + 2];                      int[] outstr = new int[4];                      outstr[0] = instr[0] >> 2;                      outstr[1] = ((instr[0] & 0x03) << 4) ^ (instr[1] >> 4);                      if (!instr[1].Equals(empty))                          outstr[2] = ((instr[1] & 0x0f) << 2) ^ (instr[2] >> 6);                      else                          outstr[2] = 64;                      if (!instr[2].Equals(empty))                          outstr[3] = (instr[2] & 0x3f);                      else                          outstr[3] = 64;                      outmessage.Append(Base64Code[outstr[0]]);                      outmessage.Append(Base64Code[outstr[1]]);                      outmessage.Append(Base64Code[outstr[2]]);                      outmessage.Append(Base64Code[outstr[3]]);                  }                  return outmessage.ToString();              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,Base64DEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\Base64DEncrypt.cs,DecodeBase64,The following statement contains a magic number: try              {                  if ((text.Length % 4) != 0)                  {                      return "包含不正确的BASE64编码";                  }                  if (!Regex.IsMatch(text' "^[A-Z0-9/+=]*$"' RegexOptions.IgnoreCase))                  {                      return "包含不正确的BASE64编码";                  }                  string Base64Code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                  int page = text.Length / 4;                  ArrayList outMessage = new ArrayList(page * 3);                  char[] message = text.ToCharArray();                  for (int i = 0; i < page; i++)                  {                      byte[] instr = new byte[4];                      instr[0] = (byte)Base64Code.IndexOf(message[i * 4]);                      instr[1] = (byte)Base64Code.IndexOf(message[i * 4 + 1]);                      instr[2] = (byte)Base64Code.IndexOf(message[i * 4 + 2]);                      instr[3] = (byte)Base64Code.IndexOf(message[i * 4 + 3]);                      byte[] outstr = new byte[3];                      outstr[0] = (byte)((instr[0] << 2) ^ ((instr[1] & 0x30) >> 4));                      if (instr[2] != 64)                      {                          outstr[1] = (byte)((instr[1] << 4) ^ ((instr[2] & 0x3c) >> 2));                      }                      else                      {                          outstr[2] = 0;                      }                      if (instr[3] != 64)                      {                          outstr[2] = (byte)((instr[2] << 6) ^ instr[3]);                      }                      else                      {                          outstr[2] = 0;                      }                      outMessage.Add(outstr[0]);                      if (outstr[1] != 0)                          outMessage.Add(outstr[1]);                      if (outstr[2] != 0)                          outMessage.Add(outstr[2]);                  }                  byte[] outbyte = (byte[])outMessage.ToArray(Type.GetType("System.Byte"));                  return Encoding.Default.GetString(outbyte);              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Encrypt,The following statement contains a magic number: des.Key = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8));
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Encrypt,The following statement contains a magic number: des.IV = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8));
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: len = Text.Length / 2;
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: for (x = 0; x < len; x++)              {                  i = Convert.ToInt32(Text.Substring(x * 2' 2)' 16);                  inputByteArray[x] = (byte)i;              }
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: for (x = 0; x < len; x++)              {                  i = Convert.ToInt32(Text.Substring(x * 2' 2)' 16);                  inputByteArray[x] = (byte)i;              }
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: for (x = 0; x < len; x++)              {                  i = Convert.ToInt32(Text.Substring(x * 2' 2)' 16);                  inputByteArray[x] = (byte)i;              }
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: des.Key = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8));
Magic Number,HD.Helper.Common,DESDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\DESDEncrypt.cs,Decrypt,The following statement contains a magic number: des.IV = ASCIIEncoding.ASCII.GetBytes(System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(sKey' "md5").Substring(0' 8));
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: sKey = new byte[8];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: sIV = new byte[8];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: for (int i = 0; i < 8; i++)                  sKey[i] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,EncryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: sKey = new byte[8];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: sIV = new byte[8];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: for (int i = 0; i < 8; i++)                  sKey[i] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDEncrypt,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\DEncrypt\FileDEncrypt.cs,DecryptFile,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  sIV[i - 8] = hb[i];
Magic Number,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,ResponseFile,The following statement contains a magic number: try              {                  FileStream myFile = new FileStream(_fullPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  BinaryReader br = new BinaryReader(myFile);                  try                  {                      _Response.AddHeader("Accept-Ranges"' "bytes");                      _Response.Buffer = false;                      long fileLength = myFile.Length;                      long startBytes = 0;                        int pack = 10240; //10K bytes                      //int sleep = 200;   //每秒5次   即5*10K bytes每秒                      int sleep = (int)Math.Floor((double)(1000 * pack / _speed)) + 1;                      if (_Request.Headers["Range"] != null)                      {                          _Response.StatusCode = 206;                          string[] range = _Request.Headers["Range"].Split(new char[] { '='' '-' });                          startBytes = Convert.ToInt64(range[1]);                      }                      _Response.AddHeader("Content-Length"' (fileLength - startBytes).ToString());                      if (startBytes != 0)                      {                          _Response.AddHeader("Content-Range"' string.Format(" bytes {0}-{1}/{2}"' startBytes' fileLength - 1' fileLength));                      }                      _Response.AddHeader("Connection"' "Keep-Alive");                      _Response.ContentType = "application/octet-stream";                      _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8));                        br.BaseStream.Seek(startBytes' SeekOrigin.Begin);                      int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;                        for (int i = 0; i < maxCount; i++)                      {                          if (_Response.IsClientConnected)                          {                              _Response.BinaryWrite(br.ReadBytes(pack));                              Thread.Sleep(sleep);                          }                          else                          {                              i = maxCount;                          }                      }                  }                  catch                  {                      return false;                  }                  finally                  {                      br.Close();                      myFile.Close();                  }              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,ResponseFile,The following statement contains a magic number: try              {                  FileStream myFile = new FileStream(_fullPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  BinaryReader br = new BinaryReader(myFile);                  try                  {                      _Response.AddHeader("Accept-Ranges"' "bytes");                      _Response.Buffer = false;                      long fileLength = myFile.Length;                      long startBytes = 0;                        int pack = 10240; //10K bytes                      //int sleep = 200;   //每秒5次   即5*10K bytes每秒                      int sleep = (int)Math.Floor((double)(1000 * pack / _speed)) + 1;                      if (_Request.Headers["Range"] != null)                      {                          _Response.StatusCode = 206;                          string[] range = _Request.Headers["Range"].Split(new char[] { '='' '-' });                          startBytes = Convert.ToInt64(range[1]);                      }                      _Response.AddHeader("Content-Length"' (fileLength - startBytes).ToString());                      if (startBytes != 0)                      {                          _Response.AddHeader("Content-Range"' string.Format(" bytes {0}-{1}/{2}"' startBytes' fileLength - 1' fileLength));                      }                      _Response.AddHeader("Connection"' "Keep-Alive");                      _Response.ContentType = "application/octet-stream";                      _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8));                        br.BaseStream.Seek(startBytes' SeekOrigin.Begin);                      int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;                        for (int i = 0; i < maxCount; i++)                      {                          if (_Response.IsClientConnected)                          {                              _Response.BinaryWrite(br.ReadBytes(pack));                              Thread.Sleep(sleep);                          }                          else                          {                              i = maxCount;                          }                      }                  }                  catch                  {                      return false;                  }                  finally                  {                      br.Close();                      myFile.Close();                  }              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,ResponseFile,The following statement contains a magic number: try              {                  FileStream myFile = new FileStream(_fullPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  BinaryReader br = new BinaryReader(myFile);                  try                  {                      _Response.AddHeader("Accept-Ranges"' "bytes");                      _Response.Buffer = false;                      long fileLength = myFile.Length;                      long startBytes = 0;                        int pack = 10240; //10K bytes                      //int sleep = 200;   //每秒5次   即5*10K bytes每秒                      int sleep = (int)Math.Floor((double)(1000 * pack / _speed)) + 1;                      if (_Request.Headers["Range"] != null)                      {                          _Response.StatusCode = 206;                          string[] range = _Request.Headers["Range"].Split(new char[] { '='' '-' });                          startBytes = Convert.ToInt64(range[1]);                      }                      _Response.AddHeader("Content-Length"' (fileLength - startBytes).ToString());                      if (startBytes != 0)                      {                          _Response.AddHeader("Content-Range"' string.Format(" bytes {0}-{1}/{2}"' startBytes' fileLength - 1' fileLength));                      }                      _Response.AddHeader("Connection"' "Keep-Alive");                      _Response.ContentType = "application/octet-stream";                      _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8));                        br.BaseStream.Seek(startBytes' SeekOrigin.Begin);                      int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;                        for (int i = 0; i < maxCount; i++)                      {                          if (_Response.IsClientConnected)                          {                              _Response.BinaryWrite(br.ReadBytes(pack));                              Thread.Sleep(sleep);                          }                          else                          {                              i = maxCount;                          }                      }                  }                  catch                  {                      return false;                  }                  finally                  {                      br.Close();                      myFile.Close();                  }              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,FileDownHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileDownHelper.cs,DownLoadBlock,The following statement contains a magic number: long chunkSize = 204800;
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExExpress,The following statement contains a magic number: switch (ExpressType)              {                  case EnumFormula.Sin:                      retValue = Math.Sin(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Cos:                      retValue = Math.Cos(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Tan:                      retValue = Math.Tan(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.ATan:                      retValue = Math.Atan(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Sqrt:                      retValue = Math.Sqrt(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Pow:                      retValue = Math.Pow(Convert.ToDouble(strExpression)' 2);                      break;              }
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetNextPos,The following statement contains a magic number: int[] ExpPos = new int[4];
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetNextPos,The following statement contains a magic number: ExpPos[2] = strExpression.IndexOf("*");
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetNextPos,The following statement contains a magic number: ExpPos[3] = strExpression.IndexOf("/");
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetPrivorPos,The following statement contains a magic number: int[] ExpPos = new int[4];
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetPrivorPos,The following statement contains a magic number: ExpPos[2] = strExpression.LastIndexOf("*");
Magic Number,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,GetPrivorPos,The following statement contains a magic number: ExpPos[3] = strExpression.LastIndexOf("/");
Magic Number,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentConfirm,The following statement contains a magic number: ShowCilentConfirm(control' eventName' "系统提示"' 210' 125' message);
Magic Number,HD.Helper.Common,JavaScriptHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\JavaScriptHelper.cs,ShowCilentConfirm,The following statement contains a magic number: ShowCilentConfirm(control' eventName' "系统提示"' 210' 125' message);
Magic Number,HD.Helper.Common,IpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\IpHelper.cs,GetUserIp,The following statement contains a magic number: if (ip.Length > 15)                  isErr = true;              else              {                  temp = ip.Split('.');                  if (temp.Length == 4)                  {                      for (int i = 0; i < temp.Length; i++)                      {                          if (temp[i].Length > 3) isErr = true;                      }                  }                  else                      isErr = true;              }
Magic Number,HD.Helper.Common,IpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\IpHelper.cs,GetUserIp,The following statement contains a magic number: if (ip.Length > 15)                  isErr = true;              else              {                  temp = ip.Split('.');                  if (temp.Length == 4)                  {                      for (int i = 0; i < temp.Length; i++)                      {                          if (temp[i].Length > 3) isErr = true;                      }                  }                  else                      isErr = true;              }
Magic Number,HD.Helper.Common,IpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\IpHelper.cs,GetUserIp,The following statement contains a magic number: if (ip.Length > 15)                  isErr = true;              else              {                  temp = ip.Split('.');                  if (temp.Length == 4)                  {                      for (int i = 0; i < temp.Length; i++)                      {                          if (temp[i].Length > 3) isErr = true;                      }                  }                  else                      isErr = true;              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,GetRelativeLevel,The following statement contains a magic number: int i = ApplicationPath == "" ? 1 : 2;
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,GetClientBrowserVersion,The following statement contains a magic number: string version = USER_AGENT.Substring(USER_AGENT.IndexOf("MSIE") + 5' 1);
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 500)              {                  sumpage = 500;              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 500)              {                  sumpage = 500;              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 500)              {                  sumpage = 500;              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 500)              {                  sumpage = 500;              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,PageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageHelper.cs,paging,The following statement contains a magic number: if (sumpage > 0)              {                  int n = sumpage;    //总页数                  int x = page;   //得到当前页                  int i;                  int endpage;                  string pageview = ""' pageviewtop = "";                  if (x > 1)                  {                      pageview += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                      pageviewtop += "&nbsp;&nbsp;<a class='pl' href='?page=1" + clinktail + "'>第1页</a> | ";                  }                  else                  {                      pageview += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                      pageviewtop += "&nbsp;&nbsp;<font color='#666666'> 第1页 </font> | ";                  }                    if (x > 1)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x - 1) + "" + clinktail + "'>上1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>上1页</font> ";                  }                    if (x > ((x - 1) / 10) * 10 && x > 10)                  {                      pageview += "<a class='pl' href='?page=" + ((x - 1) / 10) * 10 + "" + clinktail + "' onclink='return false;'>上10页</a>";                  }                    //if (((x-1) / 10) * 10 + 10) >= n )                  if (((x - 1) / 10) * 10 + 10 >= n)                  {                      endpage = n;                  }                  else                  {                      endpage = ((x - 1) / 10) * 10 + 10;                  }                    for (i = ((x - 1) / 10) * 10 + 1; i <= endpage; ++i)                  {                      if (i == x)                      {                          pageview += " <font color='#FF0000'><b>" + i + "</b></font>";                      }                      else                      {                          pageview += " <a class='pl' href='?page=" + i + "" + clinktail + "'>" + i + "</a>";                      }                  }                    if (x < n)                  {                      pageviewtop += " <a class='pl' href='?page=" + (x + 1) + "" + clinktail + "'>下1页</a> ";                  }                  else                  {                      pageviewtop += " <font color='#666666'>下1页</font> ";                  }                    if (endpage != n)                  {                      pageview += " <a class='pl' href='?page=" + (endpage + 1) + "" + clinktail + "' class='pl' onclink='return false;'>下10页</a> | ";                  }                  else                  {                      pageview += " | ";                  }                  if (x < n)                  {                      pageview += " <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                      pageviewtop += " |  <a class='pl' href='?page=" + n + "" + clinktail + "' class='pl'>第" + n + "页</a> ";                  }                  else                  {                      pageview += "<font color='#666666'> 第" + n + "页 </font>";                      pageviewtop += " | <font color='#666666'> 第" + n + "页 </font>";                  }                  page_view.Text = pageview.ToString();              }              else              {                  page_view.Text = "";              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,MakeThumbnail,The following statement contains a magic number: switch (mode)              {                  case "HW":  //指定高宽缩放（可能变形）                                      break;                  case "W":   //指定宽，高按比例                                          toheight = originalImage.Height * width / originalImage.Width;                      break;                  case "H":   //指定高，宽按比例                      towidth = originalImage.Width * height / originalImage.Height;                      break;                  case "Cut": //指定高宽裁减（不变形）                                      if ((double)originalImage.Width / (double)originalImage.Height > (double)towidth / (double)toheight)                      {                          oh = originalImage.Height;                          ow = originalImage.Height * towidth / toheight;                          y = 0;                          x = (originalImage.Width - ow) / 2;                      }                      else                      {                          ow = originalImage.Width;                          oh = originalImage.Width * height / towidth;                          x = 0;                          y = (originalImage.Height - oh) / 2;                      }                      break;                  default:                      break;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,MakeThumbnail,The following statement contains a magic number: switch (mode)              {                  case "HW":  //指定高宽缩放（可能变形）                                      break;                  case "W":   //指定宽，高按比例                                          toheight = originalImage.Height * width / originalImage.Width;                      break;                  case "H":   //指定高，宽按比例                      towidth = originalImage.Width * height / originalImage.Height;                      break;                  case "Cut": //指定高宽裁减（不变形）                                      if ((double)originalImage.Width / (double)originalImage.Height > (double)towidth / (double)toheight)                      {                          oh = originalImage.Height;                          ow = originalImage.Height * towidth / toheight;                          y = 0;                          x = (originalImage.Width - ow) / 2;                      }                      else                      {                          ow = originalImage.Width;                          oh = originalImage.Width * height / towidth;                          x = 0;                          y = (originalImage.Height - oh) / 2;                      }                      break;                  default:                      break;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  x = 10;                  y = 10;              }              else if (location == "T")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else if (location == "RT")              {                  x = img.Width - waterimg.Width;                  y = 10;              }              else if (location == "LC")              {                  x = 10;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - waterimg.Width;                  y = img.Height / 2 - waterimg.Height / 2;              }              else if (location == "LB")              {                  x = 10;                  y = img.Height - waterimg.Height;              }              else if (location == "B")              {                  x = img.Width / 2 - waterimg.Width / 2;                  y = img.Height - waterimg.Height;              }              else              {                  x = img.Width - waterimg.Width;                  y = img.Height - waterimg.Height;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: float x = 10;
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: float y = 10;
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,GetLocation,The following statement contains a magic number: if (location == "LT")              {                  loca.Add(x);                  loca.Add(y);              }              else if (location == "T")              {                  x = img.Width / 2 - (width * height) / 2;                  loca.Add(x);                  loca.Add(y);              }              else if (location == "RT")              {                  x = img.Width - width * height;              }              else if (location == "LC")              {                  y = img.Height / 2;              }              else if (location == "C")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height / 2;              }              else if (location == "RC")              {                  x = img.Width - height;                  y = img.Height / 2;              }              else if (location == "LB")              {                  y = img.Height - width - 5;              }              else if (location == "B")              {                  x = img.Width / 2 - (width * height) / 2;                  y = img.Height - width - 5;              }              else              {                  x = img.Width - width * height;                  y = img.Height - width - 5;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,RePic,The following statement contains a magic number: for (x = 0; x < width; x++)              {                  for (y = 0; y < height; y++)                  {                      pixel = mybm.GetPixel(x' y);//获取当前坐标的像素值                      resultR = 255 - pixel.R;//反红                      resultG = 255 - pixel.G;//反绿                      resultB = 255 - pixel.B;//反蓝                      bm.SetPixel(x' y' Color.FromArgb(resultR' resultG' resultB));//绘图                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,RePic,The following statement contains a magic number: for (x = 0; x < width; x++)              {                  for (y = 0; y < height; y++)                  {                      pixel = mybm.GetPixel(x' y);//获取当前坐标的像素值                      resultR = 255 - pixel.R;//反红                      resultG = 255 - pixel.G;//反绿                      resultB = 255 - pixel.B;//反蓝                      bm.SetPixel(x' y' Color.FromArgb(resultR' resultG' resultB));//绘图                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,RePic,The following statement contains a magic number: for (x = 0; x < width; x++)              {                  for (y = 0; y < height; y++)                  {                      pixel = mybm.GetPixel(x' y);//获取当前坐标的像素值                      resultR = 255 - pixel.R;//反红                      resultG = 255 - pixel.G;//反绿                      resultB = 255 - pixel.B;//反蓝                      bm.SetPixel(x' y' Color.FromArgb(resultR' resultG' resultB));//绘图                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,FD,The following statement contains a magic number: for (int x = 0; x < Width - 1; x++)              {                  for (int y = 0; y < Height - 1; y++)                  {                      int r = 0' g = 0' b = 0;                      color1 = oldBitmap.GetPixel(x' y);                      color2 = oldBitmap.GetPixel(x + 1' y + 1);                      r = Math.Abs(color1.R - color2.R + 128);                      g = Math.Abs(color1.G - color2.G + 128);                      b = Math.Abs(color1.B - color2.B + 128);                      if (r > 255) r = 255;                      if (r < 0) r = 0;                      if (g > 255) g = 255;                      if (g < 0) g = 0;                      if (b > 255) b = 255;                      if (b < 0) b = 0;                      newBitmap.SetPixel(x' y' Color.FromArgb(r' g' b));                  }              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Compress,The following statement contains a magic number: try              {                  System.Drawing.Image img = System.Drawing.Image.FromFile(oldfile);                  System.Drawing.Imaging.ImageFormat thisFormat = img.RawFormat;                  Size newSize = new Size(100' 125);                  Bitmap outBmp = new Bitmap(newSize.Width' newSize.Height);                  Graphics g = Graphics.FromImage(outBmp);                  g.CompositingQuality = CompositingQuality.HighQuality;                  g.SmoothingMode = SmoothingMode.HighQuality;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.DrawImage(img' new Rectangle(0' 0' newSize.Width' newSize.Height)' 0' 0' img.Width' img.Height' GraphicsUnit.Pixel);                  g.Dispose();                  EncoderParameters encoderParams = new EncoderParameters();                  long[] quality = new long[1];                  quality[0] = 100;                  EncoderParameter encoderParam = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality' quality);                  encoderParams.Param[0] = encoderParam;                  ImageCodecInfo[] arrayICI = ImageCodecInfo.GetImageEncoders();                  ImageCodecInfo jpegICI = null;                  for (int x = 0; x < arrayICI.Length; x++)                      if (arrayICI[x].FormatDescription.Equals("JPEG"))                      {                          jpegICI = arrayICI[x]; //设置JPEG编码                          break;                      }                  img.Dispose();                  if (jpegICI != null) outBmp.Save(newfile' System.Drawing.Imaging.ImageFormat.Jpeg);                  outBmp.Dispose();                  return true;              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Compress,The following statement contains a magic number: try              {                  System.Drawing.Image img = System.Drawing.Image.FromFile(oldfile);                  System.Drawing.Imaging.ImageFormat thisFormat = img.RawFormat;                  Size newSize = new Size(100' 125);                  Bitmap outBmp = new Bitmap(newSize.Width' newSize.Height);                  Graphics g = Graphics.FromImage(outBmp);                  g.CompositingQuality = CompositingQuality.HighQuality;                  g.SmoothingMode = SmoothingMode.HighQuality;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.DrawImage(img' new Rectangle(0' 0' newSize.Width' newSize.Height)' 0' 0' img.Width' img.Height' GraphicsUnit.Pixel);                  g.Dispose();                  EncoderParameters encoderParams = new EncoderParameters();                  long[] quality = new long[1];                  quality[0] = 100;                  EncoderParameter encoderParam = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality' quality);                  encoderParams.Param[0] = encoderParam;                  ImageCodecInfo[] arrayICI = ImageCodecInfo.GetImageEncoders();                  ImageCodecInfo jpegICI = null;                  for (int x = 0; x < arrayICI.Length; x++)                      if (arrayICI[x].FormatDescription.Equals("JPEG"))                      {                          jpegICI = arrayICI[x]; //设置JPEG编码                          break;                      }                  img.Dispose();                  if (jpegICI != null) outBmp.Save(newfile' System.Drawing.Imaging.ImageFormat.Jpeg);                  outBmp.Dispose();                  return true;              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Compress,The following statement contains a magic number: try              {                  System.Drawing.Image img = System.Drawing.Image.FromFile(oldfile);                  System.Drawing.Imaging.ImageFormat thisFormat = img.RawFormat;                  Size newSize = new Size(100' 125);                  Bitmap outBmp = new Bitmap(newSize.Width' newSize.Height);                  Graphics g = Graphics.FromImage(outBmp);                  g.CompositingQuality = CompositingQuality.HighQuality;                  g.SmoothingMode = SmoothingMode.HighQuality;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.DrawImage(img' new Rectangle(0' 0' newSize.Width' newSize.Height)' 0' 0' img.Width' img.Height' GraphicsUnit.Pixel);                  g.Dispose();                  EncoderParameters encoderParams = new EncoderParameters();                  long[] quality = new long[1];                  quality[0] = 100;                  EncoderParameter encoderParam = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality' quality);                  encoderParams.Param[0] = encoderParam;                  ImageCodecInfo[] arrayICI = ImageCodecInfo.GetImageEncoders();                  ImageCodecInfo jpegICI = null;                  for (int x = 0; x < arrayICI.Length; x++)                      if (arrayICI[x].FormatDescription.Equals("JPEG"))                      {                          jpegICI = arrayICI[x]; //设置JPEG编码                          break;                      }                  img.Dispose();                  if (jpegICI != null) outBmp.Save(newfile' System.Drawing.Imaging.ImageFormat.Jpeg);                  outBmp.Dispose();                  return true;              }              catch              {                  return false;              }
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Gray,The following statement contains a magic number: int rgb = Convert.ToInt32((double)(((0.3 * c.R) + (0.59 * c.G)) + (0.11 * c.B)));
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Gray,The following statement contains a magic number: int rgb = Convert.ToInt32((double)(((0.3 * c.R) + (0.59 * c.G)) + (0.11 * c.B)));
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,Gray,The following statement contains a magic number: int rgb = Convert.ToInt32((double)(((0.3 * c.R) + (0.59 * c.G)) + (0.11 * c.B)));
Magic Number,HD.Helper.Common,ImageHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageHelper.cs,BWPic,The following statement contains a magic number: for (x = 0; x < width; x++)              {                  for (y = 0; y < height; y++)                  {                      pixel = mybm.GetPixel(x' y);//获取当前坐标的像素值                      result = (pixel.R + pixel.G + pixel.B) / 3;//取红绿蓝三色的平均值                      bm.SetPixel(x' y' Color.FromArgb(result' result' result));                  }              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: if (!IsUpload(Ext))              {                  _Error = 2;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: if (iLen > _MaxSize)              {                  _Error = 3;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: try              {                  if (!Directory.Exists(_SavePath)) Directory.CreateDirectory(_SavePath);                  byte[] bData = new byte[iLen];                  hpFile.InputStream.Read(bData' 0' iLen);                  string FName;                  FName = FileName(Ext);                  string TempFile = "";                  if (_IsDraw)                  {                      TempFile = FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString();                  }                  else                  {                      TempFile = FName;                  }                  FileStream newFile = new FileStream(_SavePath + TempFile' FileMode.Create);                  newFile.Write(bData' 0' bData.Length);                  newFile.Flush();                  int _FileSizeTemp = hpFile.ContentLength;                    string ImageFilePath = _SavePath + FName;                  if (_IsDraw)                  {                      if (_DrawStyle == 0)                      {                          System.Drawing.Image Img1 = System.Drawing.Image.FromStream(newFile);                          Graphics g = Graphics.FromImage(Img1);                          g.DrawImage(Img1' 100' 100' Img1.Width' Img1.Height);                          Font f = new Font(_Font' _FontSize);                          Brush b = new SolidBrush(Color.Red);                          string addtext = _AddText;                          g.DrawString(addtext' f' b' _DrawString_x' _DrawString_y);                          g.Dispose();                          Img1.Save(ImageFilePath);                          Img1.Dispose();                      }                      else                      {                          System.Drawing.Image image = System.Drawing.Image.FromStream(newFile);                          System.Drawing.Image copyImage = System.Drawing.Image.FromFile(_CopyIamgePath);                          Graphics g = Graphics.FromImage(image);                          g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel);                          g.Dispose();                          image.Save(ImageFilePath);                          image.Dispose();                      }                  }                    //获取图片的高度和宽度                  System.Drawing.Image Img = System.Drawing.Image.FromStream(newFile);                  _Width = Img.Width;                  _Height = Img.Height;                    //生成缩略图部分                   if (_IsCreateImg)                  {                      #region 缩略图大小只设置了最大范围，并不是实际大小                      float realbili = (float)_Width / (float)_Height;                      float wishbili = (float)_sWidth / (float)_sHeight;                        //实际图比缩略图最大尺寸更宽矮，以宽为准                      if (realbili > wishbili)                      {                          _sHeight = (int)((float)_sWidth / realbili);                      }                      //实际图比缩略图最大尺寸更高长，以高为准                      else                      {                          _sWidth = (int)((float)_sHeight * realbili);                      }                      #endregion                        this.OutThumbFileName = FName.Split('.').GetValue(0).ToString() + "_s." + FName.Split('.').GetValue(1).ToString();                      string ImgFilePath = _SavePath + this.OutThumbFileName;                        System.Drawing.Image newImg = Img.GetThumbnailImage(_sWidth' _sHeight' null' System.IntPtr.Zero);                      newImg.Save(ImgFilePath);                      newImg.Dispose();                      _Iss = true;                  }                    if (_IsDraw)                  {                      if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString()))                      {                          newFile.Dispose();                          File.Delete(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString());                      }                  }                  newFile.Close();                  newFile.Dispose();                  _OutFileName = FName;                  _FileSize = _FileSizeTemp;                  _Error = 0;                  return;              }              catch (Exception ex)              {                  _Error = 4;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: try              {                  if (!Directory.Exists(_SavePath)) Directory.CreateDirectory(_SavePath);                  byte[] bData = new byte[iLen];                  hpFile.InputStream.Read(bData' 0' iLen);                  string FName;                  FName = FileName(Ext);                  string TempFile = "";                  if (_IsDraw)                  {                      TempFile = FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString();                  }                  else                  {                      TempFile = FName;                  }                  FileStream newFile = new FileStream(_SavePath + TempFile' FileMode.Create);                  newFile.Write(bData' 0' bData.Length);                  newFile.Flush();                  int _FileSizeTemp = hpFile.ContentLength;                    string ImageFilePath = _SavePath + FName;                  if (_IsDraw)                  {                      if (_DrawStyle == 0)                      {                          System.Drawing.Image Img1 = System.Drawing.Image.FromStream(newFile);                          Graphics g = Graphics.FromImage(Img1);                          g.DrawImage(Img1' 100' 100' Img1.Width' Img1.Height);                          Font f = new Font(_Font' _FontSize);                          Brush b = new SolidBrush(Color.Red);                          string addtext = _AddText;                          g.DrawString(addtext' f' b' _DrawString_x' _DrawString_y);                          g.Dispose();                          Img1.Save(ImageFilePath);                          Img1.Dispose();                      }                      else                      {                          System.Drawing.Image image = System.Drawing.Image.FromStream(newFile);                          System.Drawing.Image copyImage = System.Drawing.Image.FromFile(_CopyIamgePath);                          Graphics g = Graphics.FromImage(image);                          g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel);                          g.Dispose();                          image.Save(ImageFilePath);                          image.Dispose();                      }                  }                    //获取图片的高度和宽度                  System.Drawing.Image Img = System.Drawing.Image.FromStream(newFile);                  _Width = Img.Width;                  _Height = Img.Height;                    //生成缩略图部分                   if (_IsCreateImg)                  {                      #region 缩略图大小只设置了最大范围，并不是实际大小                      float realbili = (float)_Width / (float)_Height;                      float wishbili = (float)_sWidth / (float)_sHeight;                        //实际图比缩略图最大尺寸更宽矮，以宽为准                      if (realbili > wishbili)                      {                          _sHeight = (int)((float)_sWidth / realbili);                      }                      //实际图比缩略图最大尺寸更高长，以高为准                      else                      {                          _sWidth = (int)((float)_sHeight * realbili);                      }                      #endregion                        this.OutThumbFileName = FName.Split('.').GetValue(0).ToString() + "_s." + FName.Split('.').GetValue(1).ToString();                      string ImgFilePath = _SavePath + this.OutThumbFileName;                        System.Drawing.Image newImg = Img.GetThumbnailImage(_sWidth' _sHeight' null' System.IntPtr.Zero);                      newImg.Save(ImgFilePath);                      newImg.Dispose();                      _Iss = true;                  }                    if (_IsDraw)                  {                      if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString()))                      {                          newFile.Dispose();                          File.Delete(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString());                      }                  }                  newFile.Close();                  newFile.Dispose();                  _OutFileName = FName;                  _FileSize = _FileSizeTemp;                  _Error = 0;                  return;              }              catch (Exception ex)              {                  _Error = 4;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: try              {                  if (!Directory.Exists(_SavePath)) Directory.CreateDirectory(_SavePath);                  byte[] bData = new byte[iLen];                  hpFile.InputStream.Read(bData' 0' iLen);                  string FName;                  FName = FileName(Ext);                  string TempFile = "";                  if (_IsDraw)                  {                      TempFile = FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString();                  }                  else                  {                      TempFile = FName;                  }                  FileStream newFile = new FileStream(_SavePath + TempFile' FileMode.Create);                  newFile.Write(bData' 0' bData.Length);                  newFile.Flush();                  int _FileSizeTemp = hpFile.ContentLength;                    string ImageFilePath = _SavePath + FName;                  if (_IsDraw)                  {                      if (_DrawStyle == 0)                      {                          System.Drawing.Image Img1 = System.Drawing.Image.FromStream(newFile);                          Graphics g = Graphics.FromImage(Img1);                          g.DrawImage(Img1' 100' 100' Img1.Width' Img1.Height);                          Font f = new Font(_Font' _FontSize);                          Brush b = new SolidBrush(Color.Red);                          string addtext = _AddText;                          g.DrawString(addtext' f' b' _DrawString_x' _DrawString_y);                          g.Dispose();                          Img1.Save(ImageFilePath);                          Img1.Dispose();                      }                      else                      {                          System.Drawing.Image image = System.Drawing.Image.FromStream(newFile);                          System.Drawing.Image copyImage = System.Drawing.Image.FromFile(_CopyIamgePath);                          Graphics g = Graphics.FromImage(image);                          g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel);                          g.Dispose();                          image.Save(ImageFilePath);                          image.Dispose();                      }                  }                    //获取图片的高度和宽度                  System.Drawing.Image Img = System.Drawing.Image.FromStream(newFile);                  _Width = Img.Width;                  _Height = Img.Height;                    //生成缩略图部分                   if (_IsCreateImg)                  {                      #region 缩略图大小只设置了最大范围，并不是实际大小                      float realbili = (float)_Width / (float)_Height;                      float wishbili = (float)_sWidth / (float)_sHeight;                        //实际图比缩略图最大尺寸更宽矮，以宽为准                      if (realbili > wishbili)                      {                          _sHeight = (int)((float)_sWidth / realbili);                      }                      //实际图比缩略图最大尺寸更高长，以高为准                      else                      {                          _sWidth = (int)((float)_sHeight * realbili);                      }                      #endregion                        this.OutThumbFileName = FName.Split('.').GetValue(0).ToString() + "_s." + FName.Split('.').GetValue(1).ToString();                      string ImgFilePath = _SavePath + this.OutThumbFileName;                        System.Drawing.Image newImg = Img.GetThumbnailImage(_sWidth' _sHeight' null' System.IntPtr.Zero);                      newImg.Save(ImgFilePath);                      newImg.Dispose();                      _Iss = true;                  }                    if (_IsDraw)                  {                      if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString()))                      {                          newFile.Dispose();                          File.Delete(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString());                      }                  }                  newFile.Close();                  newFile.Dispose();                  _OutFileName = FName;                  _FileSize = _FileSizeTemp;                  _Error = 0;                  return;              }              catch (Exception ex)              {                  _Error = 4;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: try              {                  if (!Directory.Exists(_SavePath)) Directory.CreateDirectory(_SavePath);                  byte[] bData = new byte[iLen];                  hpFile.InputStream.Read(bData' 0' iLen);                  string FName;                  FName = FileName(Ext);                  string TempFile = "";                  if (_IsDraw)                  {                      TempFile = FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString();                  }                  else                  {                      TempFile = FName;                  }                  FileStream newFile = new FileStream(_SavePath + TempFile' FileMode.Create);                  newFile.Write(bData' 0' bData.Length);                  newFile.Flush();                  int _FileSizeTemp = hpFile.ContentLength;                    string ImageFilePath = _SavePath + FName;                  if (_IsDraw)                  {                      if (_DrawStyle == 0)                      {                          System.Drawing.Image Img1 = System.Drawing.Image.FromStream(newFile);                          Graphics g = Graphics.FromImage(Img1);                          g.DrawImage(Img1' 100' 100' Img1.Width' Img1.Height);                          Font f = new Font(_Font' _FontSize);                          Brush b = new SolidBrush(Color.Red);                          string addtext = _AddText;                          g.DrawString(addtext' f' b' _DrawString_x' _DrawString_y);                          g.Dispose();                          Img1.Save(ImageFilePath);                          Img1.Dispose();                      }                      else                      {                          System.Drawing.Image image = System.Drawing.Image.FromStream(newFile);                          System.Drawing.Image copyImage = System.Drawing.Image.FromFile(_CopyIamgePath);                          Graphics g = Graphics.FromImage(image);                          g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel);                          g.Dispose();                          image.Save(ImageFilePath);                          image.Dispose();                      }                  }                    //获取图片的高度和宽度                  System.Drawing.Image Img = System.Drawing.Image.FromStream(newFile);                  _Width = Img.Width;                  _Height = Img.Height;                    //生成缩略图部分                   if (_IsCreateImg)                  {                      #region 缩略图大小只设置了最大范围，并不是实际大小                      float realbili = (float)_Width / (float)_Height;                      float wishbili = (float)_sWidth / (float)_sHeight;                        //实际图比缩略图最大尺寸更宽矮，以宽为准                      if (realbili > wishbili)                      {                          _sHeight = (int)((float)_sWidth / realbili);                      }                      //实际图比缩略图最大尺寸更高长，以高为准                      else                      {                          _sWidth = (int)((float)_sHeight * realbili);                      }                      #endregion                        this.OutThumbFileName = FName.Split('.').GetValue(0).ToString() + "_s." + FName.Split('.').GetValue(1).ToString();                      string ImgFilePath = _SavePath + this.OutThumbFileName;                        System.Drawing.Image newImg = Img.GetThumbnailImage(_sWidth' _sHeight' null' System.IntPtr.Zero);                      newImg.Save(ImgFilePath);                      newImg.Dispose();                      _Iss = true;                  }                    if (_IsDraw)                  {                      if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString()))                      {                          newFile.Dispose();                          File.Delete(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString());                      }                  }                  newFile.Close();                  newFile.Dispose();                  _OutFileName = FName;                  _FileSize = _FileSizeTemp;                  _Error = 0;                  return;              }              catch (Exception ex)              {                  _Error = 4;                  return;              }
Magic Number,HD.Helper.Common,ImageUpload,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Image\ImageUpload.cs,Upload,The following statement contains a magic number: try              {                  if (!Directory.Exists(_SavePath)) Directory.CreateDirectory(_SavePath);                  byte[] bData = new byte[iLen];                  hpFile.InputStream.Read(bData' 0' iLen);                  string FName;                  FName = FileName(Ext);                  string TempFile = "";                  if (_IsDraw)                  {                      TempFile = FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString();                  }                  else                  {                      TempFile = FName;                  }                  FileStream newFile = new FileStream(_SavePath + TempFile' FileMode.Create);                  newFile.Write(bData' 0' bData.Length);                  newFile.Flush();                  int _FileSizeTemp = hpFile.ContentLength;                    string ImageFilePath = _SavePath + FName;                  if (_IsDraw)                  {                      if (_DrawStyle == 0)                      {                          System.Drawing.Image Img1 = System.Drawing.Image.FromStream(newFile);                          Graphics g = Graphics.FromImage(Img1);                          g.DrawImage(Img1' 100' 100' Img1.Width' Img1.Height);                          Font f = new Font(_Font' _FontSize);                          Brush b = new SolidBrush(Color.Red);                          string addtext = _AddText;                          g.DrawString(addtext' f' b' _DrawString_x' _DrawString_y);                          g.Dispose();                          Img1.Save(ImageFilePath);                          Img1.Dispose();                      }                      else                      {                          System.Drawing.Image image = System.Drawing.Image.FromStream(newFile);                          System.Drawing.Image copyImage = System.Drawing.Image.FromFile(_CopyIamgePath);                          Graphics g = Graphics.FromImage(image);                          g.DrawImage(copyImage' new Rectangle(image.Width - copyImage.Width - 5' image.Height - copyImage.Height - 5' copyImage.Width' copyImage.Height)' 0' 0' copyImage.Width' copyImage.Height' GraphicsUnit.Pixel);                          g.Dispose();                          image.Save(ImageFilePath);                          image.Dispose();                      }                  }                    //获取图片的高度和宽度                  System.Drawing.Image Img = System.Drawing.Image.FromStream(newFile);                  _Width = Img.Width;                  _Height = Img.Height;                    //生成缩略图部分                   if (_IsCreateImg)                  {                      #region 缩略图大小只设置了最大范围，并不是实际大小                      float realbili = (float)_Width / (float)_Height;                      float wishbili = (float)_sWidth / (float)_sHeight;                        //实际图比缩略图最大尺寸更宽矮，以宽为准                      if (realbili > wishbili)                      {                          _sHeight = (int)((float)_sWidth / realbili);                      }                      //实际图比缩略图最大尺寸更高长，以高为准                      else                      {                          _sWidth = (int)((float)_sHeight * realbili);                      }                      #endregion                        this.OutThumbFileName = FName.Split('.').GetValue(0).ToString() + "_s." + FName.Split('.').GetValue(1).ToString();                      string ImgFilePath = _SavePath + this.OutThumbFileName;                        System.Drawing.Image newImg = Img.GetThumbnailImage(_sWidth' _sHeight' null' System.IntPtr.Zero);                      newImg.Save(ImgFilePath);                      newImg.Dispose();                      _Iss = true;                  }                    if (_IsDraw)                  {                      if (File.Exists(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString()))                      {                          newFile.Dispose();                          File.Delete(_SavePath + FName.Split('.').GetValue(0).ToString() + "_temp." + FName.Split('.').GetValue(1).ToString());                      }                  }                  newFile.Close();                  newFile.Dispose();                  _OutFileName = FName;                  _FileSize = _FileSizeTemp;                  _Error = 0;                  return;              }              catch (Exception ex)              {                  _Error = 4;                  return;              }
Magic Number,HD.Helper.Common,NetHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\NetHelper.cs,GetValidPort,The following statement contains a magic number: const int MAXPORT = 65535;
Magic Number,HD.Helper.Common,NetHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\NetHelper.cs,StartListen,The following statement contains a magic number: socket.Listen(100);
Magic Number,HD.Helper.Common,NetHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\NetHelper.cs,ReceiveMsg,The following statement contains a magic number: byte[] buffer = new byte[5000];
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataColumn item in dtSource.Columns)              {                  //GBK对应的code page是CP936                  arrColWidth[item.Ordinal] = Encoding.GetEncoding(936).GetBytes(item.ColumnName.ToString()).Length;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: for (int i = 0; i < dtSource.Rows.Count; i++)              {                  for (int j = 0; j < dtSource.Columns.Count; j++)                  {                      int intTemp = Encoding.GetEncoding(936).GetBytes(dtSource.Rows[i][j].ToString()).Length;                      if (intTemp > arrColWidth[j])                      {                          arrColWidth[j] = intTemp;                      }                  }              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,NPOIHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\NPOI\NPOIHelper.cs,Export,The following statement contains a magic number: foreach (DataRow row in dtSource.Rows)              {                  #region 新建表，填充表头，填充列头，样式                  if (rowIndex == 65535 || rowIndex == 0)                  {                      if (rowIndex != 0)                      {                          sheet = workbook.CreateSheet();                      }                        #region 表头及样式                      {                          IRow headerRow = sheet.CreateRow(0);                          headerRow.HeightInPoints = 25;                          headerRow.CreateCell(0).SetCellValue(strHeaderText);                            ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 20;                          font.Boldweight = 700;                          headStyle.SetFont(font);                            headerRow.GetCell(0).CellStyle = headStyle;                            sheet.AddMergedRegion(new CellRangeAddress(0' 0' 0' dtSource.Columns.Count - 1));                      }                      #endregion                          #region 列头及样式                      {                          IRow headerRow = sheet.CreateRow(1);                          ICellStyle headStyle = workbook.CreateCellStyle();                          headStyle.Alignment = HorizontalAlignment.CENTER;                          IFont font = workbook.CreateFont();                          font.FontHeightInPoints = 10;                          font.Boldweight = 700;                          headStyle.SetFont(font);                              foreach (DataColumn column in dtSource.Columns)                          {                              headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);                              headerRow.GetCell(column.Ordinal).CellStyle = headStyle;                                //设置列宽                                sheet.SetColumnWidth(column.Ordinal' (arrColWidth[column.Ordinal] + 1) * 256);                            }                      }                      #endregion                        rowIndex = 2;                  }                  #endregion                      #region 填充内容                  ICellStyle contentStyle = workbook.CreateCellStyle();                  contentStyle.Alignment = HorizontalAlignment.LEFT;                  IRow dataRow = sheet.CreateRow(rowIndex);                  foreach (DataColumn column in dtSource.Columns)                  {                      ICell newCell = dataRow.CreateCell(column.Ordinal);                      newCell.CellStyle = contentStyle;                        string drValue = row[column].ToString();                        switch (column.DataType.ToString())                      {                          case "System.String"://字符串类型                                newCell.SetCellValue(drValue);                              break;                          case "System.DateTime"://日期类型                                DateTime dateV;                              DateTime.TryParse(drValue' out dateV);                              newCell.SetCellValue(dateV);                                newCell.CellStyle = dateStyle;//格式化显示                                break;                          case "System.Boolean"://布尔型                                bool boolV = false;                              bool.TryParse(drValue' out boolV);                              newCell.SetCellValue(boolV);                              break;                          case "System.Int16"://整型                            case "System.Int32":                          case "System.Int64":                          case "System.Byte":                              int intV = 0;                              int.TryParse(drValue' out intV);                              newCell.SetCellValue(intV);                              break;                          case "System.Decimal"://浮点型                            case "System.Double":                              double doubV = 0;                              double.TryParse(drValue' out doubV);                              newCell.SetCellValue(doubV);                              break;                          case "System.DBNull"://空值处理                                newCell.SetCellValue("");                              break;                          default:                              newCell.SetCellValue("");                              break;                      }                    }                  #endregion                    rowIndex++;              }
Magic Number,HD.Helper.Common,DataToExcel,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\DataToExcel.cs,ClearFile,The following statement contains a magic number: if (Files.Length > 10)              {                  for (int i = 0; i < 10; i++)                  {                      try                      {                          System.IO.File.Delete(Files[i]);                      }                      catch                      {                      }                    }              }
Magic Number,HD.Helper.Common,DataToExcel,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\DataToExcel.cs,ClearFile,The following statement contains a magic number: if (Files.Length > 10)              {                  for (int i = 0; i < 10; i++)                  {                      try                      {                          System.IO.File.Delete(Files[i]);                      }                      catch                      {                      }                    }              }
Magic Number,HD.Helper.Common,ExcelHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Excel\ExcelHelper.cs,GetExcelTables,The following statement contains a magic number: if (File.Exists(ExcelFileName))              {                  using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Excel 8.0;Data Source=" + ExcelFileName))                  {                      try                      {                          conn.Open();                          dt = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables' new object[] { null' null' null' "TABLE" });                      }                      catch (Exception exp)                      {                          throw exp;                      }                        //获取数据表个数                      int tablecount = dt.Rows.Count;                      for (int i = 0; i < tablecount; i++)                      {                          string tablename = dt.Rows[i][2].ToString().Trim().TrimEnd('$');                          if (TablesList.IndexOf(tablename) < 0)                          {                              TablesList.Add(tablename);                          }                      }                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,FTPClient,The following statement contains a magic number: strRemotePort = 21;
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 220)              {                  DisConnect();                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 220)              {                  DisConnect();                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (!(iReplyCode == 331 || iReplyCode == 230))              {                  CloseSocketConnect();                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (!(iReplyCode == 331 || iReplyCode == 230))              {                  CloseSocketConnect();                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (!(iReplyCode == 331 || iReplyCode == 230))              {                  CloseSocketConnect();                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 230)              {                  SendCommand("PASS " + strRemotePass);                  if (!(iReplyCode == 230 || iReplyCode == 202))                  {                      CloseSocketConnect();                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 230)              {                  SendCommand("PASS " + strRemotePass);                  if (!(iReplyCode == 230 || iReplyCode == 202))                  {                      CloseSocketConnect();                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 230)              {                  SendCommand("PASS " + strRemotePass);                  if (!(iReplyCode == 230 || iReplyCode == 202))                  {                      CloseSocketConnect();                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Connect,The following statement contains a magic number: if (iReplyCode != 230)              {                  SendCommand("PASS " + strRemotePass);                  if (!(iReplyCode == 230 || iReplyCode == 202))                  {                      CloseSocketConnect();                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,SetTransferType,The following statement contains a magic number: if (iReplyCode != 200)              {                  throw new IOException(strReply.Substring(4));              }              else              {                  trType = ttType;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,SetTransferType,The following statement contains a magic number: if (iReplyCode != 200)              {                  throw new IOException(strReply.Substring(4));              }              else              {                  trType = ttType;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (iReplyCode != 226)              {                  ReadReply();                  if (iReplyCode != 226)                  {                        throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (iReplyCode != 226)              {                  ReadReply();                  if (iReplyCode != 226)                  {                        throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Dir,The following statement contains a magic number: if (iReplyCode != 226)              {                  ReadReply();                  if (iReplyCode != 226)                  {                        throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,newPutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileSize,The following statement contains a magic number: if (iReplyCode == 213)              {                  lSize = Int64.Parse(strReply.Substring(4));              }              else              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileSize,The following statement contains a magic number: if (iReplyCode == 213)              {                  lSize = Int64.Parse(strReply.Substring(4));              }              else              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileSize,The following statement contains a magic number: if (iReplyCode == 213)              {                  lSize = Int64.Parse(strReply.Substring(4));              }              else              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125                  || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetFileInfo,The following statement contains a magic number: byte[] b = new byte[512];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Delete,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Delete,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Rename,The following statement contains a magic number: if (iReplyCode != 350)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Rename,The following statement contains a magic number: if (iReplyCode != 350)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Rename,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Rename,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Get,The following statement contains a magic number: try              {                  if (!bConnected)                  {                      Connect();                  }                  SetTransferType(TransferType.Binary);                  if (strLocalFileName.Equals(""))                  {                      strLocalFileName = strRemoteFileName;                  }                  SendCommand("RETR " + strRemoteFileName);                  if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }                  FileStream output = new FileStream(strFolder + "\\" + strLocalFileName' FileMode.Create);                  while (true)                  {                      int iBytes = socketData.Receive(buffer' buffer.Length' 0);                      output.Write(buffer' 0' iBytes);                      if (iBytes <= 0)                      {                          break;                      }                  }                  output.Close();                  if (socketData.Connected)                  {                      socketData.Close();                  }                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      ReadReply();                      if (!(iReplyCode == 226 || iReplyCode == 250))                      {                          throw new IOException(strReply.Substring(4));                      }                  }              }              catch              {                  socketData.Close();                  socketData = null;                  socketControl.Close();                  bConnected = false;                  socketControl = null;              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 150 || iReplyCode == 125 || iReplyCode == 226 || iReplyCode == 250))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,GetNoBinary,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,Put,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 125 || iReplyCode == 150))              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,PutByGuid,The following statement contains a magic number: if (!(iReplyCode == 226 || iReplyCode == 250))              {                  ReadReply();                  if (!(iReplyCode == 226 || iReplyCode == 250))                  {                      throw new IOException(strReply.Substring(4));                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,MkDir,The following statement contains a magic number: if (iReplyCode != 257)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,MkDir,The following statement contains a magic number: if (iReplyCode != 257)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,RmDir,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,RmDir,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ChDir,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ChDir,The following statement contains a magic number: if (iReplyCode != 250)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ReadReply,The following statement contains a magic number: iReplyCode = Int32.Parse(strReply.Substring(0' 3));
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: if (iReplyCode != 227)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: if (iReplyCode != 227)              {                  throw new IOException(strReply.Substring(4));              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: int[] parts = new int[6];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: for (int i = 0; i < len && partCount <= 6; i++)              {                  char ch = Char.Parse(ipData.Substring(i' 1));                  if (Char.IsDigit(ch))                      buf += ch;                  else if (ch != ''')                  {                      throw new IOException("Malformed PASV strReply: " + strReply);                  }                  if (ch == ''' || i + 1 == len)                  {                      try                      {                          parts[partCount++] = Int32.Parse(buf);                          buf = "";                      }                      catch (Exception)                      {                          throw new IOException("Malformed PASV strReply: " + strReply);                      }                  }              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: string ipAddress = parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: string ipAddress = parts[0] + "." + parts[1] + "." + parts[2] + "." + parts[3];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: int port = (parts[4] << 8) + parts[5];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: int port = (parts[4] << 8) + parts[5];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,CreateDataSocket,The following statement contains a magic number: int port = (parts[4] << 8) + parts[5];
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ReadLine,The following statement contains a magic number: if (strMsg.Length > 2)              {                  strMsg = mess[mess.Length - 2];              }              else              {                  strMsg = mess[0];              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ReadLine,The following statement contains a magic number: if (strMsg.Length > 2)              {                  strMsg = mess[mess.Length - 2];              }              else              {                  strMsg = mess[0];              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,ReadLine,The following statement contains a magic number: if (!strMsg.Substring(3' 1).Equals(" ")) //·µ»ΨΧΦ·ϋ΄®ΥύΘ·µΔΚΗΤΣ¦΄πΒλ(Θη220ΏΝ·'ΊσΓζ½Σ»ΏΥΈρ'ΤΩ½ΣΞΚΊςΧΦ·ϋ΄®)              {                  return ReadLine();              }
Magic Number,HD.Helper.Common,FTPClient,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\FTP\FTPClient.cs,SendCommand,The following statement contains a magic number: lock (obj)              {                  Byte[] cmdBytes = Encoding.ASCII.GetBytes((strCommand + "\r\n").ToCharArray());                  socketControl.Send(cmdBytes' cmdBytes.Length' 0);                  Thread.Sleep(500);                  ReadReply();              }
Magic Number,HD.Helper.Common,HtmlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Html\HtmlHelper.cs,Get_Http,The following statement contains a magic number: try              {                  HttpWebRequest hwr = (HttpWebRequest)HttpWebRequest.Create(tUrl);                  hwr.Timeout = 19600;                  HttpWebResponse hwrs = (HttpWebResponse)hwr.GetResponse();                  Stream myStream = hwrs.GetResponseStream();                  StreamReader sr = new StreamReader(myStream' Encoding.Default);                  StringBuilder sb = new StringBuilder();                  while (-1 != sr.Peek())                  {                      sb.Append(sr.ReadLine() + "\r\n");                  }                  strResult = sb.ToString();                  hwrs.Close();              }              catch (Exception ee)              {                  strResult = ee.Message;              }
Magic Number,HD.Helper.Common,WebClientHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Net\WebClientHelper.cs,GetData,The following statement contains a magic number: if (ResponseHeaders[HttpResponseHeader.ContentEncoding] != null)              {                  MemoryStream msTemp = new MemoryStream();                  count = 0;                  buf = new byte[100];                  switch (ResponseHeaders[HttpResponseHeader.ContentEncoding].ToLower())                  {                      case "gzip":                          GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                          while ((count = gzip.Read(buf' 0' buf.Length)) > 0)                          {                              msTemp.Write(buf' 0' count);                          }                          return msTemp.ToArray();                      case "deflate":                          DeflateStream deflate = new DeflateStream(ms' CompressionMode.Decompress);                          while ((count = deflate.Read(buf' 0' buf.Length)) > 0)                          {                              msTemp.Write(buf' 0' count);                          }                          return msTemp.ToArray();                      default:                          break;                  }              }
Magic Number,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,IniReadValue,The following statement contains a magic number: StringBuilder temp = new StringBuilder(255);
Magic Number,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,IniReadValue,The following statement contains a magic number: int i = GetPrivateProfileString(Section'Key'""'temp' 255' this.path);
Magic Number,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,IniReadValues,The following statement contains a magic number: byte[] temp = new byte[255];
Magic Number,HD.Helper.Common,INIFileHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\INIFileHelper.cs,IniReadValues,The following statement contains a magic number: int i = GetPrivateProfileString(section' key' ""' temp' 255' this.path);
Magic Number,HD.Helper.Common,PageValidate,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Page\PageValidate.cs,Text_Length,The following statement contains a magic number: for (int i = 0; i < Text.Length; i++)              {                  byte[] byte_len = Encoding.Default.GetBytes(Text.Substring(i' 1));                  if (byte_len.Length > 1)                      len += 2;  //如果长度大于1，是中文，占两个字节，+2                  else                      len += 1;  //如果长度等于1，是英文，占一个字节，+1              }
Magic Number,HD.Helper.Common,WebSitePathHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Path\WebSitePathHelper.cs,GetWebPath,The following statement contains a magic number: if (localPath.StartsWith("~/"))              {                  thisLocalPath = localPath.Substring(2);              }              else              {                  return localPath;              }
Magic Number,HD.Helper.Common,RandomHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Random\RandomHelper.cs,GenerateCheckCodeNum,The following statement contains a magic number: for (int i = 0; i < codeCount; i++)              {                  int num = random.Next();                  str = str + ((char)(0x30 + ((ushort)(num % 10)))).ToString();              }
Magic Number,HD.Helper.Common,RandomHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Random\RandomHelper.cs,GenerateCheckCode,The following statement contains a magic number: for (int i = 0; i < codeCount; i++)              {                  char ch;                  int num = random.Next();                  if ((num % 2) == 0)                  {                      ch = (char)(0x30 + ((ushort)(num % 10)));                  }                  else                  {                      ch = (char)(0x41 + ((ushort)(num % 0x1a)));                  }                  str = str + ch.ToString();              }
Magic Number,HD.Helper.Common,RandomHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Random\RandomHelper.cs,GenerateCheckCode,The following statement contains a magic number: for (int i = 0; i < codeCount; i++)              {                  char ch;                  int num = random.Next();                  if ((num % 2) == 0)                  {                      ch = (char)(0x30 + ((ushort)(num % 10)));                  }                  else                  {                      ch = (char)(0x41 + ((ushort)(num % 0x1a)));                  }                  str = str + ch.ToString();              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: num = Math.Round(Math.Abs(num)' 2);
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: str4 = ((long)(num * 100)).ToString();
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: if (j > 15) { return "溢出"; }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: str2 = str2.Substring(15 - j);
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,RMBHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\RMB\RMBHelper.cs,CmycurD,The following statement contains a magic number: for (i = 0; i < j; i++)              {                  str3 = str4.Substring(i' 1);          //取出需转换的某一位的值                   temp = Convert.ToInt32(str3);      //转换为数字                   if (i != (j - 3) && i != (j - 7) && i != (j - 11) && i != (j - 15))                  {                      //当所取位数不为元、万、亿、万亿上的数字时                       if (str3 == "0")                      {                          ch1 = "";                          ch2 = "";                          nzero = nzero + 1;                      }                      else                      {                          if (str3 != "0" && nzero != 0)                          {                              ch1 = "零" + str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                      }                  }                  else                  {                      //该位是万亿，亿，万，元位等关键位                       if (str3 != "0" && nzero != 0)                      {                          ch1 = "零" + str1.Substring(temp * 1' 1);                          ch2 = str2.Substring(i' 1);                          nzero = 0;                      }                      else                      {                          if (str3 != "0" && nzero == 0)                          {                              ch1 = str1.Substring(temp * 1' 1);                              ch2 = str2.Substring(i' 1);                              nzero = 0;                          }                          else                          {                              if (str3 == "0" && nzero >= 3)                              {                                  ch1 = "";                                  ch2 = "";                                  nzero = nzero + 1;                              }                              else                              {                                  if (j >= 11)                                  {                                      ch1 = "";                                      nzero = nzero + 1;                                  }                                  else                                  {                                      ch1 = "";                                      ch2 = str2.Substring(i' 1);                                      nzero = nzero + 1;                                  }                              }                          }                      }                  }                  if (i == (j - 11) || i == (j - 3))                  {                      //如果该位是亿位或元位，则必须写上                       ch2 = str2.Substring(i' 1);                  }                  str5 = str5 + ch1 + ch2;                    if (i == j - 1 && str3 == "0")                  {                      //最后一位（分）为0时，加上“整”                       str5 = str5 + '整';                  }              }
Magic Number,HD.Helper.Common,SerializeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Serialize\SerializeHelper.cs,FromBinary,The following statement contains a magic number: int intLen = str.Length / 2;
Magic Number,HD.Helper.Common,SerializeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Serialize\SerializeHelper.cs,FromBinary,The following statement contains a magic number: for (int i = 0; i < intLen; i++)              {                  int ibyte = Convert.ToInt32(str.Substring(i * 2' 2)' 16);                  bytes[i] = (byte)ibyte;              }
Magic Number,HD.Helper.Common,SerializeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Serialize\SerializeHelper.cs,FromBinary,The following statement contains a magic number: for (int i = 0; i < intLen; i++)              {                  int ibyte = Convert.ToInt32(str.Substring(i * 2' 2)' 16);                  bytes[i] = (byte)ibyte;              }
Magic Number,HD.Helper.Common,SerializeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Serialize\SerializeHelper.cs,FromBinary,The following statement contains a magic number: for (int i = 0; i < intLen; i++)              {                  int ibyte = Convert.ToInt32(str.Substring(i * 2' 2)' 16);                  bytes[i] = (byte)ibyte;              }
Magic Number,HD.Helper.Common,SessionHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Session\SessionHelper.cs,Add,The following statement contains a magic number: HttpContext.Current.Session.Timeout = 20;
Magic Number,HD.Helper.Common,SessionHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Session\SessionHelper.cs,AddStrArray,The following statement contains a magic number: HttpContext.Current.Session.Timeout = 20;
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToDBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 12288)                  {                      c[i] = (char)32;                      continue;                  }                  if (c[i] > 65280 && c[i] < 65375)                      c[i] = (char)(c[i] - 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToDBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 12288)                  {                      c[i] = (char)32;                      continue;                  }                  if (c[i] > 65280 && c[i] < 65375)                      c[i] = (char)(c[i] - 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToDBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 12288)                  {                      c[i] = (char)32;                      continue;                  }                  if (c[i] > 65280 && c[i] < 65375)                      c[i] = (char)(c[i] - 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToDBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 12288)                  {                      c[i] = (char)32;                      continue;                  }                  if (c[i] > 65280 && c[i] < 65375)                      c[i] = (char)(c[i] - 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToDBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 12288)                  {                      c[i] = (char)32;                      continue;                  }                  if (c[i] > 65280 && c[i] < 65375)                      c[i] = (char)(c[i] - 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToSBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 32)                  {                      c[i] = (char)12288;                      continue;                  }                  if (c[i] < 127)                      c[i] = (char)(c[i] + 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToSBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 32)                  {                      c[i] = (char)12288;                      continue;                  }                  if (c[i] < 127)                      c[i] = (char)(c[i] + 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToSBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 32)                  {                      c[i] = (char)12288;                      continue;                  }                  if (c[i] < 127)                      c[i] = (char)(c[i] + 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ToSBC,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  if (c[i] == 32)                  {                      c[i] = (char)12288;                      continue;                  }                  if (c[i] < 127)                      c[i] = (char)(c[i] + 65248);              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,GetMD5,The following statement contains a magic number: return s.ToLower().Substring(8' 16);
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,GetMD5,The following statement contains a magic number: return s.ToLower().Substring(8' 16);
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,GetStrLength,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  if ((int)s[i] == 63)                      tempLen += 2;                  else                      tempLen += 1;              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,GetStrLength,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  if ((int)s[i] == 63)                      tempLen += 2;                  else                      tempLen += 1;              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ClipString,The following statement contains a magic number: if (len % 2 == 1)              {                  isShowFix = true;                  len--;              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ClipString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  if ((int)s[i] == 63)                      tempLen += 2;                  else                      tempLen += 1;                    try                  {                      tempString += inputString.Substring(i' 1);                  }                  catch                  {                      break;                  }                    if (tempLen > len)                      break;              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,ClipString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  if ((int)s[i] == 63)                      tempLen += 2;                  else                      tempLen += 1;                    try                  {                      tempString += inputString.Substring(i' 1);                  }                  catch                  {                      break;                  }                    if (tempLen > len)                      break;              }
Magic Number,HD.Helper.Common,StringHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\String\StringHelper.cs,GetSqlText,The following statement contains a magic number: for (int i = 0; i < temp.Length; i++)              {                  if (Regex.IsMatch(temp.Substring(i' 1)' @"[\u4e00-\u9fa5]+"))                  {                      j += 2;                  }                  else                  {                      j += 1;                  }                  if (j <= length)                  {                      k += 1;                  }                  if (j > length)                  {                      return temp.Substring(0' k) + "..";                  }              }
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The following statement contains a magic number: if (TargetFile.PostedFile.ContentLength <= MaxSize)              {                  string strFileNameTemp = GetUploadFileName();                  string strFilePathTemp = strFilePath;                  strOldName = strFileNameTemp + strNewName;                  strFilePath = strFilePath + "\\" + strOldName;                    fileSize = TargetFile.PostedFile.ContentLength / 1024;                  saveFileName = strFilePath.Substring(strFilePath.IndexOf("FileUpload\\"));                  TargetFile.PostedFile.SaveAs(strFilePath);                  TargetFile.Dispose();              }              else              {                  return "上传文件超出指定的大小";              }
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The following statement contains a magic number: strNewName = strOldName.Substring(strOldName.Length - 3' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The following statement contains a magic number: strNewName = strOldName.Substring(strOldName.Length - 3' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The following statement contains a magic number: if (PosPhotoUpload.HasFile)              {                  if (PosPhotoUpload.PostedFile.ContentLength / 1024 < 10240)                  {                      string MimeType = PosPhotoUpload.PostedFile.ContentType;                      if (String.Equals(MimeType' "image/gif") || String.Equals(MimeType' "image/pjpeg"))                      {                          string extFileString = System.IO.Path.GetExtension(PosPhotoUpload.PostedFile.FileName);                          PosPhotoUpload.PostedFile.SaveAs(HttpContext.Current.Server.MapPath(imagePath));                      }                      else                      {                          state = "上传文件类型不正确";                      }                  }                  else                  {                      state = "上传文件不能大于10M";                  }              }              else              {                  state = "没有上传文件";              }
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,UploadFile,The following statement contains a magic number: if (PosPhotoUpload.HasFile)              {                  if (PosPhotoUpload.PostedFile.ContentLength / 1024 < 10240)                  {                      string MimeType = PosPhotoUpload.PostedFile.ContentType;                      if (String.Equals(MimeType' "image/gif") || String.Equals(MimeType' "image/pjpeg"))                      {                          string extFileString = System.IO.Path.GetExtension(PosPhotoUpload.PostedFile.FileName);                          PosPhotoUpload.PostedFile.SaveAs(HttpContext.Current.Server.MapPath(imagePath));                      }                      else                      {                          state = "上传文件类型不正确";                      }                  }                  else                  {                      state = "上传文件不能大于10M";                  }              }              else              {                  state = "没有上传文件";              }
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,FileUpHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\File\FileUpHelper.cs,GetUploadFileName,The following statement contains a magic number: Result += time.Year.ToString() + FormatNum(time.Month.ToString()' 2) + FormatNum(time.Day.ToString()' 2) + FormatNum(time.Hour.ToString()' 2) + FormatNum(time.Minute.ToString()' 2) + FormatNum(time.Second.ToString()' 2) + FormatNum(time.Millisecond.ToString()' 3);
Magic Number,HD.Helper.Common,UrlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Url\UrlHelper.cs,IsBase64,The following statement contains a magic number: if ((eStr.Length % 4) != 0)              {                  return false;              }
Magic Number,HD.Helper.Common,UrlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Url\UrlHelper.cs,GetDomain,The following statement contains a magic number: try              {                  if (fromUrl.IndexOf("的名片") > -1)                  {                      subDomain = fromUrl;                      domain = "名片";                      return;                  }                    UriBuilder builder = new UriBuilder(fromUrl);                  fromUrl = builder.ToString();                    Uri u = new Uri(fromUrl);                    if (u.IsWellFormedOriginalString())                  {                      if (u.IsFile)                      {                          subDomain = domain = "客户端本地文件路径";                        }                      else                      {                          string Authority = u.Authority;                          string[] ss = u.Authority.Split('.');                          if (ss.Length == 2)                          {                              Authority = "www." + Authority;                          }                          int index = Authority.IndexOf('.'' 0);                          domain = Authority.Substring(index + 1' Authority.Length - index - 1).Replace("comhttp"'"com");                          subDomain = Authority.Replace("comhttp"' "com");                           if (ss.Length < 2)                          {                              domain = "不明路径";                              subDomain = "不明路径";                          }                      }                  }                  else                  {                      if (u.IsFile)                      {                          subDomain = domain = "客户端本地文件路径";                      }                      else                      {                          subDomain = domain = "不明路径";                      }                  }              }              catch              {                  subDomain = domain = "不明路径";              }
Magic Number,HD.Helper.Common,UrlHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Url\UrlHelper.cs,GetDomain,The following statement contains a magic number: try              {                  if (fromUrl.IndexOf("的名片") > -1)                  {                      subDomain = fromUrl;                      domain = "名片";                      return;                  }                    UriBuilder builder = new UriBuilder(fromUrl);                  fromUrl = builder.ToString();                    Uri u = new Uri(fromUrl);                    if (u.IsWellFormedOriginalString())                  {                      if (u.IsFile)                      {                          subDomain = domain = "客户端本地文件路径";                        }                      else                      {                          string Authority = u.Authority;                          string[] ss = u.Authority.Split('.');                          if (ss.Length == 2)                          {                              Authority = "www." + Authority;                          }                          int index = Authority.IndexOf('.'' 0);                          domain = Authority.Substring(index + 1' Authority.Length - index - 1).Replace("comhttp"'"com");                          subDomain = Authority.Replace("comhttp"' "com");                           if (ss.Length < 2)                          {                              domain = "不明路径";                              subDomain = "不明路径";                          }                      }                  }                  else                  {                      if (u.IsFile)                      {                          subDomain = domain = "客户端本地文件路径";                      }                      else                      {                          subDomain = domain = "不明路径";                      }                  }              }              catch              {                  subDomain = domain = "不明路径";              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIp,The following statement contains a magic number: try              {                  string[] iparg = ip.Split('.');                  if (string.Empty != ip && ip.Length < 16 && iparg.Length == 4)                  {                      int intip;                      for (int i = 0; i < 4; i++)                      {                          intip = Convert.ToInt16(iparg[i]);                          if (intip > 255)                          {                              result = false;                              return result;                          }                      }                      result = true;                  }              }              catch              {                  return result;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIp,The following statement contains a magic number: try              {                  string[] iparg = ip.Split('.');                  if (string.Empty != ip && ip.Length < 16 && iparg.Length == 4)                  {                      int intip;                      for (int i = 0; i < 4; i++)                      {                          intip = Convert.ToInt16(iparg[i]);                          if (intip > 255)                          {                              result = false;                              return result;                          }                      }                      result = true;                  }              }              catch              {                  return result;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIp,The following statement contains a magic number: try              {                  string[] iparg = ip.Split('.');                  if (string.Empty != ip && ip.Length < 16 && iparg.Length == 4)                  {                      int intip;                      for (int i = 0; i < 4; i++)                      {                          intip = Convert.ToInt16(iparg[i]);                          if (intip > 255)                          {                              result = false;                              return result;                          }                      }                      result = true;                  }              }              catch              {                  return result;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIp,The following statement contains a magic number: try              {                  string[] iparg = ip.Split('.');                  if (string.Empty != ip && ip.Length < 16 && iparg.Length == 4)                  {                      int intip;                      for (int i = 0; i < 4; i++)                      {                          intip = Convert.ToInt16(iparg[i]);                          if (intip > 255)                          {                              result = false;                              return result;                          }                      }                      result = true;                  }              }              catch              {                  return result;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard,The following statement contains a magic number: if (Id.Length == 18)              {                  bool check = IsIDCard18(Id);                  return check;              }              else if (Id.Length == 15)              {                  bool check = IsIDCard15(Id);                  return check;              }              else              {                  return false;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard,The following statement contains a magic number: if (Id.Length == 18)              {                  bool check = IsIDCard18(Id);                  return check;              }              else if (Id.Length == 15)              {                  bool check = IsIDCard15(Id);                  return check;              }              else              {                  return false;              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: if (long.TryParse(Id.Remove(17)' out n) == false || n < Math.Pow(10' 16) || long.TryParse(Id.Replace('x'' '0').Replace('X'' '0')' out n) == false)              {                  return false;//数字验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: if (long.TryParse(Id.Remove(17)' out n) == false || n < Math.Pow(10' 16) || long.TryParse(Id.Replace('x'' '0').Replace('X'' '0')' out n) == false)              {                  return false;//数字验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: if (long.TryParse(Id.Remove(17)' out n) == false || n < Math.Pow(10' 16) || long.TryParse(Id.Replace('x'' '0').Replace('X'' '0')' out n) == false)              {                  return false;//数字验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: if (address.IndexOf(Id.Remove(2)) == -1)              {                  return false;//省份验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: string birth = Id.Substring(6' 8).Insert(6' "-").Insert(4' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: string birth = Id.Substring(6' 8).Insert(6' "-").Insert(4' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: string birth = Id.Substring(6' 8).Insert(6' "-").Insert(4' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: string birth = Id.Substring(6' 8).Insert(6' "-").Insert(4' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: char[] Ai = Id.Remove(17).ToCharArray();
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: for (int i = 0; i < 17; i++)              {                  sum += int.Parse(Wi[i]) * int.Parse(Ai[i].ToString());              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: Math.DivRem(sum' 11' out y);
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard18,The following statement contains a magic number: if (arrVarifyCode[y] != Id.Substring(17' 1).ToLower())              {                  return false;//校验码验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: if (long.TryParse(Id' out n) == false || n < Math.Pow(10' 14))              {                  return false;//数字验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: if (long.TryParse(Id' out n) == false || n < Math.Pow(10' 14))              {                  return false;//数字验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: if (address.IndexOf(Id.Remove(2)) == -1)              {                  return false;//省份验证              }
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: string birth = Id.Substring(6' 6).Insert(4' "-").Insert(2' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: string birth = Id.Substring(6' 6).Insert(4' "-").Insert(2' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: string birth = Id.Substring(6' 6).Insert(4' "-").Insert(2' "-");
Magic Number,HD.Helper.Common,ValidatorHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Validator\ValidatorHelper.cs,IsIDCard15,The following statement contains a magic number: string birth = Id.Substring(6' 6).Insert(4' "-").Insert(2' "-");
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,VerifyCodeHelper,The following statement contains a magic number: this.text = VerifyCodeRand.Number(4);
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  int x1 = Next(image.Width - 1);                  int x2 = Next(image.Width - 1);                  int y1 = Next(image.Height - 1);                  int y2 = Next(image.Height - 1);                  g.DrawLine(new Pen(Color.Silver)' x1' y1' x2' y2);              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: int _x = -12' _y = 0;
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int int_index = 0; int_index < this.text.Length; int_index++)              {                  _x += Next(12' 16);                  _y = Next(-2' 2);                  string str_char = this.text.Substring(int_index' 1);                  str_char = Next(1) == 1 ? str_char.ToLower() : str_char.ToUpper();                  Brush newBrush = new SolidBrush(GetRandomColor());                  Point thePos = new Point(_x' _y);                  g.DrawString(str_char' fonts[Next(fonts.Length - 1)]' newBrush' thePos);              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int int_index = 0; int_index < this.text.Length; int_index++)              {                  _x += Next(12' 16);                  _y = Next(-2' 2);                  string str_char = this.text.Substring(int_index' 1);                  str_char = Next(1) == 1 ? str_char.ToLower() : str_char.ToUpper();                  Brush newBrush = new SolidBrush(GetRandomColor());                  Point thePos = new Point(_x' _y);                  g.DrawString(str_char' fonts[Next(fonts.Length - 1)]' newBrush' thePos);              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int int_index = 0; int_index < this.text.Length; int_index++)              {                  _x += Next(12' 16);                  _y = Next(-2' 2);                  string str_char = this.text.Substring(int_index' 1);                  str_char = Next(1) == 1 ? str_char.ToLower() : str_char.ToUpper();                  Brush newBrush = new SolidBrush(GetRandomColor());                  Point thePos = new Point(_x' _y);                  g.DrawString(str_char' fonts[Next(fonts.Length - 1)]' newBrush' thePos);              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int int_index = 0; int_index < this.text.Length; int_index++)              {                  _x += Next(12' 16);                  _y = Next(-2' 2);                  string str_char = this.text.Substring(int_index' 1);                  str_char = Next(1) == 1 ? str_char.ToLower() : str_char.ToUpper();                  Brush newBrush = new SolidBrush(GetRandomColor());                  Point thePos = new Point(_x' _y);                  g.DrawString(str_char' fonts[Next(fonts.Length - 1)]' newBrush' thePos);              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  int x = Next(image.Width - 1);                  int y = Next(image.Height - 1);                  image.SetPixel(x' y' Color.FromArgb(Next(0' 255)' Next(0' 255)' Next(0' 255)));              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  int x = Next(image.Width - 1);                  int y = Next(image.Height - 1);                  image.SetPixel(x' y' Color.FromArgb(Next(0' 255)' Next(0' 255)' Next(0' 255)));              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  int x = Next(image.Width - 1);                  int y = Next(image.Height - 1);                  image.SetPixel(x' y' Color.FromArgb(Next(0' 255)' Next(0' 255)' Next(0' 255)));              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  int x = Next(image.Width - 1);                  int y = Next(image.Height - 1);                  image.SetPixel(x' y' Color.FromArgb(Next(0' 255)' Next(0' 255)' Next(0' 255)));              }
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: image = TwistImage(image' true' Next(1' 3)' Next(4' 6));
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: image = TwistImage(image' true' Next(1' 3)' Next(4' 6));
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,CreateImage,The following statement contains a magic number: image = TwistImage(image' true' Next(1' 3)' Next(4' 6));
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: System.Threading.Thread.Sleep(RandomNum_First.Next(50));
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int int_Red = RandomNum_First.Next(180);
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int int_Green = RandomNum_Sencond.Next(180);
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int int_Blue = (int_Red + int_Green > 300) ? 0 : 400 - int_Red - int_Green;
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int int_Blue = (int_Red + int_Green > 300) ? 0 : 400 - int_Red - int_Green;
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int_Blue = (int_Blue > 255) ? 255 : int_Blue;
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,GetRandomColor,The following statement contains a magic number: int_Blue = (int_Blue > 255) ? 255 : int_Blue;
Magic Number,HD.Helper.Common,VerifyCodeHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeHelper.cs,TwistImage,The following statement contains a magic number: double PI = 6.283185307179586476925286766559;
Magic Number,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Number,The following statement contains a magic number: if (Sleep) System.Threading.Thread.Sleep(3);
Magic Number,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Number,The following statement contains a magic number: for (int i = 0; i < Length; i++)              {                  result += random.Next(10).ToString();              }
Magic Number,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Str,The following statement contains a magic number: if (Sleep) System.Threading.Thread.Sleep(3);
Magic Number,HD.Helper.Common,VerifyCodeRand,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\VerifyCode\VerifyCodeRand.cs,Str_char,The following statement contains a magic number: if (Sleep) System.Threading.Thread.Sleep(3);
Magic Number,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,CatchImg,The following statement contains a magic number: try              {                  string flv_img_p = vFileName.Substring(0' vFileName.Length - 4) + ".jpg";                  string Command = " -i " + HttpContext.Current.Server.MapPath(vFileName) + " -y -f image2 -t 0.1 -s " + sizeOfImg + " " + HttpContext.Current.Server.MapPath(flv_img_p);                  System.Diagnostics.Process p = new System.Diagnostics.Process();                  p.StartInfo.FileName = ffmpegtool;                  p.StartInfo.Arguments = Command;                  p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;                  try                  {                      p.Start();                  }                  catch                  {                      return "";                  }                  finally                  {                      p.Close();                      p.Dispose();                  }                  System.Threading.Thread.Sleep(4000);                    //ΧΆβ:ΝΌΖ¬½ΨΘ΅³ΙΉ¦Ίσ'ΚύΎέΣΙΔΪ΄ζ»Ί΄ζΠ΄µ½΄ΕΕΜΠθΚ±Όδ½Ο³¤'΄σΈΕΤΪ3'4ΓλΙυΦΑΈό³¤;                  if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(flv_img_p)))                  {                      return flv_img_p;                  }                  return "";              }              catch              {                  return "";              }
Magic Number,HD.Helper.Common,VideoHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Video\VideoHelper.cs,CatchImg,The following statement contains a magic number: try              {                  string flv_img_p = vFileName.Substring(0' vFileName.Length - 4) + ".jpg";                  string Command = " -i " + HttpContext.Current.Server.MapPath(vFileName) + " -y -f image2 -t 0.1 -s " + sizeOfImg + " " + HttpContext.Current.Server.MapPath(flv_img_p);                  System.Diagnostics.Process p = new System.Diagnostics.Process();                  p.StartInfo.FileName = ffmpegtool;                  p.StartInfo.Arguments = Command;                  p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;                  try                  {                      p.Start();                  }                  catch                  {                      return "";                  }                  finally                  {                      p.Close();                      p.Dispose();                  }                  System.Threading.Thread.Sleep(4000);                    //ΧΆβ:ΝΌΖ¬½ΨΘ΅³ΙΉ¦Ίσ'ΚύΎέΣΙΔΪ΄ζ»Ί΄ζΠ΄µ½΄ΕΕΜΠθΚ±Όδ½Ο³¤'΄σΈΕΤΪ3'4ΓλΙυΦΑΈό³¤;                  if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(flv_img_p)))                  {                      return flv_img_p;                  }                  return "";              }              catch              {                  return "";              }
Magic Number,HD.Helper.Common,ZipHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Zip\ZipHelper.cs,UnZip,The following statement contains a magic number: try              {                  s = new ZipInputStream(File.OpenRead(FileToUpZip));                  while ((theEntry = s.GetNextEntry()) != null)                  {                      if (theEntry.Name != String.Empty)                      {                          fileName = Path.Combine(ZipedFolder' theEntry.Name);                          if (fileName.EndsWith("/") || fileName.EndsWith("\\"))                          {                              Directory.CreateDirectory(fileName);                              continue;                          }                          streamWriter = File.Create(fileName);                          int size = 2048;                          byte[] data = new byte[2048];                          while (true)                          {                              size = s.Read(data' 0' data.Length);                              if (size > 0)                              {                                  streamWriter.Write(data' 0' size);                              }                              else                              {                                  break;                              }                          }                      }                  }              }              finally              {                  if (streamWriter != null)                  {                      streamWriter.Close();                      streamWriter = null;                  }                  if (theEntry != null)                  {                      theEntry = null;                  }                  if (s != null)                  {                      s.Close();                      s = null;                  }                  GC.Collect();                  GC.Collect(1);              }
Magic Number,HD.Helper.Common,ZipHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Zip\ZipHelper.cs,UnZip,The following statement contains a magic number: try              {                  s = new ZipInputStream(File.OpenRead(FileToUpZip));                  while ((theEntry = s.GetNextEntry()) != null)                  {                      if (theEntry.Name != String.Empty)                      {                          fileName = Path.Combine(ZipedFolder' theEntry.Name);                          if (fileName.EndsWith("/") || fileName.EndsWith("\\"))                          {                              Directory.CreateDirectory(fileName);                              continue;                          }                          streamWriter = File.Create(fileName);                          int size = 2048;                          byte[] data = new byte[2048];                          while (true)                          {                              size = s.Read(data' 0' data.Length);                              if (size > 0)                              {                                  streamWriter.Write(data' 0' size);                              }                              else                              {                                  break;                              }                          }                      }                  }              }              finally              {                  if (streamWriter != null)                  {                      streamWriter.Close();                      streamWriter = null;                  }                  if (theEntry != null)                  {                      theEntry = null;                  }                  if (s != null)                  {                      s.Close();                      s = null;                  }                  GC.Collect();                  GC.Collect(1);              }
Missing Default,HD.Helper.Common,ConvertHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Convert\ConvertHelper.cs,ConvertBase,The following switch statement is missing a default case: switch (resultLength)                      {                          case 7:                              result = "0" + result;                              break;                          case 6:                              result = "00" + result;                              break;                          case 5:                              result = "000" + result;                              break;                          case 4:                              result = "0000" + result;                              break;                          case 3:                              result = "00000" + result;                              break;                      }
Missing Default,HD.Helper.Common,FormulaHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Formula\FormulaHelper.cs,CalculateExExpress,The following switch statement is missing a default case: switch (ExpressType)              {                  case EnumFormula.Sin:                      retValue = Math.Sin(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Cos:                      retValue = Math.Cos(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Tan:                      retValue = Math.Tan(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.ATan:                      retValue = Math.Atan(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Sqrt:                      retValue = Math.Sqrt(Convert.ToDouble(strExpression));                      break;                  case EnumFormula.Pow:                      retValue = Math.Pow(Convert.ToDouble(strExpression)' 2);                      break;              }
Missing Default,HD.Helper.Common,PDFOperation,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\PDF\PDFOperation.cs,SetPageSize,The following switch statement is missing a default case: switch (type.Trim())              {                  case "A4":                      rect = PageSize.A4;                      break;                  case "A8":                      rect = PageSize.A8;                      break;              }
Missing Default,HD.Helper.Common,RegisterHelper,C:\repos\hdkn235_Helper\Src\HD.Helper.Common\Register\RegisterHelper.cs,GetRegistryKey,The following switch statement is missing a default case: switch (keyType)              {                  case KeyType.HKEY_CLASS_ROOT:                      rk = Registry.ClassesRoot;                      break;                  case KeyType.HKEY_CURRENT_USER:                      rk = Registry.CurrentUser;                      break;                  case KeyType.HKEY_LOCAL_MACHINE:                      rk = Registry.LocalMachine;                      break;                  case KeyType.HKEY_USERS:                      rk = Registry.Users;                      break;                  case KeyType.HKEY_CURRENT_CONFIG:                      rk = Registry.CurrentConfig;                      break;              }
