Implementation smell,Namespace,Class,File,Method,Description
Long Method,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The method has 448 lines of code.
Long Method,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The method has 118 lines of code.
Long Statement,IdentityServer3.Host.Config,Users,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Users.cs,Get,The length of the statement  "                        new Claim(Constants.ClaimTypes.Address' @"{ ""street_address"": ""One Hacker Way""' ""locality"": ""Heidelberg""' ""postal_code"": 69118' ""country"": ""Germany"" }"' Constants.ClaimValueTypes.Json) " is 198.
Long Statement,IdentityServer3.Host.Config,Users,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Users.cs,Get,The length of the statement  "                        new Claim(Constants.ClaimTypes.Address' @"{ ""street_address"": ""One Hacker Way""' ""locality"": ""Heidelberg""' ""postal_code"": 69118' ""country"": ""Germany"" }"' Constants.ClaimValueTypes.Json) " is 198.
Magic Number,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The following statement contains a magic number: return new List<Client>              {                  /////////////////////////////////////////////////////////////                  // Client Credentials With Reference Token                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.reference"'                      Flow = Flows.ClientCredentials'                      AccessTokenType = AccessTokenType.Reference'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())'                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                  }'                    /////////////////////////////////////////////////////////////                  // Console Client Credentials Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.client"'                      Flow = Flows.ClientCredentials'                        ClientSecrets = new List<Secret>                          {                              new Secret("secret".Sha256())'                              new Secret                              {                                  Value = "61B754C541BBCFC6A45A9E9EC5E47D8702B78C29"'                                  Type = Constants.SecretTypes.X509CertificateThumbprint'                                  Description = "Client Certificate"                              }'                          }'                        AllowedScopes = new List<string>                          {                              "read"'                              "write"                          }'                        Claims = new List<Claim>                          {                              new Claim("location"' "datacenter")                          }                  }'                    /////////////////////////////////////////////////////////////                  // Console Custom Grant Type Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Custom Grant Client"'                      ClientId = "customgrant.client"'                      Flow = Flows.Custom'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        AllowedCustomGrantTypes = new List<string>                      {                          "custom"                      }                  }'                    /////////////////////////////////////////////////////////////                  // Resource Owner Flow Samples                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Resource Owner Flow Client"'                      ClientId = "ro.client"'                      Flow = Flows.ResourceOwner'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"'                          "address"'                          "offline_access"                      }'                        // used by JS resource owner sample                      AllowedCorsOrigins = new List<string>                      {                          "http://localhost:13048"                      }'                        AccessTokenType = AccessTokenType.Jwt'                      AccessTokenLifetime = 3600'                        // refresh token settings                      AbsoluteRefreshTokenLifetime = 86400'                      SlidingRefreshTokenLifetime = 43200'                      RefreshTokenUsage = TokenUsage.OneTimeOnly'                      RefreshTokenExpiration = TokenExpiration.Sliding                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - OAuth only                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Simple"'                      ClientId = "js.simple"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37045/index.html"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Manual"'                      ClientId = "js.manual"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37046/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:37046"                      }                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - TokenManager                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - UserManager"'                      ClientId = "js.usermanager"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                          "http://localhost:21575/silent_renew.html"'                          "http://localhost:21575/callback.html"'                          "http://localhost:21575/frame.html"'                          "http://localhost:21575/popup.html"'                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:21575"'                      }'                        AccessTokenLifetime = 3600'                      AccessTokenType = AccessTokenType.Jwt                  }'                    /////////////////////////////////////////////////////////////                  // MVC CodeFlowClient Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Code Flow Client Demo"'                      ClientId = "codeclient"'                      Flow = Flows.AuthorizationCode'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RequireConsent = true'                      AllowRememberConsent = true'                        ClientUri = "https://identityserver.io"'                        RedirectUris = new List<string>                      {                          "https://localhost:44312/callback"'                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        AccessTokenType = AccessTokenType.Reference'                  }'                    /////////////////////////////////////////////////////////////                  // MVC No Library Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "OpenID Connect without Client Library Sample"'                      ClientId = "nolib.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:11716/account/signInCallback"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // MVC OWIN Hybrid Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Hybrid Client"'                      ClientId = "mvc.owin.hybrid"'                      Flow = Flows.Hybrid'                      AllowAccessTokensViaBrowser = false'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = false'                      AccessTokenType = AccessTokenType.Reference'                        RedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        LogoutUri = "https://localhost:44300/Home/OidcSignOut"'                      LogoutSessionRequired = true                  }'                                      /////////////////////////////////////////////////////////////                  // MVC OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Implicit Client"'                      ClientId = "mvc.owin.implicit"'                      Flow = Flows.Implicit'                      AllowAccessTokensViaBrowser = false'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "https://localhost:44301/"                      }'                        LogoutUri = "https://localhost:44301/Home/SignoutCleanup"'                      LogoutSessionRequired = true'                  }'                    /////////////////////////////////////////////////////////////                  // WebForms OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WebForms OWIN Implicit Client"'                      ClientId = "webforms.owin.implicit"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }                  }'                    /////////////////////////////////////////////////////////////                  // WPF WebView Client Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF WebView Client Sample"'                      ClientId = "wpf.webview.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "oob://localhost/wpf.webview.client"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE"'                      ClientId = "wpf.hybrid"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE and PoP                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE and PoP"'                      ClientId = "wpf.hybrid.pop"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid.pop"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          StandardScopes.OfflineAccess.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // UWP OIDC Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "UWP OIDC Client"'                      ClientId = "uwp"'                      ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        Flow = Flows.HybridWithProofKey'                        RedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      AllowedScopes = new List<string>                      {                          "openid"' "profile"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'              };
Magic Number,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The following statement contains a magic number: return new List<Client>              {                  /////////////////////////////////////////////////////////////                  // Client Credentials With Reference Token                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.reference"'                      Flow = Flows.ClientCredentials'                      AccessTokenType = AccessTokenType.Reference'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())'                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                  }'                    /////////////////////////////////////////////////////////////                  // Console Client Credentials Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.client"'                      Flow = Flows.ClientCredentials'                        ClientSecrets = new List<Secret>                          {                              new Secret("secret".Sha256())'                              new Secret                              {                                  Value = "61B754C541BBCFC6A45A9E9EC5E47D8702B78C29"'                                  Type = Constants.SecretTypes.X509CertificateThumbprint'                                  Description = "Client Certificate"                              }'                          }'                        AllowedScopes = new List<string>                          {                              "read"'                              "write"                          }'                        Claims = new List<Claim>                          {                              new Claim("location"' "datacenter")                          }                  }'                    /////////////////////////////////////////////////////////////                  // Console Custom Grant Type Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Custom Grant Client"'                      ClientId = "customgrant.client"'                      Flow = Flows.Custom'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        AllowedCustomGrantTypes = new List<string>                      {                          "custom"                      }                  }'                    /////////////////////////////////////////////////////////////                  // Resource Owner Flow Samples                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Resource Owner Flow Client"'                      ClientId = "ro.client"'                      Flow = Flows.ResourceOwner'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"'                          "address"'                          "offline_access"                      }'                        // used by JS resource owner sample                      AllowedCorsOrigins = new List<string>                      {                          "http://localhost:13048"                      }'                        AccessTokenType = AccessTokenType.Jwt'                      AccessTokenLifetime = 3600'                        // refresh token settings                      AbsoluteRefreshTokenLifetime = 86400'                      SlidingRefreshTokenLifetime = 43200'                      RefreshTokenUsage = TokenUsage.OneTimeOnly'                      RefreshTokenExpiration = TokenExpiration.Sliding                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - OAuth only                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Simple"'                      ClientId = "js.simple"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37045/index.html"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Manual"'                      ClientId = "js.manual"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37046/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:37046"                      }                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - TokenManager                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - UserManager"'                      ClientId = "js.usermanager"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                          "http://localhost:21575/silent_renew.html"'                          "http://localhost:21575/callback.html"'                          "http://localhost:21575/frame.html"'                          "http://localhost:21575/popup.html"'                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:21575"'                      }'                        AccessTokenLifetime = 3600'                      AccessTokenType = AccessTokenType.Jwt                  }'                    /////////////////////////////////////////////////////////////                  // MVC CodeFlowClient Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Code Flow Client Demo"'                      ClientId = "codeclient"'                      Flow = Flows.AuthorizationCode'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RequireConsent = true'                      AllowRememberConsent = true'                        ClientUri = "https://identityserver.io"'                        RedirectUris = new List<string>                      {                          "https://localhost:44312/callback"'                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        AccessTokenType = AccessTokenType.Reference'                  }'                    /////////////////////////////////////////////////////////////                  // MVC No Library Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "OpenID Connect without Client Library Sample"'                      ClientId = "nolib.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:11716/account/signInCallback"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // MVC OWIN Hybrid Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Hybrid Client"'                      ClientId = "mvc.owin.hybrid"'                      Flow = Flows.Hybrid'                      AllowAccessTokensViaBrowser = false'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = false'                      AccessTokenType = AccessTokenType.Reference'                        RedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        LogoutUri = "https://localhost:44300/Home/OidcSignOut"'                      LogoutSessionRequired = true                  }'                                      /////////////////////////////////////////////////////////////                  // MVC OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Implicit Client"'                      ClientId = "mvc.owin.implicit"'                      Flow = Flows.Implicit'                      AllowAccessTokensViaBrowser = false'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "https://localhost:44301/"                      }'                        LogoutUri = "https://localhost:44301/Home/SignoutCleanup"'                      LogoutSessionRequired = true'                  }'                    /////////////////////////////////////////////////////////////                  // WebForms OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WebForms OWIN Implicit Client"'                      ClientId = "webforms.owin.implicit"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }                  }'                    /////////////////////////////////////////////////////////////                  // WPF WebView Client Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF WebView Client Sample"'                      ClientId = "wpf.webview.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "oob://localhost/wpf.webview.client"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE"'                      ClientId = "wpf.hybrid"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE and PoP                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE and PoP"'                      ClientId = "wpf.hybrid.pop"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid.pop"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          StandardScopes.OfflineAccess.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // UWP OIDC Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "UWP OIDC Client"'                      ClientId = "uwp"'                      ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        Flow = Flows.HybridWithProofKey'                        RedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      AllowedScopes = new List<string>                      {                          "openid"' "profile"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'              };
Magic Number,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The following statement contains a magic number: return new List<Client>              {                  /////////////////////////////////////////////////////////////                  // Client Credentials With Reference Token                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.reference"'                      Flow = Flows.ClientCredentials'                      AccessTokenType = AccessTokenType.Reference'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())'                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                  }'                    /////////////////////////////////////////////////////////////                  // Console Client Credentials Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.client"'                      Flow = Flows.ClientCredentials'                        ClientSecrets = new List<Secret>                          {                              new Secret("secret".Sha256())'                              new Secret                              {                                  Value = "61B754C541BBCFC6A45A9E9EC5E47D8702B78C29"'                                  Type = Constants.SecretTypes.X509CertificateThumbprint'                                  Description = "Client Certificate"                              }'                          }'                        AllowedScopes = new List<string>                          {                              "read"'                              "write"                          }'                        Claims = new List<Claim>                          {                              new Claim("location"' "datacenter")                          }                  }'                    /////////////////////////////////////////////////////////////                  // Console Custom Grant Type Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Custom Grant Client"'                      ClientId = "customgrant.client"'                      Flow = Flows.Custom'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        AllowedCustomGrantTypes = new List<string>                      {                          "custom"                      }                  }'                    /////////////////////////////////////////////////////////////                  // Resource Owner Flow Samples                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Resource Owner Flow Client"'                      ClientId = "ro.client"'                      Flow = Flows.ResourceOwner'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"'                          "address"'                          "offline_access"                      }'                        // used by JS resource owner sample                      AllowedCorsOrigins = new List<string>                      {                          "http://localhost:13048"                      }'                        AccessTokenType = AccessTokenType.Jwt'                      AccessTokenLifetime = 3600'                        // refresh token settings                      AbsoluteRefreshTokenLifetime = 86400'                      SlidingRefreshTokenLifetime = 43200'                      RefreshTokenUsage = TokenUsage.OneTimeOnly'                      RefreshTokenExpiration = TokenExpiration.Sliding                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - OAuth only                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Simple"'                      ClientId = "js.simple"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37045/index.html"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Manual"'                      ClientId = "js.manual"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37046/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:37046"                      }                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - TokenManager                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - UserManager"'                      ClientId = "js.usermanager"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                          "http://localhost:21575/silent_renew.html"'                          "http://localhost:21575/callback.html"'                          "http://localhost:21575/frame.html"'                          "http://localhost:21575/popup.html"'                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:21575"'                      }'                        AccessTokenLifetime = 3600'                      AccessTokenType = AccessTokenType.Jwt                  }'                    /////////////////////////////////////////////////////////////                  // MVC CodeFlowClient Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Code Flow Client Demo"'                      ClientId = "codeclient"'                      Flow = Flows.AuthorizationCode'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RequireConsent = true'                      AllowRememberConsent = true'                        ClientUri = "https://identityserver.io"'                        RedirectUris = new List<string>                      {                          "https://localhost:44312/callback"'                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        AccessTokenType = AccessTokenType.Reference'                  }'                    /////////////////////////////////////////////////////////////                  // MVC No Library Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "OpenID Connect without Client Library Sample"'                      ClientId = "nolib.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:11716/account/signInCallback"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // MVC OWIN Hybrid Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Hybrid Client"'                      ClientId = "mvc.owin.hybrid"'                      Flow = Flows.Hybrid'                      AllowAccessTokensViaBrowser = false'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = false'                      AccessTokenType = AccessTokenType.Reference'                        RedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        LogoutUri = "https://localhost:44300/Home/OidcSignOut"'                      LogoutSessionRequired = true                  }'                                      /////////////////////////////////////////////////////////////                  // MVC OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Implicit Client"'                      ClientId = "mvc.owin.implicit"'                      Flow = Flows.Implicit'                      AllowAccessTokensViaBrowser = false'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "https://localhost:44301/"                      }'                        LogoutUri = "https://localhost:44301/Home/SignoutCleanup"'                      LogoutSessionRequired = true'                  }'                    /////////////////////////////////////////////////////////////                  // WebForms OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WebForms OWIN Implicit Client"'                      ClientId = "webforms.owin.implicit"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }                  }'                    /////////////////////////////////////////////////////////////                  // WPF WebView Client Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF WebView Client Sample"'                      ClientId = "wpf.webview.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "oob://localhost/wpf.webview.client"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE"'                      ClientId = "wpf.hybrid"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE and PoP                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE and PoP"'                      ClientId = "wpf.hybrid.pop"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid.pop"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          StandardScopes.OfflineAccess.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // UWP OIDC Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "UWP OIDC Client"'                      ClientId = "uwp"'                      ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        Flow = Flows.HybridWithProofKey'                        RedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      AllowedScopes = new List<string>                      {                          "openid"' "profile"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'              };
Magic Number,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The following statement contains a magic number: return new List<Client>              {                  /////////////////////////////////////////////////////////////                  // Client Credentials With Reference Token                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.reference"'                      Flow = Flows.ClientCredentials'                      AccessTokenType = AccessTokenType.Reference'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())'                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                  }'                    /////////////////////////////////////////////////////////////                  // Console Client Credentials Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Client Credentials Flow Client"'                      Enabled = true'                      ClientId = "clientcredentials.client"'                      Flow = Flows.ClientCredentials'                        ClientSecrets = new List<Secret>                          {                              new Secret("secret".Sha256())'                              new Secret                              {                                  Value = "61B754C541BBCFC6A45A9E9EC5E47D8702B78C29"'                                  Type = Constants.SecretTypes.X509CertificateThumbprint'                                  Description = "Client Certificate"                              }'                          }'                        AllowedScopes = new List<string>                          {                              "read"'                              "write"                          }'                        Claims = new List<Claim>                          {                              new Claim("location"' "datacenter")                          }                  }'                    /////////////////////////////////////////////////////////////                  // Console Custom Grant Type Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Custom Grant Client"'                      ClientId = "customgrant.client"'                      Flow = Flows.Custom'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        AllowedCustomGrantTypes = new List<string>                      {                          "custom"                      }                  }'                    /////////////////////////////////////////////////////////////                  // Resource Owner Flow Samples                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Resource Owner Flow Client"'                      ClientId = "ro.client"'                      Flow = Flows.ResourceOwner'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"'                          "address"'                          "offline_access"                      }'                        // used by JS resource owner sample                      AllowedCorsOrigins = new List<string>                      {                          "http://localhost:13048"                      }'                        AccessTokenType = AccessTokenType.Jwt'                      AccessTokenLifetime = 3600'                        // refresh token settings                      AbsoluteRefreshTokenLifetime = 86400'                      SlidingRefreshTokenLifetime = 43200'                      RefreshTokenUsage = TokenUsage.OneTimeOnly'                      RefreshTokenExpiration = TokenExpiration.Sliding                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - OAuth only                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Simple"'                      ClientId = "js.simple"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37045/index.html"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - Manual"'                      ClientId = "js.manual"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          "openid"'                          "email"'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:37046/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:37046"                      }                  }'                    /////////////////////////////////////////////////////////////                  // JavaScript Implicit Client - TokenManager                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "JavaScript Implicit Client - UserManager"'                      ClientId = "js.usermanager"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                          "http://localhost:21575/silent_renew.html"'                          "http://localhost:21575/callback.html"'                          "http://localhost:21575/frame.html"'                          "http://localhost:21575/popup.html"'                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:21575/index.html"'                      }'                        AllowedCorsOrigins = new List<string>                      {                          "http://localhost:21575"'                      }'                        AccessTokenLifetime = 3600'                      AccessTokenType = AccessTokenType.Jwt                  }'                    /////////////////////////////////////////////////////////////                  // MVC CodeFlowClient Manual                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "Code Flow Client Demo"'                      ClientId = "codeclient"'                      Flow = Flows.AuthorizationCode'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RequireConsent = true'                      AllowRememberConsent = true'                        ClientUri = "https://identityserver.io"'                        RedirectUris = new List<string>                      {                          "https://localhost:44312/callback"'                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        AccessTokenType = AccessTokenType.Reference'                  }'                    /////////////////////////////////////////////////////////////                  // MVC No Library Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "OpenID Connect without Client Library Sample"'                      ClientId = "nolib.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:11716/account/signInCallback"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // MVC OWIN Hybrid Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Hybrid Client"'                      ClientId = "mvc.owin.hybrid"'                      Flow = Flows.Hybrid'                      AllowAccessTokensViaBrowser = false'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.OfflineAccess'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = false'                      AccessTokenType = AccessTokenType.Reference'                        RedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        PostLogoutRedirectUris = new List<string>                      {                          "https://localhost:44300/"                      }'                        LogoutUri = "https://localhost:44300/Home/OidcSignOut"'                      LogoutSessionRequired = true                  }'                                      /////////////////////////////////////////////////////////////                  // MVC OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "MVC OWIN Implicit Client"'                      ClientId = "mvc.owin.implicit"'                      Flow = Flows.Implicit'                      AllowAccessTokensViaBrowser = false'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "https://localhost:44301/"                      }'                        LogoutUri = "https://localhost:44301/Home/SignoutCleanup"'                      LogoutSessionRequired = true'                  }'                    /////////////////////////////////////////////////////////////                  // WebForms OWIN Implicit Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WebForms OWIN Implicit Client"'                      ClientId = "webforms.owin.implicit"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "http://localhost:5969/"                      }                  }'                    /////////////////////////////////////////////////////////////                  // WPF WebView Client Sample                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF WebView Client Sample"'                      ClientId = "wpf.webview.client"'                      Flow = Flows.Implicit'                        AllowedScopes = new List<string>                      {                          Constants.StandardScopes.OpenId'                          Constants.StandardScopes.Profile'                          Constants.StandardScopes.Email'                          Constants.StandardScopes.Roles'                          Constants.StandardScopes.Address'                          "read"'                          "write"                      }'                        ClientUri = "https://identityserver.io"'                        RequireConsent = true'                      AllowRememberConsent = true'                        RedirectUris = new List<string>                      {                          "oob://localhost/wpf.webview.client"'                      }'                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE"'                      ClientId = "wpf.hybrid"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // WPF Client with Hybrid Flow and PKCE and PoP                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "WPF Client with Hybrid Flow and PKCE and PoP"'                      ClientId = "wpf.hybrid.pop"'                      Flow = Flows.HybridWithProofKey'                        ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        RedirectUris = new List<string>                      {                          "http://localhost/wpf.hybrid.pop"                      }'                        AllowedScopes = new List<string>                      {                          StandardScopes.OpenId.Name'                          StandardScopes.Profile.Name'                          StandardScopes.OfflineAccess.Name'                          "read"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'                    /////////////////////////////////////////////////////////////                  // UWP OIDC Client                  /////////////////////////////////////////////////////////////                  new Client                  {                      ClientName = "UWP OIDC Client"'                      ClientId = "uwp"'                      ClientSecrets = new List<Secret>                      {                          new Secret("secret".Sha256())                      }'                        Flow = Flows.HybridWithProofKey'                        RedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      PostLogoutRedirectUris = new List<string>                      {                          "ms-app://s-1-15-2-491127476-3924255528-3585180829-1321445252-2746266865-3272304314-3346717936/"                      }'                      AllowedScopes = new List<string>                      {                          "openid"' "profile"' "write"                      }'                        AccessTokenType = AccessTokenType.Reference                  }'              };
Magic Number,SelfHost.Config,Certificate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Config\Certificate.cs,ReadStream,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,SelfHost.Config,Certificate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Config\Certificate.cs,ReadStream,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Clients"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          ClientName = c.String(nullable: false' maxLength: 200)'                          ClientUri = c.String(maxLength: 2000)'                          LogoUri = c.String()'                          RequireConsent = c.Boolean(nullable: false)'                          AllowRememberConsent = c.Boolean(nullable: false)'                          Flow = c.Int(nullable: false)'                          IdentityTokenLifetime = c.Int(nullable: false)'                          AccessTokenLifetime = c.Int(nullable: false)'                          AuthorizationCodeLifetime = c.Int(nullable: false)'                          AbsoluteRefreshTokenLifetime = c.Int(nullable: false)'                          SlidingRefreshTokenLifetime = c.Int(nullable: false)'                          RefreshTokenUsage = c.Int(nullable: false)'                          RefreshTokenExpiration = c.Int(nullable: false)'                          AccessTokenType = c.Int(nullable: false)'                          EnableLocalLogin = c.Boolean(nullable: false)'                          IncludeJwtId = c.Boolean(nullable: false)'                          AlwaysSendClientClaims = c.Boolean(nullable: false)'                          PrefixClientClaims = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Clients"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          ClientName = c.String(nullable: false' maxLength: 200)'                          ClientUri = c.String(maxLength: 2000)'                          LogoUri = c.String()'                          RequireConsent = c.Boolean(nullable: false)'                          AllowRememberConsent = c.Boolean(nullable: false)'                          Flow = c.Int(nullable: false)'                          IdentityTokenLifetime = c.Int(nullable: false)'                          AccessTokenLifetime = c.Int(nullable: false)'                          AuthorizationCodeLifetime = c.Int(nullable: false)'                          AbsoluteRefreshTokenLifetime = c.Int(nullable: false)'                          SlidingRefreshTokenLifetime = c.Int(nullable: false)'                          RefreshTokenUsage = c.Int(nullable: false)'                          RefreshTokenExpiration = c.Int(nullable: false)'                          AccessTokenType = c.Int(nullable: false)'                          EnableLocalLogin = c.Boolean(nullable: false)'                          IncludeJwtId = c.Boolean(nullable: false)'                          AlwaysSendClientClaims = c.Boolean(nullable: false)'                          PrefixClientClaims = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Clients"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          ClientName = c.String(nullable: false' maxLength: 200)'                          ClientUri = c.String(maxLength: 2000)'                          LogoUri = c.String()'                          RequireConsent = c.Boolean(nullable: false)'                          AllowRememberConsent = c.Boolean(nullable: false)'                          Flow = c.Int(nullable: false)'                          IdentityTokenLifetime = c.Int(nullable: false)'                          AccessTokenLifetime = c.Int(nullable: false)'                          AuthorizationCodeLifetime = c.Int(nullable: false)'                          AbsoluteRefreshTokenLifetime = c.Int(nullable: false)'                          SlidingRefreshTokenLifetime = c.Int(nullable: false)'                          RefreshTokenUsage = c.Int(nullable: false)'                          RefreshTokenExpiration = c.Int(nullable: false)'                          AccessTokenType = c.Int(nullable: false)'                          EnableLocalLogin = c.Boolean(nullable: false)'                          IncludeJwtId = c.Boolean(nullable: false)'                          AlwaysSendClientClaims = c.Boolean(nullable: false)'                          PrefixClientClaims = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientClaims"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Type = c.String(nullable: false' maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientClaims"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Type = c.String(nullable: false' maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Value = c.String(nullable: false' maxLength: 250)'                          ClientSecretType = c.String(maxLength: 250)'                          Description = c.String(maxLength: 2000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Value = c.String(nullable: false' maxLength: 250)'                          ClientSecretType = c.String(maxLength: 250)'                          Description = c.String(maxLength: 2000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Value = c.String(nullable: false' maxLength: 250)'                          ClientSecretType = c.String(maxLength: 250)'                          Description = c.String(maxLength: 2000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Value = c.String(nullable: false' maxLength: 250)'                          ClientSecretType = c.String(maxLength: 250)'                          Description = c.String(maxLength: 2000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientGrantTypeRestrictions"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          GrantType = c.String(nullable: false' maxLength: 250)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientIdPRestrictions"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Provider = c.String(nullable: false' maxLength: 200)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientPostLogoutRedirectUris"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Uri = c.String(nullable: false' maxLength: 2000)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientRedirectUris"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Uri = c.String(nullable: false' maxLength: 2000)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502141840113_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientScopeRestrictions"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Scope = c.String(nullable: false' maxLength: 200)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.ClientConfiguration,v1_2_0,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ClientConfiguration\201502272058115_v1_2_0.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ClientCorsOrigins"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Origin = c.String(nullable: false' maxLength: 150)'                          Client_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Clients"' t => t.Client_Id' cascadeDelete: true)                  .Index(t => t.Client_Id);
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Consents"'                  c => new                      {                          Subject = c.String(nullable: false' maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          Scopes = c.String(nullable: false' maxLength: 2000)'                      })                  .PrimaryKey(t => new { t.Subject' t.ClientId });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Consents"'                  c => new                      {                          Subject = c.String(nullable: false' maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          Scopes = c.String(nullable: false' maxLength: 2000)'                      })                  .PrimaryKey(t => new { t.Subject' t.ClientId });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Consents"'                  c => new                      {                          Subject = c.String(nullable: false' maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          Scopes = c.String(nullable: false' maxLength: 2000)'                      })                  .PrimaryKey(t => new { t.Subject' t.ClientId });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Tokens"'                  c => new                      {                          Key = c.String(nullable: false' maxLength: 128)'                          TokenType = c.Short(nullable: false)'                          SubjectId = c.String(maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          JsonCode = c.String(nullable: false)'                          Expiry = c.DateTimeOffset(nullable: false' precision: 7)'                      })                  .PrimaryKey(t => new { t.Key' t.TokenType });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Tokens"'                  c => new                      {                          Key = c.String(nullable: false' maxLength: 128)'                          TokenType = c.Short(nullable: false)'                          SubjectId = c.String(maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          JsonCode = c.String(nullable: false)'                          Expiry = c.DateTimeOffset(nullable: false' precision: 7)'                      })                  .PrimaryKey(t => new { t.Key' t.TokenType });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Tokens"'                  c => new                      {                          Key = c.String(nullable: false' maxLength: 128)'                          TokenType = c.Short(nullable: false)'                          SubjectId = c.String(maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          JsonCode = c.String(nullable: false)'                          Expiry = c.DateTimeOffset(nullable: false' precision: 7)'                      })                  .PrimaryKey(t => new { t.Key' t.TokenType });
Magic Number,SelfHost.Migrations.OperationalConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\OperationalConfiguration\201502141840136_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Tokens"'                  c => new                      {                          Key = c.String(nullable: false' maxLength: 128)'                          TokenType = c.Short(nullable: false)'                          SubjectId = c.String(maxLength: 200)'                          ClientId = c.String(nullable: false' maxLength: 200)'                          JsonCode = c.String(nullable: false)'                          Expiry = c.DateTimeOffset(nullable: false' precision: 7)'                      })                  .PrimaryKey(t => new { t.Key' t.TokenType });
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Scopes"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          Name = c.String(nullable: false' maxLength: 200)'                          DisplayName = c.String(maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          Required = c.Boolean(nullable: false)'                          Emphasize = c.Boolean(nullable: false)'                          Type = c.Int(nullable: false)'                          IncludeAllClaimsForUser = c.Boolean(nullable: false)'                          ClaimsRule = c.String(maxLength: 200)'                          ShowInDiscoveryDocument = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Scopes"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          Name = c.String(nullable: false' maxLength: 200)'                          DisplayName = c.String(maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          Required = c.Boolean(nullable: false)'                          Emphasize = c.Boolean(nullable: false)'                          Type = c.Int(nullable: false)'                          IncludeAllClaimsForUser = c.Boolean(nullable: false)'                          ClaimsRule = c.String(maxLength: 200)'                          ShowInDiscoveryDocument = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Scopes"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          Name = c.String(nullable: false' maxLength: 200)'                          DisplayName = c.String(maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          Required = c.Boolean(nullable: false)'                          Emphasize = c.Boolean(nullable: false)'                          Type = c.Int(nullable: false)'                          IncludeAllClaimsForUser = c.Boolean(nullable: false)'                          ClaimsRule = c.String(maxLength: 200)'                          ShowInDiscoveryDocument = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Scopes"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Enabled = c.Boolean(nullable: false)'                          Name = c.String(nullable: false' maxLength: 200)'                          DisplayName = c.String(maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          Required = c.Boolean(nullable: false)'                          Emphasize = c.Boolean(nullable: false)'                          Type = c.Int(nullable: false)'                          IncludeAllClaimsForUser = c.Boolean(nullable: false)'                          ClaimsRule = c.String(maxLength: 200)'                          ShowInDiscoveryDocument = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeClaims"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Name = c.String(nullable: false' maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          AlwaysIncludeInIdToken = c.Boolean(nullable: false)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,InitialCreate,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201502141840088_InitialCreate.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeClaims"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Name = c.String(nullable: false' maxLength: 200)'                          Description = c.String(maxLength: 1000)'                          AlwaysIncludeInIdToken = c.Boolean(nullable: false)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,v2_2_0,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201511200152080_v2_2_0.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Description = c.String(maxLength: 1000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Type = c.String(maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,v2_2_0,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201511200152080_v2_2_0.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Description = c.String(maxLength: 1000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Type = c.String(maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,v2_2_0,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201511200152080_v2_2_0.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Description = c.String(maxLength: 1000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Type = c.String(maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Magic Number,SelfHost.Migrations.ScopeConfiguration,v2_2_0,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\EntityFramework\SelfHost\Migrations\ScopeConfiguration\201511200152080_v2_2_0.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ScopeSecrets"'                  c => new                      {                          Id = c.Int(nullable: false' identity: true)'                          Description = c.String(maxLength: 1000)'                          Expiration = c.DateTimeOffset(precision: 7)'                          Type = c.String(maxLength: 250)'                          Value = c.String(nullable: false' maxLength: 250)'                          Scope_Id = c.Int(nullable: false)'                      })                  .PrimaryKey(t => t.Id)                  .ForeignKey("dbo.Scopes"' t => t.Scope_Id' cascadeDelete: true)                  .Index(t => t.Scope_Id);
Duplicate Code,IdentityServer3.Host.Config,Clients,D:\research\architectureSmells\repos\IdentityServer_IdentityServer3.Samples\source\_sharedConfiguration\Clients.cs,Get,The method contains a code clone-set at the following line numbers (starting from the method definition): ((277' 296)' (420' 439))
