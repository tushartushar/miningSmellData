Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,Cyclomatic complexity of the method is 34
Complex Method,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,Cyclomatic complexity of the method is 11
Complex Method,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadIndirect,Cyclomatic complexity of the method is 14
Complex Method,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,StoreIndirect,Cyclomatic complexity of the method is 14
Complex Method,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,Branch,Cyclomatic complexity of the method is 11
Complex Method,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,Cyclomatic complexity of the method is 31
Complex Method,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,Cyclomatic complexity of the method is 22
Complex Method,CliKit.IO,ILAsmMethodBodyWriter,C:\repos\Sable_McCli\CliKit\IO\ILAsmMethodBodyWriter.cs,Instruction,Cyclomatic complexity of the method is 25
Complex Method,CliKit.IO,ILGeneratorMethodBodyWriter,C:\repos\Sable_McCli\CliKit\IO\ILGeneratorMethodBodyWriter.cs,Call,Cyclomatic complexity of the method is 14
Complex Method,CliKit.IO,ILGeneratorMethodBodyWriter,C:\repos\Sable_McCli\CliKit\IO\ILGeneratorMethodBodyWriter.cs,Instruction,Cyclomatic complexity of the method is 28
Complex Method,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Branch,Cyclomatic complexity of the method is 19
Complex Method,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Call,Cyclomatic complexity of the method is 12
Complex Method,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,FieldReference,Cyclomatic complexity of the method is 8
Complex Method,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,LoadToken,Cyclomatic complexity of the method is 13
Long Statement,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The length of the statement  "	// ECMA 335 III.1.5 Table 7: Overflow Arithmetic Operations (add.ovf' add.ovf.un' mul.ovf' mul.ovf.un' sub.ovf' sub.ovf.un) " is 123.
Long Statement,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The length of the statement  "			if (lhs.IsManagedPointer () && (operation == ArithmeticOperation.Subtraction || operation == ArithmeticOperation.Subtraction_UnsignedWithOverflowCheck)) { " is 154.
Long Statement,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The length of the statement  "			if (lhs.IsManagedPointer () && (rhs == DataType.Int32 || rhs == DataType.NativeInt) && (operation == ArithmeticOperation.Addition || operation == ArithmeticOperation.Subtraction || operation == ArithmeticOperation.Addition_UnsignedWithOverflowCheck || operation == ArithmeticOperation.Subtraction_UnsignedWithOverflowCheck)) { " is 326.
Long Statement,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The length of the statement  "			if ((lhs == DataType.Int32 || lhs == DataType.NativeInt) && rhs.IsManagedPointer () && (operation == ArithmeticOperation.Addition || operation == ArithmeticOperation.Addition_UnsignedWithOverflowCheck)) { " is 204.
Long Statement,CliKit.Cil,ComparisonEnum,C:\repos\Sable_McCli\CliKit\Cil\Comparison.cs,IsApplicableTo,The length of the statement  "		if (first != DataType.ObjectReference || comparison == Comparison.Equal || comparison == Comparison.NotEqual_Unordered) { " is 121.
Long Statement,CliKit.Cil,ComparisonEnum,C:\repos\Sable_McCli\CliKit\Cil\Comparison.cs,IsApplicableTo,The length of the statement  "		if ((first == DataType.Int32 && second == DataType.NativeInt) || (first == DataType.NativeInt && second == DataType.Int32)) { " is 125.
Long Statement,CliKit.Cil,ComparisonEnum,C:\repos\Sable_McCli\CliKit\Cil\Comparison.cs,IsApplicableTo,The length of the statement  "		if ((first.IsManagedPointer () && second == DataType.NativeInt) || (first == DataType.NativeInt && second.IsManagedPointer ())) { " is 129.
Long Statement,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,VariableReference,The length of the statement  "	return location.IsLocal ? LocalReference (referenceKind' location.Index) : ArgumentReference (referenceKind' location.Index); " is 125.
Long Statement,CliKit.Cil,OperandKindEnum,C:\repos\Sable_McCli\CliKit\Cil\OperandKind.cs,IsMetadataToken,The length of the statement  "	const int mask = (1 << (int)OperandKind.FieldToken) | (1 << (int)OperandKind.MethodToken) | (1 << (int)OperandKind.SignatureToken) | (1 << (int)OperandKind.StringToken) | (1 << (int)OperandKind.Token) | (1 << (int)OperandKind.TypeToken); " is 237.
Long Statement,CliKit.Cil,OperandKindEnum,C:\repos\Sable_McCli\CliKit\Cil\OperandKind.cs,IsConstant,The length of the statement  "	const int mask = (1 << (int)OperandKind.Int8) | (1 << (int)OperandKind.Int32) | (1 << (int)OperandKind.Int64) | (1 << (int)OperandKind.Float32) | (1 << (int)OperandKind.Float64); " is 178.
Long Statement,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Branch,The length of the statement  "			throw Error ("{0} requires an int' reference or pointer stack operand' but the top of the stack has type {1}."' opcode.Name' dataType); " is 135.
Long Statement,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Call,The length of the statement  "		throw Error ("Calling {0} requires {1} stack operands' but the stack has size {2}."' GetFullName (method)' requiredStackSize' stack.Size); " is 138.
Long Statement,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,RequiresSymbolicOverload,The length of the statement  "	string message = string.Format ("Cannot verify opcode {0} with a numeric operand' " + "use an overload which accepts a symbolic operand."' opcode.Name); " is 152.
Complex Conditional,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The conditional expression  "(lhs == DataType.Int32 && rhs == DataType.NativeInt) || (lhs == DataType.NativeInt && rhs == DataType.Int32)"  is complex.
Complex Conditional,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The conditional expression  "lhs.IsManagedPointer () && (rhs == DataType.Int32 || rhs == DataType.NativeInt) && (operation == ArithmeticOperation.Addition || operation == ArithmeticOperation.Subtraction || operation == ArithmeticOperation.Addition_UnsignedWithOverflowCheck || operation == ArithmeticOperation.Subtraction_UnsignedWithOverflowCheck)"  is complex.
Complex Conditional,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The conditional expression  "(lhs == DataType.Int32 || lhs == DataType.NativeInt) && rhs.IsManagedPointer () && (operation == ArithmeticOperation.Addition || operation == ArithmeticOperation.Addition_UnsignedWithOverflowCheck)"  is complex.
Complex Conditional,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetResult,The conditional expression  "(lhs == DataType.Int32 && rhs == DataType.NativeInt) || (lhs == DataType.NativeInt && rhs == DataType.Int32)"  is complex.
Complex Conditional,CliKit.Cil,ComparisonEnum,C:\repos\Sable_McCli\CliKit\Cil\Comparison.cs,IsApplicableTo,The conditional expression  "(first == DataType.Int32 && second == DataType.NativeInt) || (first == DataType.NativeInt && second == DataType.Int32)"  is complex.
Complex Conditional,CliKit.Cil,ComparisonEnum,C:\repos\Sable_McCli\CliKit\Cil\Comparison.cs,IsApplicableTo,The conditional expression  "(first.IsManagedPointer () && second == DataType.NativeInt) || (first == DataType.NativeInt && second.IsManagedPointer ())"  is complex.
Magic Number,CliKit.Cil,ArithmeticOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ArithmeticOperation.cs,GetArity,The following statement contains a magic number: return IsUnary (operation) ? 1 : 2;  
Magic Number,CliKit.Cil,ConversionOpcode,C:\repos\Sable_McCli\CliKit\Cil\ConversionOpcode.cs,ConversionOpcode,The following statement contains a magic number: targetDataType = DataTypeEnum.TryParseNameInOpcode (match.Groups [2].Value).Value;  
Magic Number,CliKit.Cil,ConversionOpcode,C:\repos\Sable_McCli\CliKit\Cil\ConversionOpcode.cs,ConversionOpcode,The following statement contains a magic number: isSourceUnsigned = match.Groups [3].Success;  
Magic Number,CliKit.Cil,LoadConstantOpcode,C:\repos\Sable_McCli\CliKit\Cil\LoadConstantOpcode.cs,LoadConstantOpcode,The following statement contains a magic number: if (lastChar >= '0' && lastChar <= '9') {  	constantValue = (sbyte)(lastChar - '0');  	if (opcode.Name [opcode.Name.Length - 2] == 'M')  		constantValue *= -1;  }  else {  	constantValue = sbyte.MinValue;  }  
Magic Number,CliKit.Cil,LoadConstantOpcode,C:\repos\Sable_McCli\CliKit\Cil\LoadConstantOpcode.cs,LoadConstantOpcode,The following statement contains a magic number: if (opcode.Name [opcode.Name.Length - 2] == 'M')  	constantValue *= -1;  
Magic Number,CliKit.Cil,ConversionOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ConversionOperation.cs,Get,The following statement contains a magic number: if ((targetSize ?? 4) < (sourceSize ?? 8))  	return ConversionOperation.Truncate;  
Magic Number,CliKit.Cil,ConversionOperationEnum,C:\repos\Sable_McCli\CliKit\Cil\ConversionOperation.cs,Get,The following statement contains a magic number: if ((targetSize ?? 4) < (sourceSize ?? 8))  	return ConversionOperation.Truncate;  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadInt32,The following statement contains a magic number: switch (value) {  case -1:  	return Ldc_I4_M1;  case 0:  	return Ldc_I4_0;  case 1:  	return Ldc_I4_1;  case 2:  	return Ldc_I4_2;  case 3:  	return Ldc_I4_3;  case 4:  	return Ldc_I4_4;  case 5:  	return Ldc_I4_5;  case 6:  	return Ldc_I4_6;  case 7:  	return Ldc_I4_7;  case 8:  	return Ldc_I4_8;  default:  	return (sbyte)value == value ? Ldc_I4_S : Ldc_I4;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	return Ldarg_0;  case 1:  	return Ldarg_1;  case 2:  	return Ldarg_2;  case 3:  	return Ldarg_3;  default:  	return index < 0x100 ? Ldarg_S : Ldarg;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	return Ldarg_0;  case 1:  	return Ldarg_1;  case 2:  	return Ldarg_2;  case 3:  	return Ldarg_3;  default:  	return index < 0x100 ? Ldarg_S : Ldarg;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	return Ldloc_0;  case 1:  	return Ldloc_1;  case 2:  	return Ldloc_2;  case 3:  	return Ldloc_3;  default:  	return index < 0x100 ? Ldloc_S : Ldloc;  }  
Magic Number,CliKit.Cil,Opcode,C:\repos\Sable_McCli\CliKit\Cil\Opcode.Definitions.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	return Ldloc_0;  case 1:  	return Ldloc_1;  case 2:  	return Ldloc_2;  case 3:  	return Ldloc_3;  default:  	return index < 0x100 ? Ldloc_S : Ldloc;  }  
Magic Number,CliKit.Cil,OpcodeValueEnum,C:\repos\Sable_McCli\CliKit\Cil\OpcodeValue.cs,GetFirstByte,The following statement contains a magic number: return unchecked(HasTwoBytes (value) ? (byte)((ushort)value >> 8) : (byte)value);  
Magic Number,CliKit.Cil,OpcodeValueEnum,C:\repos\Sable_McCli\CliKit\Cil\OpcodeValue.cs,GetByteCount,The following statement contains a magic number: return HasTwoBytes (value) ? 2 : 1;  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: switch (stackBehaviour) {  case Emit.StackBehaviour.Popi_popi_popi:  case Emit.StackBehaviour.Popref_popi_pop1:  case Emit.StackBehaviour.Popref_popi_popi:  case Emit.StackBehaviour.Popref_popi_popi8:  case Emit.StackBehaviour.Popref_popi_popr4:  case Emit.StackBehaviour.Popref_popi_popr8:  case Emit.StackBehaviour.Popref_popi_popref:  	return -3;  case Emit.StackBehaviour.Pop1_pop1:  case Emit.StackBehaviour.Popi_pop1:  case Emit.StackBehaviour.Popi_popi:  case Emit.StackBehaviour.Popi_popi8:  case Emit.StackBehaviour.Popi_popr4:  case Emit.StackBehaviour.Popi_popr8:  case Emit.StackBehaviour.Popref_pop1:  case Emit.StackBehaviour.Popref_popi:  	return -2;  case Emit.StackBehaviour.Pop1:  case Emit.StackBehaviour.Popi:  case Emit.StackBehaviour.Popref:  	return -1;  case Emit.StackBehaviour.Pop0:  case Emit.StackBehaviour.Push0:  	return 0;  case Emit.StackBehaviour.Push1:  case Emit.StackBehaviour.Pushi:  case Emit.StackBehaviour.Pushi8:  case Emit.StackBehaviour.Pushr4:  case Emit.StackBehaviour.Pushr8:  case Emit.StackBehaviour.Pushref:  	return 1;  case Emit.StackBehaviour.Push1_push1:  	return 2;  case Emit.StackBehaviour.Varpop:  case Emit.StackBehaviour.Varpush:  	return null;  default:  	throw new ArgumentException ("stackBehaviour");  }  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: switch (stackBehaviour) {  case Emit.StackBehaviour.Popi_popi_popi:  case Emit.StackBehaviour.Popref_popi_pop1:  case Emit.StackBehaviour.Popref_popi_popi:  case Emit.StackBehaviour.Popref_popi_popi8:  case Emit.StackBehaviour.Popref_popi_popr4:  case Emit.StackBehaviour.Popref_popi_popr8:  case Emit.StackBehaviour.Popref_popi_popref:  	return -3;  case Emit.StackBehaviour.Pop1_pop1:  case Emit.StackBehaviour.Popi_pop1:  case Emit.StackBehaviour.Popi_popi:  case Emit.StackBehaviour.Popi_popi8:  case Emit.StackBehaviour.Popi_popr4:  case Emit.StackBehaviour.Popi_popr8:  case Emit.StackBehaviour.Popref_pop1:  case Emit.StackBehaviour.Popref_popi:  	return -2;  case Emit.StackBehaviour.Pop1:  case Emit.StackBehaviour.Popi:  case Emit.StackBehaviour.Popref:  	return -1;  case Emit.StackBehaviour.Pop0:  case Emit.StackBehaviour.Push0:  	return 0;  case Emit.StackBehaviour.Push1:  case Emit.StackBehaviour.Pushi:  case Emit.StackBehaviour.Pushi8:  case Emit.StackBehaviour.Pushr4:  case Emit.StackBehaviour.Pushr8:  case Emit.StackBehaviour.Pushref:  	return 1;  case Emit.StackBehaviour.Push1_push1:  	return 2;  case Emit.StackBehaviour.Varpop:  case Emit.StackBehaviour.Varpush:  	return null;  default:  	throw new ArgumentException ("stackBehaviour");  }  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: switch (stackBehaviour) {  case Emit.StackBehaviour.Popi_popi_popi:  case Emit.StackBehaviour.Popref_popi_pop1:  case Emit.StackBehaviour.Popref_popi_popi:  case Emit.StackBehaviour.Popref_popi_popi8:  case Emit.StackBehaviour.Popref_popi_popr4:  case Emit.StackBehaviour.Popref_popi_popr8:  case Emit.StackBehaviour.Popref_popi_popref:  	return -3;  case Emit.StackBehaviour.Pop1_pop1:  case Emit.StackBehaviour.Popi_pop1:  case Emit.StackBehaviour.Popi_popi:  case Emit.StackBehaviour.Popi_popi8:  case Emit.StackBehaviour.Popi_popr4:  case Emit.StackBehaviour.Popi_popr8:  case Emit.StackBehaviour.Popref_pop1:  case Emit.StackBehaviour.Popref_popi:  	return -2;  case Emit.StackBehaviour.Pop1:  case Emit.StackBehaviour.Popi:  case Emit.StackBehaviour.Popref:  	return -1;  case Emit.StackBehaviour.Pop0:  case Emit.StackBehaviour.Push0:  	return 0;  case Emit.StackBehaviour.Push1:  case Emit.StackBehaviour.Pushi:  case Emit.StackBehaviour.Pushi8:  case Emit.StackBehaviour.Pushr4:  case Emit.StackBehaviour.Pushr8:  case Emit.StackBehaviour.Pushref:  	return 1;  case Emit.StackBehaviour.Push1_push1:  	return 2;  case Emit.StackBehaviour.Varpop:  case Emit.StackBehaviour.Varpush:  	return null;  default:  	throw new ArgumentException ("stackBehaviour");  }  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: return -3;  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: return -2;  
Magic Number,CliKit.Cil,ReflectionEmitEnums,C:\repos\Sable_McCli\CliKit\Cil\ReflectionEmitEnums.cs,GetStackDelta,The following statement contains a magic number: return 2;  
Magic Number,CliKit.Cil,VariableLocation,C:\repos\Sable_McCli\CliKit\Cil\VariableLocation.cs,GetHashCode,The following statement contains a magic number: return ((int)kind << 16) | (int)index;  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: if (OpcodeValueEnum.IsFirstOfTwoBytes ((byte)firstOpcodeByte))  	opcodeValue = (OpcodeValue)((firstOpcodeByte << 8) | stream.ReadUInt8 ());  else  	opcodeValue = (OpcodeValue)firstOpcodeByte;  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: opcodeValue = (OpcodeValue)((firstOpcodeByte << 8) | stream.ReadUInt8 ());  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: if (opcode == Opcode.Switch) {  	// Read jump table  	int[] jumpTable = new int[stream.ReadUInt32 ()];  	for (int i = 0; i < jumpTable.Length; ++i)  		jumpTable [i] = stream.ReadInt32 ();  	instruction = RawInstruction.CreateSwitch (jumpTable);  }  else {  	NumericalOperand operand;  	switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  	case 0:  		operand = default(NumericalOperand);  		break;  	case 1:  		operand = stream.ReadInt8 ();  		break;  	case 2:  		operand = stream.ReadInt16 ();  		break;  	case 4:  		operand = stream.ReadInt32 ();  		break;  	case 8:  		operand = stream.ReadInt64 ();  		break;  	default:  		throw new NotSupportedException ("Unexpected opcode operand size");  	}  	instruction = new RawInstruction (opcode' operand);  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: if (opcode == Opcode.Switch) {  	// Read jump table  	int[] jumpTable = new int[stream.ReadUInt32 ()];  	for (int i = 0; i < jumpTable.Length; ++i)  		jumpTable [i] = stream.ReadInt32 ();  	instruction = RawInstruction.CreateSwitch (jumpTable);  }  else {  	NumericalOperand operand;  	switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  	case 0:  		operand = default(NumericalOperand);  		break;  	case 1:  		operand = stream.ReadInt8 ();  		break;  	case 2:  		operand = stream.ReadInt16 ();  		break;  	case 4:  		operand = stream.ReadInt32 ();  		break;  	case 8:  		operand = stream.ReadInt64 ();  		break;  	default:  		throw new NotSupportedException ("Unexpected opcode operand size");  	}  	instruction = new RawInstruction (opcode' operand);  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: if (opcode == Opcode.Switch) {  	// Read jump table  	int[] jumpTable = new int[stream.ReadUInt32 ()];  	for (int i = 0; i < jumpTable.Length; ++i)  		jumpTable [i] = stream.ReadInt32 ();  	instruction = RawInstruction.CreateSwitch (jumpTable);  }  else {  	NumericalOperand operand;  	switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  	case 0:  		operand = default(NumericalOperand);  		break;  	case 1:  		operand = stream.ReadInt8 ();  		break;  	case 2:  		operand = stream.ReadInt16 ();  		break;  	case 4:  		operand = stream.ReadInt32 ();  		break;  	case 8:  		operand = stream.ReadInt64 ();  		break;  	default:  		throw new NotSupportedException ("Unexpected opcode operand size");  	}  	instruction = new RawInstruction (opcode' operand);  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  case 0:  	operand = default(NumericalOperand);  	break;  case 1:  	operand = stream.ReadInt8 ();  	break;  case 2:  	operand = stream.ReadInt16 ();  	break;  case 4:  	operand = stream.ReadInt32 ();  	break;  case 8:  	operand = stream.ReadInt64 ();  	break;  default:  	throw new NotSupportedException ("Unexpected opcode operand size");  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  case 0:  	operand = default(NumericalOperand);  	break;  case 1:  	operand = stream.ReadInt8 ();  	break;  case 2:  	operand = stream.ReadInt16 ();  	break;  case 4:  	operand = stream.ReadInt32 ();  	break;  case 8:  	operand = stream.ReadInt64 ();  	break;  default:  	throw new NotSupportedException ("Unexpected opcode operand size");  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadInstruction,The following statement contains a magic number: switch ((int)opcode.OperandKind.GetSizeInBytes ()) {  case 0:  	operand = default(NumericalOperand);  	break;  case 1:  	operand = stream.ReadInt8 ();  	break;  case 2:  	operand = stream.ReadInt16 ();  	break;  case 4:  	operand = stream.ReadInt32 ();  	break;  case 8:  	operand = stream.ReadInt64 ();  	break;  default:  	throw new NotSupportedException ("Unexpected opcode operand size");  }  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadUInt16,The following statement contains a magic number: return unchecked((ushort)(stream.ReadUInt8 () | (stream.ReadUInt8 () << 8)));  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadUInt32,The following statement contains a magic number: return unchecked((uint)((uint)stream.ReadUInt16 () | ((uint)stream.ReadUInt16 () << 16)));  
Magic Number,CliKit.IO,CilReader,C:\repos\Sable_McCli\CliKit\IO\CilReader.cs,ReadUInt64,The following statement contains a magic number: return unchecked((ulong)((ulong)stream.ReadUInt32 () | ((ulong)stream.ReadUInt32 () << 32)));  
Magic Number,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Branch,The following statement contains a magic number: switch (opcode.BranchKind) {  case BranchKind.Unconditional:  	break;  case BranchKind.Boolean: {  	var dataType = stack.Pop (opcode).DataType;  	switch (dataType) {  	case DataType.Int32:  	case DataType.Int64:  	case DataType.NativeInt:  	case DataType.ObjectReference:  	case DataType.MutableManagedPointer:  	case DataType.ReadonlyManagedPointer:  		break;  	default:  		throw Error ("{0} requires an int' reference or pointer stack operand' but the top of the stack has type {1}."' opcode.Name' dataType);  	}  	break;  }  // TODO: Check operand types  case BranchKind.Comparison: {  	stack.RequireSize (opcode' 2);  	var lhs = stack.Pop (opcode);  	var rhs = stack.Pop (opcode);  	bool verifiable;  	if (!opcode.Comparison.IsApplicableTo (lhs.DataType' rhs.DataType' out verifiable))  		throw Error ("{0} cannot operate on stack operands of type {1} and {2}."' opcode.Name' lhs.DataType' rhs.DataType);  	break;  }  default:  	throw new NotImplementedException ();  }  
Magic Number,CliKit.IO,MethodBodyVerifier,C:\repos\Sable_McCli\CliKit\IO\MethodBodyVerifier.cs,Branch,The following statement contains a magic number: stack.RequireSize (opcode' 2);  
Magic Number,CliKit.IO,RawInstructionSink,C:\repos\Sable_McCli\CliKit\IO\RawInstructionSink.cs,LoadFloat,The following statement contains a magic number: if (value >= -1 && value <= 8) {  	int intValue = (int)value;  	if (intValue == value) {  		// We can actually encode it as an int followed by a conversion  		var opcode = Opcode.LoadInt32 (intValue);  		Contract.Assert (opcode.MacroIntValue == intValue);  		Instruction (opcode);  		Instruction (intToFloatConversionOpcode);  		return;  	}  }  
Magic Number,CliKit.IO.PE,CodedIndex,C:\repos\Sable_McCli\CliKit\IO\PE\CodedIndex.cs,CodedIndex,The following statement contains a magic number: this.bitCount = (int)Math.Ceiling (Math.Log (tables.Length' 2));  
Magic Number,CliKit,MetadataToken,C:\repos\Sable_McCli\CliKit\MetadataToken.cs,FromKindIndex,The following statement contains a magic number: return new MetadataToken (((int)kind << 24) | (index + 1));  
Magic Number,CliKit,MetadataToken,C:\repos\Sable_McCli\CliKit\MetadataToken.cs,Nil,The following statement contains a magic number: return new MetadataToken ((int)kind << 24);  
Magic Number,CliKit,DataTypeEnum,C:\repos\Sable_McCli\CliKit\DataType.cs,GetSizeInBytes,The following statement contains a magic number: if (type == DataType.Float32)  	return 4;  
Magic Number,CliKit,DataTypeEnum,C:\repos\Sable_McCli\CliKit\DataType.cs,GetSizeInBytes,The following statement contains a magic number: return 4;  
Magic Number,CliKit,DataTypeEnum,C:\repos\Sable_McCli\CliKit\DataType.cs,GetSizeInBytes,The following statement contains a magic number: if (type == DataType.Float64)  	return 8;  
Magic Number,CliKit,DataTypeEnum,C:\repos\Sable_McCli\CliKit\DataType.cs,GetSizeInBytes,The following statement contains a magic number: return 8;  
