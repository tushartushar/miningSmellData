Implementation smell,Namespace,Class,File,Method,Description
Complex Method,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,Cyclomatic complexity of the method is 8
Complex Method,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,vertcat,Cyclomatic complexity of the method is 8
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 5 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 5 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 6 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 14 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 16 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 33 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 55 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,horzcat,The method has 56 parameters.
Long Parameter List,McCli.Builtins,ArrayCreation,C:\repos\Sable_McCli\McCli.Builtins\ArrayCreation.cs,vertcat,The method has 5 parameters.
Long Parameter List,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,mtimes_core,The method has 6 parameters.
Long Statement,McCli.Builtins,DataTypeIdentification,C:\repos\Sable_McCli\McCli.Builtins\DataTypeIdentification.cs,isa,The length of the statement  "	return (classNameString == "numeric" && (classKind & MClassKinds.NumericMask) != 0) || (classNameString == "float" && (classKind & MClassKinds.FloatMask) != 0) || (classNameString == "integer" && (classKind & MClassKinds.IntegerMask) != 0); " is 240.
Long Statement,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,times,The length of the statement  "	return new MComplex<double> (lhs.RealPart * rhs.RealPart - lhs.ImaginaryPart * rhs.ImaginaryPart' lhs.RealPart * rhs.ImaginaryPart + lhs.ImaginaryPart * rhs.RealPart); " is 167.
Long Statement,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,mtimes,The length of the statement  "	mtimes_core (lhsShape.RowCount' lhsShape.ColumnCount' rhsShape.ColumnCount' lhs.BackingArray' rhs.BackingArray' result.BackingArray); " is 133.
Long Statement,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,clock,The length of the statement  "	return MFullArray<double>.CreateRowVector (now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second + now.Millisecond / 1000.0); " is 134.
Long Statement,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,RowToDateTime,The length of the statement  "	return new DateTime (PseudoBuiltins.ToInt (array [rowCount * 0 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 1 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 2 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 3 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 4 + rowIndex])' (int)seconds' (int)((seconds % 1) * 1000)); " is 344.
Magic Number,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,round,The following statement contains a magic number: if (value > 0)  	return (value % 1) == 0.5 ? ceil (value) : floor (value);  else  	return (value % 1) == -0.5 ? floor (value) : ceil (value);  
Magic Number,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,round,The following statement contains a magic number: if (value > 0)  	return (value % 1) == 0.5 ? ceil (value) : floor (value);  else  	return (value % 1) == -0.5 ? floor (value) : ceil (value);  
Magic Number,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,round,The following statement contains a magic number: return (value % 1) == 0.5 ? ceil (value) : floor (value);  
Magic Number,McCli.Builtins,ElementaryOperations,C:\repos\Sable_McCli\McCli.Builtins\ElementaryOperations.cs,round,The following statement contains a magic number: return (value % 1) == -0.5 ? floor (value) : ceil (value);  
Magic Number,McCli.Builtins,ExponentsAndLogarithms,C:\repos\Sable_McCli\McCli.Builtins\ExponentsAndLogarithms.cs,pow2,The following statement contains a magic number: return Math.Pow (2' value);  
Magic Number,McCli.Builtins,ExponentsAndLogarithms,C:\repos\Sable_McCli\McCli.Builtins\ExponentsAndLogarithms.cs,log2,The following statement contains a magic number: return Math.Log (value' 2);  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,now,The following statement contains a magic number: return (DateTime.Now - new DateTime (1' 1' 1)).TotalDays + 365;  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,clock,The following statement contains a magic number: return MFullArray<double>.CreateRowVector (now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second + now.Millisecond / 1000.0);  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,etime,The following statement contains a magic number: if (fromShape != toShape || fromShape.ColumnCount != 6 || fromShape.IsHigherDimensional)  	throw new MArrayShapeException ();  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,RowToDateTime,The following statement contains a magic number: return new DateTime (PseudoBuiltins.ToInt (array [rowCount * 0 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 1 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 2 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 3 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 4 + rowIndex])' (int)seconds' (int)((seconds % 1) * 1000));  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,RowToDateTime,The following statement contains a magic number: return new DateTime (PseudoBuiltins.ToInt (array [rowCount * 0 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 1 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 2 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 3 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 4 + rowIndex])' (int)seconds' (int)((seconds % 1) * 1000));  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,RowToDateTime,The following statement contains a magic number: return new DateTime (PseudoBuiltins.ToInt (array [rowCount * 0 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 1 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 2 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 3 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 4 + rowIndex])' (int)seconds' (int)((seconds % 1) * 1000));  
Magic Number,McCli.Builtins,DatesAndTime,C:\repos\Sable_McCli\McCli.Builtins\DatesAndTime.cs,RowToDateTime,The following statement contains a magic number: return new DateTime (PseudoBuiltins.ToInt (array [rowCount * 0 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 1 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 2 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 3 + rowIndex])' PseudoBuiltins.ToInt (array [rowCount * 4 + rowIndex])' (int)seconds' (int)((seconds % 1) * 1000));  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: lock (threadSharedRandom) {  	// The Box-Muller algorithm generates two values at a time'  	// so unroll the loop to take advantage of this.  	int unrolledCount = count / 2 * 2;  	for (int i = 0; i < unrolledCount; i += 2) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [i + 0] = z1;  		resultArray [i + 1] = z2;  	}  	// For odd-sized arrays' generate the last value.  	if ((count % 2) == 1) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [count - 1] = z1;  	}  }  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: lock (threadSharedRandom) {  	// The Box-Muller algorithm generates two values at a time'  	// so unroll the loop to take advantage of this.  	int unrolledCount = count / 2 * 2;  	for (int i = 0; i < unrolledCount; i += 2) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [i + 0] = z1;  		resultArray [i + 1] = z2;  	}  	// For odd-sized arrays' generate the last value.  	if ((count % 2) == 1) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [count - 1] = z1;  	}  }  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: lock (threadSharedRandom) {  	// The Box-Muller algorithm generates two values at a time'  	// so unroll the loop to take advantage of this.  	int unrolledCount = count / 2 * 2;  	for (int i = 0; i < unrolledCount; i += 2) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [i + 0] = z1;  		resultArray [i + 1] = z2;  	}  	// For odd-sized arrays' generate the last value.  	if ((count % 2) == 1) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [count - 1] = z1;  	}  }  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: lock (threadSharedRandom) {  	// The Box-Muller algorithm generates two values at a time'  	// so unroll the loop to take advantage of this.  	int unrolledCount = count / 2 * 2;  	for (int i = 0; i < unrolledCount; i += 2) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [i + 0] = z1;  		resultArray [i + 1] = z2;  	}  	// For odd-sized arrays' generate the last value.  	if ((count % 2) == 1) {  		double z1' z2;  		RandomNormalBoxMuller_NoLock (out z1' out z2);  		resultArray [count - 1] = z1;  	}  }  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: for (int i = 0; i < unrolledCount; i += 2) {  	double z1' z2;  	RandomNormalBoxMuller_NoLock (out z1' out z2);  	resultArray [i + 0] = z1;  	resultArray [i + 1] = z2;  }  
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: i += 2
Magic Number,McCli.Builtins,RandomNumberGeneration,C:\repos\Sable_McCli\McCli.Builtins\RandomNumberGeneration.cs,randn,The following statement contains a magic number: if ((count % 2) == 1) {  	double z1' z2;  	RandomNormalBoxMuller_NoLock (out z1' out z2);  	resultArray [count - 1] = z1;  }  
Magic Number,McCli.Builtins,Trigonometry,C:\repos\Sable_McCli\McCli.Builtins\Trigonometry.cs,degtorad,The following statement contains a magic number: return value * (Math.PI / 180);  
Magic Number,McCli.Builtins,Trigonometry,C:\repos\Sable_McCli\McCli.Builtins\Trigonometry.cs,radtodeg,The following statement contains a magic number: return value * (180 / Math.PI);  
Magic Number,McCli.Builtins,Trigonometry,C:\repos\Sable_McCli\McCli.Builtins\Trigonometry.cs,acot,The following statement contains a magic number: return (Math.PI * 0.5) - atan (value);  
Magic Number,McCli.Builtins,Trigonometry,C:\repos\Sable_McCli\McCli.Builtins\Trigonometry.cs,acsc,The following statement contains a magic number: return (Math.PI * 0.5) - asec (value);  
