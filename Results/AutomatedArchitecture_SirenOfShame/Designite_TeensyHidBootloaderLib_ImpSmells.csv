Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,Cyclomatic complexity of the method is 14
Long Parameter List,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The method has 5 parameters. Parameters: hexFileStream' waitForDeviceToAppear' rebootAfterProgramming' timeOut' progressFunc
Long Statement,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The length of the statement  "                throw new Exception("Address out of range. Address: " + (addr + _extendedAddr + len) + " expected less than " + MaxMemorySize); " is 127.
Long Statement,TeensyHidBootloaderLib,TeensyDevice,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyDevice.cs,TryOpen,The length of the statement  "            using (var deviceInformationSet = new DeviceInformationSet(hidGuid' DiGetClassFlags.Present | DiGetClassFlags.DeviceInterface)) " is 127.
Complex Conditional,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,BytesWithinRange,The conditional expression  "begin < 0 || begin >= MaxMemorySize ||                 end < 0 || end >= MaxMemorySize"  is complex.
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (line.Length < 11)              {                  throw new Exception("Invalid line length. Expected at least 11 found " + line.Length);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int len = ReadHex(ref ptr' 2);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (line.Length < (11 + (len * 2)))              {                  throw new Exception("Invalid line length. Expected at least " + (11 + (len * 2)) + " found " + line.Length);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (line.Length < (11 + (len * 2)))              {                  throw new Exception("Invalid line length. Expected at least " + (11 + (len * 2)) + " found " + line.Length);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (line.Length < (11 + (len * 2)))              {                  throw new Exception("Invalid line length. Expected at least " + (11 + (len * 2)) + " found " + line.Length);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (line.Length < (11 + (len * 2)))              {                  throw new Exception("Invalid line length. Expected at least " + (11 + (len * 2)) + " found " + line.Length);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int addr = ReadHex(ref ptr' 4);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int code = ReadHex(ref ptr' 2);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int sum = (len & 255) + ((addr >> 8) & 255) + (addr & 255) + (code & 255);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int sum = (len & 255) + ((addr >> 8) & 255) + (addr & 255) + (code & 255);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int sum = (len & 255) + ((addr >> 8) & 255) + (addr & 255) + (code & 255);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int sum = (len & 255) + ((addr >> 8) & 255) + (addr & 255) + (code & 255);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: int sum = (len & 255) + ((addr >> 8) & 255) + (addr & 255) + (code & 255);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if (code != 0)              {                  if (code == 1)                  {                      _endRecordSeen = true;                      return;                  }                  if (code == 2 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 4);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  if (code == 4 && len == 2)                  {                      i = ReadHex(ref ptr' 4);                      sum += ((i >> 8) & 255) + (i & 255);                      cksum = ReadHex(ref ptr' 2);                      if ((((sum & 255) + (cksum & 255)) & 255) != 0)                      {                          throw new Exception("Invalid checksum " + cksum);                      }                      _extendedAddr = (uint)(i << 16);                      Log.DebugFormat("ext addr = {0:08X}"' _extendedAddr);                  }                  throw new Exception("No data line");              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: while (num != len)              {                  i = ReadHex(ref ptr' 2);                  i &= 255;                  _firmwareImage[addr + _extendedAddr + num] = (byte)i;                  _firmwareMask[addr + _extendedAddr + num] = 1;                  ptr += 2;                  sum += i;                  (num)++;                  if (num >= 256)                  {                      throw new Exception("To many bytes on a line");                  }              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: while (num != len)              {                  i = ReadHex(ref ptr' 2);                  i &= 255;                  _firmwareImage[addr + _extendedAddr + num] = (byte)i;                  _firmwareMask[addr + _extendedAddr + num] = 1;                  ptr += 2;                  sum += i;                  (num)++;                  if (num >= 256)                  {                      throw new Exception("To many bytes on a line");                  }              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: while (num != len)              {                  i = ReadHex(ref ptr' 2);                  i &= 255;                  _firmwareImage[addr + _extendedAddr + num] = (byte)i;                  _firmwareMask[addr + _extendedAddr + num] = 1;                  ptr += 2;                  sum += i;                  (num)++;                  if (num >= 256)                  {                      throw new Exception("To many bytes on a line");                  }              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: while (num != len)              {                  i = ReadHex(ref ptr' 2);                  i &= 255;                  _firmwareImage[addr + _extendedAddr + num] = (byte)i;                  _firmwareMask[addr + _extendedAddr + num] = 1;                  ptr += 2;                  sum += i;                  (num)++;                  if (num >= 256)                  {                      throw new Exception("To many bytes on a line");                  }              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: cksum = ReadHex(ref ptr' 2);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if ((((sum & 255) + (cksum & 255)) & 255) != 0)              {                  throw new Exception("Invalid checksum " + cksum);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if ((((sum & 255) + (cksum & 255)) & 255) != 0)              {                  throw new Exception("Invalid checksum " + cksum);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ParseHexLine,The following statement contains a magic number: if ((((sum & 255) + (cksum & 255)) & 255) != 0)              {                  throw new Exception("Invalid checksum " + cksum);              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,ReadHex,The following statement contains a magic number: return Convert.ToInt32(hex' 16);
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,GetData,The following statement contains a magic number: if (addr < 0 || len < 0 || addr + len >= MaxMemorySize)              {                  for (i = 0; i < len; i++)                  {                      bytes[i + offset] = 255;                  }                  return;              }
Magic Number,TeensyHidBootloaderLib,IntelHexFile,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\IntelHexFile.cs,GetData,The following statement contains a magic number: for (i = 0; i < len; i++)              {                  if (_firmwareMask[addr] != 0)                  {                      bytes[i + offset] = _firmwareImage[addr];                  }                  else                  {                      bytes[i + offset] = 255;                  }                  addr++;              }
Magic Number,TeensyHidBootloaderLib,TeensyDevice,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyDevice.cs,TeensyDevice,The following statement contains a magic number: while (true)              {                  if (TryOpen(blockSize)) break;                  if (!waitForDeviceToAppear) throw new Exception("Unable to open device");                  if (!waited)                  {                      Log.Debug("Waiting for Teensy device...");                      Log.Debug(" (hint: press the reset button)");                      waited = true;                  }                  if (DateTime.Now - start > timeOut)                  {                      throw new Exception("Timeout waiting for device");                  }                  Thread.Sleep(250);              }
Magic Number,TeensyHidBootloaderLib,TeensyDevice,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyDevice.cs,TryOpen,The following statement contains a magic number: using (var deviceInformationSet = new DeviceInformationSet(hidGuid' DiGetClassFlags.Present | DiGetClassFlags.DeviceInterface))              {                  deviceInterface = deviceInformationSet.GetDeviceInterfaces(hidGuid)                      .Where(d => d.IsValidUsbDevice)                      .FirstOrDefault(dis => (dis.Details.DevicePath.Contains("16c0") && dis.Details.DevicePath.Contains("0478"))                          || (dis.Details.DevicePath.Contains("03eb") && dis.Details.DevicePath.Contains("2067")));                  if (deviceInterface != null)                  {                      _handle = deviceInterface.OpenFile(blockSize + 3);                      return true;                  }                    return false;              }
Magic Number,TeensyHidBootloaderLib,TeensyDevice,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyDevice.cs,Write,The following statement contains a magic number: byte[] tmpbuf = new byte[1040];
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: Log.DebugFormat("Read: {0} bytes' {1}% usage"' hexFile.ByteCount' (double)hexFile.ByteCount / _codeSize * 100.0);
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: using (var teensyDevice = new TeensyDevice(waitForDeviceToAppear' _blockSize' timeOut))              {                  progressFunc(10);                  Log.Debug("Programming");                  Program(teensyDevice' hexFile' i => progressFunc(10 + (int)(i * 80.0 / 100.0)));                  progressFunc(90);                    // reboot to the user's new code                  if (rebootAfterProgramming)                  {                      Reboot(teensyDevice);                  }                  progressFunc(100);              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Reboot,The following statement contains a magic number: byte[] buf = new byte[260];
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Reboot,The following statement contains a magic number: teensyDevice.Write(buf' _blockSize + 2' 250);
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Reboot,The following statement contains a magic number: teensyDevice.Write(buf' _blockSize + 2' 250);
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: byte[] buf = new byte[260];
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,Program,The following statement contains a magic number: for (addr = 0; addr < _codeSize; addr += _blockSize)              {                  if (addr > 0 && !hexFile.BytesWithinRange(addr' addr + _blockSize - 1))                  {                      // don't waste time on blocks that are unused'                      // but always do the first one to erase the chip                      continue;                  }                  Log.DebugFormat("addr: 0x{0:x} ({0})' length: 0x{1:x} ({1})"' addr' _blockSize);                  if (_codeSize < 0x10000)                  {                      buf[0] = (byte)(addr & 255);                      buf[1] = (byte)((addr >> 8) & 255);                  }                  else                  {                      buf[0] = (byte)((addr >> 8) & 255);                      buf[1] = (byte)((addr >> 16) & 255);                  }                  hexFile.GetData(addr' _blockSize' buf' 2);                  teensyDevice.Write(buf' _blockSize + 2' first_block ? 3000 : 250);                  first_block = false;                    progressFunc((int)((double)addr / _codeSize * 100.0));              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,GetMcuParameters,The following statement contains a magic number: switch (mcuType)              {                  case McuType.ATMega32u2:                  case McuType.ATMega32u4:                      codeSize = 32 * 1024;                      blockSize = 128;                      break;                  default:                      throw new ArgumentException("Unhandled MCU type"' "mcuType");              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,GetMcuParameters,The following statement contains a magic number: switch (mcuType)              {                  case McuType.ATMega32u2:                  case McuType.ATMega32u4:                      codeSize = 32 * 1024;                      blockSize = 128;                      break;                  default:                      throw new ArgumentException("Unhandled MCU type"' "mcuType");              }
Magic Number,TeensyHidBootloaderLib,TeensyHidBootloaderProgrammer,C:\repos\AutomatedArchitecture_SirenOfShame\TeensyHidBootloaderLib\TeensyHidBootloaderProgrammer.cs,GetMcuParameters,The following statement contains a magic number: switch (mcuType)              {                  case McuType.ATMega32u2:                  case McuType.ATMega32u4:                      codeSize = 32 * 1024;                      blockSize = 128;                      break;                  default:                      throw new ArgumentException("Unhandled MCU type"' "mcuType");              }
