Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,Cyclomatic complexity of the method is 39
Complex Method,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetResult,Cyclomatic complexity of the method is 24
Complex Method,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,Cyclomatic complexity of the method is 8
Complex Method,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,ReadXml,Cyclomatic complexity of the method is 34
Long Parameter List,CSharp.Utilities,MailHelper,C:\repos\xmj112288_Study\CSharp.Utilities\MailHelper.cs,SendEMail,The method has 7 parameters.
Long Parameter List,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,PrepareCommand,The method has 6 parameters.
Long Parameter List,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteReader,The method has 6 parameters.
Long Parameter List,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,GetAttValue,The method has 6 parameters.
Long Parameter List,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,SetAttValue,The method has 7 parameters.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsEmail,The length of the statement  "	return Regex.IsMatch (source' @"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 131.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,HasEmail,The length of the statement  "	return Regex.IsMatch (source' @"[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2'})"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 176.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsUrl,The length of the statement  "	return Regex.IsMatch (source' @"^(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2'6})|([0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?$"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 272.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,HasUrl,The length of the statement  "	return Regex.IsMatch (source' @"(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2'6})|([0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 270.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The length of the statement  "	if (long.TryParse (id.Remove (17)' out n) == false || n < Math.Pow (10' 16) || long.TryParse (id.Replace ('x'' '0').Replace ('X'' '0')' out n) == false) { " is 154.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The length of the statement  "	const string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91"; " is 130.
Long Statement,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard15,The length of the statement  "	const string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91"; " is 130.
Long Statement,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,IgnoreEncode,The length of the statement  "	Match meta = Regex.Match (Encoding.Default.GetString (responseStream)' "<meta([^<]*?)charset=([^<]*?)[\"']"' RegexOptions.IgnoreCase); " is 134.
Long Statement,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ResizeImg,The length of the statement  "		g.DrawImage (sourceBitmap' new Rectangle (left' top' smallWidth' smallHeight)' new Rectangle (0' 0' w' h)' GraphicsUnit.Pixel); " is 127.
Long Statement,CSharp.Utilities,LogHelper,C:\repos\xmj112288_Study\CSharp.Utilities\LogHelper.cs,WriteLogToFile,The length of the statement  "	FileHelper.AppendText (string.Format (@"{0}\{1}.txt"' dirPath' time)' string.Format ("{0}：{1}\r\n"' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' log)); " is 153.
Long Statement,CSharp.Utilities,ReflectHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ReflectHelper.cs,GetPropertyValue,The length of the statement  "	PropertyInfo propertyInfo = type.GetProperty (propertyName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 131.
Long Statement,CSharp.Utilities,ReflectHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ReflectHelper.cs,SetPropertyValue,The length of the statement  "	PropertyInfo propertyInfo = type.GetProperty (propertyName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 131.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,AssignParameterValues,The length of the statement  "		if (parameterValues [i] != null && (commandParameters [i].Direction == ParameterDirection.Input || commandParameters [i].Direction == ParameterDirection.InputOutput)) { " is 168.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,AssignParameterValues,The length of the statement  "		if (parameterValues [commandParameters [i].ParameterName] != null && (commandParameters [i].Direction == ParameterDirection.Input || commandParameters [i].Direction == ParameterDirection.InputOutput)) { " is 202.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteNonQuery,The length of the statement  "		SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet (transaction.Connection.ConnectionString' spName); " is 127.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteDataset,The length of the statement  "		SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet (transaction.Connection.ConnectionString' spName); " is 127.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteReader,The length of the statement  "	return ExecuteReader (transaction.Connection' transaction' commandType' commandText' commandParameters' SqlConnectionOwnership.External); " is 137.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteReader,The length of the statement  "		SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet (transaction.Connection.ConnectionString' spName); " is 127.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteScalar,The length of the statement  "		SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet (transaction.Connection.ConnectionString' spName); " is 127.
Long Statement,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,ExecuteXmlReader,The length of the statement  "		SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet (transaction.Connection.ConnectionString' spName); " is 127.
Long Statement,CSharp.Utilities,SqlHelperParameterCache,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,GetSpParameterSet,The length of the statement  "	string hashKey = connectionString + ":" + spName + (includeReturnValueParameter ? ":include ReturnValue Parameter" : ""); " is 121.
Long Statement,CSharp.Utilities,SqlHelperParameterCache,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,GetSpParameterSet,The length of the statement  "		cachedParameters = (SqlParameter[])(ParamCache [hashKey] = DiscoverSpParameterSet (connectionString' spName' includeReturnValueParameter)); " is 139.
Long Statement,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,GetAttValue,The length of the statement  "	string regString = string.Format (@"(?<=<{0}\s{1}=""{2}"" {3}=\"").*?(?=\""/>|\""></{0}>)"' nodeName' selectAttName' selectAttValue' returnAttValueName); " is 153.
Long Statement,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,SetAttValue,The length of the statement  "		string regString = string.Format (@"(?<=<{0}\s{1}=""{2}"" {3}=\"").*?(?=\""/>|\""></{0}>)"' nodeName' selectAttName' selectAttValue' returnAttValueName); " is 153.
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard,The following statement contains a magic number: if (id.Length == 18) {  	bool check = IsIdCard18 (id);  	return check;  }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard,The following statement contains a magic number: if (id.Length == 15) {  	bool check = IsIdCard15 (id);  	return check;  }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: if (long.TryParse (id.Remove (17)' out n) == false || n < Math.Pow (10' 16) || long.TryParse (id.Replace ('x'' '0').Replace ('X'' '0')' out n) == false) {  	return false;  	//数字验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: if (long.TryParse (id.Remove (17)' out n) == false || n < Math.Pow (10' 16) || long.TryParse (id.Replace ('x'' '0').Replace ('X'' '0')' out n) == false) {  	return false;  	//数字验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: if (long.TryParse (id.Remove (17)' out n) == false || n < Math.Pow (10' 16) || long.TryParse (id.Replace ('x'' '0').Replace ('X'' '0')' out n) == false) {  	return false;  	//数字验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: if (address.IndexOf (id.Remove (2)) == -1) {  	return false;  	//省份验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	sum += int.Parse (wi [i]) * int.Parse (ai [i].ToString ());  }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: Math.DivRem (sum' 11' out y);  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard18,The following statement contains a magic number: if (arrVarifyCode [y] != id.Substring (17' 1).ToLower ()) {  	return false;  	//校验码验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard15,The following statement contains a magic number: if (long.TryParse (id' out n) == false || n < Math.Pow (10' 14)) {  	return false;  	//数字验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard15,The following statement contains a magic number: if (long.TryParse (id' out n) == false || n < Math.Pow (10' 14)) {  	return false;  	//数字验证   }  
Magic Number,CSharp.Utilities,CommonRegexes,C:\repos\xmj112288_Study\CSharp.Utilities\CommonRegexes.cs,IsIdCard15,The following statement contains a magic number: if (address.IndexOf (id.Remove (2)) == -1) {  	return false;  	//省份验证   }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,ConvertToPinYin,The following statement contains a magic number: for (int j = 0; j < mChar.Length; j++) {  	//���������Ǻ���  	if (reg.IsMatch (mChar [j].ToString ())) {  		byte[] arr = Encoding.Default.GetBytes (mChar [j].ToString ());  		//����ϵͳĬ�ϱ���õ��ֽ���'һ������Ϊ2���ֽ�  		int arr1 = arr [0];  		int arr2 = arr [1];  		int asc = arr1 * 256 + arr2 - 65536;  		result = GetPinYin (mChar' result' j' asc);  		//���ݶ�Ӧ�Ļ������ȡƴ��  	}  	else//������Ǻ���  	 {  		result += mChar [j].ToString ();  		//������Ǻ����򷵻�  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,ConvertToPinYin,The following statement contains a magic number: for (int j = 0; j < mChar.Length; j++) {  	//���������Ǻ���  	if (reg.IsMatch (mChar [j].ToString ())) {  		byte[] arr = Encoding.Default.GetBytes (mChar [j].ToString ());  		//����ϵͳĬ�ϱ���õ��ֽ���'һ������Ϊ2���ֽ�  		int arr1 = arr [0];  		int arr2 = arr [1];  		int asc = arr1 * 256 + arr2 - 65536;  		result = GetPinYin (mChar' result' j' asc);  		//���ݶ�Ӧ�Ļ������ȡƴ��  	}  	else//������Ǻ���  	 {  		result += mChar [j].ToString ();  		//������Ǻ����򷵻�  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,ConvertToPinYin,The following statement contains a magic number: if (reg.IsMatch (mChar [j].ToString ())) {  	byte[] arr = Encoding.Default.GetBytes (mChar [j].ToString ());  	//����ϵͳĬ�ϱ���õ��ֽ���'һ������Ϊ2���ֽ�  	int arr1 = arr [0];  	int arr2 = arr [1];  	int asc = arr1 * 256 + arr2 - 65536;  	result = GetPinYin (mChar' result' j' asc);  	//���ݶ�Ӧ�Ļ������ȡƴ��  }  else//������Ǻ���   {  	result += mChar [j].ToString ();  	//������Ǻ����򷵻�  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,ConvertToPinYin,The following statement contains a magic number: if (reg.IsMatch (mChar [j].ToString ())) {  	byte[] arr = Encoding.Default.GetBytes (mChar [j].ToString ());  	//����ϵͳĬ�ϱ���õ��ֽ���'һ������Ϊ2���ֽ�  	int arr1 = arr [0];  	int arr2 = arr [1];  	int asc = arr1 * 256 + arr2 - 65536;  	result = GetPinYin (mChar' result' j' asc);  	//���ݶ�Ӧ�Ļ������ȡƴ��  }  else//������Ǻ���   {  	result += mChar [j].ToString ();  	//������Ǻ����򷵻�  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: if (asc > 0 && asc < 160) {  	result += mChar [j];  }  else {  	switch (asc) {  	case -9254:  		result += "Zhen";  		break;  	case -8985:  		result += "Qian";  		break;  	case -5463:  		result += "Jia";  		break;  	case -8274:  		result += "Ge";  		break;  	case -5448:  		result += "Ga";  		break;  	case -5447:  		result += "La";  		break;  	case -4649:  		result += "Chen";  		break;  	case -5436:  		result += "Mao";  		break;  	case -5213:  		result += "Mao";  		break;  	case -3597:  		result += "Die";  		break;  	case -5659:  		result += "Tian";  		break;  	default:  		for (int i = (Ascs.Length - 1); i >= 0; i--) {  			if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  			 {  				result += Pinyins [i];  				//�����������Χ���ȡ��Ӧ��ƴ��  				break;  			}  		}  		break;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetPinYin,The following statement contains a magic number: switch (asc) {  case -9254:  	result += "Zhen";  	break;  case -8985:  	result += "Qian";  	break;  case -5463:  	result += "Jia";  	break;  case -8274:  	result += "Ge";  	break;  case -5448:  	result += "Ga";  	break;  case -5447:  	result += "La";  	break;  case -4649:  	result += "Chen";  	break;  case -5436:  	result += "Mao";  	break;  case -5213:  	result += "Mao";  	break;  case -3597:  	result += "Die";  	break;  case -5659:  	result += "Tian";  	break;  default:  	for (int i = (Ascs.Length - 1); i >= 0; i--) {  		if (Ascs [i] <= asc)//�жϺ��ֵ�ƴ���������Ƿ���ָ����Χ��  		 {  			result += Pinyins [i];  			//�����������Χ���ȡ��Ӧ��ƴ��  			break;  		}  	}  	break;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: while (i < gbkBytes.Length) {  	if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���  	 {  		result = result + (char)gbkBytes [i];  		i++;  	}  	else {  		var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  		result = GetResult (key' result);  		//����ƴ������ҵ�ƴ������ĸ   		i = i + 2;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: while (i < gbkBytes.Length) {  	if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���  	 {  		result = result + (char)gbkBytes [i];  		i++;  	}  	else {  		var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  		result = GetResult (key' result);  		//����ƴ������ҵ�ƴ������ĸ   		i = i + 2;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: while (i < gbkBytes.Length) {  	if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���  	 {  		result = result + (char)gbkBytes [i];  		i++;  	}  	else {  		var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  		result = GetResult (key' result);  		//����ƴ������ҵ�ƴ������ĸ   		i = i + 2;  	}  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���   {  	result = result + (char)gbkBytes [i];  	i++;  }  else {  	var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  	result = GetResult (key' result);  	//����ƴ������ҵ�ƴ������ĸ   	i = i + 2;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���   {  	result = result + (char)gbkBytes [i];  	i++;  }  else {  	var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  	result = GetResult (key' result);  	//����ƴ������ҵ�ƴ������ĸ   	i = i + 2;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: if (gbkBytes [i] <= 127)//Ϊ����\��ĸ\����ASCII����'ֱ�ӷ���   {  	result = result + (char)gbkBytes [i];  	i++;  }  else {  	var key = (ushort)(gbkBytes [i] * 256 + gbkBytes [i + 1]);  	result = GetResult (key' result);  	//����ƴ������ҵ�ƴ������ĸ   	i = i + 2;  }  
Magic Number,CSharp.Utilities,ConvertHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ConvertHelper.cs,GetFirstLetter,The following statement contains a magic number: i = i + 2;  
Magic Number,CSharp.Utilities,DesEncrypt,C:\repos\xmj112288_Study\CSharp.Utilities\DesEncrypt.cs,Encrypt,The following statement contains a magic number: encryptKey = encryptKey.PadRight (8' ' ');  
Magic Number,CSharp.Utilities,DesEncrypt,C:\repos\xmj112288_Study\CSharp.Utilities\DesEncrypt.cs,Decrypt,The following statement contains a magic number: decryptKey = decryptKey.PadRight (8' ' ');  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  	if (!string.IsNullOrWhiteSpace (response.Headers ["set-cookie"])) {  		item.SetCookie = ResolveSetCookie (response.Headers ["set-cookie"]);  	}  	if (response.Cookies != null && response.Cookies.Count > 0) {  		item.CookieContainer.Add (response.Cookies);  	}  	MemoryStream memoryStream = new MemoryStream ();  	// GZIIP处理  	if (response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  		//开始读取流并设置编码方式  		Stream stream = response.GetResponseStream ();  		if (stream != null) {  			new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  		}  	}  	else {  		//开始读取流并设置编码方式  		Stream responseStream1 = response.GetResponseStream ();  		if (responseStream1 != null)  			responseStream1.CopyTo (memoryStream' 10240);  	}  	byte[] responseStream = memoryStream.ToArray ();  	memoryStream.Close ();  	Encoding encode = IgnoreEncode (response' responseStream);  	item.Html = encode.GetString (responseStream);  	item.Bytes = responseStream;  }  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  	if (!string.IsNullOrWhiteSpace (response.Headers ["set-cookie"])) {  		item.SetCookie = ResolveSetCookie (response.Headers ["set-cookie"]);  	}  	if (response.Cookies != null && response.Cookies.Count > 0) {  		item.CookieContainer.Add (response.Cookies);  	}  	MemoryStream memoryStream = new MemoryStream ();  	// GZIIP处理  	if (response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  		//开始读取流并设置编码方式  		Stream stream = response.GetResponseStream ();  		if (stream != null) {  			new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  		}  	}  	else {  		//开始读取流并设置编码方式  		Stream responseStream1 = response.GetResponseStream ();  		if (responseStream1 != null)  			responseStream1.CopyTo (memoryStream' 10240);  	}  	byte[] responseStream = memoryStream.ToArray ();  	memoryStream.Close ();  	Encoding encode = IgnoreEncode (response' responseStream);  	item.Html = encode.GetString (responseStream);  	item.Bytes = responseStream;  }  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: if (response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  	//开始读取流并设置编码方式  	Stream stream = response.GetResponseStream ();  	if (stream != null) {  		new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  	}  }  else {  	//开始读取流并设置编码方式  	Stream responseStream1 = response.GetResponseStream ();  	if (responseStream1 != null)  		responseStream1.CopyTo (memoryStream' 10240);  }  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: if (response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  	//开始读取流并设置编码方式  	Stream stream = response.GetResponseStream ();  	if (stream != null) {  		new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  	}  }  else {  	//开始读取流并设置编码方式  	Stream responseStream1 = response.GetResponseStream ();  	if (responseStream1 != null)  		responseStream1.CopyTo (memoryStream' 10240);  }  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: if (stream != null) {  	new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  }  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: new GZipStream (stream' CompressionMode.Decompress).CopyTo (memoryStream' 10240);  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: if (responseStream1 != null)  	responseStream1.CopyTo (memoryStream' 10240);  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,GetHttpReponseData,The following statement contains a magic number: responseStream1.CopyTo (memoryStream' 10240);  
Magic Number,CSharp.Utilities,HttpBase,C:\repos\xmj112288_Study\CSharp.Utilities\HttpBase.cs,IgnoreEncode,The following statement contains a magic number: if (charter.Length > 2) {  	try {  		return Encoding.GetEncoding (charter);  	}  	catch (Exception) {  		return Encoding.UTF8;  	}  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ResizeImg,The following statement contains a magic number: if (((decimal)w) / h >= ((decimal)width) / height) {  	smallWidth = width;  	smallHeight = width * h / w;  	top = (height - smallHeight) / 2;  }  else {  	smallHeight = height;  	smallWidth = height * w / h;  	left = (width - smallWidth) / 2;  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ResizeImg,The following statement contains a magic number: if (((decimal)w) / h >= ((decimal)width) / height) {  	smallWidth = width;  	smallHeight = width * h / w;  	top = (height - smallHeight) / 2;  }  else {  	smallHeight = height;  	smallWidth = height * w / h;  	left = (width - smallWidth) / 2;  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ResizeImg,The following statement contains a magic number: top = (height - smallHeight) / 2;  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ResizeImg,The following statement contains a magic number: left = (width - smallWidth) / 2;  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int i = 0; i < bitmap.Width; i++) {  	for (int j = 0; j < bitmap.Height; j++) {  		//取图片当前的像素点  		Color color = bitmap.GetPixel (i' j);  		int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  		//重新设置当前的像素点  		map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int i = 0; i < bitmap.Width; i++) {  	for (int j = 0; j < bitmap.Height; j++) {  		//取图片当前的像素点  		Color color = bitmap.GetPixel (i' j);  		int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  		//重新设置当前的像素点  		map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int i = 0; i < bitmap.Width; i++) {  	for (int j = 0; j < bitmap.Height; j++) {  		//取图片当前的像素点  		Color color = bitmap.GetPixel (i' j);  		int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  		//重新设置当前的像素点  		map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int j = 0; j < bitmap.Height; j++) {  	//取图片当前的像素点  	Color color = bitmap.GetPixel (i' j);  	int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  	//重新设置当前的像素点  	map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int j = 0; j < bitmap.Height; j++) {  	//取图片当前的像素点  	Color color = bitmap.GetPixel (i' j);  	int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  	//重新设置当前的像素点  	map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,ToGray,The following statement contains a magic number: for (int j = 0; j < bitmap.Height; j++) {  	//取图片当前的像素点  	Color color = bitmap.GetPixel (i' j);  	int gray = (int)(color.R * 0.299 + color.G * 0.587 + color.B * 0.114);  	//重新设置当前的像素点  	map.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,CSharp.Utilities,ImageHelper,C:\repos\xmj112288_Study\CSharp.Utilities\ImageHelper.cs,GetAvg,The following statement contains a magic number: byte.TryParse (((r + g + b) / 3).ToString ()' out by);  
Magic Number,CSharp.Utilities,AesEncrypt,C:\repos\xmj112288_Study\CSharp.Utilities\AesEncrypt.cs,Encrypt,The following statement contains a magic number: aes.Key = Encoding.UTF8.GetBytes (encryptKey.PadRight (32' ' '));  
Magic Number,CSharp.Utilities,EncodeHelper,C:\repos\xmj112288_Study\CSharp.Utilities\EncodeHelper.cs,UnicodeDecode,The following statement contains a magic number: for (m = r.Match (str); m.Success; m = m.NextMatch ()) {  	string strValue = m.Result ("${code}");  	int charNum = Int32.Parse (strValue.Substring (2' 4)' NumberStyles.HexNumber);  	string ch = string.Format ("{0}"' (char)charNum);  	str = str.Replace (strValue' ch);  }  
Magic Number,CSharp.Utilities,EncodeHelper,C:\repos\xmj112288_Study\CSharp.Utilities\EncodeHelper.cs,UnicodeDecode,The following statement contains a magic number: for (m = r.Match (str); m.Success; m = m.NextMatch ()) {  	string strValue = m.Result ("${code}");  	int charNum = Int32.Parse (strValue.Substring (2' 4)' NumberStyles.HexNumber);  	string ch = string.Format ("{0}"' (char)charNum);  	str = str.Replace (strValue' ch);  }  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	builder.Append (GetRandom (0' 10));  }  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomString,The following statement contains a magic number: builder.Append (GetRandom (0' 10));  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomEng,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	builder.Append ((char)GetRandom (97' 123));  }  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomEng,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	builder.Append ((char)GetRandom (97' 123));  }  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomEng,The following statement contains a magic number: builder.Append ((char)GetRandom (97' 123));  
Magic Number,CSharp.Utilities,RandomHelper,C:\repos\xmj112288_Study\CSharp.Utilities\RandomHelper.cs,GetRandomEng,The following statement contains a magic number: builder.Append ((char)GetRandom (97' 123));  
Magic Number,CSharp.Utilities,SerializeHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SerializeHelper.cs,BinaryDeserialize,The following statement contains a magic number: for (int i = 0; i < intLen; i++) {  	int ibyte = Convert.ToInt32 (str.Substring (i * 2' 2)' 16);  	bytes [i] = (byte)ibyte;  }  
Magic Number,CSharp.Utilities,SerializeHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SerializeHelper.cs,BinaryDeserialize,The following statement contains a magic number: for (int i = 0; i < intLen; i++) {  	int ibyte = Convert.ToInt32 (str.Substring (i * 2' 2)' 16);  	bytes [i] = (byte)ibyte;  }  
Magic Number,CSharp.Utilities,SerializeHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SerializeHelper.cs,BinaryDeserialize,The following statement contains a magic number: for (int i = 0; i < intLen; i++) {  	int ibyte = Convert.ToInt32 (str.Substring (i * 2' 2)' 16);  	bytes [i] = (byte)ibyte;  }  
Magic Number,CSharp.Utilities,SqlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\SqlHelper.cs,PrepareCommand,The following statement contains a magic number: command.CommandTimeout = 600;  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: while ((line = pro.StandardOutput.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.StartsWith ("TCP"' StringComparison.OrdinalIgnoreCase)) {  		string[] arr = Regex.Replace (line' @"\s+"' "'").Split (''');  		if (arr.Length < 5 || arr [1].StartsWith ("[")) {  			continue;  		}  		string[] s2 = arr [1].Split (':');  		if (s2.Length < 2) {  			continue;  		}  		int port = s2 [1].ToInt32 ();  		if (IsCorrectPort (port) && !portList.Contains (port)) {  			portList.Add (port);  		}  	}  }  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: while ((line = pro.StandardOutput.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.StartsWith ("TCP"' StringComparison.OrdinalIgnoreCase)) {  		string[] arr = Regex.Replace (line' @"\s+"' "'").Split (''');  		if (arr.Length < 5 || arr [1].StartsWith ("[")) {  			continue;  		}  		string[] s2 = arr [1].Split (':');  		if (s2.Length < 2) {  			continue;  		}  		int port = s2 [1].ToInt32 ();  		if (IsCorrectPort (port) && !portList.Contains (port)) {  			portList.Add (port);  		}  	}  }  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: if (line.StartsWith ("TCP"' StringComparison.OrdinalIgnoreCase)) {  	string[] arr = Regex.Replace (line' @"\s+"' "'").Split (''');  	if (arr.Length < 5 || arr [1].StartsWith ("[")) {  		continue;  	}  	string[] s2 = arr [1].Split (':');  	if (s2.Length < 2) {  		continue;  	}  	int port = s2 [1].ToInt32 ();  	if (IsCorrectPort (port) && !portList.Contains (port)) {  		portList.Add (port);  	}  }  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: if (line.StartsWith ("TCP"' StringComparison.OrdinalIgnoreCase)) {  	string[] arr = Regex.Replace (line' @"\s+"' "'").Split (''');  	if (arr.Length < 5 || arr [1].StartsWith ("[")) {  		continue;  	}  	string[] s2 = arr [1].Split (':');  	if (s2.Length < 2) {  		continue;  	}  	int port = s2 [1].ToInt32 ();  	if (IsCorrectPort (port) && !portList.Contains (port)) {  		portList.Add (port);  	}  }  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: if (arr.Length < 5 || arr [1].StartsWith ("[")) {  	continue;  }  
Magic Number,CSharp.Utilities,WinApi,C:\repos\xmj112288_Study\CSharp.Utilities\WinApi.cs,GetPort,The following statement contains a magic number: if (s2.Length < 2) {  	continue;  }  
Missing Default,CSharp.Utilities,XmlHelper,C:\repos\xmj112288_Study\CSharp.Utilities\XmlHelper.cs,ReadXml,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	Console.Write ("<{0}"' reader.Name);  	if (reader.HasAttributes) {  		while (reader.MoveToNextAttribute ()) {  			Console.Write (" {0}=\"{1}\""' reader.Name' reader.Value);  		}  	}  	Console.WriteLine (">");  	break;  case XmlNodeType.Text:  	Console.WriteLine (reader.Value);  	break;  case XmlNodeType.CDATA:  	Console.WriteLine ("<![CDATA[{0}]]>"' reader.Value);  	break;  case XmlNodeType.ProcessingInstruction:  	Console.WriteLine ("<?{0} {1}?>"' reader.Name' reader.Value);  	break;  case XmlNodeType.Comment:  	Console.WriteLine ("<!--{0}-->"' reader.Value);  	break;  case XmlNodeType.XmlDeclaration:  	//<?xml version="1.0" encoding="utf-8" ?>  	Console.WriteLine ("<?{0} {1}?>"' reader.Name' reader.Value);  	break;  case XmlNodeType.Document:  	break;  case XmlNodeType.DocumentType:  	Console.WriteLine ("<!DOCTYPE {0} [{1}]>"' reader.Name' reader.Value);  	break;  case XmlNodeType.EntityReference:  	Console.WriteLine (reader.Name);  	break;  case XmlNodeType.EndElement:  	Console.WriteLine ("</{0}>"' reader.Name);  	break;  }  
