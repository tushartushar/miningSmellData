Implementation smell,Namespace,Class,File,Method,Description
Long Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The method has 124 lines of code.
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,Cyclomatic complexity of the method is 21
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,ResetAutoHidePortion,Cyclomatic complexity of the method is 16
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,Show,Cyclomatic complexity of the method is 11
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,Cyclomatic complexity of the method is 10
Complex Method,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\NestedPaneCollection.cs,SwitchPaneWithFirstChild,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,InternalConstruct,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,ValidateActiveContent,Cyclomatic complexity of the method is 11
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,RefreshStateChange,Cyclomatic complexity of the method is 13
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,OnPaint,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_ToolWindow,Cyclomatic complexity of the method is 12
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,Cyclomatic complexity of the method is 14
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,Cyclomatic complexity of the method is 20
Complex Method,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockWindow.cs,MoveSplitter,Cyclomatic complexity of the method is 10
Complex Method,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,Cyclomatic complexity of the method is 24
Complex Method,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,Cyclomatic complexity of the method is 10
Complex Method,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,CalculateGraphicsPathFromBitmap,Cyclomatic complexity of the method is 8
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockPane,The method has 5 parameters.
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,InternalConstruct,The method has 8 parameters.
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,SetBoundsCore,The method has 5 parameters.
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,MergeNestedPanes,The method has 5 parameters.
Long Parameter List,WeifenLuo.WinFormsUI.Docking,NativeMethods,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Win32\NativeMethods.cs,SetWindowPos,The method has 7 parameters.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "		return new Rectangle (RectangleBottomLeft.Width' Height - height' Width - RectangleBottomLeft.Width - RectangleBottomRight.Width' height); " is 138.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "		return new Rectangle (0' RectangleTopLeft.Width' height' Height - RectangleTopLeft.Height - RectangleBottomLeft.Height); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "		return new Rectangle (Width - height' RectangleTopRight.Width' height' Height - RectangleTopRight.Height - RectangleBottomRight.Height); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,InertButtonBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\InertButtonBase.cs,OnPaint,The length of the statement  "		e.Graphics.DrawImage (Image' new Rectangle (0' 0' Image.Width' Image.Height)' 0' 0' Image.Width' Image.Height' GraphicsUnit.Pixel' imageAttributes); " is 148.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The length of the statement  "		matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2)); " is 153.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,CalculateTabs,The length of the statement  "			int width = imageWidth + ImageGapLeft + ImageGapRight + TextRenderer.MeasureText (tab.Content.DockHandler.TabText' TextFont).Width + TextGapLeft + TextGapRight; " is 160.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTabRectangle,The length of the statement  "	int y = rectTabStrip.Y + (dockState == DockState.DockTopAutoHide || dockState == DockState.DockRightAutoHide ? 0 : TabGapTop); " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The length of the statement  "	matrix.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2)); " is 146.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The length of the statement  "	return new Rectangle ((int)(pts [0].X - (float)rect.Height / 2 + .5F)' (int)(pts [0].Y - (float)rect.Width / 2 + .5F)' rect.Height' rect.Width); " is 144.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,Remove,The length of the statement  "		lastNestedDock.SetDisplayingStatus (true' statusPane.DisplayingPreviousPane' statusPane.DisplayingAlignment' statusPane.DisplayingProportion); " is 142.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "	this [0].NestedDockingStatus.SetDisplayingBounds (Container.DisplayingRectangle' Container.DisplayingRectangle' Rectangle.Empty); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "		bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "			rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateAutoHide,The length of the statement  "	if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide || dockState == DockState.DockTopAutoHide || dockState == DockState.DockBottomAutoHide) " is 175.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateValid,The length of the statement  "	else if (((dockableAreas & DockAreas.DockLeft) == 0) && (dockState == DockState.DockLeft || dockState == DockState.DockLeftAutoHide)) " is 133.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateValid,The length of the statement  "	else if (((dockableAreas & DockAreas.DockRight) == 0) && (dockState == DockState.DockRight || dockState == DockState.DockRightAutoHide)) " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateValid,The length of the statement  "	else if (((dockableAreas & DockAreas.DockTop) == 0) && (dockState == DockState.DockTop || dockState == DockState.DockTopAutoHide)) " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateValid,The length of the statement  "	else if (((dockableAreas & DockAreas.DockBottom) == 0) && (dockState == DockState.DockBottom || dockState == DockState.DockBottomAutoHide)) " is 139.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockWindowState,The length of the statement  "	if (state == DockState.DockTop || state == DockState.DockBottom || state == DockState.DockLeft || state == DockState.DockRight || state == DockState.Document) " is 158.
Long Statement,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\NestedPaneCollection.cs,Add,The length of the statement  "	NestedPaneCollection oldNestedPanes = (pane.NestedPanesContainer == null) ? null : pane.NestedPanesContainer.NestedPanes; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockOutlineBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockOutlineBase.cs,TestChange,The length of the statement  "	if (m_floatWindowBounds != m_oldFloatWindowBounds || m_dockTo != m_oldDockTo || m_dock != m_oldDock || m_contentIndex != m_oldContentIndex) " is 139.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,SetNestedDockingProportion,The length of the statement  "	NestedDockingStatus.SetStatus (NestedDockingStatus.NestedPanes' NestedDockingStatus.PreviousPane' NestedDockingStatus.Alignment' proportion); " is 141.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPaneCaptionBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPaneCaptionBase.cs,OnMouseDown,The length of the statement  "	if (e.Button == MouseButtons.Left && DockPane.DockPanel.AllowEndUserDocking && DockPane.AllowDockDragAndDrop && !DockHelper.IsDockStateAutoHide (DockPane.DockState) && DockPane.ActiveContent != null) " is 199.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.ToolWindowGradient.ActiveCaptionGradient.LinearGradientMode; " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.ToolWindowGradient.InactiveCaptionGradient.LinearGradientMode; " is 138.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "	TextRenderer.DrawText (g' DockPane.CaptionText' TextFont' DrawHelper.RtlTransform (this' rectCaptionText)' colorText' TextFormat); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPaneStripBase.cs,OnMouseDown,The length of the statement  "		if (DockPane.DockPanel.AllowEndUserDocking && DockPane.AllowDockDragAndDrop && DockPane.ActiveContent.DockHandler.AllowEndUserDocking) " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,MeasureHeight_ToolWindow,The length of the statement  "	int height = Math.Max (TextFont.Height' ToolWindowImageHeight + ToolWindowImageGapTop + ToolWindowImageGapBottom) + ToolWindowStripGapTop + ToolWindowStripGapBottom; " is 165.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,MeasureHeight_Document,The length of the statement  "	int height = Math.Max (TextFont.Height + DocumentTabGapTop' ButtonClose.Height + DocumentButtonGapTop + DocumentButtonGapBottom) + DocumentStripGapBottom + DocumentStripGapTop; " is 176.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,OnPaint,The length of the statement  "		rect.Width += DocumentTabGapLeft + DocumentTabGapRight + DocumentButtonGapRight + ButtonClose.Width + ButtonWindowList.Width; " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,OnPaint,The length of the statement  "			LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.DocumentGradient.DockStripGradient.LinearGradientMode; " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,OnPaint,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.ToolWindowGradient.DockStripGradient.LinearGradientMode; " is 132.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetMaxTabWidth_ToolWindow,The length of the statement  "	return ToolWindowImageWidth + sizeString.Width + ToolWindowImageGapLeft + ToolWindowImageGapRight + ToolWindowTextGapRight; " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetMaxTabWidth_Document,The length of the statement  "	Size sizeText = TextRenderer.MeasureText (content.DockHandler.TabText' BoldFont' new Size (DocumentTabMaxWidth' height)' DocumentTextFormat); " is 141.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTabStrip_Document,The length of the statement  "		g.DrawLine (PenDocumentTabActiveBorder' rectTabStrip.Left' rectTabStrip.Top + 1' rectTabStrip.Right' rectTabStrip.Top + 1); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTabStrip_Document,The length of the statement  "		g.DrawLine (PenDocumentTabActiveBorder' rectTabStrip.Left' rectTabStrip.Bottom - 1' rectTabStrip.Right' rectTabStrip.Bottom - 1); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "				GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "			GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "			GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "	if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) { " is 163.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "	Rectangle rectIcon = new Rectangle (rect.X + ToolWindowImageGapLeft' rect.Y + rect.Height - 1 - ToolWindowImageGapBottom - ToolWindowImageHeight' ToolWindowImageWidth' ToolWindowImageHeight); " is 191.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "	rectText.Width = rect.Width - rectIcon.Width - ToolWindowImageGapLeft - ToolWindowImageGapRight - ToolWindowTextGapRight; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.ToolWindowGradient.ActiveTabGradient.LinearGradientMode; " is 132.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.ToolWindowGradient.InactiveTabGradient.LinearGradientMode; " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "	Rectangle rectIcon = new Rectangle (rect.X + DocumentIconGapLeft' rect.Y + rect.Height - 1 - DocumentIconGapBottom - DocumentIconHeight' DocumentIconWidth' DocumentIconHeight); " is 176.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.DocumentGradient.ActiveTabGradient.LinearGradientMode; " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "		LinearGradientMode gradientMode = DockPane.DockPanel.Skin.DockPaneStripSkin.DocumentGradient.InactiveTabGradient.LinearGradientMode; " is 132.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockWindow.cs,OnPaint,The length of the statement  "		e.Graphics.DrawRectangle (SystemPens.ControlDark' ClientRectangle.X' ClientRectangle.Y' ClientRectangle.Width - 1' ClientRectangle.Height - 1); " is 143.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The length of the statement  "		uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The length of the statement  "		uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The length of the statement  "		uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam); " is 167.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,BeginDrag,The length of the statement  "	NativeMethods.SetWindowLong (this.Handle' (int)Win32.GetWindowLongIndex.GWL_EXSTYLE' m_preDragExStyle | (int)(Win32.WindowExStyles.WS_EX_TRANSPARENT | Win32.WindowExStyles.WS_EX_LAYERED)); " is 188.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,The conditional expression  "(Pane.DockWindow == null || Pane.DockWindow.Visible || Pane.IsHidden) && !Pane.IsAutoHide"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateAutoHide,The conditional expression  "dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide || dockState == DockState.DockTopAutoHide || dockState == DockState.DockBottomAutoHide"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockWindowState,The conditional expression  "state == DockState.DockTop || state == DockState.DockBottom || state == DockState.DockLeft || state == DockState.DockRight || state == DockState.Document"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockOutlineBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockOutlineBase.cs,TestChange,The conditional expression  "m_floatWindowBounds != m_oldFloatWindowBounds || m_dockTo != m_oldDockTo || m_dock != m_oldDock || m_contentIndex != m_oldContentIndex"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockPaneCaptionBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPaneCaptionBase.cs,OnMouseDown,The conditional expression  "e.Button == MouseButtons.Left && DockPane.DockPanel.AllowEndUserDocking && DockPane.AllowDockDragAndDrop && !DockHelper.IsDockStateAutoHide (DockPane.DockState) && DockPane.ActiveContent != null"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The conditional expression  "Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockWindow.cs,DockWindow,The conditional expression  "DockState == DockState.DockLeft || DockState == DockState.DockRight || DockState == DockState.DockTop || DockState == DockState.DockBottom"  is complex.
Magic Number,WeifenLuo.WinFormsUI.Docking,InertButtonBase,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\InertButtonBase.cs,OnPaint,The following statement contains a magic number: using (ImageAttributes imageAttributes = new ImageAttributes ()) {  	ColorMap[] colorMap = new ColorMap[2];  	colorMap [0] = new ColorMap ();  	colorMap [0].OldColor = Color.FromArgb (0' 0' 0);  	colorMap [0].NewColor = ForeColor;  	colorMap [1] = new ColorMap ();  	colorMap [1].OldColor = Image.GetPixel (0' 0);  	colorMap [1].NewColor = Color.Transparent;  	imageAttributes.SetRemapTable (colorMap);  	e.Graphics.DrawImage (Image' new Rectangle (0' 0' Image.Width' Image.Height)' 0' 0' Image.Width' Image.Height' GraphicsUnit.Pixel' imageAttributes);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide) {  	Matrix matrixRotated = new Matrix ();  	matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  	g.Transform = matrixRotated;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide) {  	Matrix matrixRotated = new Matrix ();  	matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  	g.Transform = matrixRotated;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide) {  	Matrix matrixRotated = new Matrix ();  	matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  	g.Transform = matrixRotated;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: matrixRotated.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide) {  	// The DockState is DockLeftAutoHide or DockRightAutoHide' so rotate the image 90 degrees to the right.   	Rectangle rectTransform = RtlTransform (rectImage' dockState);  	Point[] rotationPoints =  {  		new Point (rectTransform.X + rectTransform.Width' rectTransform.Y)'  		new Point (rectTransform.X + rectTransform.Width' rectTransform.Y + rectTransform.Height)'  		new Point (rectTransform.X' rectTransform.Y)  	};  	using (Icon rotatedIcon = new Icon (((Form)content).Icon' 16' 16)) {  		g.DrawImage (rotatedIcon.ToBitmap ()' rotationPoints);  	}  }  else {  	// Draw the icon normally without any rotation.  	g.DrawIcon (((Form)content).Icon' RtlTransform (rectImage' dockState));  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide) {  	// The DockState is DockLeftAutoHide or DockRightAutoHide' so rotate the image 90 degrees to the right.   	Rectangle rectTransform = RtlTransform (rectImage' dockState);  	Point[] rotationPoints =  {  		new Point (rectTransform.X + rectTransform.Width' rectTransform.Y)'  		new Point (rectTransform.X + rectTransform.Width' rectTransform.Y + rectTransform.Height)'  		new Point (rectTransform.X' rectTransform.Y)  	};  	using (Icon rotatedIcon = new Icon (((Form)content).Icon' 16' 16)) {  		g.DrawImage (rotatedIcon.ToBitmap ()' rotationPoints);  	}  }  else {  	// Draw the icon normally without any rotation.  	g.DrawIcon (((Form)content).Icon' RtlTransform (rectImage' dockState));  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: using (Icon rotatedIcon = new Icon (((Form)content).Icon' 16' 16)) {  	g.DrawImage (rotatedIcon.ToBitmap ()' rotationPoints);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: using (Icon rotatedIcon = new Icon (((Form)content).Icon' 16' 16)) {  	g.DrawImage (rotatedIcon.ToBitmap ()' rotationPoints);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts [0].X = (float)rect.X + (float)rect.Width / 2;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts [0].Y = (float)rect.Y + (float)rect.Height / 2;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt (90' new PointF ((float)rectTabStrip.X + (float)rectTabStrip.Height / 2' (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle ((int)(pts [0].X - (float)rect.Height / 2 + .5F)' (int)(pts [0].Y - (float)rect.Width / 2 + .5F)' rect.Height' rect.Width);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle ((int)(pts [0].X - (float)rect.Height / 2 + .5F)' (int)(pts [0].Y - (float)rect.Width / 2 + .5F)' rect.Height' rect.Width);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,Remove,The following statement contains a magic number: statusPane.SetDisplayingStatus (false' null' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i = 1; i < Count; i++) {  	DockPane pane = this [i];  	NestedDockingStatus status = pane.NestedDockingStatus;  	DockPane prevPane = status.DisplayingPreviousPane;  	NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;  	Rectangle rect = statusPrev.PaneBounds;  	bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);  	Rectangle rectThis = rect;  	Rectangle rectPrev = rect;  	Rectangle rectSplitter = rect;  	if (status.DisplayingAlignment == DockAlignment.Left) {  		rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectThis.X + rectThis.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectPrev.X = rectSplitter.X + rectSplitter.Width;  		rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Right) {  		rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectPrev.X + rectPrev.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectThis.X = rectSplitter.X + rectSplitter.Width;  		rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Top) {  		rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectThis.Y + rectThis.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  		rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  	}  	else if (status.DisplayingAlignment == DockAlignment.Bottom) {  		rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectPrev.Y + rectPrev.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectThis.Y = rectSplitter.Y + rectSplitter.Height;  		rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  	}  	else  		rectThis = Rectangle.Empty;  	rectSplitter.Intersect (rect);  	rectThis.Intersect (rect);  	rectPrev.Intersect (rect);  	status.SetDisplayingBounds (rect' rectThis' rectSplitter);  	statusPrev.SetDisplayingBounds (statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i = 1; i < Count; i++) {  	DockPane pane = this [i];  	NestedDockingStatus status = pane.NestedDockingStatus;  	DockPane prevPane = status.DisplayingPreviousPane;  	NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;  	Rectangle rect = statusPrev.PaneBounds;  	bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);  	Rectangle rectThis = rect;  	Rectangle rectPrev = rect;  	Rectangle rectSplitter = rect;  	if (status.DisplayingAlignment == DockAlignment.Left) {  		rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectThis.X + rectThis.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectPrev.X = rectSplitter.X + rectSplitter.Width;  		rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Right) {  		rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectPrev.X + rectPrev.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectThis.X = rectSplitter.X + rectSplitter.Width;  		rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Top) {  		rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectThis.Y + rectThis.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  		rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  	}  	else if (status.DisplayingAlignment == DockAlignment.Bottom) {  		rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectPrev.Y + rectPrev.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectThis.Y = rectSplitter.Y + rectSplitter.Height;  		rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  	}  	else  		rectThis = Rectangle.Empty;  	rectSplitter.Intersect (rect);  	rectThis.Intersect (rect);  	rectPrev.Intersect (rect);  	status.SetDisplayingBounds (rect' rectThis' rectSplitter);  	statusPrev.SetDisplayingBounds (statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i = 1; i < Count; i++) {  	DockPane pane = this [i];  	NestedDockingStatus status = pane.NestedDockingStatus;  	DockPane prevPane = status.DisplayingPreviousPane;  	NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;  	Rectangle rect = statusPrev.PaneBounds;  	bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);  	Rectangle rectThis = rect;  	Rectangle rectPrev = rect;  	Rectangle rectSplitter = rect;  	if (status.DisplayingAlignment == DockAlignment.Left) {  		rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectThis.X + rectThis.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectPrev.X = rectSplitter.X + rectSplitter.Width;  		rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Right) {  		rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectPrev.X + rectPrev.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectThis.X = rectSplitter.X + rectSplitter.Width;  		rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Top) {  		rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectThis.Y + rectThis.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  		rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  	}  	else if (status.DisplayingAlignment == DockAlignment.Bottom) {  		rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectPrev.Y + rectPrev.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectThis.Y = rectSplitter.Y + rectSplitter.Height;  		rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  	}  	else  		rectThis = Rectangle.Empty;  	rectSplitter.Intersect (rect);  	rectThis.Intersect (rect);  	rectPrev.Intersect (rect);  	status.SetDisplayingBounds (rect' rectThis' rectSplitter);  	statusPrev.SetDisplayingBounds (statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i = 1; i < Count; i++) {  	DockPane pane = this [i];  	NestedDockingStatus status = pane.NestedDockingStatus;  	DockPane prevPane = status.DisplayingPreviousPane;  	NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;  	Rectangle rect = statusPrev.PaneBounds;  	bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);  	Rectangle rectThis = rect;  	Rectangle rectPrev = rect;  	Rectangle rectSplitter = rect;  	if (status.DisplayingAlignment == DockAlignment.Left) {  		rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectThis.X + rectThis.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectPrev.X = rectSplitter.X + rectSplitter.Width;  		rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Right) {  		rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.X = rectPrev.X + rectPrev.Width;  		rectSplitter.Width = Measures.SplitterSize;  		rectThis.X = rectSplitter.X + rectSplitter.Width;  		rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  	}  	else if (status.DisplayingAlignment == DockAlignment.Top) {  		rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectThis.Y + rectThis.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  		rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  	}  	else if (status.DisplayingAlignment == DockAlignment.Bottom) {  		rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  		rectSplitter.Y = rectPrev.Y + rectPrev.Height;  		rectSplitter.Height = Measures.SplitterSize;  		rectThis.Y = rectSplitter.Y + rectSplitter.Height;  		rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  	}  	else  		rectThis = Rectangle.Empty;  	rectSplitter.Intersect (rect);  	rectThis.Intersect (rect);  	rectPrev.Intersect (rect);  	status.SetDisplayingBounds (rect' rectThis' rectSplitter);  	statusPrev.SetDisplayingBounds (statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Left) {  	rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectThis.X + rectThis.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectPrev.X = rectSplitter.X + rectSplitter.Width;  	rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Left) {  	rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectThis.X + rectThis.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectPrev.X = rectSplitter.X + rectSplitter.Width;  	rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Left) {  	rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectThis.X + rectThis.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectPrev.X = rectSplitter.X + rectSplitter.Width;  	rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Left) {  	rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectThis.X + rectThis.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectPrev.X = rectSplitter.X + rectSplitter.Width;  	rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Right) {  	rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.X = rectPrev.X + rectPrev.Width;  	rectSplitter.Width = Measures.SplitterSize;  	rectThis.X = rectSplitter.X + rectSplitter.Width;  	rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  }  else if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Top) {  	rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectThis.Y + rectThis.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  	rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  }  else if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: if (status.DisplayingAlignment == DockAlignment.Bottom) {  	rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  	rectSplitter.Y = rectPrev.Y + rectPrev.Height;  	rectSplitter.Height = Measures.SplitterSize;  	rectThis.Y = rectSplitter.Y + rectSplitter.Height;  	rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  }  else  	rectThis = Rectangle.Empty;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	bool samePane = (Pane == pane);  	if (!samePane)  		Pane = pane;  	if (contentIndex == -1 || !samePane)  		pane.SetContentIndex (Content' contentIndex);  	else {  		DockContentCollection contents = pane.Contents;  		int oldIndex = contents.IndexOf (Content);  		int newIndex = contentIndex;  		if (oldIndex < newIndex) {  			newIndex += 1;  			if (newIndex > contents.Count - 1)  				newIndex = -1;  		}  		pane.SetContentIndex (Content' newIndex);  	}  }  else {  	DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane (Content' pane.DockState' true);  	INestedPanesContainer container = pane.NestedPanesContainer;  	if (dockStyle == DockStyle.Left)  		paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  	paneFrom.DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	bool samePane = (Pane == pane);  	if (!samePane)  		Pane = pane;  	if (contentIndex == -1 || !samePane)  		pane.SetContentIndex (Content' contentIndex);  	else {  		DockContentCollection contents = pane.Contents;  		int oldIndex = contents.IndexOf (Content);  		int newIndex = contentIndex;  		if (oldIndex < newIndex) {  			newIndex += 1;  			if (newIndex > contents.Count - 1)  				newIndex = -1;  		}  		pane.SetContentIndex (Content' newIndex);  	}  }  else {  	DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane (Content' pane.DockState' true);  	INestedPanesContainer container = pane.NestedPanesContainer;  	if (dockStyle == DockStyle.Left)  		paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  	paneFrom.DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	bool samePane = (Pane == pane);  	if (!samePane)  		Pane = pane;  	if (contentIndex == -1 || !samePane)  		pane.SetContentIndex (Content' contentIndex);  	else {  		DockContentCollection contents = pane.Contents;  		int oldIndex = contents.IndexOf (Content);  		int newIndex = contentIndex;  		if (oldIndex < newIndex) {  			newIndex += 1;  			if (newIndex > contents.Count - 1)  				newIndex = -1;  		}  		pane.SetContentIndex (Content' newIndex);  	}  }  else {  	DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane (Content' pane.DockState' true);  	INestedPanesContainer container = pane.NestedPanesContainer;  	if (dockStyle == DockStyle.Left)  		paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  	paneFrom.DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	bool samePane = (Pane == pane);  	if (!samePane)  		Pane = pane;  	if (contentIndex == -1 || !samePane)  		pane.SetContentIndex (Content' contentIndex);  	else {  		DockContentCollection contents = pane.Contents;  		int oldIndex = contents.IndexOf (Content);  		int newIndex = contentIndex;  		if (oldIndex < newIndex) {  			newIndex += 1;  			if (newIndex > contents.Count - 1)  				newIndex = -1;  		}  		pane.SetContentIndex (Content' newIndex);  	}  }  else {  	DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane (Content' pane.DockState' true);  	INestedPanesContainer container = pane.NestedPanesContainer;  	if (dockStyle == DockStyle.Left)  		paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  	paneFrom.DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: paneFrom.DockTo (container' pane' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: paneFrom.DockTo (container' pane' DockAlignment.Right' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Top)  	paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: paneFrom.DockTo (container' pane' DockAlignment.Top' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Bottom)  	paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: paneFrom.DockTo (container' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetStatus (null' null' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetDisplayingStatus (false' null' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct (content' visibleState' false' Rectangle.Empty' null' DockAlignment.Right' 0.5' show);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct (content' DockState.Float' false' Rectangle.Empty' floatWindow.NestedPanes.GetDefaultPreviousPane (this)' DockAlignment.Right' 0.5' show);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct (content' DockState.Float' true' floatWindowBounds' null' DockAlignment.Right' 0.5' show);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: return DockTo (container' container.NestedPanes.GetDefaultPreviousPane (this)' alignment' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	IDockContent activeContent = ActiveContent;  	for (int i = Contents.Count - 1; i >= 0; i--) {  		IDockContent c = Contents [i];  		if (c.DockHandler.DockState == DockState) {  			c.DockHandler.Pane = pane;  			if (contentIndex != -1)  				pane.SetContentIndex (c' contentIndex);  		}  	}  	pane.ActiveContent = activeContent;  }  else {  	if (dockStyle == DockStyle.Left)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  	DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	IDockContent activeContent = ActiveContent;  	for (int i = Contents.Count - 1; i >= 0; i--) {  		IDockContent c = Contents [i];  		if (c.DockHandler.DockState == DockState) {  			c.DockHandler.Pane = pane;  			if (contentIndex != -1)  				pane.SetContentIndex (c' contentIndex);  		}  	}  	pane.ActiveContent = activeContent;  }  else {  	if (dockStyle == DockStyle.Left)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  	DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	IDockContent activeContent = ActiveContent;  	for (int i = Contents.Count - 1; i >= 0; i--) {  		IDockContent c = Contents [i];  		if (c.DockHandler.DockState == DockState) {  			c.DockHandler.Pane = pane;  			if (contentIndex != -1)  				pane.SetContentIndex (c' contentIndex);  		}  	}  	pane.ActiveContent = activeContent;  }  else {  	if (dockStyle == DockStyle.Left)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  	DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	IDockContent activeContent = ActiveContent;  	for (int i = Contents.Count - 1; i >= 0; i--) {  		IDockContent c = Contents [i];  		if (c.DockHandler.DockState == DockState) {  			c.DockHandler.Pane = pane;  			if (contentIndex != -1)  				pane.SetContentIndex (c' contentIndex);  		}  	}  	pane.ActiveContent = activeContent;  }  else {  	if (dockStyle == DockStyle.Left)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  	else if (dockStyle == DockStyle.Right)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  	else if (dockStyle == DockStyle.Top)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  	else if (dockStyle == DockStyle.Bottom)  		DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  	DockState = pane.DockState;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Left)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  else if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: DockTo (pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Right)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  else if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: DockTo (pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Top)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  else if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: DockTo (pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Bottom)  	DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: DockTo (pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetOutline_Document,The following statement contains a magic number: rectTab.X -= rectTab.Height / 2;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: if (!overflow) {  	m_startDisplayingTab = 0;  	FirstDisplayingTab = 0;  	x = rectTabStrip.X + rectTabStrip.Height / 2;  	foreach (TabVS2005 tab in Tabs) {  		tab.TabX = x;  		x += tab.TabWidth;  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: x = rectTabStrip.X + rectTabStrip.Height / 2;  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf (tab) == FirstDisplayingTab) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  			// It is not needed so it has been commented out.  			//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  			GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  // Draws the partial angle for non-active content  else {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  		}  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  		// It is not needed so it has been commented out.  		//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  		GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.  	// It is not needed so it has been commented out.  	//GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  	GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  	else {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  		GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		// Draws the bottom horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  		// Drawing the rounded corner is not necessary. The path is automatically connected  		//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  	}  	else {  		// Draws the top horizontal line (short side)  		GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  		// Draws the rounded corner oppposite the angled side  		GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  else {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  	GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	// Draws the bottom horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  	// Drawing the rounded corner is not necessary. The path is automatically connected  	//GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);  }  else {  	// Draws the top horizontal line (short side)  	GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	// Draws the rounded corner oppposite the angled side  	GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf (tab) != EndDisplayingTab && (Tabs.IndexOf (tab) != Tabs.Count - 1 && Tabs [Tabs.IndexOf (tab) + 1].Content == DockPane.ActiveContent) && !full) {  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  		}  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  		}  		else {  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  			GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  		}  	}  }  else {  	// Draw the vertical line opposite the angled side  	if (RightToLeft == RightToLeft.Yes) {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  		else  			GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  	}  	else {  		if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  			GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  		else  			GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  	}  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  	}  	else {  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  		GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom) {  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  }  else {  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  	GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  	else  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  	else  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  	else  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  	else  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  	else  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  	else  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes) {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  	else  		GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  }  else {  	if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  		GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  	else  		GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  else  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  	GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  else  	GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  else  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)  	GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  else  	GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: GraphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case (int)Win32.Msgs.WM_NCLBUTTONDOWN: {  	if (IsDisposed)  		return;  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)// HITTEST_CAPTION  	 {  		Activate ();  		m_dockPanel.BeginDrag (this);  	}  	else  		base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_NCRBUTTONDOWN: {  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2)// HITTEST_CAPTION  	 {  		DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes [0] : null;  		if (theOnlyPane != null && theOnlyPane.ActiveContent != null) {  			theOnlyPane.ShowTabPageContextMenu (this' PointToClient (Control.MousePosition));  			return;  		}  	}  	base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_CLOSE:  	if (NestedPanes.Count == 0) {  		base.WndProc (ref m);  		return;  	}  	for (int i = NestedPanes.Count - 1; i >= 0; i--) {  		DockContentCollection contents = NestedPanes [i].Contents;  		for (int j = contents.Count - 1; j >= 0; j--) {  			IDockContent content = contents [j];  			if (content.DockHandler.DockState != DockState.Float)  				continue;  			if (!content.DockHandler.CloseButton)  				continue;  			if (content.DockHandler.HideOnClose)  				content.DockHandler.Hide ();  			else  				content.DockHandler.Close ();  		}  	}  	return;  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK: {  	uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result != 2)// HITTEST_CAPTION  	 {  		base.WndProc (ref m);  		return;  	}  	DockPanel.SuspendLayout (true);  	// Restore to panel  	foreach (DockPane pane in NestedPanes) {  		if (pane.DockState != DockState.Float)  			continue;  		pane.RestoreToPanel ();  	}  	DockPanel.ResumeLayout (true' true);  	return;  }  case WM_CHECKDISPOSE:  	if (NestedPanes.Count == 0)  		Dispose ();  	return;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case (int)Win32.Msgs.WM_NCLBUTTONDOWN: {  	if (IsDisposed)  		return;  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)// HITTEST_CAPTION  	 {  		Activate ();  		m_dockPanel.BeginDrag (this);  	}  	else  		base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_NCRBUTTONDOWN: {  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2)// HITTEST_CAPTION  	 {  		DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes [0] : null;  		if (theOnlyPane != null && theOnlyPane.ActiveContent != null) {  			theOnlyPane.ShowTabPageContextMenu (this' PointToClient (Control.MousePosition));  			return;  		}  	}  	base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_CLOSE:  	if (NestedPanes.Count == 0) {  		base.WndProc (ref m);  		return;  	}  	for (int i = NestedPanes.Count - 1; i >= 0; i--) {  		DockContentCollection contents = NestedPanes [i].Contents;  		for (int j = contents.Count - 1; j >= 0; j--) {  			IDockContent content = contents [j];  			if (content.DockHandler.DockState != DockState.Float)  				continue;  			if (!content.DockHandler.CloseButton)  				continue;  			if (content.DockHandler.HideOnClose)  				content.DockHandler.Hide ();  			else  				content.DockHandler.Close ();  		}  	}  	return;  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK: {  	uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result != 2)// HITTEST_CAPTION  	 {  		base.WndProc (ref m);  		return;  	}  	DockPanel.SuspendLayout (true);  	// Restore to panel  	foreach (DockPane pane in NestedPanes) {  		if (pane.DockState != DockState.Float)  			continue;  		pane.RestoreToPanel ();  	}  	DockPanel.ResumeLayout (true' true);  	return;  }  case WM_CHECKDISPOSE:  	if (NestedPanes.Count == 0)  		Dispose ();  	return;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case (int)Win32.Msgs.WM_NCLBUTTONDOWN: {  	if (IsDisposed)  		return;  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)// HITTEST_CAPTION  	 {  		Activate ();  		m_dockPanel.BeginDrag (this);  	}  	else  		base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_NCRBUTTONDOWN: {  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2)// HITTEST_CAPTION  	 {  		DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes [0] : null;  		if (theOnlyPane != null && theOnlyPane.ActiveContent != null) {  			theOnlyPane.ShowTabPageContextMenu (this' PointToClient (Control.MousePosition));  			return;  		}  	}  	base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_CLOSE:  	if (NestedPanes.Count == 0) {  		base.WndProc (ref m);  		return;  	}  	for (int i = NestedPanes.Count - 1; i >= 0; i--) {  		DockContentCollection contents = NestedPanes [i].Contents;  		for (int j = contents.Count - 1; j >= 0; j--) {  			IDockContent content = contents [j];  			if (content.DockHandler.DockState != DockState.Float)  				continue;  			if (!content.DockHandler.CloseButton)  				continue;  			if (content.DockHandler.HideOnClose)  				content.DockHandler.Hide ();  			else  				content.DockHandler.Close ();  		}  	}  	return;  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK: {  	uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result != 2)// HITTEST_CAPTION  	 {  		base.WndProc (ref m);  		return;  	}  	DockPanel.SuspendLayout (true);  	// Restore to panel  	foreach (DockPane pane in NestedPanes) {  		if (pane.DockState != DockState.Float)  			continue;  		pane.RestoreToPanel ();  	}  	DockPanel.ResumeLayout (true' true);  	return;  }  case WM_CHECKDISPOSE:  	if (NestedPanes.Count == 0)  		Dispose ();  	return;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)// HITTEST_CAPTION   {  	Activate ();  	m_dockPanel.BeginDrag (this);  }  else  	base.WndProc (ref m);  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (result == 2)// HITTEST_CAPTION   {  	DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes [0] : null;  	if (theOnlyPane != null && theOnlyPane.ActiveContent != null) {  		theOnlyPane.ShowTabPageContextMenu (this' PointToClient (Control.MousePosition));  		return;  	}  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (result != 2)// HITTEST_CAPTION   {  	base.WndProc (ref m);  	return;  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill) {  	for (int i = NestedPanes.Count - 1; i >= 0; i--) {  		DockPane paneFrom = NestedPanes [i];  		for (int j = paneFrom.Contents.Count - 1; j >= 0; j--) {  			IDockContent c = paneFrom.Contents [j];  			c.DockHandler.Pane = pane;  			if (contentIndex != -1)  				pane.SetContentIndex (c' contentIndex);  			c.DockHandler.Activate ();  		}  	}  }  else {  	DockAlignment alignment = DockAlignment.Left;  	if (dockStyle == DockStyle.Left)  		alignment = DockAlignment.Left;  	else if (dockStyle == DockStyle.Right)  		alignment = DockAlignment.Right;  	else if (dockStyle == DockStyle.Top)  		alignment = DockAlignment.Top;  	else if (dockStyle == DockStyle.Bottom)  		alignment = DockAlignment.Bottom;  	MergeNestedPanes (VisibleNestedPanes' pane.NestedPanesContainer.NestedPanes' pane' alignment' 0.5);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: MergeNestedPanes (VisibleNestedPanes' pane.NestedPanesContainer.NestedPanes' pane' alignment' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: MergeNestedPanes (VisibleNestedPanes' nestedPanesTo' prevPane' DockAlignment.Left' 0.5);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner) {  	graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  	graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  	graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  }  else {  	graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  	graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  	graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  	graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  	graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  }  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Left' rect.Top' curveSize' curveSize)' 180' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddArc (new Rectangle (rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);  
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: graphicsPath.AddLine (rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);  
Magic Number,WeifenLuo.WinFormsUI.Docking,Win32Helper,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\Helpers\Win32Helper.cs,MakeLong,The following statement contains a magic number: return (uint)((high << 16) + low);  
Missing Default,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\DockContentHandler.cs,ResetAutoHidePortion,The following switch statement is missing a default case: switch (newState) {  case DockState.DockTop:  case DockState.DockTopAutoHide:  	AutoHidePortion = DockPanel.DockTopPortion;  	break;  case DockState.DockLeft:  case DockState.DockLeftAutoHide:  	AutoHidePortion = DockPanel.DockLeftPortion;  	break;  case DockState.DockBottom:  case DockState.DockBottomAutoHide:  	AutoHidePortion = DockPanel.DockBottomPortion;  	break;  case DockState.DockRight:  case DockState.DockRightAutoHide:  	AutoHidePortion = DockPanel.DockRightPortion;  	break;  }  
Missing Default,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\xmj112288_Study\OpenSources\DockPanelSuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case (int)Win32.Msgs.WM_NCLBUTTONDOWN: {  	if (IsDisposed)  		return;  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)// HITTEST_CAPTION  	 {  		Activate ();  		m_dockPanel.BeginDrag (this);  	}  	else  		base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_NCRBUTTONDOWN: {  	uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result == 2)// HITTEST_CAPTION  	 {  		DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes [0] : null;  		if (theOnlyPane != null && theOnlyPane.ActiveContent != null) {  			theOnlyPane.ShowTabPageContextMenu (this' PointToClient (Control.MousePosition));  			return;  		}  	}  	base.WndProc (ref m);  	return;  }  case (int)Win32.Msgs.WM_CLOSE:  	if (NestedPanes.Count == 0) {  		base.WndProc (ref m);  		return;  	}  	for (int i = NestedPanes.Count - 1; i >= 0; i--) {  		DockContentCollection contents = NestedPanes [i].Contents;  		for (int j = contents.Count - 1; j >= 0; j--) {  			IDockContent content = contents [j];  			if (content.DockHandler.DockState != DockState.Float)  				continue;  			if (!content.DockHandler.CloseButton)  				continue;  			if (content.DockHandler.HideOnClose)  				content.DockHandler.Hide ();  			else  				content.DockHandler.Close ();  		}  	}  	return;  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK: {  	uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage (this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  	if (result != 2)// HITTEST_CAPTION  	 {  		base.WndProc (ref m);  		return;  	}  	DockPanel.SuspendLayout (true);  	// Restore to panel  	foreach (DockPane pane in NestedPanes) {  		if (pane.DockState != DockState.Float)  			continue;  		pane.RestoreToPanel ();  	}  	DockPanel.ResumeLayout (true' true);  	return;  }  case WM_CHECKDISPOSE:  	if (NestedPanes.Count == 0)  		Dispose ();  	return;  }  
