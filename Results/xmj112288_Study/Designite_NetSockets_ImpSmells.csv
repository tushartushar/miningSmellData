Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetSockets,NetBaseServer,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBaseServer.cs,OnClientReceived,Cyclomatic complexity of the method is 12
Magic Number,NetSockets,NetBaseStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBaseStream.cs,ThreadedReceive,The following statement contains a magic number: while (IsActive && stream.CanRead) {  	Thread.Sleep (TickRate);  	byte[] buffer = new byte[512];  	int recv = 0;  	try {  		recv = stream.Read (buffer' 0' buffer.Length);  		if (recv == 0) {  			Stop (NetStoppedReason.Remote);  			return;  		}  		DataReceived += recv;  	}  	catch (System.IO.IOException ioex) {  		Stop (NetStoppedReason.Remote);  		return;  	}  	catch (Exception ex) {  		Stop (NetStoppedReason.Exception);  		throw ex;  	}  	if (recv < 512) {  		byte[] newBuffer = new byte[recv];  		System.Buffer.BlockCopy (buffer' 0' newBuffer' 0' recv);  		buffer = newBuffer;  	}  	ReceivedRaw (buffer);  }  
Magic Number,NetSockets,NetBaseStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBaseStream.cs,ThreadedReceive,The following statement contains a magic number: while (IsActive && stream.CanRead) {  	Thread.Sleep (TickRate);  	byte[] buffer = new byte[512];  	int recv = 0;  	try {  		recv = stream.Read (buffer' 0' buffer.Length);  		if (recv == 0) {  			Stop (NetStoppedReason.Remote);  			return;  		}  		DataReceived += recv;  	}  	catch (System.IO.IOException ioex) {  		Stop (NetStoppedReason.Remote);  		return;  	}  	catch (Exception ex) {  		Stop (NetStoppedReason.Exception);  		throw ex;  	}  	if (recv < 512) {  		byte[] newBuffer = new byte[recv];  		System.Buffer.BlockCopy (buffer' 0' newBuffer' 0' recv);  		buffer = newBuffer;  	}  	ReceivedRaw (buffer);  }  
Magic Number,NetSockets,NetBaseStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBaseStream.cs,ThreadedReceive,The following statement contains a magic number: if (recv < 512) {  	byte[] newBuffer = new byte[recv];  	System.Buffer.BlockCopy (buffer' 0' newBuffer' 0' recv);  	buffer = newBuffer;  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: while (buffer.Length >= 4) {  	//Get payload length  	byte[] lenBytes = new byte[4];  	System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  	int len = BitConverter.ToInt32 (lenBytes' 0);  	//We have the full payload if we have buffer is >= the length  	if (buffer.Length >= 4 + len) {  		//Get the payload  		byte[] payload = new byte[len];  		System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  		//Update buffer  		newLen = buffer.Length - 4 - len;  		newBuffer = new byte[newLen];  		int offset = 4 + len;  		System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  		buffer = newBuffer;  		//Handle payload  		ReceivedPayload (payload);  	}  	else {  		break;  	}  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: System.Buffer.BlockCopy (buffer' 0' lenBytes' 0' 4);  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: if (buffer.Length >= 4 + len) {  	//Get the payload  	byte[] payload = new byte[len];  	System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  	//Update buffer  	newLen = buffer.Length - 4 - len;  	newBuffer = new byte[newLen];  	int offset = 4 + len;  	System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  	buffer = newBuffer;  	//Handle payload  	ReceivedPayload (payload);  }  else {  	break;  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: if (buffer.Length >= 4 + len) {  	//Get the payload  	byte[] payload = new byte[len];  	System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  	//Update buffer  	newLen = buffer.Length - 4 - len;  	newBuffer = new byte[newLen];  	int offset = 4 + len;  	System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  	buffer = newBuffer;  	//Handle payload  	ReceivedPayload (payload);  }  else {  	break;  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: if (buffer.Length >= 4 + len) {  	//Get the payload  	byte[] payload = new byte[len];  	System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  	//Update buffer  	newLen = buffer.Length - 4 - len;  	newBuffer = new byte[newLen];  	int offset = 4 + len;  	System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  	buffer = newBuffer;  	//Handle payload  	ReceivedPayload (payload);  }  else {  	break;  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: if (buffer.Length >= 4 + len) {  	//Get the payload  	byte[] payload = new byte[len];  	System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  	//Update buffer  	newLen = buffer.Length - 4 - len;  	newBuffer = new byte[newLen];  	int offset = 4 + len;  	System.Buffer.BlockCopy (buffer' offset' newBuffer' 0' newLen);  	buffer = newBuffer;  	//Handle payload  	ReceivedPayload (payload);  }  else {  	break;  }  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: System.Buffer.BlockCopy (buffer' 4' payload' 0' len);  
Magic Number,NetSockets,NetBasePayloadStream,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBasePayloadStream.cs,ReceivedRaw,The following statement contains a magic number: newLen = buffer.Length - 4 - len;  
Missing Default,NetSockets,NetBaseServer,C:\repos\xmj112288_Study\OpenSources\NetSockets\Base\NetBaseServer.cs,OnClientReceived,The following switch statement is missing a default case: switch (args.EchoMode) {  case NetEchoMode.EchoAll:  	DispatchAll (e.Data);  	break;  case NetEchoMode.EchoAllExceptSender:  	DispatchAllExcept (e.Guid' e.Data);  	break;  case NetEchoMode.EchoSender:  	DispatchTo (e.Guid' e.Data);  	break;  case NetEchoMode.None:  	break;  }  
