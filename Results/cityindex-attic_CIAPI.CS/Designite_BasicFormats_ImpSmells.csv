Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getCookies,Cyclomatic complexity of the method is 13
Complex Method,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,IsMIMETypeTextEquivalent,Cyclomatic complexity of the method is 9
Complex Method,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,WriteStream,Cyclomatic complexity of the method is 11
Complex Method,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,Cyclomatic complexity of the method is 11
Complex Method,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,LoadStream,Cyclomatic complexity of the method is 8
Complex Method,BasicFormats,HTTPArchiveFormatExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveFormatExport.cs,ExportSessions,Cyclomatic complexity of the method is 9
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,Cyclomatic complexity of the method is 22
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,Cyclomatic complexity of the method is 9
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,Cyclomatic complexity of the method is 18
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,Cyclomatic complexity of the method is 10
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeString,Cyclomatic complexity of the method is 25
Complex Method,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeValue,Cyclomatic complexity of the method is 8
Long Parameter List,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,WriteStream,The method has 6 parameters.
Long Statement,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The length of the statement  "		if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) { " is 318.
Long Statement,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The length of the statement  "			hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength' so body was omitted."); " is 127.
Long Statement,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The length of the statement  "			hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength' so body was omitted."); " is 129.
Long Statement,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getCookies,The length of the statement  "				if ((match.Success && (match.Groups ["TokenValue"] != null)) && DateTime.TryParse (match.Groups ["TokenValue"].Value' out time)) { " is 130.
Long Statement,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,WriteStream,The length of the statement  "			ProgressCallbackEventArgs e = new ProgressCallbackEventArgs (((float)num) / ((float)oSessions.Length)' "Wrote " + num.ToString () + " sessions to HTTPArchive."); " is 161.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,The length of the statement  "		if ((index > -1) && (Utilities.TrimAfter (sHeaders.Substring (index)' '\n').IndexOf ("chunked"' StringComparison.OrdinalIgnoreCase) > -1)) { " is 140.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getSessionFromEntry,The length of the statement  "		session.Timers.ClientConnected = session.Timers.ClientBeginRequest = session.Timers.FiddlerGotRequestHeaders = session.Timers.ClientDoneRequest = now; " is 150.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getSessionFromEntry,The length of the statement  "		session.Timers.ServerConnected = session.Timers.FiddlerBeginRequest = now.AddMilliseconds ((double)(((getMilliseconds (htTimers' "blocked") + session.Timers.DNSTime) + session.Timers.TCPConnectTime) + session.Timers.HTTPSHandshakeTime)); " is 237.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getSessionFromEntry,The length of the statement  "		session.Timers.ServerGotRequest = session.Timers.FiddlerBeginRequest.AddMilliseconds ((double)getMilliseconds (htTimers' "send")); " is 130.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getSessionFromEntry,The length of the statement  "		session.Timers.ServerBeginResponse = session.Timers.FiddlerGotResponseHeaders = session.Timers.ServerGotRequest.AddMilliseconds ((double)getMilliseconds (htTimers' "wait")); " is 173.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getSessionFromEntry,The length of the statement  "		session.Timers.ServerDoneResponse = session.Timers.ServerBeginResponse.AddMilliseconds ((double)getMilliseconds (htTimers' "receive")); " is 135.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getStringFromParams,The length of the statement  "		builder.AppendFormat ("{0}={1}"' Utilities.UrlEncode ((string)hashtable ["name"]' Encoding.UTF8)' Utilities.UrlEncode ((string)hashtable ["value"]' Encoding.UTF8)); " is 164.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,LoadStream,The length of the statement  "			evtProgressNotifications (null' new ProgressCallbackEventArgs (0f' "Found HTTPArchive v" + hashtable2 ["version"] + "...")); " is 124.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,LoadStream,The length of the statement  "		MessageBox.Show ("This file is not properly formatted HAR JSON.\n\nNote: Chrome does not save valid HAR content when you use 'Save Entry as HAR'. It only generates a valid file if you use 'Save All as HAR'"' "Warning"); " is 219.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,LoadStream,The length of the statement  "					evtProgressNotifications (null' new ProgressCallbackEventArgs ((float)(num / count)' "Imported " + num.ToString () + " sessions.")); " is 132.
Long Statement,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,LoadStream,The length of the statement  "				evtProgressNotifications (null' new ProgressCallbackEventArgs ((float)(num / count)' "Skipping malformed session." + exception.Message)); " is 137.
Long Statement,BasicFormats,HTTPArchiveFormatExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveFormatExport.cs,ExportSessions,The length of the statement  "	int iMaxBinaryBodyLength = FiddlerApplication.Prefs.GetInt32Pref ("fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength"' 0x8000); " is 134.
Long Statement,BasicFormats,HTTPArchiveFormatExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveFormatExport.cs,ExportSessions,The length of the statement  "	int iMaxTextBodyLength = FiddlerApplication.Prefs.GetInt32Pref ("fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength"' 0x16); " is 128.
Long Statement,BasicFormats,HTTPArchiveFormatExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveFormatExport.cs,ExportSessions,The length of the statement  "			HTTPArchiveJSONExport.WriteStream (swOutput' oSessions' sFormat == "HTTPArchive v1.2"' evtProgressNotifications' iMaxTextBodyLength' iMaxBinaryBodyLength); " is 155.
Long Statement,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The length of the statement  "		if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) { " is 166.
Long Statement,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The length of the statement  "		if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) { " is 135.
Long Statement,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The length of the statement  "		if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) { " is 135.
Complex Conditional,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The conditional expression  "((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))"  is complex.
Complex Conditional,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The conditional expression  "(((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))"  is complex.
Complex Conditional,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The conditional expression  "(((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')"  is complex.
Complex Conditional,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The conditional expression  "(((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')"  is complex.
Empty Catch Block,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getDecompressedSize,The method has an empty catch block.
Empty Catch Block,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,The method has an empty catch block.
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (oS.responseBodyBytes != null) {  	string mIMEType = oS.oResponse.MIMEType;  	bool flag = IsMIMETypeTextEquivalent (mIMEType);  	if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  		flag = false;  	}  	if (flag) {  		if (oS.responseBodyBytes.Length < _iMaxTextBodyLength) {  			hashtable.Add ("text"' oS.GetResponseBodyAsString ());  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength' so body was omitted.");  		return hashtable;  	}  	if (bUseV1dot2Format) {  		if (oS.responseBodyBytes.Length < _iMaxBinaryBodyLength) {  			hashtable.Add ("encoding"' "base64");  			hashtable.Add ("text"' Convert.ToBase64String (oS.responseBodyBytes));  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength' so body was omitted.");  	}  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (oS.responseBodyBytes != null) {  	string mIMEType = oS.oResponse.MIMEType;  	bool flag = IsMIMETypeTextEquivalent (mIMEType);  	if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  		flag = false;  	}  	if (flag) {  		if (oS.responseBodyBytes.Length < _iMaxTextBodyLength) {  			hashtable.Add ("text"' oS.GetResponseBodyAsString ());  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength' so body was omitted.");  		return hashtable;  	}  	if (bUseV1dot2Format) {  		if (oS.responseBodyBytes.Length < _iMaxBinaryBodyLength) {  			hashtable.Add ("encoding"' "base64");  			hashtable.Add ("text"' Convert.ToBase64String (oS.responseBodyBytes));  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength' so body was omitted.");  	}  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (oS.responseBodyBytes != null) {  	string mIMEType = oS.oResponse.MIMEType;  	bool flag = IsMIMETypeTextEquivalent (mIMEType);  	if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  		flag = false;  	}  	if (flag) {  		if (oS.responseBodyBytes.Length < _iMaxTextBodyLength) {  			hashtable.Add ("text"' oS.GetResponseBodyAsString ());  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength' so body was omitted.");  		return hashtable;  	}  	if (bUseV1dot2Format) {  		if (oS.responseBodyBytes.Length < _iMaxBinaryBodyLength) {  			hashtable.Add ("encoding"' "base64");  			hashtable.Add ("text"' Convert.ToBase64String (oS.responseBodyBytes));  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength' so body was omitted.");  	}  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (oS.responseBodyBytes != null) {  	string mIMEType = oS.oResponse.MIMEType;  	bool flag = IsMIMETypeTextEquivalent (mIMEType);  	if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  		flag = false;  	}  	if (flag) {  		if (oS.responseBodyBytes.Length < _iMaxTextBodyLength) {  			hashtable.Add ("text"' oS.GetResponseBodyAsString ());  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxTextBodyLength' so body was omitted.");  		return hashtable;  	}  	if (bUseV1dot2Format) {  		if (oS.responseBodyBytes.Length < _iMaxBinaryBodyLength) {  			hashtable.Add ("encoding"' "base64");  			hashtable.Add ("text"' Convert.ToBase64String (oS.responseBodyBytes));  			return hashtable;  		}  		hashtable.Add ("comment"' "Body length exceeded fiddler.importexport.HTTPArchiveJSON.MaxBinaryBodyLength' so body was omitted.");  	}  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  	flag = false;  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  	flag = false;  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  	flag = false;  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getBodyInfo,The following statement contains a magic number: if (((flag && ("text/plain" == mIMEType)) && (oS.responseBodyBytes.Length > 3)) && ((((oS.responseBodyBytes [0] == 0x43) && (oS.responseBodyBytes [1] == 0x57)) && (oS.responseBodyBytes [2] == 0x53)) || (((oS.responseBodyBytes [0] == 70) && (oS.responseBodyBytes [1] == 0x4c)) && (oS.responseBodyBytes [2] == 0x56)))) {  	flag = false;  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getHeadersAsArrayList,The following statement contains a magic number: foreach (HTTPHeaderItem item in oHeaders) {  	Hashtable hashtable = new Hashtable (2);  	hashtable.Add ("name"' item.Name);  	hashtable.Add ("value"' item.Value);  	list.Add (hashtable);  }  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getRequest,The following statement contains a magic number: hashtable.Add ("headersSize"' oS.oRequest.headers.ByteCount () + 2);  
Magic Number,BasicFormats,HTTPArchiveJSONExport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONExport.cs,getResponse,The following statement contains a magic number: hashtable.Add ("headersSize"' oS.oResponse.headers.ByteCount () + 2);  
Magic Number,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,The following statement contains a magic number: if (htContent != null) {  	if (!htContent.ContainsKey ("text")) {  		return writeData;  	}  	if (htContent.ContainsKey ("encoding") && ("base64" == ((string)htContent ["encoding"]))) {  		writeData = Convert.FromBase64String ((string)htContent ["text"]);  	} else {  		Encoding encoding = Encoding.UTF8;  		if (htContent.ContainsKey ("mimeType") && (((string)htContent ["mimeType"]).IndexOf ("charset") > -1)) {  			Match match = new Regex ("charset\\s?=\\s?[\"]?(?<TokenValue>[^\";]*)").Match ((string)htContent ["mimeType"]);  			if (match.Success && (match.Groups ["TokenValue"] != null)) {  				try {  					encoding = Encoding.GetEncoding (match.Groups ["TokenValue"].Value);  				} catch (Exception) {  				}  			}  		}  		writeData = encoding.GetBytes ((string)htContent ["text"]);  	}  	int index = sHeaders.IndexOf ("Content-Encoding"' StringComparison.OrdinalIgnoreCase);  	if (index > -1) {  		string str = Utilities.TrimAfter (sHeaders.Substring (index)' '\n');  		if (str.IndexOf ("gzip"' StringComparison.OrdinalIgnoreCase) > -1) {  			writeData = Utilities.GzipCompress (writeData);  		} else if (str.IndexOf ("deflate"' StringComparison.OrdinalIgnoreCase) > -1) {  			writeData = Utilities.DeflaterCompress (writeData);  		}  	}  	index = sHeaders.IndexOf ("Transfer-Encoding"' StringComparison.OrdinalIgnoreCase);  	if ((index > -1) && (Utilities.TrimAfter (sHeaders.Substring (index)' '\n').IndexOf ("chunked"' StringComparison.OrdinalIgnoreCase) > -1)) {  		writeData = Utilities.doChunk (writeData' 2);  	}  }  
Magic Number,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,The following statement contains a magic number: if ((index > -1) && (Utilities.TrimAfter (sHeaders.Substring (index)' '\n').IndexOf ("chunked"' StringComparison.OrdinalIgnoreCase) > -1)) {  	writeData = Utilities.doChunk (writeData' 2);  }  
Magic Number,BasicFormats,HTTPArchiveJSONImport,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\HTTPArchiveJSONImport.cs,_getBodyArrayFromContent,The following statement contains a magic number: writeData = Utilities.doChunk (writeData' 2);  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if (index != json.Length) {  	char ch = json [index];  	index++;  	switch (ch) {  	case '"':  		return 7;  	case ''':  		return 6;  	case '-':  	case '0':  	case '1':  	case '2':  	case '3':  	case '4':  	case '5':  	case '6':  	case '7':  	case '8':  	case '9':  		return 8;  	case ':':  		return 5;  	case '[':  		return 3;  	case ']':  		return 4;  	case '{':  		return 1;  	case '}':  		return 2;  	}  	index--;  	int num = json.Length - index;  	if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  		index += 5;  		return 10;  	}  	if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  		index += 4;  		return 9;  	}  	if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  		index += 4;  		return 11;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 7;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 6;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 8;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 5;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 3;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 4;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 2;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 5) && (json [index] == 'f')) && ((json [index + 1] == 'a') && (json [index + 2] == 'l'))) && ((json [index + 3] == 's') && (json [index + 4] == 'e'))) {  	index += 5;  	return 10;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: index += 5;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 10;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  	index += 4;  	return 9;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  	index += 4;  	return 9;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  	index += 4;  	return 9;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  	index += 4;  	return 9;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 't')) && ((json [index + 1] == 'r') && (json [index + 2] == 'u'))) && (json [index + 3] == 'e')) {  	index += 4;  	return 9;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 9;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  	index += 4;  	return 11;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  	index += 4;  	return 11;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  	index += 4;  	return 11;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  	index += 4;  	return 11;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: if ((((num >= 4) && (json [index] == 'n')) && ((json [index + 1] == 'u') && (json [index + 2] == 'l'))) && (json [index + 3] == 'l')) {  	index += 4;  	return 11;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following statement contains a magic number: return 11;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseArray,The following statement contains a magic number: while (!flag) {  	int num = this.LookAhead (json' index);  	if (num == 0) {  		return null;  	}  	if (num == 6) {  		this.NextToken (json' ref index);  	} else {  		if (num == 4) {  			this.NextToken (json' ref index);  			return list;  		}  		bool success = true;  		object obj2 = this.ParseValue (json' ref index' ref success);  		if (!success) {  			return null;  		}  		list.Add (obj2);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseArray,The following statement contains a magic number: while (!flag) {  	int num = this.LookAhead (json' index);  	if (num == 0) {  		return null;  	}  	if (num == 6) {  		this.NextToken (json' ref index);  	} else {  		if (num == 4) {  			this.NextToken (json' ref index);  			return list;  		}  		bool success = true;  		object obj2 = this.ParseValue (json' ref index' ref success);  		if (!success) {  			return null;  		}  		list.Add (obj2);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseArray,The following statement contains a magic number: if (num == 6) {  	this.NextToken (json' ref index);  } else {  	if (num == 4) {  		this.NextToken (json' ref index);  		return list;  	}  	bool success = true;  	object obj2 = this.ParseValue (json' ref index' ref success);  	if (!success) {  		return null;  	}  	list.Add (obj2);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseArray,The following statement contains a magic number: if (num == 6) {  	this.NextToken (json' ref index);  } else {  	if (num == 4) {  		this.NextToken (json' ref index);  		return list;  	}  	bool success = true;  	object obj2 = this.ParseValue (json' ref index' ref success);  	if (!success) {  		return null;  	}  	list.Add (obj2);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseArray,The following statement contains a magic number: if (num == 4) {  	this.NextToken (json' ref index);  	return list;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: while (!flag) {  	switch (this.LookAhead (json' index)) {  	case 0:  		return null;  	case 6: {  		this.NextToken (json' ref index);  		continue;  	}  	case 2:  		this.NextToken (json' ref index);  		return hashtable;  	}  	string str = this.ParseString (json' ref index);  	if (str == null) {  		return null;  	}  	if (this.NextToken (json' ref index) != 5) {  		return null;  	}  	bool success = true;  	object obj2 = this.ParseValue (json' ref index' ref success);  	if (!success) {  		return null;  	}  	hashtable [str] = obj2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: while (!flag) {  	switch (this.LookAhead (json' index)) {  	case 0:  		return null;  	case 6: {  		this.NextToken (json' ref index);  		continue;  	}  	case 2:  		this.NextToken (json' ref index);  		return hashtable;  	}  	string str = this.ParseString (json' ref index);  	if (str == null) {  		return null;  	}  	if (this.NextToken (json' ref index) != 5) {  		return null;  	}  	bool success = true;  	object obj2 = this.ParseValue (json' ref index' ref success);  	if (!success) {  		return null;  	}  	hashtable [str] = obj2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: while (!flag) {  	switch (this.LookAhead (json' index)) {  	case 0:  		return null;  	case 6: {  		this.NextToken (json' ref index);  		continue;  	}  	case 2:  		this.NextToken (json' ref index);  		return hashtable;  	}  	string str = this.ParseString (json' ref index);  	if (str == null) {  		return null;  	}  	if (this.NextToken (json' ref index) != 5) {  		return null;  	}  	bool success = true;  	object obj2 = this.ParseValue (json' ref index' ref success);  	if (!success) {  		return null;  	}  	hashtable [str] = obj2;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 0:  	return null;  case 6: {  	this.NextToken (json' ref index);  	continue;  }  case 2:  	this.NextToken (json' ref index);  	return hashtable;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 0:  	return null;  case 6: {  	this.NextToken (json' ref index);  	continue;  }  case 2:  	this.NextToken (json' ref index);  	return hashtable;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following statement contains a magic number: if (this.NextToken (json' ref index) != 5) {  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: while (!flag) {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		flag = true;  		break;  	}  	if (ch == '\\') {  		if (index == json.Length) {  			break;  		}  		ch = json [index++];  		if (ch == '"') {  			builder.Append ('"');  		} else {  			if (ch == '\\') {  				builder.Append ('\\');  				continue;  			}  			if (ch == '/') {  				builder.Append ('/');  				continue;  			}  			if (ch == 'b') {  				builder.Append ('\b');  				continue;  			}  			if (ch == 'f') {  				builder.Append ('\f');  				continue;  			}  			if (ch == 'n') {  				builder.Append ('\n');  				continue;  			}  			if (ch == 'r') {  				builder.Append ('\r');  				continue;  			}  			if (ch == 't') {  				builder.Append ('\t');  			} else if (ch == 'u') {  				string str;  				int num = json.Length - index;  				if (num < 4) {  					break;  				}  				char[] destinationArray = new char[4];  				Array.Copy (json' index' destinationArray' 0' 4);  				uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  				try {  					str = char.ConvertFromUtf32 ((int)num2);  				} catch (Exception) {  					str = "�";  				}  				builder.Append (str);  				index += 4;  			}  		}  	} else {  		builder.Append (ch);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: while (!flag) {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		flag = true;  		break;  	}  	if (ch == '\\') {  		if (index == json.Length) {  			break;  		}  		ch = json [index++];  		if (ch == '"') {  			builder.Append ('"');  		} else {  			if (ch == '\\') {  				builder.Append ('\\');  				continue;  			}  			if (ch == '/') {  				builder.Append ('/');  				continue;  			}  			if (ch == 'b') {  				builder.Append ('\b');  				continue;  			}  			if (ch == 'f') {  				builder.Append ('\f');  				continue;  			}  			if (ch == 'n') {  				builder.Append ('\n');  				continue;  			}  			if (ch == 'r') {  				builder.Append ('\r');  				continue;  			}  			if (ch == 't') {  				builder.Append ('\t');  			} else if (ch == 'u') {  				string str;  				int num = json.Length - index;  				if (num < 4) {  					break;  				}  				char[] destinationArray = new char[4];  				Array.Copy (json' index' destinationArray' 0' 4);  				uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  				try {  					str = char.ConvertFromUtf32 ((int)num2);  				} catch (Exception) {  					str = "�";  				}  				builder.Append (str);  				index += 4;  			}  		}  	} else {  		builder.Append (ch);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: while (!flag) {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		flag = true;  		break;  	}  	if (ch == '\\') {  		if (index == json.Length) {  			break;  		}  		ch = json [index++];  		if (ch == '"') {  			builder.Append ('"');  		} else {  			if (ch == '\\') {  				builder.Append ('\\');  				continue;  			}  			if (ch == '/') {  				builder.Append ('/');  				continue;  			}  			if (ch == 'b') {  				builder.Append ('\b');  				continue;  			}  			if (ch == 'f') {  				builder.Append ('\f');  				continue;  			}  			if (ch == 'n') {  				builder.Append ('\n');  				continue;  			}  			if (ch == 'r') {  				builder.Append ('\r');  				continue;  			}  			if (ch == 't') {  				builder.Append ('\t');  			} else if (ch == 'u') {  				string str;  				int num = json.Length - index;  				if (num < 4) {  					break;  				}  				char[] destinationArray = new char[4];  				Array.Copy (json' index' destinationArray' 0' 4);  				uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  				try {  					str = char.ConvertFromUtf32 ((int)num2);  				} catch (Exception) {  					str = "�";  				}  				builder.Append (str);  				index += 4;  			}  		}  	} else {  		builder.Append (ch);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: while (!flag) {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		flag = true;  		break;  	}  	if (ch == '\\') {  		if (index == json.Length) {  			break;  		}  		ch = json [index++];  		if (ch == '"') {  			builder.Append ('"');  		} else {  			if (ch == '\\') {  				builder.Append ('\\');  				continue;  			}  			if (ch == '/') {  				builder.Append ('/');  				continue;  			}  			if (ch == 'b') {  				builder.Append ('\b');  				continue;  			}  			if (ch == 'f') {  				builder.Append ('\f');  				continue;  			}  			if (ch == 'n') {  				builder.Append ('\n');  				continue;  			}  			if (ch == 'r') {  				builder.Append ('\r');  				continue;  			}  			if (ch == 't') {  				builder.Append ('\t');  			} else if (ch == 'u') {  				string str;  				int num = json.Length - index;  				if (num < 4) {  					break;  				}  				char[] destinationArray = new char[4];  				Array.Copy (json' index' destinationArray' 0' 4);  				uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  				try {  					str = char.ConvertFromUtf32 ((int)num2);  				} catch (Exception) {  					str = "�";  				}  				builder.Append (str);  				index += 4;  			}  		}  	} else {  		builder.Append (ch);  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '\\') {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		builder.Append ('"');  	} else {  		if (ch == '\\') {  			builder.Append ('\\');  			continue;  		}  		if (ch == '/') {  			builder.Append ('/');  			continue;  		}  		if (ch == 'b') {  			builder.Append ('\b');  			continue;  		}  		if (ch == 'f') {  			builder.Append ('\f');  			continue;  		}  		if (ch == 'n') {  			builder.Append ('\n');  			continue;  		}  		if (ch == 'r') {  			builder.Append ('\r');  			continue;  		}  		if (ch == 't') {  			builder.Append ('\t');  		} else if (ch == 'u') {  			string str;  			int num = json.Length - index;  			if (num < 4) {  				break;  			}  			char[] destinationArray = new char[4];  			Array.Copy (json' index' destinationArray' 0' 4);  			uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  			try {  				str = char.ConvertFromUtf32 ((int)num2);  			} catch (Exception) {  				str = "�";  			}  			builder.Append (str);  			index += 4;  		}  	}  } else {  	builder.Append (ch);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '\\') {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		builder.Append ('"');  	} else {  		if (ch == '\\') {  			builder.Append ('\\');  			continue;  		}  		if (ch == '/') {  			builder.Append ('/');  			continue;  		}  		if (ch == 'b') {  			builder.Append ('\b');  			continue;  		}  		if (ch == 'f') {  			builder.Append ('\f');  			continue;  		}  		if (ch == 'n') {  			builder.Append ('\n');  			continue;  		}  		if (ch == 'r') {  			builder.Append ('\r');  			continue;  		}  		if (ch == 't') {  			builder.Append ('\t');  		} else if (ch == 'u') {  			string str;  			int num = json.Length - index;  			if (num < 4) {  				break;  			}  			char[] destinationArray = new char[4];  			Array.Copy (json' index' destinationArray' 0' 4);  			uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  			try {  				str = char.ConvertFromUtf32 ((int)num2);  			} catch (Exception) {  				str = "�";  			}  			builder.Append (str);  			index += 4;  		}  	}  } else {  	builder.Append (ch);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '\\') {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		builder.Append ('"');  	} else {  		if (ch == '\\') {  			builder.Append ('\\');  			continue;  		}  		if (ch == '/') {  			builder.Append ('/');  			continue;  		}  		if (ch == 'b') {  			builder.Append ('\b');  			continue;  		}  		if (ch == 'f') {  			builder.Append ('\f');  			continue;  		}  		if (ch == 'n') {  			builder.Append ('\n');  			continue;  		}  		if (ch == 'r') {  			builder.Append ('\r');  			continue;  		}  		if (ch == 't') {  			builder.Append ('\t');  		} else if (ch == 'u') {  			string str;  			int num = json.Length - index;  			if (num < 4) {  				break;  			}  			char[] destinationArray = new char[4];  			Array.Copy (json' index' destinationArray' 0' 4);  			uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  			try {  				str = char.ConvertFromUtf32 ((int)num2);  			} catch (Exception) {  				str = "�";  			}  			builder.Append (str);  			index += 4;  		}  	}  } else {  	builder.Append (ch);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '\\') {  	if (index == json.Length) {  		break;  	}  	ch = json [index++];  	if (ch == '"') {  		builder.Append ('"');  	} else {  		if (ch == '\\') {  			builder.Append ('\\');  			continue;  		}  		if (ch == '/') {  			builder.Append ('/');  			continue;  		}  		if (ch == 'b') {  			builder.Append ('\b');  			continue;  		}  		if (ch == 'f') {  			builder.Append ('\f');  			continue;  		}  		if (ch == 'n') {  			builder.Append ('\n');  			continue;  		}  		if (ch == 'r') {  			builder.Append ('\r');  			continue;  		}  		if (ch == 't') {  			builder.Append ('\t');  		} else if (ch == 'u') {  			string str;  			int num = json.Length - index;  			if (num < 4) {  				break;  			}  			char[] destinationArray = new char[4];  			Array.Copy (json' index' destinationArray' 0' 4);  			uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  			try {  				str = char.ConvertFromUtf32 ((int)num2);  			} catch (Exception) {  				str = "�";  			}  			builder.Append (str);  			index += 4;  		}  	}  } else {  	builder.Append (ch);  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '"') {  	builder.Append ('"');  } else {  	if (ch == '\\') {  		builder.Append ('\\');  		continue;  	}  	if (ch == '/') {  		builder.Append ('/');  		continue;  	}  	if (ch == 'b') {  		builder.Append ('\b');  		continue;  	}  	if (ch == 'f') {  		builder.Append ('\f');  		continue;  	}  	if (ch == 'n') {  		builder.Append ('\n');  		continue;  	}  	if (ch == 'r') {  		builder.Append ('\r');  		continue;  	}  	if (ch == 't') {  		builder.Append ('\t');  	} else if (ch == 'u') {  		string str;  		int num = json.Length - index;  		if (num < 4) {  			break;  		}  		char[] destinationArray = new char[4];  		Array.Copy (json' index' destinationArray' 0' 4);  		uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  		try {  			str = char.ConvertFromUtf32 ((int)num2);  		} catch (Exception) {  			str = "�";  		}  		builder.Append (str);  		index += 4;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '"') {  	builder.Append ('"');  } else {  	if (ch == '\\') {  		builder.Append ('\\');  		continue;  	}  	if (ch == '/') {  		builder.Append ('/');  		continue;  	}  	if (ch == 'b') {  		builder.Append ('\b');  		continue;  	}  	if (ch == 'f') {  		builder.Append ('\f');  		continue;  	}  	if (ch == 'n') {  		builder.Append ('\n');  		continue;  	}  	if (ch == 'r') {  		builder.Append ('\r');  		continue;  	}  	if (ch == 't') {  		builder.Append ('\t');  	} else if (ch == 'u') {  		string str;  		int num = json.Length - index;  		if (num < 4) {  			break;  		}  		char[] destinationArray = new char[4];  		Array.Copy (json' index' destinationArray' 0' 4);  		uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  		try {  			str = char.ConvertFromUtf32 ((int)num2);  		} catch (Exception) {  			str = "�";  		}  		builder.Append (str);  		index += 4;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '"') {  	builder.Append ('"');  } else {  	if (ch == '\\') {  		builder.Append ('\\');  		continue;  	}  	if (ch == '/') {  		builder.Append ('/');  		continue;  	}  	if (ch == 'b') {  		builder.Append ('\b');  		continue;  	}  	if (ch == 'f') {  		builder.Append ('\f');  		continue;  	}  	if (ch == 'n') {  		builder.Append ('\n');  		continue;  	}  	if (ch == 'r') {  		builder.Append ('\r');  		continue;  	}  	if (ch == 't') {  		builder.Append ('\t');  	} else if (ch == 'u') {  		string str;  		int num = json.Length - index;  		if (num < 4) {  			break;  		}  		char[] destinationArray = new char[4];  		Array.Copy (json' index' destinationArray' 0' 4);  		uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  		try {  			str = char.ConvertFromUtf32 ((int)num2);  		} catch (Exception) {  			str = "�";  		}  		builder.Append (str);  		index += 4;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == '"') {  	builder.Append ('"');  } else {  	if (ch == '\\') {  		builder.Append ('\\');  		continue;  	}  	if (ch == '/') {  		builder.Append ('/');  		continue;  	}  	if (ch == 'b') {  		builder.Append ('\b');  		continue;  	}  	if (ch == 'f') {  		builder.Append ('\f');  		continue;  	}  	if (ch == 'n') {  		builder.Append ('\n');  		continue;  	}  	if (ch == 'r') {  		builder.Append ('\r');  		continue;  	}  	if (ch == 't') {  		builder.Append ('\t');  	} else if (ch == 'u') {  		string str;  		int num = json.Length - index;  		if (num < 4) {  			break;  		}  		char[] destinationArray = new char[4];  		Array.Copy (json' index' destinationArray' 0' 4);  		uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  		try {  			str = char.ConvertFromUtf32 ((int)num2);  		} catch (Exception) {  			str = "�";  		}  		builder.Append (str);  		index += 4;  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 't') {  	builder.Append ('\t');  } else if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 't') {  	builder.Append ('\t');  } else if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 't') {  	builder.Append ('\t');  } else if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 't') {  	builder.Append ('\t');  } else if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (ch == 'u') {  	string str;  	int num = json.Length - index;  	if (num < 4) {  		break;  	}  	char[] destinationArray = new char[4];  	Array.Copy (json' index' destinationArray' 0' 4);  	uint num2 = uint.Parse (new string (destinationArray)' NumberStyles.HexNumber);  	try {  		str = char.ConvertFromUtf32 ((int)num2);  	} catch (Exception) {  		str = "�";  	}  	builder.Append (str);  	index += 4;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: if (num < 4) {  	break;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: Array.Copy (json' index' destinationArray' 0' 4);  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following statement contains a magic number: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeString,The following statement contains a magic number: foreach (char ch in aString.ToCharArray ()) {  	switch (ch) {  	case '"':  		builder.Append ("\\\"");  		break;  	case '\\':  		builder.Append (@"\\");  		break;  	case '\b':  		builder.Append (@"\b");  		break;  	case '\f':  		builder.Append (@"\f");  		break;  	case '\n':  		builder.Append (@"\n");  		break;  	case '\r':  		builder.Append (@"\r");  		break;  	case '\t':  		builder.Append (@"\t");  		break;  	default: {  		int num2 = Convert.ToInt32 (ch);  		if ((num2 >= 0x20) && (num2 <= 0x7e)) {  			builder.Append (ch);  		} else {  			builder.Append (@"\u" + Convert.ToString (num2' 0x10).PadLeft (4' '0'));  		}  		break;  	}  	}  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeString,The following statement contains a magic number: switch (ch) {  case '"':  	builder.Append ("\\\"");  	break;  case '\\':  	builder.Append (@"\\");  	break;  case '\b':  	builder.Append (@"\b");  	break;  case '\f':  	builder.Append (@"\f");  	break;  case '\n':  	builder.Append (@"\n");  	break;  case '\r':  	builder.Append (@"\r");  	break;  case '\t':  	builder.Append (@"\t");  	break;  default: {  	int num2 = Convert.ToInt32 (ch);  	if ((num2 >= 0x20) && (num2 <= 0x7e)) {  		builder.Append (ch);  	} else {  		builder.Append (@"\u" + Convert.ToString (num2' 0x10).PadLeft (4' '0'));  	}  	break;  }  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeString,The following statement contains a magic number: if ((num2 >= 0x20) && (num2 <= 0x7e)) {  	builder.Append (ch);  } else {  	builder.Append (@"\u" + Convert.ToString (num2' 0x10).PadLeft (4' '0'));  }  
Magic Number,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,SerializeString,The following statement contains a magic number: builder.Append (@"\u" + Convert.ToString (num2' 0x10).PadLeft (4' '0'));  
Missing Default,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,NextToken,The following switch statement is missing a default case: switch (ch) {  case '"':  	return 7;  case ''':  	return 6;  case '-':  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return 8;  case ':':  	return 5;  case '[':  	return 3;  case ']':  	return 4;  case '{':  	return 1;  case '}':  	return 2;  }  
Missing Default,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseObject,The following switch statement is missing a default case: switch (this.LookAhead (json' index)) {  case 0:  	return null;  case 6: {  	this.NextToken (json' ref index);  	continue;  }  case 2:  	this.NextToken (json' ref index);  	return hashtable;  }  
Missing Default,BasicFormats,JSON,F:\newReposMay17\cityindex-attic_CIAPI.CS\src\mocument\BasicFormats\BasicFormats\JSON.cs,ParseValue,The following switch statement is missing a default case: switch (this.LookAhead (json' index)) {  case 1:  	return this.ParseObject (json' ref index);  case 3:  	return this.ParseArray (json' ref index);  case 7:  	return this.ParseString (json' ref index);  case 8:  	return this.ParseNumber (json' ref index);  case 9:  	this.NextToken (json' ref index);  	return bool.Parse ("TRUE");  case 10:  	this.NextToken (json' ref index);  	return bool.Parse ("FALSE");  case 11:  	this.NextToken (json' ref index);  	return null;  }  
