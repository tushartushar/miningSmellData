Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyArrayFromContent,Cyclomatic complexity of the method is 9
Complex Method,Mocument.Transcoders,Utility,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\Utility.cs,IsMimeTypeTextEquivalent,Cyclomatic complexity of the method is 9
Complex Conditional,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyInfo,The conditional expression  "((isMimeTypeTextEquivalent && ("text/plain" == mImeType)) && (oS.responseBodyBytes.Length > 3)) &&                  ((((oS.responseBodyBytes[0] == 0x43) && (oS.responseBodyBytes[1] == 0x57)) &&                    (oS.responseBodyBytes[2] == 0x53)) ||                   (((oS.responseBodyBytes[0] == 70) && (oS.responseBodyBytes[1] == 0x4c)) &&                    (oS.responseBodyBytes[2] == 0x56)))"  is complex.
Empty Catch Block,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,Export,The method has an empty catch block.
Empty Catch Block,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetDecompressedSize,The method has an empty catch block.
Empty Catch Block,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetQueryString,The method has an empty catch block.
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetResponse,The following statement contains a magic number: response.headersSize = session.oResponse.headers.ByteCount() + 2;
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetRequest,The following statement contains a magic number: request.headersSize = oS.oRequest.headers.ByteCount() + 2;
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyInfo,The following statement contains a magic number: if (((isMimeTypeTextEquivalent && ("text/plain" == mImeType)) && (oS.responseBodyBytes.Length > 3)) &&                  ((((oS.responseBodyBytes[0] == 0x43) && (oS.responseBodyBytes[1] == 0x57)) &&                    (oS.responseBodyBytes[2] == 0x53)) ||                   (((oS.responseBodyBytes[0] == 70) && (oS.responseBodyBytes[1] == 0x4c)) &&                    (oS.responseBodyBytes[2] == 0x56))))              {                  isMimeTypeTextEquivalent = false;              }
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyInfo,The following statement contains a magic number: if (((isMimeTypeTextEquivalent && ("text/plain" == mImeType)) && (oS.responseBodyBytes.Length > 3)) &&                  ((((oS.responseBodyBytes[0] == 0x43) && (oS.responseBodyBytes[1] == 0x57)) &&                    (oS.responseBodyBytes[2] == 0x53)) ||                   (((oS.responseBodyBytes[0] == 70) && (oS.responseBodyBytes[1] == 0x4c)) &&                    (oS.responseBodyBytes[2] == 0x56))))              {                  isMimeTypeTextEquivalent = false;              }
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyInfo,The following statement contains a magic number: if (((isMimeTypeTextEquivalent && ("text/plain" == mImeType)) && (oS.responseBodyBytes.Length > 3)) &&                  ((((oS.responseBodyBytes[0] == 0x43) && (oS.responseBodyBytes[1] == 0x57)) &&                    (oS.responseBodyBytes[2] == 0x53)) ||                   (((oS.responseBodyBytes[0] == 70) && (oS.responseBodyBytes[1] == 0x4c)) &&                    (oS.responseBodyBytes[2] == 0x56))))              {                  isMimeTypeTextEquivalent = false;              }
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyInfo,The following statement contains a magic number: if (((isMimeTypeTextEquivalent && ("text/plain" == mImeType)) && (oS.responseBodyBytes.Length > 3)) &&                  ((((oS.responseBodyBytes[0] == 0x43) && (oS.responseBodyBytes[1] == 0x57)) &&                    (oS.responseBodyBytes[2] == 0x53)) ||                   (((oS.responseBodyBytes[0] == 70) && (oS.responseBodyBytes[1] == 0x4c)) &&                    (oS.responseBodyBytes[2] == 0x56))))              {                  isMimeTypeTextEquivalent = false;              }
Magic Number,Mocument.Transcoders,HttpArchiveTranscoder,C:\repos\cityindex-attic_CIAPI.CS\src\mocument\Mocument.Transcoders\HttpArchiveTranscoder.cs,GetBodyArrayFromContent,The following statement contains a magic number: if (content != null)              {                  if (content.text == null)                  {                      return writeData;                  }                    if (content.encoding != null && ("base64" == content.encoding))                  {                      // ReSharper disable AssignNullToNotNullAttribute                      return Convert.FromBase64String(content.text);                      // ReSharper restore AssignNullToNotNullAttribute                  }                    Encoding encoding = Encoding.UTF8;                  if (content.mimeType != null && (content.mimeType.IndexOf("charset"' StringComparison.Ordinal) > -1))                  {                      Match match = new Regex("charset\\s?=\\s?[\"]?(?<TokenValue>[^\";]*)").Match(content.mimeType);                      if (match.Success && (match.Groups["TokenValue"] != null))                      {                          try                          {                              encoding = Encoding.GetEncoding(match.Groups["TokenValue"].Value);                          }                          // ReSharper disable RedundantCatchClause                          catch                          {                              throw;                          }                          // ReSharper restore RedundantCatchClause                      }                  }                  // ReSharper disable AssignNullToNotNullAttribute                  writeData = encoding.GetBytes(content.text);                  // ReSharper restore AssignNullToNotNullAttribute                  if (headers.Contains("Content-Encoding") && headers.Contains("gzip"))                  {                      writeData = Utilities.GzipCompress(writeData);                  }                  if (headers.Contains("Content-Encoding") && headers.Contains("deflate"))                  {                      writeData = Utilities.DeflaterCompress(writeData);                  }                  if (headers.Contains("Transfer-Encoding") && headers.Contains("chunked"))                  {                      writeData = Utilities.doChunk(writeData' 2);                  }              }
