Implementation smell,Namespace,Class,File,Method,Description
Long Method,MiscUtil.IO,ReverseLineReader,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ReverseLineReader.cs,GetEnumeratorImpl,The method has 111 lines of code.
Long Method,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The method has 120 lines of code.
Long Method,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemPutResponse,The method has 129 lines of code.
Complex Method,MiscUtil.IO,ReverseLineReader,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ReverseLineReader.cs,GetEnumeratorImpl,Cyclomatic complexity of the method is 15
Complex Method,Kudu.Services.ServiceHookHandlers,ServiceHookHandlerBase,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\ServiceHookHandlerBase.cs,GetDeployerFromUrl,Cyclomatic complexity of the method is 8
Complex Method,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,Cyclomatic complexity of the method is 9
Complex Method,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemPutResponse,Cyclomatic complexity of the method is 10
Long Parameter List,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ProcessFileAsync,The method has 5 parameters. Parameters: client' path' parent' lastModifiedUtc' useOAuth20
Long Parameter List,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,DeploymentController,The method has 8 parameters. Parameters: tracer' environment' analytics' deploymentManager' status' settings' deploymentLock' repositoryFactory
Long Parameter List,Kudu.Services.Deployment,PushDeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\PushDeploymentController.cs,ZipPushDeploy,The method has 6 parameters. Parameters: request' isAsync' author' authorEmail' deployer' message
Long Parameter List,Kudu.Services.Deployment,PushDeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\PushDeploymentController.cs,LocalZipFetch,The method has 5 parameters. Parameters: repository' deploymentInfo' targetBranch' logger' tracer
Long Parameter List,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,LogStreamManager,The method has 6 parameters. Parameters: logPath' environment' settings' tracer' shutdownDetector' operationLock
Long Parameter List,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StopProfileInternalAsync,The method has 5 parameters. Parameters: processId' profilingSessionId' ignoreProfileFile' tracer' iisProfiling
Long Parameter List,Kudu.Services.Infrastructure,DelegatingStream,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\DelegatingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Kudu.Services.Infrastructure,DelegatingStream,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\DelegatingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Kudu.Services.Infrastructure,StreamWrapper,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ZipStreamContent.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Kudu.Services.GitServer,ReceivePackHandler,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\ReceivePackHandler.cs,ReceivePackHandler,The method has 6 parameters. Parameters: tracer' gitServer' deploymentLock' deploymentManager' repositoryFactory' environment
Long Parameter List,Kudu.Services.ServiceHookHandlers,DropboxHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\DropboxHandler.cs,DropboxHandler,The method has 5 parameters. Parameters: tracer' status' settings' environment' repositoryFactory
Long Parameter List,Kudu.Services.ServiceHookHandlers,DropboxHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\DropboxHandler.cs,Fetch,The method has 5 parameters. Parameters: repository' deploymentInfo' targetBranch' logger' tracer
Long Parameter List,Kudu.Services.ServiceHookHandlers,IServiceHookHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\IServiceHookHandler.cs,Fetch,The method has 5 parameters. Parameters: repository' deploymentInfo' targetBranch' logger' tracer
Long Parameter List,Kudu.Services.ServiceHookHandlers,OneDriveHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\OneDriveHandler.cs,OneDriveHandler,The method has 5 parameters. Parameters: tracer' status' settings' environment' repositoryFactory
Long Parameter List,Kudu.Services.ServiceHookHandlers,OneDriveHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\OneDriveHandler.cs,Fetch,The method has 5 parameters. Parameters: repository' deploymentInfo' targetBranch' logger' tracer
Long Parameter List,Kudu.Services.ServiceHookHandlers,ServiceHookHandlerBase,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\ServiceHookHandlerBase.cs,Fetch,The method has 5 parameters. Parameters: repository' deploymentInfo' targetBranch' logger' tracer
Long Parameter List,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,LiveScmEditorController,The method has 5 parameters. Parameters: tracer' deploymentManager' operationLock' environment' repositoryFactory
Long Parameter List,Kudu.Services.SourceControl,LiveScmController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmController.cs,LiveScmController,The method has 6 parameters. Parameters: tracer' deploymentLock' environment' repositoryFactory' serverConfiguration' status
Long Identifier,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,,The length of the parameter _cancellationTokenRegistration is 30.
Long Identifier,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,,The length of the parameter UserModeCustomProviderAgentGuid is 31.
Long Identifier,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,,The length of the parameter NONROLLED_DOCKER_LOG_FILENAME_REGEX is 35.
Long Identifier,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,,The length of the parameter DirectoryEnumerationSearchPattern is 33.
Long Statement,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The length of the statement  "            // e.g. /subscriptions/b0019e1d-2829-4226-9356-4a57a4a5cc90/resourcegroups/MyRG/providers/Microsoft.Web/sites/MySite/extensions/SettingsAPISample/settings/foo1 " is 159.
Long Statement,Kudu.Services.ByteRanges,HttpRequestMessageExtensions,C:\repos\projectkudu_kudu\Kudu.Services\ByteRanges\HttpRequestMessageExtensions.cs,CreateErrorResponse,The length of the statement  "            HttpResponseMessage rangeNotSatisfiableResponse = request.CreateErrorResponse(HttpStatusCode.RequestedRangeNotSatisfiable' invalidByteRangeException); " is 150.
Long Statement,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,CreateProcess,The length of the statement  "            var exe = externalCommandFactory.BuildExternalCommandExecutable(_environment.RootPath' _environment.WebRootPath' NullLogger.Instance); " is 134.
Long Statement,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,CreateProcess,The length of the statement  "                startInfo.FileName = System.Environment.ExpandEnvironmentVariables(@"%windir%\System32\WindowsPowerShell\v1.0\powershell.exe"); " is 127.
Long Statement,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,CreateProcess,The length of the statement  "                    Connection.Send(connectionId' new { Output = "\r\nprocess [" + process.Id + "] terminated!  Press ENTER to start a new cmd process.\r\n"' RunningProcessesCount = _processes.Count }).Wait(); " is 189.
Long Statement,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,ListenAndSendStreamAsync,The length of the statement  "                                    Connection.Send(connectionId' new { Error = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait(); " is 131.
Long Statement,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,ListenAndSendStreamAsync,The length of the statement  "                                    Connection.Send(connectionId' new { Output = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait(); " is 132.
Long Statement,Kudu.Services,Error404Controller,C:\repos\projectkudu_kudu\Kudu.Services\Error404Controller.cs,Handle,The length of the statement  "            return Request.CreateResponse(HttpStatusCode.NotFound' "No route registered for '" + Request.RequestUri.PathAndQuery + "'"); " is 124.
Long Statement,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChanges,The length of the statement  "                using (new Timer(UpdateStatusFile' state: dropboxInfo.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5))) " is 141.
Long Statement,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChangesCore,The length of the statement  "                    if (useOAuth20 ? DateTime.TryParse(entry.Modified' null' DateTimeStyles.AssumeUniversal' out modified) : DateTime.TryParse(entry.Modified' out modified)) " is 153.
Long Statement,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,SafeWriteFile,The length of the statement  "            using (FileStream fs = new FileStream(fullPath' FileMode.Create' FileAccess.Write' FileShare.Read' bufferSize: DefaultBufferSize' useAsync: true)) " is 146.
Long Statement,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ProcessFileAsync,The length of the statement  "                        LogError("Get({0}) '{1}' failed with {2}"' retries' (useOAuth20 ? DownloadContentApiUri : SandboxFilePath) + path' ex.Message); " is 127.
Long Statement,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The length of the statement  "                // We are going to assume that the branch details are already set by the time it gets here. This is particularly important in the mercurial case' " is 145.
Long Statement,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The length of the statement  "                // since Settings hardcodes the default value for Branch to be "master". Consequently' Kudu will NoOp requests for Mercurial commits. " is 133.
Long Statement,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The length of the statement  "                bool asyncRequested = String.Equals(context.Request.QueryString["isAsync"]' "true"' StringComparison.OrdinalIgnoreCase); " is 120.
Long Statement,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The length of the statement  "                var response = await _manager.FetchDeploy(deployInfo' asyncRequested' UriHelper.GetRequestUri(context.Request)' targetBranch); " is 126.
Long Statement,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The length of the statement  "                                String.Format("/api/deployments/{0}?deployer={1}&time={2}"' Constants.LatestDeployment' deployInfo.Deployer' DateTime.UtcNow.ToString("yyy-MM-dd_HH-mm-ssZ"))).ToString(); " is 170.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,Deploy,The length of the statement  "                            throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Conflict' Resources.Error_AutoSwapDeploymentOngoing)); " is 129.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,Deploy,The length of the statement  "                                // e.g if final url is "https://kudutry.scm.azurewebsites.net/api/deployments/ef52ec67fc9574e726955a9cbaf7bcba791e4e95/log" " is 123.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,Deploy,The length of the statement  "                                // deploymentUri should be "https://kudutry.scm.azurewebsites.net/api/deployments/ef52ec67fc9574e726955a9cbaf7bcba791e4e95" " is 123.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,Deploy,The length of the statement  "                            throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound' Resources.Error_RepositoryNotFound)); " is 122.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,Deploy,The length of the statement  "                                await PostDeploymentHelper.PerformAutoSwap(_environment.RequestId' _environment.SiteRestrictedJwt' new PostDeploymentTraceListener(_tracer' _deploymentManager.GetLogger(changeSet.Id))); " is 185.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,CreateDeployment,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Conflict' String.Format("Deployment with id '{0}' exists"' id))); " is 140.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,TryParseDeployResult,The length of the statement  "                    throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest' "Only successful status can be active!")); " is 129.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,GetDeployResults,The length of the statement  "                    response = Request.CreateResponse(HttpStatusCode.OK' ArmUtils.AddEnvelopeOnArmRequest(cachedDeployments.Results' Request)); " is 123.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,GetDeploymentScript,The length of the statement  "                    throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound' "Need to deploy website to get deployment script.")); " is 138.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,GetDeploymentScript,The length of the statement  "                    throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound' "Operation only supported if not using a custom deployment script")); " is 154.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,GetDeploymentScript,The length of the statement  "                    zip.AddFile(DeploymentSettingsProvider.DeployConfigFile' "[config]\ncommand = {0}\n".FormatInvariant(DeploymentManager.DeploymentScriptFileName)); " is 146.
Long Statement,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,GetCurrentEtag,The length of the statement  "            return new EntityTagHeaderValue(String.Format("\"{0:x}\""' request.RequestUri.PathAndQuery.GetHashCode() ^ _status.LastModifiedTime.Ticks)); " is 140.
Long Statement,Kudu.Services.Deployment,PushDeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\PushDeploymentController.cs,ZipPushDeploy,The length of the statement  "                                String.Format("/api/deployments/{0}?deployer={1}&time={2}"' Constants.LatestDeployment' deploymentInfo.Deployer' DateTime.UtcNow.ToString("yyy-MM-dd_HH-mm-ssZ"))); " is 163.
Long Statement,Kudu.Services.Diagnostics,ResumableLogFileReader,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ApplicationLogsReader.cs,ReadNextBatch,The length of the statement  "                        currentEntry.TimeStamp = DateTimeOffset.Parse(match.Groups[1].Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal); " is 131.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,BeginProcessRequest,The length of the statement  "                TerminateClient(String.Format(CultureInfo.CurrentCulture' Resources.LogStream_AppShutdown' Environment.NewLine' DateTime.UtcNow.ToString("s"))); " is 144.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,BeginProcessRequest,The length of the statement  "                        var diagnostics = new DiagnosticsSettingsManager(Path.Combine(_environment.DiagnosticsPath' Constants.SettingsJsonFile)' _tracer); " is 130.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,Initialize,The length of the statement  "                watcher.Changed += new FileSystemEventHandler(DoSafeAction<object' FileSystemEventArgs>(OnChanged' "LogStreamManager.OnChanged")); " is 130.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,Initialize,The length of the statement  "                watcher.Deleted += new FileSystemEventHandler(DoSafeAction<object' FileSystemEventArgs>(OnDeleted' "LogStreamManager.OnDeleted")); " is 130.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,Initialize,The length of the statement  "                watcher.Renamed += new RenamedEventHandler(DoSafeAction<object' RenamedEventArgs>(OnRenamed' "LogStreamManager.OnRenamed")); " is 124.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,WriteInitialMessage,The length of the statement  "            context.Response.Write(String.Format(CultureInfo.CurrentCulture' Resources.LogStream_Welcome' DateTime.UtcNow.ToString("s")' Environment.NewLine)); " is 147.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnHeartbeat,The length of the statement  "                        TerminateClient(String.Format(CultureInfo.CurrentCulture' Resources.LogStream_Timeout' DateTime.UtcNow.ToString("s")' (int)ts.TotalMinutes' Environment.NewLine)); " is 162.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnHeartbeat,The length of the statement  "                            NotifyClient(String.Format(CultureInfo.CurrentCulture' Resources.LogStream_Heartbeat' DateTime.UtcNow.ToString("s")' (int)ts.TotalMinutes' Environment.NewLine)); " is 161.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,NotifyClient,The length of the statement  "                Lazy<List<ProcessRequestAsyncResult>> disconnects = new Lazy<List<ProcessRequestAsyncResult>>(() => new List<ProcessRequestAsyncResult>()); " is 139.
Long Statement,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnCriticalError,The length of the statement  "            TerminateClient(String.Format(CultureInfo.CurrentCulture' Resources.LogStream_Error' Environment.NewLine' DateTime.UtcNow.ToString("s")' ex.Message)); " is 150.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StartProfileAsync,The length of the statement  "                    string arguments = System.Environment.ExpandEnvironmentVariables(string.Format("start {0} /attach:{1} /loadAgent:{2};DiagnosticsHub.CpuAgent.dll  /scratchLocation:%LOCAL_EXPANDED%\\Temp"' profilingSessionId' processId' DiagnosticsHubAgentGuid)); " is 245.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StartProfileAsync,The length of the statement  "                    tracer.TraceWarning("A profiling session was already running for process {0}' stopping profiling session {1}"' processId' profilingSessionId); " is 142.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StartIisSessionAsync,The length of the statement  "            string arguments = System.Environment.ExpandEnvironmentVariables($"start {profilingSessionId} /scratchLocation:\"%LOCAL_EXPANDED%\\Temp\" /loadAgent:{DetailedTracingAgentGuid};ServiceProfilerAgent.dll"); " is 203.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StartIisSessionAsync,The length of the statement  "            arguments = $"update {profilingSessionId} /attach:{processId} /loadAgent:{UserModeCustomProviderAgentGuid};ServiceProfilerAgent.dll"; " is 133.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StartIisSessionAsync,The length of the statement  "            arguments = $"postString {profilingSessionId} \"AddProvider:{IisWebServerProviderGuid}:0xFFFFFFFE:5\" /agent:{UserModeCustomProviderAgentGuid}"; " is 144.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetIisProfilingTimeout,The length of the statement  "            string iisProfilingTimeoutInSeconds = System.Environment.GetEnvironmentVariable("APPSETTING_IIS_PROFILING_TIMEOUT_IN_SECONDS"); " is 127.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StopProfileAsync,The length of the statement  "                    return new ProfileResultInfo(HttpStatusCode.NotFound' string.Format("Profiling for process '{0}' is not running."' processId)); " is 127.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StopProfileAsync,The length of the statement  "                var profileProcessResponse = await StopProfileInternalAsync(processId' profilingSessionId' false' tracer' iisProfiling); " is 120.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetProfilePath,The length of the statement  "                profileFileName = string.Format("profile_{0}_{1}_{2}_{3}.diagsession"' InstanceIdUtility.GetShortInstanceId()' "IISProfiling"' System.Diagnostics.Process.GetProcessById(processId).ProcessName' processId); " is 204.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetProfilePath,The length of the statement  "                profileFileName = string.Format("profile_{0}_{1}_{2}.diagsession"' InstanceIdUtility.GetShortInstanceId()' System.Diagnostics.Process.GetProcessById(processId).ProcessName' processId); " is 184.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,ExecuteProfilingCommandAsync,The length of the statement  "                var exe = new Executable(_processName' Path.GetDirectoryName(_processName)' TimeSpan.FromSeconds(ProcessExitTimeoutInSeconds)); " is 127.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,ExecuteProfilingCommandAsync,The length of the statement  "                    tracer.TraceError(string.Format(CultureInfo.InvariantCulture' "Starting process {0} failed with the following error code '{1}'."' _processName' exitCode)); " is 155.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,ExecuteProfilingCommandAsync,The length of the statement  "                    return new ProfileResultInfo(HttpStatusCode.InternalServerError' "Profiling process failed with the following error code: " + exitCode); " is 136.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,ExecuteProfilingCommandAsync,The length of the statement  "                    return new ProfileResultInfo(HttpStatusCode.InternalServerError' "Profiling process failed with the following error: " + error); " is 128.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetNextProfilingSessionId,The length of the statement  "            // TODO: This is not a good way to track active profiling sessions' but as of VS2015 RTM' the profiling service does not provide any API to track the current active sessions.   " is 174.
Long Statement,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,EnsureIdleTimer,The length of the statement  "                        _profilingIdleTimer = new Timer(_ => SafeInvoke(() => OnIdleTimer(iisProfiling))' null' _profilingIisTimeout' _profilingIisTimeout); " is 132.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetThread,The length of the statement  "                    return Request.CreateResponse(HttpStatusCode.OK' ArmUtils.AddEnvelopeOnArmRequest(GetProcessThreadInfo(thread' Request.RequestUri.AbsoluteUri' true)' Request)); " is 160.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetModule,The length of the statement  "                var module = GetProcessById(id).Modules.Cast<ProcessModule>().FirstOrDefault(t => t.BaseAddress.ToInt64() == Int64.Parse(baseAddress' NumberStyles.HexNumber)); " is 159.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetAllProcesses,The length of the statement  "                    .Where(p => allUsers || Kudu.Core.Environment.IsAzureEnvironment() || String.Equals(currentUser' SafeGetValue(p.GetUserName' null)' StringComparison.OrdinalIgnoreCase)) " is 168.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetAllProcesses,The length of the statement  "                    .Select(p => GetProcessInfo(p' Request.RequestUri.GetLeftPart(UriPartial.Path).TrimEnd('/') + '/' + p.Id)).OrderBy(p => p.Name.ToLowerInvariant()) " is 146.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetProcess,The length of the statement  "                return Request.CreateResponse(HttpStatusCode.OK' ArmUtils.AddEnvelopeOnArmRequest(GetProcessInfo(process' Request.RequestUri.AbsoluteUri' details: true)' Request)); " is 164.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,MiniDump,The length of the statement  "                if ((MINIDUMP_TYPE)dumpType == MINIDUMP_TYPE.WithFullMemory && siteSku.Equals(Constants.FreeSKU' StringComparison.OrdinalIgnoreCase)) " is 133.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetResponseFileName,The length of the statement  "            return String.Format(CultureInfo.InvariantCulture' "{0}-{1}-{2:MM-dd-HH-mm-ss}.{3}"' prefix' InstanceIdUtility.GetShortInstanceId()' DateTime.UtcNow' ext); " is 155.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetModules,The length of the statement  "                modules.Add(GetProcessModuleInfo(module' href.TrimEnd('/') + '/' + module.BaseAddress.ToInt64().ToString("x")' details: false)); " is 128.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetProcessInfo,The length of the statement  "                info.Children = SafeGetValue(() => process.GetChildren(_tracer' recursive: false)' Enumerable.Empty<Process>()).Select(c => new Uri(selfLink' c.Id.ToString())); " is 160.
Long Statement,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,GetProcessInfo,The length of the statement  "                info.Modules = SafeGetValue(() => GetModules(process' selfLink.ToString().TrimEnd('/') + "/modules")' Enumerable.Empty<ProcessModuleInfo>()); " is 141.
Long Statement,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,GetLog,The length of the statement  "            response.Content = ZipStreamContent.Create(String.Format("dump-{0:MM-dd-HH-mm-ss}.zip"' DateTime.UtcNow)' _tracer' zip => " is 121.
Long Statement,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,GetDockerLogs,The length of the statement  "                var responseContent = currentDockerLogFilenames.Select(p => CurrentDockerLogFilenameToJson(p' vfsBaseAddress.ToString())); " is 122.
Long Statement,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,GetDockerLogsZip,The length of the statement  "                response.Content = ZipStreamContent.Create(String.Format("dockerlogs-{0:MM-dd-HH-mm-ss}.zip"' DateTime.UtcNow)' _tracer' zip => " is 127.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "            using (new Timer(UpdateStatusFile' state: info.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5))) " is 134.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                //  which will result in "/a/b" has timestamp from the monent of file creation instead of the timestamp value from server' where value supposed to be set by code specifically. " is 175.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                await ApplyChangesParallel(changes.DeletionChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0); " is 137.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                await ApplyChangesParallel(changes.FileChanges' info.AccessToken' maxParallelCount: MaxConcurrentRequests' countSuccess: true); " is 127.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                await ApplyChangesParallel(changes.DirectoryChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0); " is 138.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                    string.Format(CultureInfo.CurrentCulture' Resources.OneDrive_SynchronizedWithFailure' _successCount' _totals' _failedCount) : " is 125.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The length of the statement  "                    throw new Exception(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveApplyResult' _successCount' _failedCount)); " is 123.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,ProcessResponse,The length of the statement  "            throw new Exception(string.Format(CultureInfo.InvariantCulture' "'{0}' : '{1}'' {2}"' response.StatusCode' operation' content)); " is 128.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,GetOneDriveRootUri,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveInvalidRequestUri' requestUri)); " is 120.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,GetChanges,The length of the statement  "            requestUri = string.Format(CultureInfo.InvariantCulture' "{0}/{1}"' await GetItemUri(accessToken' requestUri' rootUri)' "view.changes"); " is 136.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,GetChanges,The length of the statement  "                            throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveUnableToSync' changes["@changes.resync"])); " is 139.
Long Statement,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,WriteToFile,The length of the statement  "            using (FileStream fs = new FileStream(targetFilePath' FileMode.Create' FileAccess.Write' FileShare.Read' bufferSize: DefaultBufferSize' useAsync: true)) " is 152.
Long Statement,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,GetItem,The length of the statement  "                HttpResponseMessage notFoundResponse = Request.CreateErrorResponse(HttpStatusCode.NotFound' String.Format("'{0}' not found."' info.FullName)); " is 142.
Long Statement,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,DeleteItem,The length of the statement  "                HttpResponseMessage notFoundResponse = Request.CreateErrorResponse(HttpStatusCode.NotFound' String.Format("'{0}' not found."' dirInfo.FullName)); " is 145.
Long Statement,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,CreateDirectoryGetResponse,The length of the statement  "                HttpResponseMessage successDirectoryResponse = Request.CreateResponse<IEnumerable<VfsStatEntry>>(HttpStatusCode.OK' directory); " is 127.
Long Statement,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,GetFileReadStream,The length of the statement  "            return new FileStream(localFilePath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite | FileShare.Delete' BufferSize' useAsync: true); " is 137.
Long Statement,Kudu.Services.Infrastructure,VfsControllerBase,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\VfsControllerBase.cs,GetDirectoryResponse,The length of the statement  "                string mime = isDirectory ? _directoryMediaType.ToString() : MediaTypeMap.GetMediaType(fileSysInfo.Extension).ToString(); " is 121.
Long Statement,Kudu.Services.Infrastructure,AuthUtility,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\AuthUtility.cs,TryExtractBasicAuthUserFromHeader,The length of the statement  "            verifiedAuthorizationHeader = verifiedAuthorizationHeader.Substring(HttpBasicSchemeName.Length' verifiedAuthorizationHeader.Length - HttpBasicSchemeName.Length).Trim(); " is 168.
Long Statement,Kudu.Services.Infrastructure,AuthUtility,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\AuthUtility.cs,TryParseBasicAuthUserFromHeaderParameter,The length of the statement  "            string decodedAuthorizationHeader = Encoding.UTF8.GetString(credentialBase64DecodedArray' 0' credentialBase64DecodedArray.Length); " is 130.
Long Statement,Kudu.Services.Editor,VfsController,C:\repos\projectkudu_kudu\Kudu.Services\Editor\VfsController.cs,CreateItemGetResponse,The length of the statement  "                HttpResponseMessage successFileResponse = Request.CreateResponse(isRangeRequest ? HttpStatusCode.PartialContent : HttpStatusCode.OK); " is 133.
Long Statement,Kudu.Services.Editor,VfsController,C:\repos\projectkudu_kudu\Kudu.Services\Editor\VfsController.cs,CreateItemGetResponse,The length of the statement  "                // The range request had no overlap with the current extend of the resource so generate a 416 (Requested Range Not Satisfiable) " is 127.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,CreateOrUpdateHelper,The length of the statement  "                return ArmUtils.CreateErrorResponse(Request' HttpStatusCode.BadRequest' new ArgumentException($"{name} is not a valid function name")); " is 135.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,List,The length of the statement  "                var functions = (await _manager.ListFunctionsConfigAsync(ArmUtils.IsArmRequest(Request) ? new FunctionTestData() : null)).Select(f => AddFunctionAppIdToEnvelope(f)); " is 165.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,Get,The length of the statement  "                        AddFunctionAppIdToEnvelope(await _manager.GetFunctionConfigAsync(name' ArmUtils.IsArmRequest(Request) ? new FunctionTestData() : null))' Request)); " is 147.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,PutHostSettings,The length of the statement  "                return Request.CreateResponse(HttpStatusCode.Created' await _manager.PutHostConfigAsync(await Request.Content.ReadAsAsync<JObject>())); " is 135.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,SyncTriggers,The length of the statement  "                await PostDeploymentHelper.SyncFunctionsTriggers(_environment.RequestId' _environment.SiteRestrictedJwt' new PostDeploymentTraceListener(tracer)); " is 146.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,DownloadFunctions,The length of the statement  "                    Content = ZipStreamContent.Create(fileName' tracer' zip => _manager.CreateArchive(zip' includeAppSettings' includeCsproj' appName)) " is 131.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,AddFunctionAppIdToEnvelope,The length of the statement  "                function.FunctionAppId = $"{armId.Substring(0' index)}{sitesResource}/{Environment.GetEnvironmentVariable("WEBSITE_SITE_NAME")}"; " is 129.
Long Statement,Kudu.Services.Functions,FunctionController,C:\repos\projectkudu_kudu\Kudu.Services\Functions\FunctionController.cs,FireSyncTriggers,The length of the statement  "                        await PostDeploymentHelper.SyncFunctionsTriggers(_environment.RequestId' _environment.SiteRestrictedJwt' new PostDeploymentTraceListener(bgTracer)); " is 148.
Long Statement,Kudu.Services.GitServer,InfoRefsController,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\InfoRefsController.cs,Execute,The length of the statement  "                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest' String.Format(CultureInfo.CurrentCulture' Resources.Error_NonGitRepositoryFound' repository.RepositoryType)); " is 171.
Long Statement,Kudu.Services.Jobs,JobsController,C:\repos\projectkudu_kudu\Kudu.Services\Jobs\JobsController.cs,GetTriggeredJobHistory,The length of the statement  "                    history != null && ArmUtils.IsArmRequest(Request) ? ArmUtils.AddEnvelopeOnArmRequest(history.TriggeredJobRuns' Request) : history; " is 130.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The length of the statement  "                                        where change.Value<JObject>("new") != null && string.Equals(targetBranch' change.Value<JObject>("new").Value<string>("name") ?? targetBranch' StringComparison.OrdinalIgnoreCase) " is 177.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The length of the statement  "                                        orderby BitbucketHandler.TryParseCommitStamp(change.Value<JObject>("new").Value<JObject>("target").Value<string>("date")) descending " is 132.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The length of the statement  "                string authorRaw = WebUtility.HtmlDecode(latestCommit.Value<JObject>("target").Value<JObject>("author").Value<string>("raw")); " is 126.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The length of the statement  "            info.RepositoryUrl = payload.Value<JObject>("repository").Value<JObject>("links").Value<JObject>("html").Value<string>("href"); " is 127.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The length of the statement  "            bool isGitRepo = string.Equals("git"' payload.Value<JObject>("repository").Value<string>("scm")' StringComparison.OrdinalIgnoreCase); " is 133.
Long Statement,Kudu.Services.ServiceHookHandlers,CodePlexHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\CodePlexHandler.cs,TryParseDeploymentInfo,The length of the statement  "                TargetChangeset = new ChangeSet(newRef' authorName: null' authorEmail: null' message: null' timestamp: DateTimeOffset.Now) " is 122.
Long Statement,Kudu.Services.ServiceHookHandlers,CodePlexHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\CodePlexHandler.cs,TryParseDeploymentInfo,The length of the statement  "            deploymentInfo.RepositoryType = ("Mercurial".Equals(scm' StringComparison.OrdinalIgnoreCase)) ? RepositoryType.Mercurial : RepositoryType.Git; " is 142.
Long Statement,Kudu.Services.ServiceHookHandlers,CodePlexHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\CodePlexHandler.cs,TryParseDeploymentInfo,The length of the statement  "            return (String.IsNullOrEmpty(branch) || targetBranch.Equals(branch' StringComparison.OrdinalIgnoreCase)) && newRef.Any(c => c != '0') ? " is 135.
Long Statement,Kudu.Services.ServiceHookHandlers,DropboxHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\DropboxHandler.cs,TryParseDeploymentInfo,The length of the statement  "                message = String.Format(CultureInfo.CurrentUICulture' Resources.Dropbox_SynchronizingNChanges' dropboxInfo.DeployInfo.Deltas.Count); " is 132.
Long Statement,Kudu.Services.ServiceHookHandlers,DropboxHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\DropboxHandler.cs,GetValue,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_DropboxValueNotSpecified' key)); " is 126.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandler.cs,GetDeploymentInfo,The length of the statement  "                    authorEmail: null'                                 // TODO: Bitbucket gives us the raw_author field which is the user field set in the repository' maybe we should parse it. " is 172.
Long Statement,Kudu.Services.ServiceHookHandlers,BitbucketHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandler.cs,GetDeploymentInfo,The length of the statement  "            info.RepositoryType = scm.Equals("hg"' StringComparison.OrdinalIgnoreCase) ? RepositoryType.Mercurial : RepositoryType.Git; " is 123.
Long Statement,Kudu.Services.ServiceHookHandlers,KilnHgHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\KilnHgHandler.cs,GetDeploymentInfo,The length of the statement  "                    timestamp: new DateTimeOffset(DateTime.Parse(targetCommit.Value<string>("timestamp")' CultureInfo.InvariantCulture)' TimeSpan.Zero) " is 131.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetRemoteExtensions,The length of the statement  "                ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(await _manager.GetRemoteExtensions(filter' allowPrereleaseVersions' feedUrl)' Request)); " is 140.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                        && string.Equals(Constants.SiteExtensionProvisioningStateSucceeded' armSettings.ProvisioningState' StringComparison.OrdinalIgnoreCase)) " is 135.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                using (tracer.Step("{0} finished installation. But there is other installation on-going' fake the status to be Created' so that we can restart once for all."' id)) " is 163.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                    responseMessage = Request.CreateResponse(HttpStatusCode.Created' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 138.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                // it is important to call "SiteExtensionStatus.IsAnyInstallationRequireRestart" before "UpdateArmSettingsForSuccessInstallation" " is 129.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                bool requireRestart = SiteExtensionStatus.IsAnyInstallationRequireRestart(_environment.SiteExtensionSettingsPath' _siteExtensionRoot' tracer' _analytics); " is 154.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                    using (tracer.Step("{0} finished installation and batch update lock aquired. Will notify Antares GEO to restart website."' id)) " is 127.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                        responseMessage = Request.CreateResponse(armSettings.Status' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 134.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                    tracer.Trace("Not able to aquire batch update lock' there must be another batch update on-going. return Created status to user to let them poll again."); " is 153.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                                    responseMessage = Request.CreateResponse(HttpStatusCode.Created' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 138.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                            responseMessage = Request.CreateResponse(HttpStatusCode.OK' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 133.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                            responseMessage = Request.CreateResponse(armSettings.Status' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 134.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,GetLocalExtension,The length of the statement  "                        responseMessage = Request.CreateResponse(HttpStatusCode.OK' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 133.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                    backgroundTracer = new CascadeTracer(new XmlTracer(_environment.TracePath' tracer.TraceLevel)' new ETWTracer(_environment.RequestId' "PUT")); " is 141.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                                _manager.InstallExtension(id' requestInfo.Version' requestInfo.FeedUrl' requestInfo.Type' backgroundTracer' requestInfo.InstallationArgs).Wait(); " is 145.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                        tracer.Trace("Installation finish quick and not require restart' skip async polling' invoking GET to return actual status to caller."); " is 135.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                return Request.CreateResponse(HttpStatusCode.Created' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(result' Request)); " is 124.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                result = await _manager.InstallExtension(id' requestInfo.Version' requestInfo.FeedUrl' requestInfo.Type' tracer' requestInfo.InstallationArgs); " is 143.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The length of the statement  "                if (string.Equals(Constants.SiteExtensionProvisioningStateFailed' result.ProvisioningState' StringComparison.OrdinalIgnoreCase)) " is 128.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,UninstallExtension,The length of the statement  "                        response = Request.CreateResponse(HttpStatusCode.BadRequest' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(extension' Request)); " is 134.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,UninstallExtension,The length of the statement  "                LogEndEvent(id' (DateTime.UtcNow - startTime)' tracer' defaultResult: Constants.SiteExtensionProvisioningStateSucceeded); " is 121.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InitInstallSiteExtension,The length of the statement  "            SiteExtensionStatus settings = new SiteExtensionStatus(_environment.SiteExtensionSettingsPath' id' _traceFactory.GetTracer()); " is 126.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,UpdateArmSettingsForSuccessInstallation,The length of the statement  "                            SiteExtensionStatus armSettings = new SiteExtensionStatus(_environment.SiteExtensionSettingsPath' dirInfo.Name' tracer); " is 120.
Long Statement,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,UpdateArmSettingsForSuccessInstallation,The length of the statement  "                                && string.Equals(armSettings.ProvisioningState' Constants.SiteExtensionProvisioningStateSucceeded' StringComparison.OrdinalIgnoreCase)) " is 135.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemGetResponse,The length of the statement  "                HttpResponseMessage successFileResponse = Request.CreateResponse(isRangeRequest ? HttpStatusCode.PartialContent : HttpStatusCode.OK); " is 133.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemGetResponse,The length of the statement  "                // The range request had no overlap with the current extend of the resource so generate a 416 (Requested Range Not Satisfiable) " is 127.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemPutResponse,The length of the statement  "            // If repository is empty then there is no commit id and no master branch so we don't create any branch; we just init the repo. " is 127.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemPutResponse,The length of the statement  "                               Request.CreateErrorResponse(HttpStatusCode.InternalServerError' RS.Format(Resources.VfsScmUpdate_Error' commandLineException.Message)); " is 135.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateItemPutResponse,The length of the statement  "                            Request.CreateErrorResponse(HttpStatusCode.InternalServerError' RS.Format(Resources.VfsScmController_DeploymentError' result.StatusText)); " is 138.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,CreateFileDeleteResponse,The length of the statement  "                        Request.CreateErrorResponse(HttpStatusCode.InternalServerError' RS.Format(Resources.VfsScmController_DeploymentError' result.StatusText)); " is 138.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,PrepareBranch,The length of the statement  "                    errorResponse = Request.CreateErrorResponse(HttpStatusCode.PreconditionFailed' Resources.VfsScmController_MissingIfMatch); " is 122.
Long Statement,Kudu.Services.SourceControl,LiveScmEditorController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmEditorController.cs,DeployChangesAsync,The length of the statement  "                await _deploymentManager.DeployAsync(_repository' changeSet: null' deployer: string.Empty' clean: true' needFileUpdate: false); " is 127.
Long Statement,Kudu.Services.SourceControl,LiveScmController,C:\repos\projectkudu_kudu\Kudu.Services\SourceControl\LiveScmController.cs,SaveInitialDeploymentManifest,The length of the statement  "                string activeDeploymentManifest = Path.Combine(_environment.DeploymentsPath' activeDeploymentId' Constants.ManifestFileName); " is 125.
Long Statement,Kudu.Services.SSHKey,SSHKeyController,C:\repos\projectkudu_kudu\Kudu.Services\SSHKey\SSHKeyController.cs,SetPrivateKey,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest' new ArgumentNullException(KeyParameterName))); " is 133.
Long Statement,Kudu.Services.Settings,SettingsController,C:\repos\projectkudu_kudu\Kudu.Services\Settings\SettingsController.cs,Set,The length of the statement  "                    if (newSettings.Count == 2 && newSettings.TryGetValue("key"' out keyToken) && newSettings.TryGetValue("value"' out valueToken)) " is 127.
Long Statement,Kudu.Services.Zip,ZipController,C:\repos\projectkudu_kudu\Kudu.Services\Zip\ZipController.cs,CreateDirectoryGetResponse,The length of the statement  "            var fileName = Request.GetQueryNameValuePairs().FirstOrDefault(p => p.Key.Equals("fileName"' StringComparison.OrdinalIgnoreCase)).Value; " is 136.
Empty Catch Block,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,SafeInvoke,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnHeartbeat,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,DoSafeAction,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,StopProfileInternalAsync,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,SafeInvoke,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Infrastructure,ShutdownDetector,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,Cancel,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Infrastructure,UnsafeIISMethodsWrapper,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,UnsafeIISMethodsWrapper,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Infrastructure,UnsafeIISMethodsWrapper,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,UnsafeIISMethodsWrapper,The method has an empty catch block.
Empty Catch Block,Kudu.Services.Infrastructure,UnsafeIISMethodsWrapper,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,UnsafeIISMethodsWrapper,The method has an empty catch block.
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services.Arm,ArmUtils,C:\repos\projectkudu_kudu\Kudu.Services\Arm\ArmUtils.cs,Create,The following statement contains a magic number: if (idTokens.Length > 8 && idTokens[6] == "Microsoft.Web")              {                  armEntry.Type = idTokens[6];                    for (int i = 7; i < idTokens.Length; i += 2)                  {                      armEntry.Type += "/" + idTokens[i];                  }                    armEntry.Name = idTokens[8];                  for (int i = 10; i < idTokens.Length; i += 2)                  {                      armEntry.Name += "/" + idTokens[i];                  }              }
Magic Number,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,ListenAndSendStreamAsync,The following statement contains a magic number: var strb = new StringBuilder(1024);
Magic Number,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,ListenAndSendStreamAsync,The following statement contains a magic number: try              {                  while (!process.HasExited)                  {                      StreamResult line;                      while ((line = await ReadLineAsync(textReader' strb.Clear())) != null)                      {                            if (isError)                          {                              lock (Connection)                              {                                  do                                  {                                      Connection.Send(connectionId' new { Error = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait();                                      Thread.Sleep(10);                                  } while (line.HasNext && (line = ReadLineAsync(textReader' strb.Clear()).Result) != null);                              }                          }                          else                          {                              lock (Connection)                              {                                  do                                  {                                      Connection.Send(connectionId' new { Output = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait();                                      Thread.Sleep(10);                                  } while (line.HasNext && (line = ReadLineAsync(textReader' strb.Clear()).Result) != null);                              }                          }                      }                  }              }              catch (Exception)              {                  SafeInvoke(() => KillProcess(connectionId));              }
Magic Number,Kudu.Services,PersistentCommandController,C:\repos\projectkudu_kudu\Kudu.Services\Commands\PersistentCommandController.cs,ListenAndSendStreamAsync,The following statement contains a magic number: try              {                  while (!process.HasExited)                  {                      StreamResult line;                      while ((line = await ReadLineAsync(textReader' strb.Clear())) != null)                      {                            if (isError)                          {                              lock (Connection)                              {                                  do                                  {                                      Connection.Send(connectionId' new { Error = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait();                                      Thread.Sleep(10);                                  } while (line.HasNext && (line = ReadLineAsync(textReader' strb.Clear()).Result) != null);                              }                          }                          else                          {                              lock (Connection)                              {                                  do                                  {                                      Connection.Send(connectionId' new { Output = line.Value' ProcessId = process.Id' RunningProcessesCount = _processes.Count }).Wait();                                      Thread.Sleep(10);                                  } while (line.HasNext && (line = ReadLineAsync(textReader' strb.Clear()).Result) != null);                              }                          }                      }                  }              }              catch (Exception)              {                  SafeInvoke(() => KillProcess(connectionId));              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,Sync,The following statement contains a magic number: if (dropboxInfo.OAuthVersion == 2)              {                  deployInfo.OldCursor = _settings.GetValue(CursorKey);              }              else if (_settings.GetValue(CursorKey) != deployInfo.OldCursor)              {                  throw new InvalidOperationException(Resources.Error_MismatchDropboxCursor);              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,Sync,The following statement contains a magic number: try              {                  using (_tracer.Step("Sync with Dropbox"))                  {                      if (dropboxInfo.OAuthVersion == 2)                      {                          // Fetch the deltas                          await UpdateDropboxDeployInfo(deployInfo);                      }                        // Sync dropbox => repository directory                      await ApplyChanges(dropboxInfo' useOAuth20: dropboxInfo.OAuthVersion == 2);                  }                    message = String.Format(CultureInfo.CurrentCulture'                              Resources.Dropbox_Synchronized'                              deployInfo.Deltas.Count);              }              catch (Exception)              {                  message = String.Format(CultureInfo.CurrentCulture'                              Resources.Dropbox_SynchronizedWithFailure'                              _successCount'                              deployInfo.Deltas.Count'                              _failedCount);                    throw;              }              finally              {                  Logger.Log(message);                    Logger.Log(String.Format("{0} downloaded files' {1} successful retries."' _fileCount' _retriedCount));                    IDeploymentStatusFile statusFile = _status.Open(dropboxInfo.TargetChangeset.Id);                  statusFile.UpdateMessage(message);                  statusFile.UpdateProgress(String.Format(CultureInfo.CurrentCulture' Resources.Dropbox_Committing' _successCount));                    // Commit anyway even partial change                  if (repository.Commit(message' deployInfo.UserName' deployInfo.Email ?? deployInfo.UserName))                  {                      changeSet = repository.GetChangeSet("HEAD");                  }              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,Sync,The following statement contains a magic number: try              {                  using (_tracer.Step("Sync with Dropbox"))                  {                      if (dropboxInfo.OAuthVersion == 2)                      {                          // Fetch the deltas                          await UpdateDropboxDeployInfo(deployInfo);                      }                        // Sync dropbox => repository directory                      await ApplyChanges(dropboxInfo' useOAuth20: dropboxInfo.OAuthVersion == 2);                  }                    message = String.Format(CultureInfo.CurrentCulture'                              Resources.Dropbox_Synchronized'                              deployInfo.Deltas.Count);              }              catch (Exception)              {                  message = String.Format(CultureInfo.CurrentCulture'                              Resources.Dropbox_SynchronizedWithFailure'                              _successCount'                              deployInfo.Deltas.Count'                              _failedCount);                    throw;              }              finally              {                  Logger.Log(message);                    Logger.Log(String.Format("{0} downloaded files' {1} successful retries."' _fileCount' _retriedCount));                    IDeploymentStatusFile statusFile = _status.Open(dropboxInfo.TargetChangeset.Id);                  statusFile.UpdateMessage(message);                  statusFile.UpdateProgress(String.Format(CultureInfo.CurrentCulture' Resources.Dropbox_Committing' _successCount));                    // Commit anyway even partial change                  if (repository.Commit(message' deployInfo.UserName' deployInfo.Email ?? deployInfo.UserName))                  {                      changeSet = repository.GetChangeSet("HEAD");                  }              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChanges,The following statement contains a magic number: if (_totals > 0)              {                  using (new Timer(UpdateStatusFile' state: dropboxInfo.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5)))                  {                      await ApplyChangesCore(info' useOAuth20);                  }              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChanges,The following statement contains a magic number: if (_totals > 0)              {                  using (new Timer(UpdateStatusFile' state: dropboxInfo.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5)))                  {                      await ApplyChangesCore(info' useOAuth20);                  }              }
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChangesCore,The following statement contains a magic number: var rateLimiter = new RateLimiter(MaxFilesPerSecs * 10' TimeSpan.FromSeconds(10));
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,ApplyChangesCore,The following statement contains a magic number: var rateLimiter = new RateLimiter(MaxFilesPerSecs * 10' TimeSpan.FromSeconds(10));
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,SafeWriteFile,The following statement contains a magic number: const int DefaultBufferSize = 8192;
Magic Number,Kudu.Services,DropboxHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxHelper.cs,UpdateStatusFile,The following statement contains a magic number: statusFile.UpdateProgress(String.Format(CultureInfo.CurrentCulture'                                          _failedCount == 0 ? Resources.Dropbox_SynchronizingProgress : Resources.Dropbox_SynchronizingProgressWithFailure'                                          ((_successCount + _failedCount) * 100) / _totals'                                          _totals'                                          _failedCount));
Magic Number,Kudu.Services,DropboxInfo,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\DropboxInfo.cs,CreateV2Info,The following statement contains a magic number: return new DropboxInfo(repositoryFactory)              {                  Deployer = DropboxHelper.Dropbox'                  DeployInfo = new DropboxDeployInfo                               {                                   Path = dropboxPath'                                   Token = oauthToken                               }'                  OAuthVersion = 2'                  RepositoryType = repositoryType              };
Magic Number,Kudu.Services,FetchHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\FetchHandler.cs,ProcessRequestAsync,The following statement contains a magic number: using (_tracer.Step("FetchHandler"))              {                  // Redirect GET /deploy requests to the Kudu root for convenience when using URL from Azure portal                  if (String.Equals(context.Request.HttpMethod' "GET"' StringComparison.OrdinalIgnoreCase))                  {                      context.Response.Redirect("~/");                      context.ApplicationInstance.CompleteRequest();                      return;                  }                    if (!String.Equals(context.Request.HttpMethod' "POST"' StringComparison.OrdinalIgnoreCase))                  {                      context.Response.StatusCode = (int)HttpStatusCode.NotFound;                      context.ApplicationInstance.CompleteRequest();                      return;                  }                    context.Response.TrySkipIisCustomErrors = true;                    DeploymentInfoBase deployInfo = null;                    // We are going to assume that the branch details are already set by the time it gets here. This is particularly important in the mercurial case'                  // since Settings hardcodes the default value for Branch to be "master". Consequently' Kudu will NoOp requests for Mercurial commits.                  string targetBranch = _settings.GetBranch();                  try                  {                      var request = new HttpRequestWrapper(context.Request);                      JObject payload = GetPayload(request);                      DeployAction action = GetRepositoryInfo(request' payload' targetBranch' out deployInfo);                      if (action == DeployAction.NoOp)                      {                          _tracer.Trace("No-op for deployment.");                          return;                      }                  }                  catch (FormatException ex)                  {                      _tracer.TraceError(ex);                      context.Response.StatusCode = 400;                      context.Response.Write(ex.Message);                      context.ApplicationInstance.CompleteRequest();                      return;                  }                    bool asyncRequested = String.Equals(context.Request.QueryString["isAsync"]' "true"' StringComparison.OrdinalIgnoreCase);                    var response = await _manager.FetchDeploy(deployInfo' asyncRequested' UriHelper.GetRequestUri(context.Request)' targetBranch);                    switch (response)                  {                      case FetchDeploymentRequestResult.RunningAynschronously:                          // to avoid regression' only set location header if isAsync                          if (asyncRequested)                          {                              // latest deployment keyword reserved to poll till deployment done                              context.Response.Headers["Location"] = new Uri(UriHelper.GetRequestUri(context.Request)'                                  String.Format("/api/deployments/{0}?deployer={1}&time={2}"' Constants.LatestDeployment' deployInfo.Deployer' DateTime.UtcNow.ToString("yyy-MM-dd_HH-mm-ssZ"))).ToString();                          }                          context.Response.StatusCode = (int)HttpStatusCode.Accepted;                          context.ApplicationInstance.CompleteRequest();                          return;                      case FetchDeploymentRequestResult.ForbiddenScmDisabled:                          context.Response.StatusCode = (int)HttpStatusCode.Forbidden;                          context.ApplicationInstance.CompleteRequest();                          _tracer.Trace("Scm is not enabled' reject all requests.");                          return;                      case FetchDeploymentRequestResult.ConflictAutoSwapOngoing:                          context.Response.StatusCode = (int)HttpStatusCode.Conflict;                          context.Response.Write(Resources.Error_AutoSwapDeploymentOngoing);                          context.ApplicationInstance.CompleteRequest();                          return;                      case FetchDeploymentRequestResult.Pending:                          // Return a http 202: the request has been accepted for processing' but the processing has not been completed.                          context.Response.StatusCode = (int)HttpStatusCode.Accepted;                          context.ApplicationInstance.CompleteRequest();                          return;                      case FetchDeploymentRequestResult.ConflictDeploymentInProgress:                          context.Response.StatusCode = (int)HttpStatusCode.Conflict;                          context.Response.Write(Resources.Error_DeploymentInProgress);                          context.ApplicationInstance.CompleteRequest();                          break;                      case FetchDeploymentRequestResult.RanSynchronously:                      default:                          break;                  }              }
Magic Number,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,TryParseDeployResult,The following statement contains a magic number: if (status == null || (status.Value != 3 && status.Value != 4))              {                  return false;              }
Magic Number,Kudu.Services.Deployment,DeploymentController,C:\repos\projectkudu_kudu\Kudu.Services\Deployment\DeploymentController.cs,TryParseDeployResult,The following statement contains a magic number: if (status == null || (status.Value != 3 && status.Value != 4))              {                  return false;              }
Magic Number,Kudu.Services.Diagnostics,RuntimeController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\RuntimeController.cs,GetRuntimeVersions,The following statement contains a magic number: using (_tracer.Step("RuntimeController.GetRuntimeVersions"))              {                  return new RuntimeInfo                  {                      NodeVersions = GetNodeVersions(allVersions)'                      System = new                      {                          os_name = Environment.OSVersion.Version.Major < 10 ? "Windows Server 2012" : "Windows Server 2016"'                          os_build_lab_ex = Microsoft.Win32.Registry.GetValue(                              @"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion"'                              "BuildLabEx"' null)'                          cores = Environment.ProcessorCount'                      }                  };              }
Magic Number,Kudu.Services.Diagnostics,ResumableLogFileReader,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ApplicationLogsReader.cs,ReadNextBatch,The following statement contains a magic number: while (entries.Count < batchSize && _enumerator.MoveNext())                  {                      string line = _enumerator.Current;                      var match = Regex.Match(line' ApplicationLogsReader.LogEntryRegexPattern' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          currentEntry.TimeStamp = DateTimeOffset.Parse(match.Groups[1].Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal);                          currentEntry.PID = int.Parse(match.Groups[2].Value);                          currentEntry.Level = match.Groups[3].Value;                                                  currentEntry.AddMessageLine(match.Groups[4].Value);                          entries.Add(currentEntry);                          currentEntry = new ApplicationLogEntry();                      }                      else                      {                          currentEntry.AddMessageLine(line);                      }                  }
Magic Number,Kudu.Services.Diagnostics,ResumableLogFileReader,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ApplicationLogsReader.cs,ReadNextBatch,The following statement contains a magic number: while (entries.Count < batchSize && _enumerator.MoveNext())                  {                      string line = _enumerator.Current;                      var match = Regex.Match(line' ApplicationLogsReader.LogEntryRegexPattern' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          currentEntry.TimeStamp = DateTimeOffset.Parse(match.Groups[1].Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal);                          currentEntry.PID = int.Parse(match.Groups[2].Value);                          currentEntry.Level = match.Groups[3].Value;                                                  currentEntry.AddMessageLine(match.Groups[4].Value);                          entries.Add(currentEntry);                          currentEntry = new ApplicationLogEntry();                      }                      else                      {                          currentEntry.AddMessageLine(line);                      }                  }
Magic Number,Kudu.Services.Diagnostics,ResumableLogFileReader,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ApplicationLogsReader.cs,ReadNextBatch,The following statement contains a magic number: while (entries.Count < batchSize && _enumerator.MoveNext())                  {                      string line = _enumerator.Current;                      var match = Regex.Match(line' ApplicationLogsReader.LogEntryRegexPattern' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          currentEntry.TimeStamp = DateTimeOffset.Parse(match.Groups[1].Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal);                          currentEntry.PID = int.Parse(match.Groups[2].Value);                          currentEntry.Level = match.Groups[3].Value;                                                  currentEntry.AddMessageLine(match.Groups[4].Value);                          entries.Add(currentEntry);                          currentEntry = new ApplicationLogEntry();                      }                      else                      {                          currentEntry.AddMessageLine(line);                      }                  }
Magic Number,Kudu.Services.Performance,LogStreamHandler,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamHandler.cs,BeginProcessRequest,The following statement contains a magic number: using (_tracer.Step("LogStreamHandler.BeginProcessRequest"))              {                  if (string.Equals(context.Request.HttpMethod' "GET"' StringComparison.OrdinalIgnoreCase))                  {                      return _manager.BeginProcessRequest(context' cb' extraData);                  }                  else                  {                      return new CompletedAsyncResult(context' 400' cb' extraData);                  }              }
Magic Number,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,BeginProcessRequest,The following statement contains a magic number: if (_enableTrace)              {                  _operationLock.LockOperation(() =>                  {                      // best effort trying to enable application logging                      OperationManager.SafeExecute(() =>                      {                          var diagnostics = new DiagnosticsSettingsManager(Path.Combine(_environment.DiagnosticsPath' Constants.SettingsJsonFile)' _tracer);                          diagnostics.UpdateSetting(AzureDriveEnabledKey' true);                      });                  }' "Updating diagnostics setting"' TimeSpan.FromSeconds(30));              }
Magic Number,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnChanged,The following statement contains a magic number: if (e.ChangeType == WatcherChangeTypes.Changed && MatchFilters(e.FullPath))              {                  // reading the delta of file changed' retry if failed.                  IEnumerable<string> lines = null;                  OperationManager.Attempt(() =>                  {                      lines = GetChanges(e);                  }' 3' 100);                    if (lines.Count() > 0)                  {                      _lastTraceTime = DateTime.UtcNow;                        NotifyClient(lines);                  }              }
Magic Number,Kudu.Services.Performance,LogStreamManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,OnChanged,The following statement contains a magic number: if (e.ChangeType == WatcherChangeTypes.Changed && MatchFilters(e.FullPath))              {                  // reading the delta of file changed' retry if failed.                  IEnumerable<string> lines = null;                  OperationManager.Attempt(() =>                  {                      lines = GetChanges(e);                  }' 3' 100);                    if (lines.Count() > 0)                  {                      _lastTraceTime = DateTime.UtcNow;                        NotifyClient(lines);                  }              }
Magic Number,Kudu.Services.Performance,ProcessRequestAsyncResult,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\LogStreamManager.cs,ProcessRequestAsyncResult,The following statement contains a magic number: _context.Response.StatusCode = 200;
Magic Number,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetIisProfilingTimeout,The following statement contains a magic number: TimeSpan iisProfilingTimeout = TimeSpan.FromMinutes(3);
Magic Number,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetNextProfilingSessionId,The following statement contains a magic number: int sessionId = r.Next(1' 255);
Magic Number,Kudu.Services.Performance,ProfileManager,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProfileManager.cs,GetNextProfilingSessionId,The following statement contains a magic number: while (lookup.Contains(sessionId))              {                  sessionId = r.Next(1' 255);              }
Magic Number,Kudu.Services.Performance,ProcessController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\ProcessController.cs,SafeGetValue,The following statement contains a magic number: try              {                  return func();              }              catch (Exception ex)              {                  // skip the known access denied to reduce noise in trace                  var win32Exception = ex as Win32Exception;                  if (win32Exception == null || win32Exception.NativeErrorCode != 5)                  {                      _tracer.TraceError(ex);                  }              }
Magic Number,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,GetDockerLogs,The following statement contains a magic number: using (_tracer.Step("DiagnosticsController.GetDockerLogs"))              {                  var currentDockerLogFilenames = GetCurrentDockerLogFilenames();                    var vfsBaseAddress = UriHelper.MakeRelative(UriHelper.GetBaseUri(request)' "api/vfs");                    // Open files in order to refresh (not update) the timestamp and file size.                  // This is needed on Linux due to the way that metadata for files on the CIFS                  // mount gets cached and not always refreshed. Limit to 10 as a safety.                    foreach (var filename in currentDockerLogFilenames.Take(10))                  {                      using (var file = File.OpenRead(filename))                      {                          // This space intentionally left blank                      }                  }                    var responseContent = currentDockerLogFilenames.Select(p => CurrentDockerLogFilenameToJson(p' vfsBaseAddress.ToString()));                    return Request.CreateResponse(HttpStatusCode.OK' responseContent);              }
Magic Number,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,GetCurrentDockerLogFilenames,The following statement contains a magic number: var latestDatestamp = nonRolledDockerLogFilenames                  .Select(p => Path.GetFileName(p).Substring(0' 10))                  .OrderByDescending(s => int.Parse(s.Replace("_"' String.Empty)))                  .First();
Magic Number,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,CurrentDockerLogFilenameToJson,The following statement contains a magic number: var machineName = info.Name.Substring(11' info.Name.Length - 22);
Magic Number,Kudu.Services.Performance,DiagnosticsController,C:\repos\projectkudu_kudu\Kudu.Services\Diagnostics\DiagnosticsController.cs,CurrentDockerLogFilenameToJson,The following statement contains a magic number: var machineName = info.Name.Substring(11' info.Name.Length - 22);
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The following statement contains a magic number: using (_tracer.Step("Getting delta changes with cursor: {0}..."' cursor.Truncate(5)))              using (_tracer.Step("cursor: {0}"' cursor))              {                  changes = await GetChanges(info.TargetChangeset.Id' info.AccessToken' info.RepositoryUrl' cursor);              }
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The following statement contains a magic number: using (new Timer(UpdateStatusFile' state: info.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5)))              using (_tracer.Step("Applying {0} changes ..."' _totals))              {                  LogMessage(Resources.OneDriveApplyingChanges' _totals);                    // perform action seperately' so that can ensure timestamp on directory                  // e.g two changes:                  //  (new) file /a/b/c.txt                  //  (new) dir  /a/b                  //  if created dir first then create file. file creation will trigger folder timestamp change.                  //  which will result in "/a/b" has timestamp from the monent of file creation instead of the timestamp value from server' where value supposed to be set by code specifically.                  await ApplyChangesParallel(changes.DeletionChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0);                  await ApplyChangesParallel(changes.FileChanges' info.AccessToken' maxParallelCount: MaxConcurrentRequests' countSuccess: true);                  // apply folder changes at last to maintain same timestamp as in OneDrive                  await ApplyChangesParallel(changes.DirectoryChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0);                    _tracer.Trace("{0} succeeded' {1} failed"' _successCount' _failedCount);                  LogMessage(Resources.OneDriveApplyResult' _successCount' _failedCount);                    string message = _failedCount > 0 ?                      string.Format(CultureInfo.CurrentCulture' Resources.OneDrive_SynchronizedWithFailure' _successCount' _totals' _failedCount) :                      string.Format(CultureInfo.CurrentCulture' Resources.OneDrive_Synchronized' _totals);                    // Commit anyway even partial change                  if (repository.Commit(message' info.AuthorName' info.AuthorEmail))                  {                      changeSet = repository.GetChangeSet("HEAD");                  }                    if (_failedCount > 0)                  {                      // signal deployment failied                      throw new Exception(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveApplyResult' _successCount' _failedCount));                  }              }
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,Sync,The following statement contains a magic number: using (new Timer(UpdateStatusFile' state: info.TargetChangeset.Id' dueTime: TimeSpan.FromSeconds(5)' period: TimeSpan.FromSeconds(5)))              using (_tracer.Step("Applying {0} changes ..."' _totals))              {                  LogMessage(Resources.OneDriveApplyingChanges' _totals);                    // perform action seperately' so that can ensure timestamp on directory                  // e.g two changes:                  //  (new) file /a/b/c.txt                  //  (new) dir  /a/b                  //  if created dir first then create file. file creation will trigger folder timestamp change.                  //  which will result in "/a/b" has timestamp from the monent of file creation instead of the timestamp value from server' where value supposed to be set by code specifically.                  await ApplyChangesParallel(changes.DeletionChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0);                  await ApplyChangesParallel(changes.FileChanges' info.AccessToken' maxParallelCount: MaxConcurrentRequests' countSuccess: true);                  // apply folder changes at last to maintain same timestamp as in OneDrive                  await ApplyChangesParallel(changes.DirectoryChanges' info.AccessToken' maxParallelCount: 1' countSuccess: changes.FileChanges.Count == 0);                    _tracer.Trace("{0} succeeded' {1} failed"' _successCount' _failedCount);                  LogMessage(Resources.OneDriveApplyResult' _successCount' _failedCount);                    string message = _failedCount > 0 ?                      string.Format(CultureInfo.CurrentCulture' Resources.OneDrive_SynchronizedWithFailure' _successCount' _totals' _failedCount) :                      string.Format(CultureInfo.CurrentCulture' Resources.OneDrive_Synchronized' _totals);                    // Commit anyway even partial change                  if (repository.Commit(message' info.AuthorName' info.AuthorEmail))                  {                      changeSet = repository.GetChangeSet("HEAD");                  }                    if (_failedCount > 0)                  {                      // signal deployment failied                      throw new Exception(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveApplyResult' _successCount' _failedCount));                  }              }
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,UpdateStatusFile,The following statement contains a magic number: statusFile.UpdateProgress(string.Format(CultureInfo.CurrentCulture'                                          _failedCount == 0 ? Resources.OneDrive_SynchronizingProgress : Resources.OneDrive_SynchronizingProgressWithFailure'                                          ((_successCount + _failedCount) * 100) / _totals'                                          _totals'                                          _failedCount));
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Kudu.Services.FetchHelpers,OneDriveHelper,C:\repos\projectkudu_kudu\Kudu.Services\FetchHelpers\OneDriveHelper.cs,GetOneDriveRootUri,The following statement contains a magic number: if (uriTokens.Length != 2)              {                  throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.OneDriveInvalidRequestUri' requestUri));              }
Magic Number,Kudu.Services.Infrastructure,ShutdownDetector,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,Initialize,The following statement contains a magic number: try              {                  HostingEnvironment.RegisterObject(this);                    // Normally when the AppDomain shuts down IRegisteredObject.Stop gets called' except that                  // ASP.NET waits for requests to end before calling IRegisteredObject.Stop. This can be                  // troublesome for some frameworks like SignalR that keep long running requests alive.                  // These are more aggressive checks to see if the app domain is in the process of being shutdown and                  // we trigger the same cts in that case.                  if (HttpRuntime.UsingIntegratedPipeline)                  {                      if (RegisterForStopListeningEvent())                      {                      }                      else if (UnsafeIISMethods.CanDetectAppDomainRestart)                      {                          // Create a timer for polling when the app pool has been requested for shutdown.  #if NET40                          // Use the existing timer                          _checkAppPoolTimer = SharedTimer.StaticTimer.Register(CheckForAppDomainRestart' state: null);  #else                          _checkAppPoolTimer = new Timer(CheckForAppDomainRestart' state: null'                              dueTime: TimeSpan.FromSeconds(10)' period: TimeSpan.FromSeconds(10));  #endif                      }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(ex.Message);              }
Magic Number,Kudu.Services.Infrastructure,ShutdownDetector,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ShutdownDetector.cs,Initialize,The following statement contains a magic number: try              {                  HostingEnvironment.RegisterObject(this);                    // Normally when the AppDomain shuts down IRegisteredObject.Stop gets called' except that                  // ASP.NET waits for requests to end before calling IRegisteredObject.Stop. This can be                  // troublesome for some frameworks like SignalR that keep long running requests alive.                  // These are more aggressive checks to see if the app domain is in the process of being shutdown and                  // we trigger the same cts in that case.                  if (HttpRuntime.UsingIntegratedPipeline)                  {                      if (RegisterForStopListeningEvent())                      {                      }                      else if (UnsafeIISMethods.CanDetectAppDomainRestart)                      {                          // Create a timer for polling when the app pool has been requested for shutdown.  #if NET40                          // Use the existing timer                          _checkAppPoolTimer = SharedTimer.StaticTimer.Register(CheckForAppDomainRestart' state: null);  #else                          _checkAppPoolTimer = new Timer(CheckForAppDomainRestart' state: null'                              dueTime: TimeSpan.FromSeconds(10)' period: TimeSpan.FromSeconds(10));  #endif                      }                  }              }              catch (Exception ex)              {                  Debug.WriteLine(ex.Message);              }
Magic Number,Kudu.Services.Infrastructure,UriHelper,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\UriHelper.cs,MakeRelative,The following statement contains a magic number: if (builder.Port == 80)              {                  builder.Port = -1;              }
Magic Number,Kudu.Services.Editor,VfsController,C:\repos\projectkudu_kudu\Kudu.Services\Editor\VfsController.cs,CreateEntityTag,The following statement contains a magic number: var result = new StringBuilder(2 + etag.Length * 2);
Magic Number,Kudu.Services.Editor,VfsController,C:\repos\projectkudu_kudu\Kudu.Services\Editor\VfsController.cs,CreateEntityTag,The following statement contains a magic number: var result = new StringBuilder(2 + etag.Length * 2);
Magic Number,Kudu.Services.GitServer,CustomGitRepositoryHandler,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\CustomGitRepositoryHandler.cs,TryParseUri,The following statement contains a magic number: if (pathElts.Length < 2)              {                  return false;              }
Magic Number,Kudu.Services.GitServer,CustomGitRepositoryHandler,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\CustomGitRepositoryHandler.cs,TryParseUri,The following statement contains a magic number: var nextToLastPathElt = pathElts[pathElts.Length - 2];
Magic Number,Kudu.Services.GitServer,CustomGitRepositoryHandler,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\CustomGitRepositoryHandler.cs,TryParseUri,The following statement contains a magic number: if (nextToLastPathElt.Equals("info"' StringComparison.OrdinalIgnoreCase) &&                 lastPathElt.Equals("refs"' StringComparison.OrdinalIgnoreCase))              {                  repoPathEltEnd = pathElts.Length - 2;                  var queryParams = HttpUtility.ParseQueryString(url.Query);                  var serviceValue = queryParams["service"];                  if (String.IsNullOrEmpty(url.Query))                  {                      requestType = GitServerRequestType.LegacyInfoRef;                  }                  else if (serviceValue != null && serviceValue.Equals("git-upload-pack"' StringComparison.OrdinalIgnoreCase))                  {                      requestType = GitServerRequestType.AdvertiseUploadPack;                  }                  else if (serviceValue != null && serviceValue.Equals("git-receive-pack"' StringComparison.OrdinalIgnoreCase))                  {                      requestType = GitServerRequestType.AdvertiseReceivePack;                  }                  else                  {                      return false;                  }              }              else if (lastPathElt.Equals("git-receive-pack"' StringComparison.OrdinalIgnoreCase))              {                  repoPathEltEnd = pathElts.Length - 1;                  requestType = GitServerRequestType.ReceivePack;              }              else if (lastPathElt.Equals("git-upload-pack"' StringComparison.OrdinalIgnoreCase))              {                  repoPathEltEnd = pathElts.Length - 1;                  requestType = GitServerRequestType.UploadPack;              }              else              {                  return false;              }
Magic Number,Kudu.Services.GitServer,Helpers,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\Helpers.cs,WriteNoCache,The following statement contains a magic number: response.Content.Headers.Expires = new DateTimeOffset(1980' 1' 1' 0' 0' 0' TimeSpan.Zero);
Magic Number,Kudu.Services.GitServer,Helpers,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\Helpers.cs,PktWrite,The following statement contains a magic number: var toWrite = (input.Length + 4).ToString("x").PadLeft(4' '0') + input;
Magic Number,Kudu.Services.GitServer,Helpers,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\Helpers.cs,PktWrite,The following statement contains a magic number: var toWrite = (input.Length + 4).ToString("x").PadLeft(4' '0') + input;
Magic Number,Kudu.Services.GitServer,ReceivePackHandler,C:\repos\projectkudu_kudu\Kudu.Services\GitServer\ReceivePackHandler.cs,ProcessRequestBase,The following statement contains a magic number: using (Tracer.Step("RpcService.ReceivePack"))              {                  // Ensure that the target directory does not have a non-Git repository.                  IRepository repository = _repositoryFactory.GetRepository();                  if (repository != null && repository.RepositoryType != RepositoryType.Git)                  {                      context.Response.StatusCode = (int)HttpStatusCode.BadRequest;                      if (context.ApplicationInstance != null)                      {                          context.ApplicationInstance.CompleteRequest();                      }                      return;                  }                    try                  {                      DeploymentLock.LockOperation(() =>                      {                          context.Response.ContentType = "application/x-git-receive-pack-result";                            if (PostDeploymentHelper.IsAutoSwapOngoing())                          {                              context.Response.StatusCode = (int)HttpStatusCode.Conflict;                              context.Response.Write(Resources.Error_AutoSwapDeploymentOngoing);                              context.ApplicationInstance.CompleteRequest();                              return;                          }                            string username = null;                          if (AuthUtility.TryExtractBasicAuthUser(context.Request' out username))                          {                              GitServer.SetDeployer(username);                          }                            UpdateNoCacheForResponse(context.Response);                            // This temporary deployment is for ui purposes only' it will always be deleted via finally.                          ChangeSet tempChangeSet;                          using (DeploymentManager.CreateTemporaryDeployment(Resources.ReceivingChanges' out tempChangeSet))                          {                              // to pass to kudu.exe post receive hook                              System.Environment.SetEnvironmentVariable(Constants.RequestIdHeader' _environment.RequestId);                              System.Environment.SetEnvironmentVariable(Constants.SiteRestrictedJWT' _environment.SiteRestrictedJwt);                              try                              {                                  GitServer.Receive(context.Request.GetInputStream()' context.Response.OutputStream);                              }                              finally                              {                                  System.Environment.SetEnvironmentVariable(Constants.RequestIdHeader' null);                                  System.Environment.SetEnvironmentVariable(Constants.SiteRestrictedJWT' null);                              }                          }                      }' "Handling git receive pack"' TimeSpan.Zero);                  }                  catch (LockOperationException ex)                  {                      context.Response.StatusCode = 409;                      context.Response.Write(ex.Message);                      context.ApplicationInstance.CompleteRequest();                  }              }
Magic Number,MiscUtil.IO,ReverseLineReader,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ReverseLineReader.cs,GetEnumeratorImpl,The following statement contains a magic number: try              {                  long position = stream.Length;                    if (encoding is UnicodeEncoding && (position & 1) != 0)                  {                      throw new InvalidDataException("UTF-16 encoding provided' but stream has odd length.");                  }                    // Allow up to two bytes for data from the start of the previous                  // read which didn't quite make it as full characters                  byte[] buffer = new byte[bufferSize + 2];                  char[] charBuffer = new char[encoding.GetMaxCharCount(buffer.Length)];                  int leftOverData = 0;                  String previousEnd = null;                  // TextReader doesn't return an empty string if there's line break at the end                  // of the data. Therefore we don't return an empty string if it's our *first*                  // return.                  bool firstYield = true;                    // A line-feed at the start of the previous buffer means we need to swallow                  // the carriage-return at the end of this buffer - hence this needs declaring                  // way up here!                  bool swallowCarriageReturn = false;                    while (position > 0)                  {                      int bytesToRead = Math.Min(position > int.MaxValue ? bufferSize : (int)position' bufferSize);                        position -= bytesToRead;                      stream.Position = position;                      StreamUtil.ReadExactly(stream' buffer' bytesToRead);                      // If we haven't read a full buffer' but we had bytes left                      // over from before' copy them to the end of the buffer                      if (leftOverData > 0 && bytesToRead != bufferSize)                      {                          // Buffer.BlockCopy doesn't document its behaviour with respect                          // to overlapping data: we *might* just have read 7 bytes instead of                          // 8' and have two bytes to copy...                          Array.Copy(buffer' bufferSize' buffer' bytesToRead' leftOverData);                      }                      // We've now *effectively* read this much data.                      bytesToRead += leftOverData;                        int firstCharPosition = 0;                      while (!characterStartDetector(position + firstCharPosition' buffer[firstCharPosition]))                      {                          firstCharPosition++;                          // Bad UTF-8 sequences could trigger this. For UTF-8 we should always                          // see a valid character start in every 3 bytes' and if this is the start of the file                          // so we've done a short read' we should have the character start                          // somewhere in the usable buffer.                          if (firstCharPosition == 3 || firstCharPosition == bytesToRead)                          {                              throw new InvalidDataException("Invalid UTF-8 data");                          }                      }                      leftOverData = firstCharPosition;                        int charsRead = encoding.GetChars(buffer' firstCharPosition' bytesToRead - firstCharPosition' charBuffer' 0);                      int endExclusive = charsRead;                        for (int i = charsRead - 1; i >= 0; i--)                      {                          char lookingAt = charBuffer[i];                          if (swallowCarriageReturn)                          {                              swallowCarriageReturn = false;                              if (lookingAt == '\r')                              {                                  endExclusive--;                                  continue;                              }                          }                          // Anything non-line-breaking' just keep looking backwards                          if (lookingAt != '\n' && lookingAt != '\r')                          {                              continue;                          }                          // End of CRLF? Swallow the preceding CR                          if (lookingAt == '\n')                          {                              swallowCarriageReturn = true;                          }                          int start = i + 1;                          string bufferContents = new string(charBuffer' start' endExclusive - start);                          endExclusive = i;                          string stringToYield = previousEnd == null ? bufferContents : bufferContents + previousEnd;                          if (!firstYield || stringToYield.Length != 0)                          {                              yield return stringToYield;                          }                          firstYield = false;                          previousEnd = null;                      }                        previousEnd = endExclusive == 0 ? null : (new string(charBuffer' 0' endExclusive) + previousEnd);                        // If we didn't decode the start of the array' put it at the end for next time                      if (leftOverData != 0)                      {                          Buffer.BlockCopy(buffer' 0' buffer' bufferSize' leftOverData);                      }                  }                  if (leftOverData != 0)                  {                      // At the start of the final buffer' we had the end of another character.                      throw new InvalidDataException("Invalid UTF-8 data at start of stream");                  }                  if (firstYield && string.IsNullOrEmpty(previousEnd))                  {                      yield break;                  }                  yield return previousEnd ?? "";              }              finally              {                  stream.Dispose();              }
Magic Number,MiscUtil.IO,ReverseLineReader,C:\repos\projectkudu_kudu\Kudu.Services\Infrastructure\ReverseLineReader.cs,GetEnumeratorImpl,The following statement contains a magic number: try              {                  long position = stream.Length;                    if (encoding is UnicodeEncoding && (position & 1) != 0)                  {                      throw new InvalidDataException("UTF-16 encoding provided' but stream has odd length.");                  }                    // Allow up to two bytes for data from the start of the previous                  // read which didn't quite make it as full characters                  byte[] buffer = new byte[bufferSize + 2];                  char[] charBuffer = new char[encoding.GetMaxCharCount(buffer.Length)];                  int leftOverData = 0;                  String previousEnd = null;                  // TextReader doesn't return an empty string if there's line break at the end                  // of the data. Therefore we don't return an empty string if it's our *first*                  // return.                  bool firstYield = true;                    // A line-feed at the start of the previous buffer means we need to swallow                  // the carriage-return at the end of this buffer - hence this needs declaring                  // way up here!                  bool swallowCarriageReturn = false;                    while (position > 0)                  {                      int bytesToRead = Math.Min(position > int.MaxValue ? bufferSize : (int)position' bufferSize);                        position -= bytesToRead;                      stream.Position = position;                      StreamUtil.ReadExactly(stream' buffer' bytesToRead);                      // If we haven't read a full buffer' but we had bytes left                      // over from before' copy them to the end of the buffer                      if (leftOverData > 0 && bytesToRead != bufferSize)                      {                          // Buffer.BlockCopy doesn't document its behaviour with respect                          // to overlapping data: we *might* just have read 7 bytes instead of                          // 8' and have two bytes to copy...                          Array.Copy(buffer' bufferSize' buffer' bytesToRead' leftOverData);                      }                      // We've now *effectively* read this much data.                      bytesToRead += leftOverData;                        int firstCharPosition = 0;                      while (!characterStartDetector(position + firstCharPosition' buffer[firstCharPosition]))                      {                          firstCharPosition++;                          // Bad UTF-8 sequences could trigger this. For UTF-8 we should always                          // see a valid character start in every 3 bytes' and if this is the start of the file                          // so we've done a short read' we should have the character start                          // somewhere in the usable buffer.                          if (firstCharPosition == 3 || firstCharPosition == bytesToRead)                          {                              throw new InvalidDataException("Invalid UTF-8 data");                          }                      }                      leftOverData = firstCharPosition;                        int charsRead = encoding.GetChars(buffer' firstCharPosition' bytesToRead - firstCharPosition' charBuffer' 0);                      int endExclusive = charsRead;                        for (int i = charsRead - 1; i >= 0; i--)                      {                          char lookingAt = charBuffer[i];                          if (swallowCarriageReturn)                          {                              swallowCarriageReturn = false;                              if (lookingAt == '\r')                              {                                  endExclusive--;                                  continue;                              }                          }                          // Anything non-line-breaking' just keep looking backwards                          if (lookingAt != '\n' && lookingAt != '\r')                          {                              continue;                          }                          // End of CRLF? Swallow the preceding CR                          if (lookingAt == '\n')                          {                              swallowCarriageReturn = true;                          }                          int start = i + 1;                          string bufferContents = new string(charBuffer' start' endExclusive - start);                          endExclusive = i;                          string stringToYield = previousEnd == null ? bufferContents : bufferContents + previousEnd;                          if (!firstYield || stringToYield.Length != 0)                          {                              yield return stringToYield;                          }                          firstYield = false;                          previousEnd = null;                      }                        previousEnd = endExclusive == 0 ? null : (new string(charBuffer' 0' endExclusive) + previousEnd);                        // If we didn't decode the start of the array' put it at the end for next time                      if (leftOverData != 0)                      {                          Buffer.BlockCopy(buffer' 0' buffer' bufferSize' leftOverData);                      }                  }                  if (leftOverData != 0)                  {                      // At the start of the final buffer' we had the end of another character.                      throw new InvalidDataException("Invalid UTF-8 data at start of stream");                  }                  if (firstYield && string.IsNullOrEmpty(previousEnd))                  {                      yield break;                  }                  yield return previousEnd ?? "";              }              finally              {                  stream.Dispose();              }
Magic Number,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The following statement contains a magic number: if (changes != null && changes.Count > 0)              {                  JObject latestCommit = (from change in changes                                          where change.Value<JObject>("new") != null && string.Equals(targetBranch' change.Value<JObject>("new").Value<string>("name") ?? targetBranch' StringComparison.OrdinalIgnoreCase)                                          orderby BitbucketHandler.TryParseCommitStamp(change.Value<JObject>("new").Value<JObject>("target").Value<string>("date")) descending                                          select change.Value<JObject>("new")).FirstOrDefault();                    if (latestCommit == null)                  {                      return null;                  }                    string authorRaw = WebUtility.HtmlDecode(latestCommit.Value<JObject>("target").Value<JObject>("author").Value<string>("raw"));                  string[] nameAndEmail = authorRaw.Split(new char[] { '<'' '>' }' StringSplitOptions.RemoveEmptyEntries);                  info.TargetChangeset = new ChangeSet(                      id: latestCommit.Value<JObject>("target").Value<string>("hash")'                      authorName: nameAndEmail.Length == 2 ? nameAndEmail[0].Trim() : authorRaw'                      authorEmail: nameAndEmail.Length == 2 ? nameAndEmail[1].Trim() : null'                      message: latestCommit.Value<JObject>("target").Value<string>("message")'                      timestamp: BitbucketHandler.TryParseCommitStamp(latestCommit.Value<JObject>("target").Value<string>("date")));              }              else              {                  info.TargetChangeset = new ChangeSet(id: String.Empty' authorName: null'                                          authorEmail: null' message: null' timestamp: DateTime.UtcNow);              }
Magic Number,Kudu.Services.ServiceHookHandlers,BitbucketHandlerV2,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\BitbucketHandlerV2.cs,GetDeploymentInfo,The following statement contains a magic number: if (changes != null && changes.Count > 0)              {                  JObject latestCommit = (from change in changes                                          where change.Value<JObject>("new") != null && string.Equals(targetBranch' change.Value<JObject>("new").Value<string>("name") ?? targetBranch' StringComparison.OrdinalIgnoreCase)                                          orderby BitbucketHandler.TryParseCommitStamp(change.Value<JObject>("new").Value<JObject>("target").Value<string>("date")) descending                                          select change.Value<JObject>("new")).FirstOrDefault();                    if (latestCommit == null)                  {                      return null;                  }                    string authorRaw = WebUtility.HtmlDecode(latestCommit.Value<JObject>("target").Value<JObject>("author").Value<string>("raw"));                  string[] nameAndEmail = authorRaw.Split(new char[] { '<'' '>' }' StringSplitOptions.RemoveEmptyEntries);                  info.TargetChangeset = new ChangeSet(                      id: latestCommit.Value<JObject>("target").Value<string>("hash")'                      authorName: nameAndEmail.Length == 2 ? nameAndEmail[0].Trim() : authorRaw'                      authorEmail: nameAndEmail.Length == 2 ? nameAndEmail[1].Trim() : null'                      message: latestCommit.Value<JObject>("target").Value<string>("message")'                      timestamp: BitbucketHandler.TryParseCommitStamp(latestCommit.Value<JObject>("target").Value<string>("date")));              }              else              {                  info.TargetChangeset = new ChangeSet(id: String.Empty' authorName: null'                                          authorEmail: null' message: null' timestamp: DateTime.UtcNow);              }
Magic Number,Kudu.Services.ServiceHookHandlers,GitHubCompatHandler,C:\repos\projectkudu_kudu\Kudu.Services\ServiceHookHandlers\GitHubCompatHandler.cs,ParserMatches,The following statement contains a magic number: if (String.IsNullOrEmpty(branch) || !branch.StartsWith("refs/"' StringComparison.OrdinalIgnoreCase))              {                  return false;              }              else              {                  // Extract the name from refs/head/master notation.                  int secondSlashIndex = branch.IndexOf('/'' 5);                  branch = branch.Substring(secondSlashIndex + 1);                  if (!branch.Equals(targetBranch' StringComparison.OrdinalIgnoreCase))                  {                      return false;                  }              }
Magic Number,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,InstallExtension,The following statement contains a magic number: if (ArmUtils.IsArmRequest(Request))              {                  // create a context free tracer                  ITracer backgroundTracer = NullTracer.Instance;                  IDictionary<string' string> traceAttributes = new Dictionary<string' string>();                    if (tracer.TraceLevel > TraceLevel.Off)                  {                      backgroundTracer = new CascadeTracer(new XmlTracer(_environment.TracePath' tracer.TraceLevel)' new ETWTracer(_environment.RequestId' "PUT"));                      traceAttributes = new Dictionary<string' string>()                      {                          {"url"' Request.RequestUri.AbsolutePath}'                          {"method"' Request.Method.Method}                      };                        foreach (var item in Request.Headers)                      {                          if (!traceAttributes.ContainsKey(item.Key))                          {                              traceAttributes.Add(item.Key' string.Join("'"' item.Value));                          }                      }                  }                    AutoResetEvent installationSignal = new AutoResetEvent(false);                    // trigger installation' but do not wait. Expecting poll for status                  ThreadPool.QueueUserWorkItem((object stateInfo) =>                  {                      using (backgroundTracer.Step(XmlTracer.BackgroundTrace' attributes: traceAttributes))                      {                          try                          {                              using (backgroundTracer.Step("Background thread started for {0} installation"' id))                              {                                  _manager.InstallExtension(id' requestInfo.Version' requestInfo.FeedUrl' requestInfo.Type' backgroundTracer' requestInfo.InstallationArgs).Wait();                              }                          }                          finally                          {                              installationSignal.Set();                                // will be a few millionseconds off if task finshed within 15 seconds.                              LogEndEvent(id' (DateTime.UtcNow - startTime)' backgroundTracer);                          }                      }                  });                    SiteExtensionStatus armSettings = new SiteExtensionStatus(_environment.SiteExtensionSettingsPath' id' tracer);                  if (installationSignal.WaitOne(TimeSpan.FromSeconds(15)))                  {                      if (!armSettings.IsRestartRequired(_siteExtensionRoot))                      {                          // only skip polling if current installation doesn`t require restart' to avoid making race condition common                          // TODO: re-visit if we want to skip polling for case that need to restart                          tracer.Trace("Installation finish quick and not require restart' skip async polling' invoking GET to return actual status to caller.");                          return await GetLocalExtension(id);                      }                  }                    // do not log end event here' since it is not done yet                  return Request.CreateResponse(HttpStatusCode.Created' ArmUtils.AddEnvelopeOnArmRequest<SiteExtensionInfo>(result' Request));              }              else              {                  result = await _manager.InstallExtension(id' requestInfo.Version' requestInfo.FeedUrl' requestInfo.Type' tracer' requestInfo.InstallationArgs);                    if (string.Equals(Constants.SiteExtensionProvisioningStateFailed' result.ProvisioningState' StringComparison.OrdinalIgnoreCase))                  {                      SiteExtensionStatus armSettings = new SiteExtensionStatus(_environment.SiteExtensionSettingsPath' id' tracer);                      throw new HttpResponseException(Request.CreateErrorResponse(armSettings.Status' result.Comment));                  }                    var response = Request.CreateResponse(HttpStatusCode.OK' result);                  LogEndEvent(id' (DateTime.UtcNow - startTime)' tracer);                  return response;              }
Magic Number,Kudu.Services.SiteExtensions,SiteExtensionController,C:\repos\projectkudu_kudu\Kudu.Services\SiteExtensions\SiteExtensionController.cs,UpdateArmSettingsForSuccessInstallation,The following statement contains a magic number: using (tracer.Step("Checking if there is any installation finished recently' if there is one' update its status."))              {                  var batchUpdateLock = SiteExtensionBatchUpdateStatusLock.CreateLock(_environment.SiteExtensionSettingsPath);                    bool isAnyUpdate = false;                    try                  {                      batchUpdateLock.LockOperation(() =>                      {                          string[] packageDirs = FileSystemHelpers.GetDirectories(_environment.SiteExtensionSettingsPath);                          foreach (var dir in packageDirs)                          {                              var dirInfo = new DirectoryInfo(dir);   // arm setting folder name is same as package id                              SiteExtensionStatus armSettings = new SiteExtensionStatus(_environment.SiteExtensionSettingsPath' dirInfo.Name' tracer);                              if (string.Equals(armSettings.Operation' Constants.SiteExtensionOperationInstall' StringComparison.OrdinalIgnoreCase)                                  && string.Equals(armSettings.ProvisioningState' Constants.SiteExtensionProvisioningStateSucceeded' StringComparison.OrdinalIgnoreCase))                              {                                  try                                  {                                      armSettings.Operation = null;                                      isAnyUpdate = true;                                      tracer.Trace("Updated {0}"' dir);                                  }                                  catch (Exception ex)                                  {                                      tracer.TraceError(ex);                                      // no-op                                  }                              }                          }                        }' "Updating SiteExtension success status"' TimeSpan.FromSeconds(5));                        return isAnyUpdate;                  }                  catch (LockOperationException)                  {                      return false;                  }              }
Magic Number,Kudu.Services.Settings,SettingsController,C:\repos\projectkudu_kudu\Kudu.Services\Settings\SettingsController.cs,Set,The following statement contains a magic number: try              {                  return _deploymentLock.LockOperation(() =>                  {                      JToken keyToken' valueToken;                      if (newSettings.Count == 2 && newSettings.TryGetValue("key"' out keyToken) && newSettings.TryGetValue("value"' out valueToken))                      {                          string key = keyToken.Value<string>();                            if (String.IsNullOrEmpty(key))                          {                              return Request.CreateResponse(HttpStatusCode.BadRequest);                          }                            _settingsManager.SetValue(key' valueToken.Value<string>());                      }                      else                      {                          foreach (var keyValuePair in newSettings)                          {                              _settingsManager.SetValue(keyValuePair.Key' keyValuePair.Value.Value<string>());                          }                      }                        return Request.CreateResponse(HttpStatusCode.NoContent);                  }' "Updating deployment setting"' TimeSpan.FromSeconds(5));              }              catch (LockOperationException ex)              {                  return Request.CreateErrorResponse(HttpStatusCode.Conflict' ex.Message);              }
Magic Number,Kudu.Services.Settings,SettingsController,C:\repos\projectkudu_kudu\Kudu.Services\Settings\SettingsController.cs,Set,The following statement contains a magic number: try              {                  return _deploymentLock.LockOperation(() =>                  {                      JToken keyToken' valueToken;                      if (newSettings.Count == 2 && newSettings.TryGetValue("key"' out keyToken) && newSettings.TryGetValue("value"' out valueToken))                      {                          string key = keyToken.Value<string>();                            if (String.IsNullOrEmpty(key))                          {                              return Request.CreateResponse(HttpStatusCode.BadRequest);                          }                            _settingsManager.SetValue(key' valueToken.Value<string>());                      }                      else                      {                          foreach (var keyValuePair in newSettings)                          {                              _settingsManager.SetValue(keyValuePair.Key' keyValuePair.Value.Value<string>());                          }                      }                        return Request.CreateResponse(HttpStatusCode.NoContent);                  }' "Updating deployment setting"' TimeSpan.FromSeconds(5));              }              catch (LockOperationException ex)              {                  return Request.CreateErrorResponse(HttpStatusCode.Conflict' ex.Message);              }
