Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kudu.FunctionalTests,DeploymentApisTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApis,The method has 120 lines of code.
Long Method,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The method has 480 lines of code.
Long Parameter List,Kudu.FunctionalTests,LargeRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LargeRepoTests.cs,DeployLargeRepo,The method has 5 parameters. Parameters: repoCloneUrl' defaultBranchName' verificationText' commitId' resourcePath
Long Parameter List,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PostDeploymentAndVerifyUrl,The method has 6 parameters. Parameters: appManager' url' isMercurial' status' content' path
Long Parameter List,Kudu.FunctionalTests,GitRepositoryManagementTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,VerifyDeploymentConfiguration,The method has 5 parameters. Parameters: siteName' targetProject' expectedText' expectedStatus' expectedLog
Long Parameter List,Kudu.FunctionalTests,GitDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployApps,The method has 10 parameters. Parameters: repoCloneUrl' defaultBranchName' verificationText' expectedResponseCode' verificationLogText' expectedStatus' resourcePath' httpMethod' jsonPayload' deleteSCM
Long Parameter List,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyTriggeredJobTriggers,The method has 8 parameters. Parameters: appManager' jobName' expectedNumberOfRuns' expectedStatus' expectedOutput' expectedError' arguments' scheduledTriggeredJob
Long Parameter List,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,AssertTriggeredJobRun,The method has 6 parameters. Parameters: appManager' actualTriggeredJobRun' expectedJobName' expectedStatus' expectedOutput' expectedError
Long Parameter List,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionParallelInstallationTest,The method has 5 parameters. Parameters: feedEndpoint' testPackageId1' testPackageId2' testPackageId3' useSiteExtensionV1
Long Parameter List,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,VerifyUrl,The method has 6 parameters. Parameters: url' content' statusCode' httpMethod' jsonPayload' credentials
Long Parameter List,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,VerifyUrlAsync,The method has 6 parameters. Parameters: url' content' statusCode' httpMethod' jsonPayload' credentials
Long Identifier,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,,The length of the parameter simplePackageJsonWithDependencyContent is 38.
Long Identifier,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,,The length of the parameter permissionDeniedExpectedMessage is 31.
Long Identifier,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the parameter dirAddressWithTerminatingSlash is 30.
Long Identifier,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the parameter fileAddressWithTerminatingSlash is 31.
Long Identifier,Kudu.FunctionalTests,VfsControllerSuite,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerTest.cs,RunIntegrationTest,The length of the parameter putDirectoryAddressWithTerminatingSlash is 39.
Long Identifier,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStartsAfterGoingDown,The length of the parameter expectedVerificationFileContents is 32.
Long Identifier,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,,The length of the parameter ExpectedVerificationFileContent is 31.
Long Statement,Kudu.FunctionalTests,CommandExecutorTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\CommandExecutorTests.cs,VerifyCommand,The length of the statement  "            TestTracer.Trace("Running command - '{0}' on '{1}'"' commandTestSettings.Command' commandTestSettings.WorkingDirectory); " is 120.
Long Statement,Kudu.FunctionalTests,CommandExecutorTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\CommandExecutorTests.cs,VerifyCommand,The length of the statement  "            CommandResult commandResult = appManager.CommandExecutor.ExecuteCommand(commandTestSettings.Command' commandTestSettings.WorkingDirectory).Result; " is 146.
Long Statement,Kudu.FunctionalTests,CommandExecutorTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\CommandExecutorTests.cs,VerifyCommand,The length of the statement  "            TestTracer.Trace("Received result\nOutput\n======\n{0}\nError\n======\n{1}\nExit Code - {2}"' commandResult.Output' commandResult.Error' commandResult.ExitCode); " is 161.
Long Statement,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleZipUrlDeployment,The length of the statement  "                        request.Headers.Referrer = new Uri("https://management.azure.com/subscriptions/sub-id/resourcegroups/rg-name/providers/Microsoft.Web/sites/site-name/extensions/zipdeploy?api-version=2016-03-01"); " is 195.
Long Statement,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSideBySideWithGitRepo,The length of the statement  "                    await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray()); " is 138.
Long Statement,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSideBySideWithGitRepo,The length of the statement  "                    await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray()); " is 138.
Long Statement,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleWarDeploymentWithCustomAppName,The length of the statement  "                await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray()' "webapps/testappname"); " is 120.
Long Statement,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,AssertSuccessfulDeploymentByFilenames,The length of the statement  "            Assert.True(filenameSet.SetEquals(entries.Select(e => e.Name))' string.Join("'"' filenameSet) + " != " + string.Join("'"' entries.Select(e => e.Name))); " is 152.
Long Statement,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledPostDeployment,The length of the statement  "                        await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId); " is 126.
Long Statement,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledPostDeployment,The length of the statement  "                        await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId); " is 126.
Long Statement,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledPostDeployment,The length of the statement  "                        await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId); " is 126.
Long Statement,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledPostDeployment,The length of the statement  "                        await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId); " is 126.
Long Statement,Kudu.FunctionalTests,CustomGitTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\CustomGitTests.cs,CustomGitTest,The length of the statement  "                    @"git init & git config user.email ""kudu@test.org"" & git config user.name ""kudu"" & git add -A & git commit -m""init"""' @"site/wwwroot/sub"); " is 145.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitGetChangeSetReturnsNullIfIdDoesNotExist,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitInitializeCreatesPostCommitHook,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitInitializeCreatesPostCommitHook,The length of the statement  "                string expected = "#!/bin/sh\r\nread i\r\necho $i > pushinfo\r\n\"$KUDU_EXE\" \"$KUDU_APPPATH\" \"$KUDU_MSBUILD\" \"$KUDU_DEPLOYER\"\r\n"; " is 138.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,FetchWithoutConflictOnGitEmptyRepo,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,FetchWithoutConflictOnGitEmptyRepo,The length of the statement  "                Assert.Throws<BranchNotFoundException>(() => gitRepo.FetchWithoutConflict("https://github.com/KuduApps/EmptyGitRepo.git"' "master")); " is 133.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoDoesntExistBeforeInitialize,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoExistsAfterInitialize,The length of the statement  "                var gitRepo = (IGitRepository) Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 162.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoDoesntExistIfCorrupted,The length of the statement  "                var gitRepo = (IGitRepository) Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 162.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoExistIfCorruptedThenInitializedAgain,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoDoesntExistIfGitRepoOnlyOnParentDirectory,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoDoesntExistIfGitRepoOnlyOnParentDirectory,The length of the statement  "                gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 142.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitRepoParsesCommitDetails,The length of the statement  "                    var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' testRepository.Environment' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 161.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitClearLockRemovesHeadAndIndexLocks,The length of the statement  "                var gitRepo = (IGitRepository)Activator.CreateInstance(gitRepoType' env' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 138.
Long Statement,Kudu.FunctionalTests,GitRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryFacts.cs,GitClearLockRemovesHeadAndIndexLocks,The length of the statement  "                Assert.Equal(0' Directory.EnumerateFiles(Path.Combine(testRepo.PhysicalPath' ".git"' "refs"' "heads")' "*.lock"' SearchOption.TopDirectoryOnly).Count()); " is 153.
Long Statement,Kudu.FunctionalTests,MvcApplicationScenario,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InitialCloneTests.cs,ApplyChange,The length of the statement  "                File.WriteAllText(controllerCS' text.Replace("Modify this template to jump-start"' "Modify this new template to jump-start")); " is 126.
Long Statement,Kudu.FunctionalTests,InPlaceSubFolderProjectSubFolderTargetPathSetting,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InPlaceDeploymentTests.cs,Verify,The length of the statement  "                Assert.True(appManager.VfsManager.Exists(@"site\wwwroot\subfolder3")' @"Should have site\repository\subfolder3 folder"); " is 120.
Long Statement,Kudu.FunctionalTests,RepositorySubfolderProjectDefaultTargetPathSetting,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InPlaceDeploymentTests.cs,Verify,The length of the statement  "                Assert.False(appManager.VfsManager.Exists(@"site\wwwroot\subfolder2")' @"Should not have site\wwwroot\subfolder2 folder"); " is 122.
Long Statement,Kudu.FunctionalTests,HelloKuduWithAboluteFolder,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InPlaceDeploymentTests.cs,VerifyUrl,The length of the statement  "                Assert.True(appManager.VfsManager.Exists(@"logFiles\dest\subfolder1\index.htm")' @"Should have logFiles\dest\subfolder1\index.htm file"); " is 137.
Long Statement,Kudu.FunctionalTests,HelloKuduWithAboluteFolder,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InPlaceDeploymentTests.cs,VerifyUrl,The length of the statement  "                Assert.True(appManager.VfsManager.Exists(@"logFiles\dest\subfolder2\index.htm")' @"Should have logFiles\dest\subfolder2\index.htm file"); " is 137.
Long Statement,Kudu.FunctionalTests,DeploymentApisReturn404IfDeploymentIdDoesntExistTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApisReturn404IfDeploymentIdDoesntExist,The length of the statement  "                var ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeleteAsync(id)); " is 120.
Long Statement,Kudu.FunctionalTests,DeploymentApisReturn404IfDeploymentIdDoesntExistTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApisReturn404IfDeploymentIdDoesntExist,The length of the statement  "                ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeployAsync(id' clean: true)); " is 129.
Long Statement,Kudu.FunctionalTests,DeploymentApisReturn404IfDeploymentIdDoesntExistTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApisReturn404IfDeploymentIdDoesntExist,The length of the statement  "                ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.GetLogEntriesAsync(id)); " is 123.
Long Statement,Kudu.FunctionalTests,DeploymentApisReturn404IfDeploymentIdDoesntExistTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApisReturn404IfDeploymentIdDoesntExist,The length of the statement  "                ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.GetLogEntryDetailsAsync(id' "fakeId")); " is 138.
Long Statement,Kudu.FunctionalTests,DeploymentApisReturn404IfDeploymentIdDoesntExistTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApisReturn404IfDeploymentIdDoesntExist,The length of the statement  "                ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.GetDeploymentScriptAsync()); " is 127.
Long Statement,Kudu.FunctionalTests,DeploymentApisTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApis,The length of the statement  "                    var ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeleteAsync(result.Id)); " is 127.
Long Statement,Kudu.FunctionalTests,DeploymentApisTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApis,The length of the statement  "                    var notFoundException = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeployAsync(null)); " is 137.
Long Statement,Kudu.FunctionalTests,DeploymentManagerExtensibilityTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentManagerExtensibility,The length of the statement  "                        InnerHandler = HttpClientHelper.CreateClientHandler(appManager.DeploymentManager.ServiceUrl' appManager.DeploymentManager.Credentials) " is 134.
Long Statement,Kudu.FunctionalTests,DeploymentManagerExtensibilityTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentManagerExtensibility,The length of the statement  "                    var manager = new RemoteDeploymentManager(appManager.DeploymentManager.ServiceUrl' appManager.DeploymentManager.Credentials' handler); " is 134.
Long Statement,Kudu.FunctionalTests,PullApiTestGitHubFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGitHubFormat,The length of the statement  "            string githubPayload = @"{ ""after"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""' ""before"": ""7e2a599e2d28665047ec347ab36731c905c95e8b""'  ""commits"": [ { ""added"": []' ""author"": { ""email"": ""prkrishn@hotmail.com""' ""name"": ""Pranav K""' ""username"": ""pranavkm"" }' ""id"": ""43acf30efa8339103e2bed5c6da1379614b00572""' ""message"": ""Changes from master again""' ""modified"": [ ""Hello.txt"" ]' ""timestamp"": ""2012-12-17T17:32:15-08:00"" } ]' ""compare"": ""https://github.com/KuduApps/GitHookTest/compare/7e2a599e2d28...7e2a599e2d28""' ""created"": false' ""deleted"": false' ""forced"": false' ""head_commit"": { ""added"": [ "".gitignore""' ""SimpleWebApplication.sln""' ""SimpleWebApplication/About.aspx""' ""SimpleWebApplication/About.aspx.cs""' ""SimpleWebApplication/About.aspx.designer.cs""' ""SimpleWebApplication/Account/ChangePassword.aspx""' ""SimpleWebApplication/Account/ChangePassword.aspx.cs""' ""SimpleWebApplication/Account/ChangePassword.aspx.designer.cs""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx.cs""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx.designer.cs""' ""SimpleWebApplication/Account/Login.aspx""' ""SimpleWebApplication/Account/Login.aspx.cs""' ""SimpleWebApplication/Account/Login.aspx.designer.cs""' ""SimpleWebApplication/Account/Register.aspx""' ""SimpleWebApplication/Account/Register.aspx.cs""' ""SimpleWebApplication/Account/Register.aspx.designer.cs""' ""SimpleWebApplication/Account/Web.config""' ""SimpleWebApplication/Default.aspx""' ""SimpleWebApplication/Default.aspx.cs""' ""SimpleWebApplication/Default.aspx.designer.cs""' ""SimpleWebApplication/Global.asax""' ""SimpleWebApplication/Global.asax.cs""' ""SimpleWebApplication/Properties/AssemblyInfo.cs""' ""SimpleWebApplication/Scripts/jquery-1.4.1-vsdoc.js""' ""SimpleWebApplication/Scripts/jquery-1.4.1.js""' ""SimpleWebApplication/Scripts/jquery-1.4.1.min.js""' ""SimpleWebApplication/SimpleWebApplication.csproj""' ""SimpleWebApplication/Site.Master""' ""SimpleWebApplication/Site.Master.cs""' ""SimpleWebApplication/Site.Master.designer.cs""' ""SimpleWebApplication/Styles/Site.css""' ""SimpleWebApplication/Web.Debug.config""' ""SimpleWebApplication/Web.Release.config""' ""SimpleWebApplication/Web.config"" ]' ""author"": { ""email"": ""david.ebbo@microsoft.com""' ""name"": ""davidebbo""' ""username"": ""davidebbo"" }' ""committer"": { ""email"": ""david.ebbo@microsoft.com""' ""name"": ""davidebbo""' ""username"": ""davidebbo"" }' ""distinct"": false' ""id"": ""7e2a599e2d28665047ec347ab36731c905c95e8b""' ""message"": ""Initial""' ""modified"": []' ""removed"": []' ""timestamp"": ""2011-11-21T23:07:42-08:00""' ""url"": ""https://github.com/KuduApps/GitHookTest/commit/7e2a599e2d28665047ec347ab36731c905c95e8b"" }' ""pusher"": { ""name"": ""none"" }' ""ref"": ""refs/heads/foo/blah""' ""repository"": { ""created_at"": ""2012-06-28T00:07:55-07:00""' ""description"": """"' ""fork"": false' ""forks"": 1' ""has_downloads"": true' ""has_issues"": true' ""has_wiki"": true' ""language"": ""ASP""' ""name"": ""GitHookTest""' ""open_issues"": 0' ""organization"": ""KuduApps""' ""owner"": { ""email"": ""kuduapps@hotmail.com""' ""name"": ""KuduApps"" }' ""private"": false' ""pushed_at"": ""2012-06-28T00:11:48-07:00""' ""size"": 188' ""url"": ""https://github.com/KuduApps/SimpleWebApplication""' ""watchers"": 1 } }"; " is 3433.
Long Statement,Kudu.FunctionalTests,PullApiTestBitbucketFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestBitbucketFormat,The length of the statement  "            string bitbucketPayload = @"{ ""canon_url"": ""https://github.com""' ""commits"": [ { ""author"": ""davidebbo""' ""branch"": ""master""' ""files"": [ { ""file"": ""Mvc3Application/Views/Home/Index.cshtml""' ""type"": ""modified"" } ]' ""message"": ""Blah2\n""' ""node"": ""e550351c5188""' ""parents"": [ ""297fcc65308c"" ]' ""raw_author"": ""davidebbo <david.ebbo@microsoft.com>""' ""raw_node"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""' ""revision"": null' ""size"": -1' ""timestamp"": ""2012-09-20 03:11:20""' ""utctimestamp"": ""2012-09-20 01:11:20+00:00"" } ]' ""repository"": { ""absolute_url"": ""/KuduApps/SimpleWebApplication""' ""fork"": false' ""is_private"": false' ""name"": ""Mvc3Application""' ""owner"": ""davidebbo""' ""scm"": ""git""' ""slug"": ""mvc3application""' ""website"": """" }' ""user"": ""davidebbo"" }"; " is 835.
Long Statement,Kudu.FunctionalTests,PullApiTestBitbucketFormatWithMercurialTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestBitbucketFormatWithMercurial,The length of the statement  "            string bitbucketPayload = @"{""canon_url"":""https://bitbucket.org""'""commits"":[{""author"":""pranavkm""'""branch"":""default""'""files"":[{""file"":""Hello.txt""'""type"":""modified""}]'""message"":""Some more changes""'""node"":""0bbefd70c4c4""'""parents"":[""3cb8bf8aec0a""]'""raw_author"":""Pranav <pranavkm@outlook.com>""'""raw_node"":""0bbefd70c4c4213bba1e91998141f6e861cec24d""'""revision"":4'""size"":-1'""timestamp"":""2012-12-17 19:41:28""'""utctimestamp"":""2012-12-17 18:41:28+00:00""}]'""repository"":{""absolute_url"":""/kudutest/hellomercurial/""'""fork"":false'""is_private"":false'""name"":""HelloMercurial""'""owner"":""kudutest""'""scm"":""hg""'""slug"":""hellomercurial""'""website"":""""}'""user"":""kudutest""}"; " is 736.
Long Statement,Kudu.FunctionalTests,PullApiTestBitbucketFormatWithPrivateMercurialRepositoryTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestBitbucketFormatWithPrivateMercurialRepository,The length of the statement  "            string bitbucketPayload = @"{ ""canon_url"": ""https://bitbucket.org""' ""commits"": [ { ""author"": ""pranavkm""' ""branch"": ""Test-Branch""' ""files"": [ { ""file"": ""Hello.txt""' ""type"": ""modified"" } ]' ""message"": ""Hello Mercurial! change""' ""node"": ""ee26963f2e54""' ""parents"": [ ""16ea3237dbcd"" ]' ""raw_author"": ""Pranav <pranavkm@outlook.com>""' ""raw_node"": ""ee26963f2e54b9db5c0cd160600b29c4f7a7eff7""' ""revision"": 10' ""size"": -1' ""timestamp"": ""2012-12-24 18:22:14""' ""utctimestamp"": ""2012-12-24 17:22:14+00:00"" } ]' ""repository"": { ""absolute_url"": ""/kudutest/privatemercurial/""' ""fork"": false' ""is_private"": true' ""name"": ""PrivateMercurial""' ""owner"": ""kudutest""' ""scm"": ""hg""' ""slug"": ""privatemercurial""' ""website"": """" }' ""user"": ""kudutest"" }"; " is 814.
Long Statement,Kudu.FunctionalTests,PullApiTestGitlabHQFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGitlabHQFormat,The length of the statement  "            string payload = @"{""before"": ""a224fc12d7d024812691aa047d5e365385143e83""'""after"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""'""ref"": ""refs/heads/master""'""checkout_sha"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""'""user_id"": 99630'""user_name"": ""Suwat Bodin""'""project_id"": 171383'""repository"": {""name"": ""SimpleWebApplication""'""url"": ""git@gitlab.com:KuduApps/SimpleWebApplication.git""'""description"": """"'""homepage"": ""https://gitlab.com/KuduApps/SimpleWebApplication""'""git_http_url"": ""https://gitlab.com/KuduApps/SimpleWebApplication.git""'""git_ssh_url"": ""git@gitlab.com:KuduApps/SimpleWebApplication.git""'""visibility_level"": 20}'""commits"": [{""id"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""'""message"": ""Settings as content file\n""'""timestamp"": ""2011-11-29T15:21:02-08:00""'""url"": ""https://gitlab.com/KuduApps/SimpleWebApplication/commit/ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""'""author"": {""name"": ""davidebbo""'""email"": ""david.ebbo@microsoft.com""}}]'""total_commits_count"": 1}"; " is 1050.
Long Statement,Kudu.FunctionalTests,PullApiTestGitlabHQFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGitlabHQFormat,The length of the statement  "                await DeployPayloadHelperAsync(appManager' client => client.PostAsync("deploy"' new StringContent(payload))' isContinuous: true); " is 129.
Long Statement,Kudu.FunctionalTests,PullApiTestCodebaseFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestCodebaseFormat,The length of the statement  "            string payload = @"{ ""before"":""7e2a599e2d28665047ec347ab36731c905c95e8b""' ""after"":""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""' ""ref"":""refs/heads/master""' ""repository"":{ ""name"":""testing""' ""public_access"":true' ""url"":""http://test.codebasehq.com/projects/test-repositories/repositories/git1""' ""clone_urls"": {""ssh"": ""git@codebasehq.com:test/test-repositories/git1.git""' ""http"": ""https://github.com/KuduApps/SimpleWebApplication""}}}"; " is 462.
Long Statement,Kudu.FunctionalTests,PullApiTestKilnHgFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestKilnHgFormat,The length of the statement  "            string kilnPayload = @"{ ""commits"": [ { ""author"": ""Brian Surowiec <xtorted@optonline.net>""' ""branch"": ""default""' ""id"": ""0bbefd70c4c4213bba1e91998141f6e861cec24d""' ""message"": ""more fun text""' ""revision"": 20' ""tags"": [ ""tip"" ]' ""timestamp"": ""1/16/2013 3:32:04 AM""' ""url"": ""https://13degrees.kilnhg.com/Code/Kudu-Public/Group/Site/History/d2415cbaa78e"" } ]' ""pusher"": { ""accesstoken"": false' ""email"": ""xtorted@optonline.net""' ""fullName"": ""Brian Surowiec"" }' ""repository"": { ""central"": true' ""description"": """"' ""id"": 113336' ""name"": ""Site""' ""url"": ""https://bitbucket.org/kudutest/hellomercurial/"" } }"; " is 660.
Long Statement,Kudu.FunctionalTests,PullApiTestVsoFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestVsoFormat,The length of the statement  "            string payload = @"{ ""publisherId"": ""tfs""' ""resource"": { ""repository"": { ""remoteUrl"": ""https://github.com/KuduApps/HelloKudu"" } } }"; " is 145.
Long Statement,Kudu.FunctionalTests,PullApiTestGenericFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGenericFormat,The length of the statement  "            string payload = @"{ ""oldRef"": ""0000000000000000000""' ""newRef"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""' ""url"": ""https://github.com/KuduApps/SimpleWebApplication.git""' ""deployer"" : ""CodePlex""' ""branch"":""master""  }"; " is 238.
Long Statement,Kudu.FunctionalTests,PullApiTestGenericFormatTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGenericFormat,The length of the statement  "                await DeployPayloadHelperAsync(appManager' client => client.PostAsync("deploy"' new FormUrlEncodedContent(post))' isContinuous: true); " is 134.
Long Statement,Kudu.FunctionalTests,PullApiTestGenericFormatCustomBranchTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGenericFormatCustomBranch,The length of the statement  "            string payload = @"{ ""oldRef"": ""0000000000000000000""' ""newRef"": ""b4bd5b73ec4c15019d41d16e418c3017b70b3796""' ""url"": ""https://github.com/KuduApps/RepoWithMultipleBranches.git""' ""deployer"" : ""CodePlex""' branch: ""test"" }"; " is 236.
Long Statement,Kudu.FunctionalTests,PullApiTestGenericFormatCustomBranchTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGenericFormatCustomBranch,The length of the statement  "                await DeployPayloadHelperAsync(appManager' client => client.PostAsync("deploy"' new FormUrlEncodedContent(post))' isContinuous: true); " is 134.
Long Statement,Kudu.FunctionalTests,DeployingBranchThatExistsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeployingBranchThatExists,The length of the statement  "            string payload = @"{ ""url"": ""https://github.com/KuduApps/RepoWithMultipleBranches.git""' ""deployer"" : ""CodePlex""' branch: ""test""' newRef: ""ad21595c668f3de813463df17c04a3b23065fedc"" }"; " is 195.
Long Statement,Kudu.FunctionalTests,DeployingBranchThatExistsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeployingBranchThatExists,The length of the statement  "                await DeployPayloadHelperAsync(appManager' client => client.PostAsync("deploy"' new FormUrlEncodedContent(post))' isContinuous: true); " is 134.
Long Statement,Kudu.FunctionalTests,PullApiTestSimpleFormatWithAsyncTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestSimpleFormatWithAsync,The length of the statement  "                await DeployPayloadHelperAsync(appManager' client => client.PostAsJsonAsync("deploy?isAsync=true"' payload)' isContinuous: true); " is 129.
Long Statement,Kudu.FunctionalTests,PullApiTestGitSimpleFormatWithSpecificCommitIdTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGitSimpleFormatWithSpecificCommitId,The length of the statement  "                await PostDeploymentAndVerifyUrl(appManager' gitUrl + "#58063e4"' false' DeployStatus.Success' "<h1>Hello again Kudu</h1>"); " is 124.
Long Statement,Kudu.FunctionalTests,PullApiTestGitSimpleFormatWithSpecificCommitIdTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestGitSimpleFormatWithSpecificCommitId,The length of the statement  "                var error = await KuduAssert.ThrowsUnwrappedAsync<HttpUnsuccessfulRequestException>(() => PostDeploymentAndVerifyUrl(appManager' gitUrl + "#" + badRevision' false' DeployStatus.Failed)); " is 186.
Long Statement,Kudu.FunctionalTests,PullApiTestHgSimpleFormatWithSpecificCommitIdTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestHgSimpleFormatWithSpecificCommitId,The length of the statement  "                await PostDeploymentAndVerifyUrl(appManager' hgUrl + "#e39d1ff"' true' DeployStatus.Success' "Hello mercurial Commit 1"' "/Hello.txt"); " is 135.
Long Statement,Kudu.FunctionalTests,PullApiTestHgSimpleFormatWithSpecificCommitIdTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestHgSimpleFormatWithSpecificCommitId,The length of the statement  "                await PostDeploymentAndVerifyUrl(appManager' hgUrl + "#478b0d4"' true' DeployStatus.Success' "Hello mercurial Commit 2"' "/Hello.txt"); " is 135.
Long Statement,Kudu.FunctionalTests,PullApiTestHgSimpleFormatWithSpecificCommitIdTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestHgSimpleFormatWithSpecificCommitId,The length of the statement  "                var error = await KuduAssert.ThrowsUnwrappedAsync<HttpUnsuccessfulRequestException>(() => PostDeploymentAndVerifyUrl(appManager' hgUrl + "#" + badRevision' true' DeployStatus.Failed)); " is 184.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoWithLongPathTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestRepoWithLongPath,The length of the statement  "                KuduAssert.ContainsAny(new[] { "unable to create file symfony"' "The data area passed to a system call is too small" }' exception.Message); " is 139.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoWithLongPathTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,PullApiTestRepoWithLongPath,The length of the statement  "                KuduAssert.ContainsAny(new[] { "unable to create file symfony"' "The data area passed to a system call is too small" }' details[0].Message); " is 140.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("http://google.com/"' new [] {"fatal:.*http://.*google.com.* not found"' "\\[LibGit2SharpException: Too many redirects or authentication replays\\]"}' null); " is 190.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("http://google.com/"' new [] {"abort: 'http://www.google.com/' does not appear to be an hg repository"}' "hg"); " is 144.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("InvalidScheme://abcdefghigkl.com/"' new [] {"fatal: Unable to find remote helper for 'InvalidScheme'"}' null); " is 144.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("InvalidScheme://abcdefghigkl.com/"' new [] {"abort: repository InvalidScheme://abcdefghigkl.com/ not found"}' "hg"); " is 150.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("http://abcdefghigkl.com/"' new [] {"Could.*n.*t resolve host.*abcdefghigkl.com"' "LibGit2SharpException: failed to send request: The server name or address could not be resolved"' "LibGit2SharpException: Request failed with status code: 502"}' null); " is 284.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("http://abcdefghigkl.com/"' new [] {"abort: error: getaddrinfo failed.*hg.exe pull"}' "hg"); " is 125.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://abcdefghigkl.com/"' new[] { "Could.*n.*t resolve host.*abcdefghigkl.com"' "LibGit2SharpException: failed to send request: The server name or address could not be resolved"' "LibGit2SharpException: Request failed with status code: 502"}' null); " is 285.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://abcdefghigkl.com/"' new [] {"abort: error: getaddrinfo failed.*hg.exe pull"}' "hg"); " is 126.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("git@abcdefghigkl.com:Invalid/Invalid.git"' new [] { "no address associated with name"' "Could not resolve hostname" }' null); " is 159.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("ssh://hg@abcdefghigkl.com/Invalid/Invalid.git"' new [] {"abort: no suitable response from remote hg.*hg.exe pull"}' "hg"); " is 156.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            // yield return new RepoInvalidInfo("https://github.com/KuduApps/HelloKudu.git"' "abort: HTTP Error 406: Not Acceptable.*hg.exe pull https://github.com/KuduApps/HelloKudu.git"' "hg"); " is 183.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://bitbucket.org/kudutest/hellomercurial/"' new [] {"fatal:.*https://bitbucket.org/kudutest/hellomercurial.* not found"' "\\[LibGit2SharpException: Request failed with status code: 404\\]"}' null); " is 236.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://github.com/Invalid/Invalid.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 206.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://github.com/KuduQAOrg/Invalid.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 208.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://github.com/KuduQAOrg/PrivateSubModule.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 217.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://KuduQAOrg@github.com/KuduQAOrg/PrivateSubModule.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 227.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://wrongusr@github.com/KuduQAOrg/PrivateSubModule.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 226.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://KuduQAOrg:wrongpwd@github.com/KuduQAOrg/PrivateSubModule.git"' new [] {"fatal: Authentication failed.*git.exe fetch external"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 245.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://bitbucket.org/Invalid/Invalid.git"' new [] {"fatal:.*https://bitbucket.org/Invalid/Invalid.git.* not found"' "\\[LibGit2SharpException: Request failed with status code: 404\\]"}' null); " is 227.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://bitbucket.org/kudutest/Invalid.git"' new [] {"fatal:.*https://bitbucket.org/kudutest/Invalid.git.* not found"' "\\[LibGit2SharpException: Request failed with status code: 404\\]"}' null); " is 229.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://bitbucket.org/kudutest/jeanprivate.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 214.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://kudutest@bitbucket.org/kudutest/jeanprivate.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 223.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://wrongusr@bitbucket.org/kudutest/jeanprivate.git"' new [] {"fatal: Authentication failed.*git.exe fetch"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 223.
Long Statement,Kudu.FunctionalTests,PullApiTestRepoInvalidUrlTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,GetRepoInvalidInfos,The length of the statement  "            yield return new RepoInvalidInfo("https://kudutest:wrongpwd@bitbucket.org/kudutest/jeanprivate.git"' new [] {"fatal: Authentication failed.*git.exe fetch external"' "\\[LibGit2SharpException: Request failed with status code: 401\\]"}' null); " is 241.
Long Statement,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,CreateClient,The length of the statement  "            HttpClientHandler handler = HttpClientHelper.CreateClientHandler(appManager.ServiceUrl' appManager.DeploymentManager.Credentials); " is 130.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ConstructorTest,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ConstructorTest,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ConstructorTest,The length of the statement  "                        var ex = Assert.Throws<HttpUnsuccessfulRequestException>(() => client.GetAsync("diagnostics/settings/trace_level").Result.EnsureSuccessful()); " is 142.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ProcessApiTests,The length of the statement  "                var notfound = await KuduAssert.ThrowsUnwrappedAsync<HttpUnsuccessfulRequestException>(() => appManager.ProcessManager.GetProcessAsync(99999)); " is 143.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ProcessApiTests,The length of the statement  "                await KuduAssert.ThrowsUnwrappedAsync<HttpRequestException>(() => appManager.ProcessManager.KillProcessAsync(currentId)); " is 121.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,SetGetDeleteValue,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,SetGetDeleteValue,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,SetGetDeleteValue,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,SetGetDeleteValue,The length of the statement  "                        KeyValuePair<string' string> updated = values[0] = new KeyValuePair<string' string>(values[0].Key' Guid.NewGuid().ToString()); " is 126.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,DiagnosticsSettingsExpectedValuesReturned,The length of the statement  "                    using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,VerifyValues,The length of the statement  "            using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,VerifyValues,The length of the statement  "                using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,VerifyValues,The length of the statement  "                        var ex = Assert.Throws<HttpUnsuccessfulRequestException>(() => client.GetAsync("diagnostics/settings/" + value.Key).Result.EnsureSuccessful()); " is 143.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,DiagnosticsDumpTests,The length of the statement  "                using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials)) " is 122.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,AssertLogEntry,The length of the statement  "            Assert.Equal(DateTimeOffset.Parse(timeStamp' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal)' entry.TimeStamp); " is 125.
Long Statement,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,WriteLogText,The length of the statement  "                    String.Format("For {0}' Expected Status Code: {1} Actual Status Code: {2}. \r\n Response: {3}"' siteUrl' 200' response.StatusCode' responseBody)); " is 146.
Long Statement,Kudu.FunctionalTests,DropboxTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DropboxTests.cs,GetOAuthInfo,The length of the statement  "            using (var reader = new JsonTextReader(new StreamReader(assembly.GetManifestResourceStream(String.Concat("Kudu.FunctionalTests.dropbox."' appname' "oauth.json"))))) " is 164.
Long Statement,Kudu.FunctionalTests,SimpleWapWithInlineCommandTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushSimpleWapWithInlineCommand,The length of the statement  "command = msbuild SimpleWebApplication/SimpleWebApplication.csproj /t:pipelinePreDeployCopyAllFilesToOneFolder /p:_PackageTempDir=""%DEPLOYMENT_TARGET%"";AutoParameterizationWebConfigConnectionStrings=false;Configuration=Debug;SolutionDir=""%DEPLOYMENT_SOURCE%"""); " is 265.
Long Statement,Kudu.FunctionalTests,SimpleWapWithFailingCustomDeploymentScriptTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushSimpleWapWithFailingCustomDeploymentScript,The length of the statement  "                    KuduAssert.VerifyLogOutput(appManager' results[0].Id' ">bogus"' "'bogus' is not recognized as an internal or external command"); " is 128.
Long Statement,Kudu.FunctionalTests,CommandSettingOverridesDotDeploymentFileTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,CommandSettingOverridesDotDeploymentFile,The length of the statement  "                    await appManager.SettingsManager.SetValue("COMMAND"' "echo test from CommandSettingOverridesDotDeploymentFile & set project"); " is 126.
Long Statement,Kudu.FunctionalTests,CommandSettingOverridesDotDeploymentFileTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,CommandSettingOverridesDotDeploymentFile,The length of the statement  "                    KuduAssert.VerifyLogOutput(appManager' results[0].Id' "test from CommandSettingOverridesDotDeploymentFile"' "myproject"); " is 121.
Long Statement,Kudu.FunctionalTests,CommandSettingOverridesDotDeploymentFileTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,CommandSettingOverridesDotDeploymentFile,The length of the statement  "                    KuduAssert.VerifyLogOutputWithUnexpected(appManager' results[0].Id' ">bogus"' "'bogus' is not recognized as an internal or external command"); " is 142.
Long Statement,Kudu.FunctionalTests,WarningsAsErrorsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,WarningsAsErrors,The length of the statement  "                    Assert.True(deployResult.GitTrace.Contains("Error - Changes committed to remote repository but deployment to website failed")); " is 127.
Long Statement,Kudu.FunctionalTests,DeletesToRepositoryArePropagatedForWapsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,DeletesToRepositoryArePropagatedForWaps,The length of the statement  "                    File.WriteAllText(projectPath' File.ReadAllText(projectPath).Replace(@"<Compile Include=""Controllers\AccountController.cs"" />"' "")); " is 135.
Long Statement,Kudu.FunctionalTests,HangProcessTestTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,HangProcessTest,The length of the statement  "                    Assert.Contains("remote: Command 'starter.cmd simplesleep.exe ...' was aborted due to no output nor CPU activity for"' trace); " is 126.
Long Statement,Kudu.FunctionalTests,HangProcessTestTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,HangProcessTest,The length of the statement  "                    Assert.False(Process.GetProcesses().Any(p => p.ProcessName.Equals("simplesleep"' StringComparison.OrdinalIgnoreCase))' "SimpleSleep should have been terminated!"); " is 163.
Long Statement,Kudu.FunctionalTests,WaitForUserInputProcessTestTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,WaitForUserInputProcessTest,The length of the statement  "                    Assert.Contains("remote: Command 'starter.cmd waitforinput.ba ...' was aborted due to no output nor CPU activity for"' trace); " is 126.
Long Statement,Kudu.FunctionalTests,HookForbiddenForSomeScmTypesTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,HookForbiddenForSomeScmTypes,The length of the statement  "            string bitbucketPayload = @"{ ""canon_url"": ""https://github.com""' ""commits"": [ { ""author"": ""davidebbo""' ""branch"": ""master""' ""files"": [ { ""file"": ""Mvc3Application/Views/Home/Index.cshtml""' ""type"": ""modified"" } ]' ""message"": ""Blah2\n""' ""node"": ""e550351c5188""' ""parents"": [ ""297fcc65308c"" ]' ""raw_author"": ""davidebbo <david.ebbo@microsoft.com>""' ""raw_node"": ""ea1c6d7ea669c816dd5f86206f7b47b228fdcacd""' ""revision"": null' ""size"": -1' ""timestamp"": ""2012-09-20 03:11:20""' ""utctimestamp"": ""2012-09-20 01:11:20+00:00"" } ]' ""repository"": { ""absolute_url"": ""/KuduApps/SimpleWebApplication""' ""fork"": false' ""is_private"": false' ""name"": ""Mvc3Application""' ""owner"": ""davidebbo""' ""scm"": ""git""' ""slug"": ""mvc3application""' ""website"": """" }' ""user"": ""davidebbo"" }"; " is 835.
Long Statement,Kudu.FunctionalTests,HookForbiddenForSomeScmTypesTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,HookForbiddenForSomeScmTypes,The length of the statement  "            string githubPayload = @"{ ""after"": ""7e2a599e2d28665047ec347ab36731c905c95e8b""' ""before"": ""7e2a599e2d28665047ec347ab36731c905c95e8b""'  ""commits"": [ { ""added"": []' ""author"": { ""email"": ""prkrishn@hotmail.com""' ""name"": ""Pranav K""' ""username"": ""pranavkm"" }' ""id"": ""43acf30efa8339103e2bed5c6da1379614b00572""' ""message"": ""Changes from master again""' ""modified"": [ ""Hello.txt"" ]' ""timestamp"": ""2012-12-17T17:32:15-08:00"" } ]' ""compare"": ""https://github.com/KuduApps/GitHookTest/compare/7e2a599e2d28...7e2a599e2d28""' ""created"": false' ""deleted"": false' ""forced"": false' ""head_commit"": { ""added"": [ "".gitignore""' ""SimpleWebApplication.sln""' ""SimpleWebApplication/About.aspx""' ""SimpleWebApplication/About.aspx.cs""' ""SimpleWebApplication/About.aspx.designer.cs""' ""SimpleWebApplication/Account/ChangePassword.aspx""' ""SimpleWebApplication/Account/ChangePassword.aspx.cs""' ""SimpleWebApplication/Account/ChangePassword.aspx.designer.cs""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx.cs""' ""SimpleWebApplication/Account/ChangePasswordSuccess.aspx.designer.cs""' ""SimpleWebApplication/Account/Login.aspx""' ""SimpleWebApplication/Account/Login.aspx.cs""' ""SimpleWebApplication/Account/Login.aspx.designer.cs""' ""SimpleWebApplication/Account/Register.aspx""' ""SimpleWebApplication/Account/Register.aspx.cs""' ""SimpleWebApplication/Account/Register.aspx.designer.cs""' ""SimpleWebApplication/Account/Web.config""' ""SimpleWebApplication/Default.aspx""' ""SimpleWebApplication/Default.aspx.cs""' ""SimpleWebApplication/Default.aspx.designer.cs""' ""SimpleWebApplication/Global.asax""' ""SimpleWebApplication/Global.asax.cs""' ""SimpleWebApplication/Properties/AssemblyInfo.cs""' ""SimpleWebApplication/Scripts/jquery-1.4.1-vsdoc.js""' ""SimpleWebApplication/Scripts/jquery-1.4.1.js""' ""SimpleWebApplication/Scripts/jquery-1.4.1.min.js""' ""SimpleWebApplication/SimpleWebApplication.csproj""' ""SimpleWebApplication/Site.Master""' ""SimpleWebApplication/Site.Master.cs""' ""SimpleWebApplication/Site.Master.designer.cs""' ""SimpleWebApplication/Styles/Site.css""' ""SimpleWebApplication/Web.Debug.config""' ""SimpleWebApplication/Web.Release.config""' ""SimpleWebApplication/Web.config"" ]' ""author"": { ""email"": ""david.ebbo@microsoft.com""' ""name"": ""davidebbo""' ""username"": ""davidebbo"" }' ""committer"": { ""email"": ""david.ebbo@microsoft.com""' ""name"": ""davidebbo""' ""username"": ""davidebbo"" }' ""distinct"": false' ""id"": ""7e2a599e2d28665047ec347ab36731c905c95e8b""' ""message"": ""Initial""' ""modified"": []' ""removed"": []' ""timestamp"": ""2011-11-21T23:07:42-08:00""' ""url"": ""https://github.com/KuduApps/GitHookTest/commit/7e2a599e2d28665047ec347ab36731c905c95e8b"" }' ""pusher"": { ""name"": ""none"" }' ""ref"": ""refs/heads/master""' ""repository"": { ""created_at"": ""2012-06-28T00:07:55-07:00""' ""description"": """"' ""fork"": false' ""forks"": 1' ""has_downloads"": true' ""has_issues"": true' ""has_wiki"": true' ""language"": ""ASP""' ""name"": ""GitHookTest""' ""open_issues"": 0' ""organization"": ""KuduApps""' ""owner"": { ""email"": ""kuduapps@hotmail.com""' ""name"": ""KuduApps"" }' ""private"": false' ""pushed_at"": ""2012-06-28T00:11:48-07:00""' ""size"": 188' ""url"": ""https://github.com/KuduApps/SimpleWebApplication""' ""watchers"": 1 } }"; " is 3431.
Long Statement,Kudu.FunctionalTests,GitRepositoryManagementTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,CreateClient,The length of the statement  "            HttpClientHandler handler = HttpClientHelper.CreateClientHandler(appManager.ServiceUrl' appManager.DeploymentManager.Credentials); " is 130.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,HgGetChangeSetReturnsNullIfIdDoesNotExist,The length of the statement  "                var hgRepo = new HgRepository(testRepository.PhysicalPath' ""' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 128.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,HgExecutableClonesRepository,The length of the statement  "                var hgRepo = new HgRepository(testRepository.PhysicalPath' ""' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 128.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,HgRepositoryCanFetchBranchFromRemoteRepository,The length of the statement  "                var hgRepo = new HgRepository(testRepository.PhysicalPath' ""' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 128.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,ChangeLogFromHgRepositoryAreAccurate,The length of the statement  "                var hgRepo = new HgRepository(testRepository.PhysicalPath' ""' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 128.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,FetchWithoutConflictOnEmptyRepoReturnsFalse,The length of the statement  "                var hgRepo = new HgRepository(testRepository.PhysicalPath' ""' new MockDeploymentSettingsManager()' NullTracerFactory.Instance); " is 128.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,FetchWithoutConflictOnEmptyRepoReturnsFalse,The length of the statement  "                Assert.Throws<BranchNotFoundException>(() => hgRepo.FetchWithoutConflict("https://bitbucket.org/kudutest/emptyhgrepo"' "default")); " is 131.
Long Statement,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,FetchWithoutConflictMessageMatchesEmbeddedErrorString,The length of the statement  "                var ex = Assert.Throws<CommandLineException>(() => executable.Execute(NullTracer.Instance' "pull https://bitbucket.org/kudutest/hellomercurial")); " is 146.
Long Statement,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamBasic,The length of the statement  "                using (var waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamBasic").GetStream().Result)) " is 124.
Long Statement,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The length of the statement  "                using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result)) " is 141.
Long Statement,Kudu.FunctionalTests,WebApiAppTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployWebApiApp,The length of the statement  "            PushAndDeployApps("Dev11_Net45_Mvc4_WebAPI"' "master"' "HelloWorld"' HttpStatusCode.OK' ""' resourcePath: "api/values"' httpMethod: "POST"' jsonPayload: "\"HelloWorld\""); " is 171.
Long Statement,Kudu.FunctionalTests,NodeAppExpressTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployNodeAppExpress,The length of the statement  "            PushAndDeployApps("Express-Template"' "master"' "Modify this template to jump-start your Node.JS Express Web Pages application"' HttpStatusCode.OK' ""); " is 152.
Long Statement,Kudu.FunctionalTests,CustomDeploymentScriptShouldHaveDeploymentSettingTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,CustomDeploymentScriptShouldHaveDeploymentSetting,The length of the statement  "            var expectedLogFeedback = "Using custom deployment setting for {0} custom value is '{1}'.".FormatCurrentCulture(kuduSetVar' kuduSetVarText); " is 140.
Long Statement,Kudu.FunctionalTests,CustomDeploymentScriptShouldHaveDeploymentSettingTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,CustomDeploymentScriptShouldHaveDeploymentSetting,The length of the statement  "                var ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.GetDeploymentScriptAsync()); " is 131.
Long Statement,Kudu.FunctionalTests,CustomDeploymentScriptShouldHaveDeploymentSettingTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,CustomDeploymentScriptShouldHaveDeploymentSetting,The length of the statement  "                Assert.Contains("Operation only supported if not using a custom deployment script"' ex.ResponseMessage.ExceptionMessage); " is 121.
Long Statement,Kudu.FunctionalTests,MVCAppWithLatestNugetTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployMVCAppWithLatestNuget,The length of the statement  "            PushAndDeployApps("MVCAppWithLatestNuget"' "master"' "MVCAppWithLatestNuget"' HttpStatusCode.OK' "Deployment successful"); " is 122.
Long Statement,Kudu.FunctionalTests,MVCAppWithNuGetAutoRestoreTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployMVCAppWithNuGetAutoRestore,The length of the statement  "            PushAndDeployApps("MvcApplicationWithNuGetAutoRestore"' "master"' "MvcApplicationWithNuGetAutoRestore"' HttpStatusCode.OK' "Deployment successful"); " is 148.
Long Statement,Kudu.FunctionalTests,MvcAppWithAutoRestoreFailsIfRestoreFailsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployMvcAppWithAutoRestoreFailsIfRestoreFails,The length of the statement  "            PushAndDeployApps("MvcApplicationWithNuGetAutoRestore"' "bad-config"' null' HttpStatusCode.OK' "Unable to find version '1.2.34' of package 'Package.That.Should.NotExist'."' DeployStatus.Failed); " is 194.
Long Statement,Kudu.FunctionalTests,MvcAppWithTypeScriptTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployMvcAppWithTypeScript,The length of the statement  "            PushAndDeployApps("MvcAppWithTypeScript"' "master"' "Hello' TypeScript Footer!"' HttpStatusCode.OK' "Deployment successful"' resourcePath: "/Scripts/ts/FooterUpdater.js"); " is 171.
Long Statement,Kudu.FunctionalTests,AspNetCoreRC4WebApiVsSlnTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployAspNetCoreRC4WebApiVsSln,The length of the statement  "            PushAndDeployApps("AspNetCoreRC4WebApiVsSln"' "master"' "[\"classlibrary\"'\"netstandard\"]"' HttpStatusCode.OK' "Deployment successful"' resourcePath: "/api/values"); " is 167.
Long Statement,Kudu.FunctionalTests,AspNetCore21WebApiCliTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushAndDeployAspNetCore21WebApiCli,The length of the statement  "            PushAndDeployApps("AspNetCore2.1.0WebApiCli"' "master"' "[\"value1\"'\"value2\"]"' HttpStatusCode.OK' "Deployment successful"' resourcePath: "/api/values"); " is 156.
Long Statement,Kudu.FunctionalTests,SelectNodeVersionFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SelectNodeVersionFacts.cs,TestMismatchBetweenAvailableVersionsAndRequestedVersions,The length of the statement  "                    Assert.Contains("No available node.js version matches application's version constraint of '0.1.0'"' deployResult.GitTrace); " is 123.
Long Statement,Kudu.FunctionalTests,SettingsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SettingsApiFacts.cs,SetGetDeleteValue,The length of the statement  "                    var ex = KuduAssert.ThrowsUnwrapped<HttpUnsuccessfulRequestException>(() => appManager.SettingsManager.GetValue("x").Wait()); " is 125.
Long Statement,Kudu.FunctionalTests,SettingsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SettingsApiFacts.cs,GetUndefinedKeyThrows404,The length of the statement  "                    var ex = KuduAssert.ThrowsUnwrapped<HttpUnsuccessfulRequestException>(() => appManager.SettingsManager.GetValue("x").Wait()); " is 125.
Long Statement,Kudu.FunctionalTests,LiveScmEditorControllerTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\LiveScmEditorControllerTest.cs,VfsScmIntegrationTest,The length of the statement  "                VfsControllerBaseTest suite = new VfsControllerBaseTest(appManager.LiveScmVfsManager' testConflictingUpdates: true' deploymentClient: appManager.VfsManager); " is 157.
Long Statement,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the statement  "                deploymentFileAddress = string.Format("{0}{1}site{1}wwwroot{1}{2}{1}{3}"' DeploymentBaseAddress' _segmentDelimiter' dir' file); " is 127.
Long Statement,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the statement  "                customDeploymentFileAddress = string.Format("{0}{1}site{1}wwwroot{1}test{1}{2}{1}{3}"' DeploymentBaseAddress' _segmentDelimiter' dir' file); " is 140.
Long Statement,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the statement  "                    // Conflict can happen due to multiple threads pass LibGit2Sharp cleanup step (one after another) and race to write to the same file. " is 133.
Long Statement,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The length of the statement  "                       $"Status code expected to be either {HttpStatusCode.NoContent}' {HttpStatusCode.PreconditionFailed} or {HttpStatusCode.Conflict} but got {concurrentResponse.StatusCode}"); " is 171.
Long Statement,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,HttpSendAsync,The length of the statement  "            return await HttpClientRunAsync("Send"' httpRequestMessage.RequestUri.ToString()' c => c.SendAsync(httpRequestMessage)' client); " is 128.
Long Statement,Kudu.FunctionalTests,VfsControllerTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerTest.cs,VfsSpecialFoldersTest,The length of the statement  "                Assert.False(appManager.VfsManager.Exists("/vfs/SystemDrive/NotFound/")' "'/vfs/SystemDrive/NotFound/' must not exists"); " is 121.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,PushAndRedeployContinuousJobAsConsoleWorker,The length of the statement  "                    PushAndVerifyConsoleWorker(appManager' testRepository' new string[] { ExpectedVerificationFileContent' ExpectedChangedFileContent }' expectedDeployments: 2); " is 157.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,DeleteConsoleWorkerExecutableStopsIt,The length of the statement  "                    var workerProcess = processes.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,DeleteConsoleWorkerExecutableStopsIt,The length of the statement  "                            var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStopsWhenDisabledStartsWhenEnabled,The length of the statement  "                    var workerProcess = processes.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The length of the statement  "                VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\""); " is 139.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The length of the statement  "                appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}"); " is 128.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The length of the statement  "                    "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month); " is 186.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobAcceptsArguments,The length of the statement  "                VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo test arguments"' expectedError: null' arguments: "test arguments"); " is 135.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The length of the statement  "                appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait(); " is 158.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobEnabled,The length of the statement  "                    var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobDisabled,The length of the statement  "                    var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyVerificationFile,The length of the statement  "            string[] verificationFileNames = logFiles.Where(logFile => logFile.Name.StartsWith("verification.txt"' StringComparison.OrdinalIgnoreCase)).Select(logFile => logFile.Name).ToArray(); " is 182.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyVerificationFile,The length of the statement  "                    string[] lines = verificationFileContent.Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,AssertUrlContentAsync,The length of the statement  "                    Assert.True(content.IndexOf(expectedContent' StringComparison.OrdinalIgnoreCase) >= 0' "Expected content: " + expectedContent); " is 127.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionV2AndV3FeedTests,The length of the statement  "                Assert.True(results.Count() > 0' string.Format("GetRemoteExtensions for '{0}' package result should > 0"' testPackageId)); " is 122.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionV2AndV3FeedTests,The length of the statement  "                SiteExtensionInfo result = await (await manager.GetRemoteExtension(testPackageId' feedUrl: feedEndpoint)).Content.ReadAsAsync<SiteExtensionInfo>(); " is 147.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionV2AndV3FeedTests,The length of the statement  "                result = await (await manager.GetRemoteExtension(testPackageId' version: testPackageVersion' feedUrl: feedEndpoint)).Content.ReadAsAsync<SiteExtensionInfo>(); " is 158.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionV2AndV3FeedTests,The length of the statement  "                Assert.False(responseMessage.Headers.Contains(Constants.SiteOperationHeaderKey)); // only ARM request will have SiteOperation header " is 132.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionBasicTests,The length of the statement  "                List<SiteExtensionInfo> results = await (await manager.GetRemoteExtensions()).Content.ReadAsAsync<List<SiteExtensionInfo>>(); " is 125.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionBasicTests,The length of the statement  "                Assert.True(expected != null' string.Format(CultureInfo.InvariantCulture' "Should able to find {0} from search result"' expectedId)); " is 133.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionBasicTests,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}' and installationArgs '{1}'"' expectedId' installationArgument); " is 120.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionBasicTests,The length of the statement  "                Assert.False(results.Exists(ext => ext.Id == expected.Id)' "After deletion extension " + expected.Id + " should not exist."); " is 125.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionBasicTests,The length of the statement  "                responseMessage = await manager.InstallExtension("filecounter"' version: "1.0.19"' feedUrl: "https://www.nuget.org/api/v2/"' installationArgs:installationArgument); " is 164.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallUninstallAsyncTest,The length of the statement  "                SiteExtensionInfo latestPackage = await (await manager.GetRemoteExtension(testPackageId' feedUrl: feedEndpoint)).Content.ReadAsAsync<SiteExtensionInfo>(); " is 154.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallUninstallAsyncTest,The length of the statement  "                TestTracer.Trace("Install package '{0}'-'{1}' fresh from '{2}' async"' testPackageId' latestPackage.Version' feedEndpoint); " is 123.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallUninstallAsyncTest,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(id: testPackageId' version: latestPackage.Version' feedUrl: feedEndpoint); " is 143.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallUninstallAsyncTest,The length of the statement  "                Assert.Equal(string.Empty' armResult.Location);   // test "x-ms-geo-location" header is empty' same value should be assign to "Location" " is 136.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallUninstallAsyncTest,The length of the statement  "                Assert.Equal(string.Empty' armResult.Location);   // test "x-ms-geo-location" header is empty' same value should be assign to "Location" " is 136.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                ArmListEntry<SiteExtensionInfo> armResultList = await responseMessage.Content.ReadAsAsync<ArmListEntry<SiteExtensionInfo>>(); " is 125.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                Assert.NotNull(armResultList.Value.Where(item => string.Equals(externalPackageId' item.Properties.Id' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                responseMessage = await manager.InstallExtension(externalPackageId' feedUrl: externalFeed' installationArgs: installationArgument); " is 131.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                TestTracer.Trace("GetLocalExtensions (no filter) with Arm header' expecting site extension info will be wrap inside Arm envelop"); " is 130.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                Assert.NotNull(armResultList.Value.Where(item => string.Equals(externalPackageId' item.Properties.Id' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                Assert.Equal(Constants.SiteExtensionProvisioningStateSucceeded' armResultList.Value.First<ArmEntry<SiteExtensionInfo>>().Properties.ProvisioningState); " is 151.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                TestTracer.Trace("GetLocalExtensions (with filter) with Arm header' expecting site extension info will be wrap inside Arm envelop"); " is 132.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionGetArmTest,The length of the statement  "                Assert.NotNull(armResultList.Value.Where(item => string.Equals(externalPackageId' item.Properties.Id' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionParallelInstallationTest,The length of the statement  "                        TestTracer.Trace("Poll '{0}' for status for '{1}'. Expecting 200 response eventually with site operation header."' feedEndpoint' packageId); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootTests,The length of the statement  "            // site extension 'webrootxdttest' search for xdt files under site extension 'webrootxdttest' folder' and print out xdt content onto page " is 137.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootTests,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' externalPackageId' externalPackageVersion' externalFeed); " is 142.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootTests,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(externalPackageId' externalPackageVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 171.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootTests,The length of the statement  "                responseMessage = await manager.InstallExtension(externalPackageWithXdtId' feedUrl: externalFeed' type: SiteExtensionInfo.SiteExtensionType.WebRoot); " is 149.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootAsyncTests,The length of the statement  "            // site extension 'webrootxdttest' search for xdt files under site extension 'webrootxdttest' folder' and print out xdt content onto page " is 137.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootAsyncTests,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' externalPackageId' externalPackageVersion' externalFeed); " is 142.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootAsyncTests,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(externalPackageId' externalPackageVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 171.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionInstallPackageToWebRootAsyncTests,The length of the statement  "                responseMessage = await manager.InstallExtension(externalPackageWithXdtId' feedUrl: externalFeed' type: SiteExtensionInfo.SiteExtensionType.WebRoot); " is 149.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionNugetOrgTest,The length of the statement  "                Assert.True(results.Count(r => string.Equals(r.Id' nonSiteExtensionPackage' StringComparison.OrdinalIgnoreCase)) == 0' string.Format("We shouldn't find package '{0}' on www.nuget.org"' nonSiteExtensionPackage)); " is 211.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionNugetOrgTest,The length of the statement  "                Assert.True(results.Count(r => string.Equals(r.Id' siteExtensionPackage' StringComparison.OrdinalIgnoreCase)) >= 0' string.Format("We should find package '{0}' on www.nuget.org"' siteExtensionPackage)); " is 202.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,PollAndVerifyAfterArmInstallation,The length of the statement  "                    || HttpStatusCode.OK == responseMessage.StatusCode' string.Format(CultureInfo.InvariantCulture' "Action failed. Package: '{0}'"' packageId)); " is 141.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,PollAndVerifyAfterArmInstallation,The length of the statement  "            TestTracer.Trace("Polled for '{0}' seconds. Response status is '{1}'. Package: '{2}'"' (DateTime.UtcNow - start).TotalSeconds' responseMessage.StatusCode' packageId); " is 166.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,PollAndVerifyAfterArmInstallation,The length of the statement  "            Assert.True(HttpStatusCode.OK == responseMessage.StatusCode' string.Format(CultureInfo.InvariantCulture' "Action failed. Package: {0}"' packageId)); " is 148.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,CleanSiteExtensions,The length of the statement  "                List<SiteExtensionInfo> results = await (await manager.GetLocalExtensions()).Content.ReadAsAsync<List<SiteExtensionInfo>>(); " is 124.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdate,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' packageId' packageOldVersion' externalFeed); " is 129.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdate,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(packageId' packageOldVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 158.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdate,The length of the statement  "                responseMessage = await manager.InstallExtension(packageId' packageLatestVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 141.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithoutType,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}' to WebRoot"' packageId' packageOldVersion' externalFeed); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithoutType,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(packageId' packageOldVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 158.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithoutType,The length of the statement  "                TestTracer.Trace("Perform update with id '{0}'' version '{1}' to WebRoot without specifiy type"' packageId' packageLatestVersion); " is 130.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' packageId' packageOldVersion' externalFeed); " is 129.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                HttpResponseMessage responseMessage = await manager.InstallExtension(packageId' packageOldVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 158.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' packageId' packageNewerVersion' externalFeed); " is 131.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                responseMessage = await manager.InstallExtension(packageId' packageNewerVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 140.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                TestTracer.Trace("Perform InstallExtension with id '{0}'' version '{1}' from '{2}'"' packageId' packageLatestVersion' externalFeed); " is 132.
Long Statement,Kudu.FunctionalTests.SiteExtensions,SiteExtensionsIncrementalDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionsIncrementalDeploymentTests.cs,CanInstallAndUpdateWithAbnormalPackage,The length of the statement  "                responseMessage = await manager.InstallExtension(packageId' packageLatestVersion' externalFeed' SiteExtensionInfo.SiteExtensionType.WebRoot); " is 141.
Long Statement,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,VerifyUrlAsync,The length of the statement  "                    String.Format("For {0}' Expected Status Code: {1} Actual Status Code: {2}. \r\n Response: {3}"' url' statusCode' response.StatusCode' responseBody)); " is 149.
Long Statement,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,VerifyTraceAsync,The length of the statement  "            // Since our trace files accumulates traces from multiple tests' we'll identify the start of the current test by looking for the call to delete the web root " is 156.
Long Statement,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,VerifyLogOutput,The length of the statement  "                Assert.True(allEntries.Any(e => e.Message.Contains(expectedMatch))' "Didn't find '{0}' in log output".FormatInvariant(expectedMatch)); " is 134.
Long Statement,Kudu.FunctionalTests.Infrastructure,KuduAssert,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Infrastructure\KuduAssert.cs,Match,The length of the statement  "            Assert.True(Regex.IsMatch(actual' pattern)' String.Format("{0}\r\npattern: {1}\r\nactual: {2}\r\n"' message' pattern' actual)); " is 127.
Empty Catch Block,Kudu.FunctionalTests,InitialCloneTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\InitialCloneTests.cs,SafeExecute,The method has an empty catch block.
Empty Catch Block,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The method has an empty catch block.
Empty Catch Block,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyTriggeredJobTriggers,The method has an empty catch block.
Empty Catch Block,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,RestartServiceSite,The method has an empty catch block.
Empty Catch Block,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,WaitUntilAssertVerified,The method has an empty catch block.
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleZipDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleZipDeployment"' async appManager =>              {                  var files = CreateRandomFilesForZip(10);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleZipUrlDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync(testName' async appManager =>              {                  var client = appManager.ZipDeploymentManager.Client;                  var requestUri = client.BaseAddress;                  if (!isArmRequest && isAsync)                  {                      requestUri = new Uri(string.Format("{0}?isAsync=true"' requestUri));                  }                    using (var request = new HttpRequestMessage(HttpMethod.Put' requestUri))                  {                      if (isArmRequest)                      {                          var payload = new { properties = new { packageUri = packageUri } };                          request.Content = new StringContent(JsonConvert.SerializeObject(payload)' Encoding.UTF8' "application/json");                          request.Headers.Referrer = new Uri("https://management.azure.com/subscriptions/sub-id/resourcegroups/rg-name/providers/Microsoft.Web/sites/site-name/extensions/zipdeploy?api-version=2016-03-01");                          request.Headers.Add("x-ms-geo-location"' "westus");                      }                      else                      {                          var payload = new { packageUri = packageUri };                          request.Content = new StringContent(JsonConvert.SerializeObject(payload)' Encoding.UTF8' "application/json");                      }                        using (var response = await client.SendAsync(request))                      {                          if (isAsync || isArmRequest)                          {                              Assert.Equal(HttpStatusCode.Accepted' response.StatusCode);                              await AssertSuccessfulDeployment(appManager' timeoutSecs: 10);                          }                          else                          {                              Assert.Equal(HttpStatusCode.OK' response.StatusCode);                          }                            await AssertSuccessfulDeploymentByFilenames(appManager' new[] { "host.json"' "images"' "index.htm" });                          await AssertSuccessfulDeploymentByFilenames(appManager' new[] { "picture1.jpg"' "picture2.jpg" }' path: "images");                      }                  }              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestZipDeployWithMetadata,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleZipDeployment"' async appManager =>              {                  var files = CreateRandomFilesForZip(10);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata                  {                      Author = author'                      AuthorEmail = authorEmail'                      Deployer = deployer'                      Message = message                  });                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());                  var result = await appManager.DeploymentManager.GetResultAsync("latest");                    Assert.Equal(author' result.Author);                  Assert.Equal(authorEmail' result.AuthorEmail);                  Assert.Equal(deployer' result.Deployer);                  Assert.Equal(message' result.Message);              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestAsyncZipDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync("TestAsyncZipDeployment"' async appManager =>              {                  // Big enough to require at least a couple polls for status until success                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    TestTracer.Trace("Confirming deployment is in progress");                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestAsyncZipDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync("TestAsyncZipDeployment"' async appManager =>              {                  // Big enough to require at least a couple polls for status until success                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    TestTracer.Trace("Confirming deployment is in progress");                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestEmptyZipClearsWwwroot,The following statement contains a magic number: return ApplicationManager.RunAsync("TestEmptyZipClearsWwwroot"' async appManager =>              {                  var files = CreateRandomFilesForZip(10);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());                    var empty = new FileForZip[0];                  var response2 = await DeployZip(appManager' empty' new ZipDeployMetadata());                  await AssertSuccessfulDeploymentByFilenames(appManager' new string[0]);              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureConflictResultOnSimultaneousAsyncRequest,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureConflictResultOnSimultaneousAsyncRequest"' async appManager =>              {                  // Big enough to run for a few seconds                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    // Immediately try another deployment                  var response2 = await DeployZip(appManager' new FileForZip[0]' new ZipDeployMetadata { IsAsync = true });                    Assert.Equal(HttpStatusCode.Conflict' response2.StatusCode);                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureConflictResultOnSimultaneousAsyncRequest,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureConflictResultOnSimultaneousAsyncRequest"' async appManager =>              {                  // Big enough to run for a few seconds                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    // Immediately try another deployment                  var response2 = await DeployZip(appManager' new FileForZip[0]' new ZipDeployMetadata { IsAsync = true });                    Assert.Equal(HttpStatusCode.Conflict' response2.StatusCode);                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureConflictResultOnSimultaneousSyncRequest,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureConflictResultOnSimultaneousSyncRequest"' async appManager =>              {                  // Big enough to run for a few seconds                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    // Immediately try another deployment                  var response2 = await DeployZip(appManager' new FileForZip[0]' new ZipDeployMetadata());                    Assert.Equal(HttpStatusCode.Conflict' response2.StatusCode);                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureConflictResultOnSimultaneousSyncRequest,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureConflictResultOnSimultaneousSyncRequest"' async appManager =>              {                  // Big enough to run for a few seconds                  var files = CreateRandomFilesForZip(1000);                  var response = await DeployZip(appManager' files' new ZipDeployMetadata { IsAsync = true });                  response.EnsureSuccessStatusCode();                    // Immediately try another deployment                  var response2 = await DeployZip(appManager' new FileForZip[0]' new ZipDeployMetadata());                    Assert.Equal(HttpStatusCode.Conflict' response2.StatusCode);                    DeployResult result;                  do                  {                      result = await appManager.DeploymentManager.GetResultAsync("latest");                      Assert.Equal(DefaultPushDeployer' result.Deployer);                      await Task.Delay(TimeSpan.FromSeconds(2));                  } while (!new[] { DeployStatus.Failed' DeployStatus.Success }.Contains(result.Status));                    await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureExpectedKudusyncBehavior,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureExpectedKudusyncBehavior"' async appManager =>              {                  var origTime = DateTime.Now;                  var files = CreateRandomFilesForZip(10);                  foreach (var file in files)                  {                      file.ModifiedTime = origTime;                  }                    var response = await DeployZip(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByContent(appManager' files);                    // Deploy a new zip with some new files' some modified files' and some old files                  var newFiles = CreateRandomFilesForZip(3);                  var oldfile = files[0];                  var modifiedFile = new FileForZip { Filename = files[1].Filename' Content = "UPDATED"' ModifiedTime = DateTime.Now };                  var files2 = newFiles.Concat(new[] { oldfile' modifiedFile }).ToArray();                    var response2 = await DeployZip(appManager' files2' new ZipDeployMetadata());                  response2.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByContent(appManager' files2);                    // Would need to check the trace log to ensure that the old file wasn't actually copied' but preserved.              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,EnsureExpectedKudusyncBehavior,The following statement contains a magic number: return ApplicationManager.RunAsync("EnsureExpectedKudusyncBehavior"' async appManager =>              {                  var origTime = DateTime.Now;                  var files = CreateRandomFilesForZip(10);                  foreach (var file in files)                  {                      file.ModifiedTime = origTime;                  }                    var response = await DeployZip(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByContent(appManager' files);                    // Deploy a new zip with some new files' some modified files' and some old files                  var newFiles = CreateRandomFilesForZip(3);                  var oldfile = files[0];                  var modifiedFile = new FileForZip { Filename = files[1].Filename' Content = "UPDATED"' ModifiedTime = DateTime.Now };                  var files2 = newFiles.Concat(new[] { oldfile' modifiedFile }).ToArray();                    var response2 = await DeployZip(appManager' files2' new ZipDeployMetadata());                  response2.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByContent(appManager' files2);                    // Would need to check the trace log to ensure that the old file wasn't actually copied' but preserved.              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSideBySideWithGitRepo,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleZipDeployment"' async appManager =>              {                  using (var repo = Git.Init(Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())))                  {                      // First deploy zip                      var files = CreateRandomFilesForZip(10);                      var response = await DeployZip(appManager' files' new ZipDeployMetadata());                      response.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());                        await appManager.SettingsManager.SetValue(SettingsKeys.ScmType' "LocalGit");                        // Push-deploy git repo                      var gitFilePath = Path.Combine(repo.PhysicalPath' Path.GetRandomFileName());                      File.WriteAllText(gitFilePath' Guid.NewGuid().ToString("N"));                      Git.Commit(repo.PhysicalPath' "Initial commit");                      var gitResult = appManager.GitDeploy(repo.PhysicalPath);                      await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray());                        // Deploy new zip                      var files2 = CreateRandomFilesForZip(10);                      var response2 = await DeployZip(appManager' files2' new ZipDeployMetadata());                      response2.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' files2.Select(f => f.Filename).ToArray());                        // Redeploy git deployment                      var id = Git.Id(repo.PhysicalPath);                      var response3 = await appManager.DeploymentManager.DeployAsync(id);                      response3.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray());                  }              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSideBySideWithGitRepo,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleZipDeployment"' async appManager =>              {                  using (var repo = Git.Init(Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())))                  {                      // First deploy zip                      var files = CreateRandomFilesForZip(10);                      var response = await DeployZip(appManager' files' new ZipDeployMetadata());                      response.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray());                        await appManager.SettingsManager.SetValue(SettingsKeys.ScmType' "LocalGit");                        // Push-deploy git repo                      var gitFilePath = Path.Combine(repo.PhysicalPath' Path.GetRandomFileName());                      File.WriteAllText(gitFilePath' Guid.NewGuid().ToString("N"));                      Git.Commit(repo.PhysicalPath' "Initial commit");                      var gitResult = appManager.GitDeploy(repo.PhysicalPath);                      await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray());                        // Deploy new zip                      var files2 = CreateRandomFilesForZip(10);                      var response2 = await DeployZip(appManager' files2' new ZipDeployMetadata());                      response2.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' files2.Select(f => f.Filename).ToArray());                        // Redeploy git deployment                      var id = Git.Id(repo.PhysicalPath);                      var response3 = await appManager.DeploymentManager.DeployAsync(id);                      response3.EnsureSuccessStatusCode();                      await AssertSuccessfulDeploymentByFilenames(appManager' Directory.GetFiles(repo.PhysicalPath).Select(f => Path.GetFileName(f)).ToArray());                  }              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleWarDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleWarDeployment"' async appManager =>              {                  var files = CreateRandomFilesForZip(10);                  var response = await DeployWar(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray()' "webapps/ROOT");              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleWarDeploymentPerformsCleanDeployment,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleWarDeploymentPerformsCleanDeployment"' async appManager =>              {                  // STEP 1: create a file before doing a wardeploy. We expect wardeploy to remove this file                  var fileName = "file-before-wardeployment-" + Guid.NewGuid().ToString("N");                  appManager.VfsWebRootManager.WriteAllText("webapps/ROOT/" + fileName' "some content");                  var deployedFiles = appManager.VfsWebRootManager.ListAsync("webapps/ROOT/").Result.ToList();                  Assert.Equal(1' deployedFiles.Count);                  Assert.Equal(fileName' deployedFiles[0].Name);                    // STEP 2: Perform wardeploy and check files deployed by wardeploy are the only ones that exist now                  // (in other words' check that the file created in step 1 is removed by wardeploy)                  var files = CreateRandomFilesForZip(10);                  var response = await DeployWar(appManager' files' new ZipDeployMetadata());                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray()' "webapps/ROOT");              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,TestSimpleWarDeploymentWithCustomAppName,The following statement contains a magic number: return ApplicationManager.RunAsync("TestSimpleWarDeploymentPerformsCleanDeployment"' async appManager =>              {                  var files = CreateRandomFilesForZip(10);                  var response = await DeployWar(appManager' files' new ZipDeployMetadata()' "testappname");                  response.EnsureSuccessStatusCode();                  await AssertSuccessfulDeploymentByFilenames(appManager' files.Select(f => f.Filename).ToArray()' "webapps/testappname");              });
Magic Number,Kudu.FunctionalTests,ZipDeploymentTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\ZipDeploymentTests.cs,AssertSuccessfulDeployment,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledPostDeployment,The following statement contains a magic number: await ApplicationManager.RunAsync("HookSite" + testName' async hookAppManager =>                  {                      using (var hookAppRepository = Git.Clone("NodeWebHookTest"))                      {                          string hookAddress1 = hookAppManager.SiteUrl + hook1;                          string hookAddress2 = hookAppManager.SiteUrl + hook2;                            WebHook webHookAdded1 = await SubscribeWebHook(hookAppManager' hookAddress1' 1);                            GitDeployApp(hookAppManager' hookAppRepository);                            expectedHookAddresses.Add(hook1);                          await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId);                            WebHook webHookAdded2 = await SubscribeWebHook(hookAppManager' hookAddress2' 2);                            TestTracer.Trace("Redeploy to allow web hooks to be called");                          await hookAppManager.DeploymentManager.DeployAsync(hookAppRepository.CurrentId);                            expectedHookAddresses.Add(hook2);                          await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId);                            TestTracer.Trace("Make sure web hooks are called for failed deployments");                          await hookAppManager.SettingsManager.SetValue("COMMAND"' "thisIsAnErrorCommand");                          await hookAppManager.DeploymentManager.DeployAsync(hookAppRepository.CurrentId);                          await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Failed.ToString());                            await hookAppManager.SettingsManager.Delete("COMMAND");                            TestTracer.Trace("Unsubscribe first hook");                          await UnsubscribeWebHook(hookAppManager' webHookAdded1.Id' 1);                            TestTracer.Trace("Redeploy to allow web hook to be called");                          await hookAppManager.DeploymentManager.DeployAsync(hookAppRepository.CurrentId);                            expectedHookAddresses.Remove(hook1);                          await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId);                            TestTracer.Trace("Unsubscribe second hook");                          await UnsubscribeWebHook(hookAppManager' webHookAdded2.Id' 0);                            TestTracer.Trace("Redeploy to verify no web hook was called");                          await hookAppManager.DeploymentManager.DeployAsync(hookAppRepository.CurrentId);                            TestTracer.Trace("Verify web hook was not called");                          expectedHookAddresses.Remove(hook2);                          await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' DeployStatus.Success.ToString()' hookAppRepository.CurrentId);                      }                  });
Magic Number,Kudu.FunctionalTests,WebHooksTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\WebHooksTests.cs,SubscribedWebHooksShouldBeCalledWithPublish,The following statement contains a magic number: await ApplicationManager.RunAsync("HookSite" + testName' async hookAppManager =>                  {                      using (var hookAppRepository = Git.Clone("NodeWebHookTest"))                      {                          GitDeployApp(hookAppManager' hookAppRepository);                            string hookAddress1 = hookAppManager.SiteUrl + hook1;                          string hookAddress2 = hookAppManager.SiteUrl + hook2;                            string customHookEventType = "CustomEvent";                            WebHook webHookAdded1 = await SubscribeWebHook(hookAppManager' hookAddress1' 1' customHookEventType);                          WebHook webHookAdded2 = await SubscribeWebHook(hookAppManager' hookAddress2' 2' customHookEventType);                            var jsonObject = new                          {                              TestProperty = "mytest_property"'                              CustomProperty = "mycustom_property"                          };                            await hookAppManager.WebHooksManager.PublishEventAsync(customHookEventType' jsonObject);                            expectedHookAddresses.Add(hook1);                          expectedHookAddresses.Add(hook2);                            await VerifyWebHooksCall(expectedHookAddresses' hookAppManager' jsonObject.TestProperty' jsonObject.CustomProperty);                      }                  });
Magic Number,Kudu.FunctionalTests,LargeRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LargeRepoTests.cs,DeployLargeRepoFromDropbox,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                      {                          const int timeoutInMinutes = 100;                          DateTime stopTime = DateTime.Now.AddMinutes(timeoutInMinutes);                            var client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials);                            using (new LatencyLogger("DropboxDeploy - " + appName))                          {                              client.PostAsJsonAsync("deploy?scmType=Dropbox"' deploy);                              List<DeployResult> results;                              do                              {                                  Thread.Sleep(5000);                                  if (DateTime.Now > stopTime)                                  {                                      throw new TimeoutException("Terminating test. Current test took too long.");                                  }                                  results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                                  TestTracer.Trace(results[0].Progress);                                } while ((results[0]).Status != DeployStatus.Success && (results[0]).Status != DeployStatus.Failed);                          }                            KuduAssert.VerifyUrl(appManager.SiteUrl + resourcePath' verificationText);                          using (new LatencyLogger("DropboxScmDelete - " + appName))                          {                              appManager.RepositoryManager.Delete(deleteWebRoot: false' ignoreErrors: false).Wait();                          }                      });
Magic Number,Kudu.FunctionalTests,LargeRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LargeRepoTests.cs,DeployLargeRepoFromDropbox,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                      {                          const int timeoutInMinutes = 100;                          DateTime stopTime = DateTime.Now.AddMinutes(timeoutInMinutes);                            var client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials);                            using (new LatencyLogger("DropboxDeploy - " + appName))                          {                              client.PostAsJsonAsync("deploy?scmType=Dropbox"' deploy);                              List<DeployResult> results;                              do                              {                                  Thread.Sleep(5000);                                  if (DateTime.Now > stopTime)                                  {                                      throw new TimeoutException("Terminating test. Current test took too long.");                                  }                                  results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                                  TestTracer.Trace(results[0].Progress);                                } while ((results[0]).Status != DeployStatus.Success && (results[0]).Status != DeployStatus.Failed);                          }                            KuduAssert.VerifyUrl(appManager.SiteUrl + resourcePath' verificationText);                          using (new LatencyLogger("DropboxScmDelete - " + appName))                          {                              appManager.RepositoryManager.Delete(deleteWebRoot: false' ignoreErrors: false).Wait();                          }                      });
Magic Number,Kudu.FunctionalTests,DeploymentApisTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApis,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.MaxRandomDelayInSec' "10");                      appManager.GitDeploy(repo.PhysicalPath);                      var results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                        Assert.Equal(1' results.Count);                      var result = results[0];                      Assert.Equal("davidebbo"' result.Author);                      Assert.Equal("david.ebbo@microsoft.com"' result.AuthorEmail);                      Assert.True(result.Current);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.NotNull(result.Url);                      Assert.NotNull(result.LogUrl);                      Assert.True(String.IsNullOrEmpty(result.Deployer));                        // Make sure we end up on the master branch                      CommandResult commandResult = await appManager.CommandExecutor.ExecuteCommand("git status"' @"site\repository");                      Assert.Contains("On branch master"' commandResult.Output);                        ICredentials cred = appManager.DeploymentManager.Credentials;                      KuduAssert.VerifyUrl(result.Url' cred);                      KuduAssert.VerifyUrl(result.LogUrl' cred);                        var resultAgain = await appManager.DeploymentManager.GetResultAsync(result.Id);                      Assert.Equal("davidebbo"' resultAgain.Author);                      Assert.Equal("david.ebbo@microsoft.com"' resultAgain.AuthorEmail);                      Assert.True(resultAgain.Current);                      Assert.Equal(DeployStatus.Success' resultAgain.Status);                      Assert.NotNull(resultAgain.Url);                      Assert.NotNull(resultAgain.LogUrl);                      KuduAssert.VerifyUrl(resultAgain.Url' cred);                      KuduAssert.VerifyUrl(resultAgain.LogUrl' cred' "Delaying deployment");                        repo.WriteFile("HelloWorld.txt"' "This is a test");                      Git.Commit(repo.PhysicalPath' "Another commit");                      appManager.GitDeploy(repo.PhysicalPath);                      results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.Equal(2' results.Count);                      string oldId = results[1].Id;                        // Delete one                      await appManager.DeploymentManager.DeleteAsync(oldId);                        results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                        Assert.Equal(1' results.Count);                      Assert.NotEqual(oldId' results[0].Id);                        result = results[0];                        // Redeploy                      await appManager.DeploymentManager.DeployAsync(result.Id);                        // Clean deploy                      await appManager.DeploymentManager.DeployAsync(result.Id' clean: true);                        var entries = (await appManager.DeploymentManager.GetLogEntriesAsync(result.Id)).ToList();                        Assert.True(entries.Count > 0);                        // First entry is always null                      Assert.Null(entries[0].DetailsUrl);                        var entryWithDetails = entries.First(e => e.DetailsUrl != null);                        var nested = (await appManager.DeploymentManager.GetLogEntryDetailsAsync(result.Id' entryWithDetails.Id)).ToList();                        Assert.True(nested.Count > 0);                        KuduAssert.VerifyLogOutput(appManager' result.Id' "Cleaning Git repository");                        // Get deployment script                      var stream = await appManager.DeploymentManager.GetDeploymentScriptAsync();                      using (var zipFile = new ZipArchive(stream))                      {                          // Verify 2 files exist                          Assert.Equal(2' zipFile.Entries.Count);                      }                        // Can't delete the active one                      var ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeleteAsync(result.Id));                      Assert.Equal(HttpStatusCode.Conflict' ex.ResponseMessage.StatusCode);                        // Corrupt git repository by removing HEAD file from it                      // And verify git repository is not identified                      appManager.VfsManager.Delete("site\\repository\\.git\\HEAD");                        var notFoundException = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeployAsync(null));                        // Expect a not found failure as no repository is found (since the git repository is now corrupted)                      Assert.Equal(HttpStatusCode.NotFound' notFoundException.ResponseMessage.StatusCode);                        // Another got push should reinitialize the git repository                      appManager.GitDeploy(repo.PhysicalPath);                        results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                        // Make sure running this again doesn't throw an exception                      await appManager.DeploymentManager.DeployAsync(null);                        // Create new deployment test                      var id = Guid.NewGuid().ToString();                      var payload = new JObject();                      var endtime = DateTime.UtcNow;                      payload["status"] = (int)DeployStatus.Success;                      payload["message"] = "this is commit message";                      payload["deployer"] = "kudu";                      payload["author"] = "tester";                      payload["end_time"] = endtime.ToString("o");                      payload["details"] = "http://kudu.com/deployments/details";                        // add new deployment                      result = await appManager.DeploymentManager.PutAsync(id' payload);                      Assert.Equal(id' result.Id);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.Equal("this is commit message"' result.Message);                      Assert.Equal("kudu"' result.Deployer);                      Assert.Equal("tester"' result.Author);                      Assert.Equal(endtime' result.EndTime);                      Assert.Equal(true' result.Current);                        // check result                      results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.True(results.Any(r => r.Id == id));                      result = results[0];                      Assert.Equal(id' result.Id);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.Equal("this is commit message"' result.Message);                      Assert.Equal("kudu"' result.Deployer);                      Assert.Equal("tester"' result.Author);                      Assert.Equal(endtime' result.EndTime);                      Assert.Equal(true' result.Current);                        entries = (await appManager.DeploymentManager.GetLogEntriesAsync(result.Id)).ToList();                      Assert.Equal(1' entries.Count);                      Assert.Equal("Deployment successful."' entries[0].Message);                        entries = (await appManager.DeploymentManager.GetLogEntryDetailsAsync(result.Id' entries[0].Id)).ToList();                      Assert.Equal(1' entries.Count);                      Assert.Equal(payload["details"]' entries[0].Message);                  });
Magic Number,Kudu.FunctionalTests,DeploymentApisTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeploymentApis,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.MaxRandomDelayInSec' "10");                      appManager.GitDeploy(repo.PhysicalPath);                      var results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                        Assert.Equal(1' results.Count);                      var result = results[0];                      Assert.Equal("davidebbo"' result.Author);                      Assert.Equal("david.ebbo@microsoft.com"' result.AuthorEmail);                      Assert.True(result.Current);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.NotNull(result.Url);                      Assert.NotNull(result.LogUrl);                      Assert.True(String.IsNullOrEmpty(result.Deployer));                        // Make sure we end up on the master branch                      CommandResult commandResult = await appManager.CommandExecutor.ExecuteCommand("git status"' @"site\repository");                      Assert.Contains("On branch master"' commandResult.Output);                        ICredentials cred = appManager.DeploymentManager.Credentials;                      KuduAssert.VerifyUrl(result.Url' cred);                      KuduAssert.VerifyUrl(result.LogUrl' cred);                        var resultAgain = await appManager.DeploymentManager.GetResultAsync(result.Id);                      Assert.Equal("davidebbo"' resultAgain.Author);                      Assert.Equal("david.ebbo@microsoft.com"' resultAgain.AuthorEmail);                      Assert.True(resultAgain.Current);                      Assert.Equal(DeployStatus.Success' resultAgain.Status);                      Assert.NotNull(resultAgain.Url);                      Assert.NotNull(resultAgain.LogUrl);                      KuduAssert.VerifyUrl(resultAgain.Url' cred);                      KuduAssert.VerifyUrl(resultAgain.LogUrl' cred' "Delaying deployment");                        repo.WriteFile("HelloWorld.txt"' "This is a test");                      Git.Commit(repo.PhysicalPath' "Another commit");                      appManager.GitDeploy(repo.PhysicalPath);                      results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.Equal(2' results.Count);                      string oldId = results[1].Id;                        // Delete one                      await appManager.DeploymentManager.DeleteAsync(oldId);                        results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                        Assert.Equal(1' results.Count);                      Assert.NotEqual(oldId' results[0].Id);                        result = results[0];                        // Redeploy                      await appManager.DeploymentManager.DeployAsync(result.Id);                        // Clean deploy                      await appManager.DeploymentManager.DeployAsync(result.Id' clean: true);                        var entries = (await appManager.DeploymentManager.GetLogEntriesAsync(result.Id)).ToList();                        Assert.True(entries.Count > 0);                        // First entry is always null                      Assert.Null(entries[0].DetailsUrl);                        var entryWithDetails = entries.First(e => e.DetailsUrl != null);                        var nested = (await appManager.DeploymentManager.GetLogEntryDetailsAsync(result.Id' entryWithDetails.Id)).ToList();                        Assert.True(nested.Count > 0);                        KuduAssert.VerifyLogOutput(appManager' result.Id' "Cleaning Git repository");                        // Get deployment script                      var stream = await appManager.DeploymentManager.GetDeploymentScriptAsync();                      using (var zipFile = new ZipArchive(stream))                      {                          // Verify 2 files exist                          Assert.Equal(2' zipFile.Entries.Count);                      }                        // Can't delete the active one                      var ex = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeleteAsync(result.Id));                      Assert.Equal(HttpStatusCode.Conflict' ex.ResponseMessage.StatusCode);                        // Corrupt git repository by removing HEAD file from it                      // And verify git repository is not identified                      appManager.VfsManager.Delete("site\\repository\\.git\\HEAD");                        var notFoundException = await Assert.ThrowsAsync<HttpUnsuccessfulRequestException>(() => appManager.DeploymentManager.DeployAsync(null));                        // Expect a not found failure as no repository is found (since the git repository is now corrupted)                      Assert.Equal(HttpStatusCode.NotFound' notFoundException.ResponseMessage.StatusCode);                        // Another got push should reinitialize the git repository                      appManager.GitDeploy(repo.PhysicalPath);                        results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                        // Make sure running this again doesn't throw an exception                      await appManager.DeploymentManager.DeployAsync(null);                        // Create new deployment test                      var id = Guid.NewGuid().ToString();                      var payload = new JObject();                      var endtime = DateTime.UtcNow;                      payload["status"] = (int)DeployStatus.Success;                      payload["message"] = "this is commit message";                      payload["deployer"] = "kudu";                      payload["author"] = "tester";                      payload["end_time"] = endtime.ToString("o");                      payload["details"] = "http://kudu.com/deployments/details";                        // add new deployment                      result = await appManager.DeploymentManager.PutAsync(id' payload);                      Assert.Equal(id' result.Id);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.Equal("this is commit message"' result.Message);                      Assert.Equal("kudu"' result.Deployer);                      Assert.Equal("tester"' result.Author);                      Assert.Equal(endtime' result.EndTime);                      Assert.Equal(true' result.Current);                        // check result                      results = (await appManager.DeploymentManager.GetResultsAsync()).ToList();                      Assert.True(results.Any(r => r.Id == id));                      result = results[0];                      Assert.Equal(id' result.Id);                      Assert.Equal(DeployStatus.Success' result.Status);                      Assert.Equal("this is commit message"' result.Message);                      Assert.Equal("kudu"' result.Deployer);                      Assert.Equal("tester"' result.Author);                      Assert.Equal(endtime' result.EndTime);                      Assert.Equal(true' result.Current);                        entries = (await appManager.DeploymentManager.GetLogEntriesAsync(result.Id)).ToList();                      Assert.Equal(1' entries.Count);                      Assert.Equal("Deployment successful."' entries[0].Message);                        entries = (await appManager.DeploymentManager.GetLogEntryDetailsAsync(result.Id' entries[0].Id)).ToList();                      Assert.Equal(1' entries.Count);                      Assert.Equal(payload["details"]' entries[0].Message);                  });
Magic Number,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeployPayloadHelperAsync,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,DeployPayloadHelperAsync,The following statement contains a magic number: i < 60 && !completed
Magic Number,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,CreateClient,The following statement contains a magic number: return new HttpClient(handler)              {                  BaseAddress = new Uri(appManager.ServiceUrl)'                  Timeout = TimeSpan.FromMinutes(5)              };
Magic Number,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,WaitForAnyBuildingDeploymentAsync,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Kudu.FunctionalTests,DeploymentManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DeploymentManagerTests.cs,WaitForAnyBuildingDeploymentAsync,The following statement contains a magic number: breakLoop > 200
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ConstructorTest,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials))                      {                          HttpResponseMessage response = client.GetAsync("diagnostics/settings").Result.EnsureSuccessful();                          using (var reader = new JsonTextReader(new StreamReader(response.Content.ReadAsStreamAsync().Result)))                          {                              JObject json = (JObject)JToken.ReadFrom(reader);                              Assert.Equal(6' json.Count);                          }                      }                        using (HttpClient client = HttpClientHelper.CreateClient(appManager.ServiceUrl' appManager.DeploymentManager.Credentials))                      {                          var ex = Assert.Throws<HttpUnsuccessfulRequestException>(() => client.GetAsync("diagnostics/settings/trace_level").Result.EnsureSuccessful());                          Assert.Equal(HttpStatusCode.NotFound' ex.ResponseMessage.StatusCode);                      }                  });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ProcessApiTests,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  // Test current process                  var process = await appManager.ProcessManager.GetCurrentProcessAsync();                  int currentId = process.Id;                  var currentUser = process.UserName;                  DateTime startTime = process.StartTime;                  Assert.NotNull(process);                  Assert.Contains("w3wp"' process.Name);                  Assert.Contains("/api/processes/" + currentId' process.Href.AbsoluteUri);                    // Test get process by id                  process = await appManager.ProcessManager.GetProcessAsync(currentId);                  Assert.NotNull(process);                  Assert.Contains("w3wp"' process.Name);                  Assert.Contains("/api/processes/" + currentId' process.Href.AbsoluteUri);                    // Test get not running process id                  var notfound = await KuduAssert.ThrowsUnwrappedAsync<HttpUnsuccessfulRequestException>(() => appManager.ProcessManager.GetProcessAsync(99999));                  Assert.Equal(HttpStatusCode.NotFound' notfound.ResponseMessage.StatusCode);                  Assert.Contains("is not running"' notfound.ResponseMessage.ExceptionMessage);                    // Test process list                  var processes = await appManager.ProcessManager.GetProcessesAsync();                  Assert.True(processes.Count() >= 1);                  Assert.True(processes.Any(p => p.Id == currentId));                  Assert.True(processes.All(p => p.UserName == currentUser));                    // Test all-users process list                  var allProcesses = await appManager.ProcessManager.GetProcessesAsync(allUsers: true);                  Assert.True(allProcesses.Count() >= processes.Count());                  Assert.True(allProcesses.Any(p => p.Id == currentId));                  Assert.True(allProcesses.Any(p => p.UserName == currentUser));                    // Test process dumps                  foreach (var format in new[] { "raw"' "zip" })                  {                      TestTracer.Trace("Test minidump format={0}"' format);                      using (var stream = new MemoryStream())                      {                          using (var minidump = await appManager.ProcessManager.MiniDump(format: format))                          {                              Assert.NotNull(minidump);                              await minidump.CopyToAsync(stream);                          }                          TestTracer.Trace("Test minidump lenth={0}"' stream.Length);                          Assert.True(stream.Length > 0);                      }                  }                    //Test Handles                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotNull(process);                  Assert.True(                      process.OpenFileHandles.Any(                          h => h.IndexOf("kudu.core.dll"' StringComparison.InvariantCultureIgnoreCase) != -1));                    //Test Modules                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotNull(process);                  Assert.True(                      process.Modules.Any(h => h.FileName.Equals("ntdll.dll"' StringComparison.InvariantCultureIgnoreCase)));                    // Test kill process                  await KuduAssert.ThrowsUnwrappedAsync<HttpRequestException>(() => appManager.ProcessManager.KillProcessAsync(currentId));                  HttpUtils.WaitForSite(appManager.SiteUrl' delayBeforeRetry: 10000);                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotEqual(startTime' process.StartTime);              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,ProcessApiTests,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  // Test current process                  var process = await appManager.ProcessManager.GetCurrentProcessAsync();                  int currentId = process.Id;                  var currentUser = process.UserName;                  DateTime startTime = process.StartTime;                  Assert.NotNull(process);                  Assert.Contains("w3wp"' process.Name);                  Assert.Contains("/api/processes/" + currentId' process.Href.AbsoluteUri);                    // Test get process by id                  process = await appManager.ProcessManager.GetProcessAsync(currentId);                  Assert.NotNull(process);                  Assert.Contains("w3wp"' process.Name);                  Assert.Contains("/api/processes/" + currentId' process.Href.AbsoluteUri);                    // Test get not running process id                  var notfound = await KuduAssert.ThrowsUnwrappedAsync<HttpUnsuccessfulRequestException>(() => appManager.ProcessManager.GetProcessAsync(99999));                  Assert.Equal(HttpStatusCode.NotFound' notfound.ResponseMessage.StatusCode);                  Assert.Contains("is not running"' notfound.ResponseMessage.ExceptionMessage);                    // Test process list                  var processes = await appManager.ProcessManager.GetProcessesAsync();                  Assert.True(processes.Count() >= 1);                  Assert.True(processes.Any(p => p.Id == currentId));                  Assert.True(processes.All(p => p.UserName == currentUser));                    // Test all-users process list                  var allProcesses = await appManager.ProcessManager.GetProcessesAsync(allUsers: true);                  Assert.True(allProcesses.Count() >= processes.Count());                  Assert.True(allProcesses.Any(p => p.Id == currentId));                  Assert.True(allProcesses.Any(p => p.UserName == currentUser));                    // Test process dumps                  foreach (var format in new[] { "raw"' "zip" })                  {                      TestTracer.Trace("Test minidump format={0}"' format);                      using (var stream = new MemoryStream())                      {                          using (var minidump = await appManager.ProcessManager.MiniDump(format: format))                          {                              Assert.NotNull(minidump);                              await minidump.CopyToAsync(stream);                          }                          TestTracer.Trace("Test minidump lenth={0}"' stream.Length);                          Assert.True(stream.Length > 0);                      }                  }                    //Test Handles                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotNull(process);                  Assert.True(                      process.OpenFileHandles.Any(                          h => h.IndexOf("kudu.core.dll"' StringComparison.InvariantCultureIgnoreCase) != -1));                    //Test Modules                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotNull(process);                  Assert.True(                      process.Modules.Any(h => h.FileName.Equals("ntdll.dll"' StringComparison.InvariantCultureIgnoreCase)));                    // Test kill process                  await KuduAssert.ThrowsUnwrappedAsync<HttpRequestException>(() => appManager.ProcessManager.KillProcessAsync(currentId));                  HttpUtils.WaitForSite(appManager.SiteUrl' delayBeforeRetry: 10000);                  process = await appManager.ProcessManager.GetCurrentProcessAsync();                  Assert.NotEqual(startTime' process.StartTime);              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,VerifyValues,The following statement contains a magic number: Assert.Equal(values.Length + 6' json.Count);
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,TestRecentLogEntries,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  IList<ApplicationLogEntry> results = null;                    using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    await appManager.CommandExecutor.ExecuteCommand("rm *.txt"' @"LogFiles/Application");                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                    // All the log files have been deleted so this API should return an empty array.                  Assert.Equal(0' results.Count);                    var logFile =  @"2013-12-06T00:29:20  PID[20108] Information this is a log  2013-12-06T00:29:21  PID[20108] Warning     this is a warning  that spans  several lines  2013-12-06T00:29:22  PID[20108] Error       this is an error  ";                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-1.txt"' logFile);                  await WriteLogText(appManager.SiteUrl' @"LogFiles\Application\test-2.txt"' logFile);                    // Verify that the log files were written                  var dirResult = await appManager.CommandExecutor.ExecuteCommand("ls -1 | wc -l"' @"LogFiles/Application");                  Assert.Equal(2' int.Parse(dirResult.Output));                    // Verify that the log entries have appeared in the correct order                  results = await appManager.LogFilesManager.GetRecentLogEntriesAsync(10);                  Assert.Equal(6' results.Count);                  AssertLogEntry(results[0]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[1]' "2013-12-06T00:29:22+00:00"' "Error"' "this is an error");                  AssertLogEntry(results[2]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[3]' "2013-12-06T00:29:21+00:00"' "Warning"' "this is a warning\r\nthat spans\r\nseveral lines");                  AssertLogEntry(results[4]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");                  AssertLogEntry(results[5]' "2013-12-06T00:29:20+00:00"' "Information"' "this is a log");              });
Magic Number,Kudu.FunctionalTests,DiagnosticsApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DiagnosticsApiFacts.cs,WriteLogText,The following statement contains a magic number: Assert.True(response.StatusCode == HttpStatusCode.OK'                      String.Format("For {0}' Expected Status Code: {1} Actual Status Code: {2}. \r\n Response: {3}"' siteUrl' 200' response.StatusCode' responseBody));
Magic Number,Kudu.FunctionalTests,DropboxTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\DropboxTests.cs,TestDropboxRateLimiter,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(total / limit - interval - 0.5);
Magic Number,Kudu.FunctionalTests,AppChangesShouldTriggerBuildTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushAppChangesShouldTriggerBuild,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Act                      appManager.GitDeploy(repo.PhysicalPath);                      Git.Revert(repo.PhysicalPath);                      appManager.GitDeploy(repo.PhysicalPath);                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' verificationText);                  });
Magic Number,Kudu.FunctionalTests,DeletesToRepositoryArePropagatedForWapsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,DeletesToRepositoryArePropagatedForWaps,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string deletePath = Path.Combine(repo.PhysicalPath' @"Mvc3Application\Controllers\AccountController.cs");                      string projectPath = Path.Combine(repo.PhysicalPath' @"Mvc3Application\Mvc3Application.csproj");                        // Act                      appManager.GitDeploy(repo.PhysicalPath);                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl + "Account/LogOn"' statusCode: HttpStatusCode.OK);                        File.Delete(deletePath);                      File.WriteAllText(projectPath' File.ReadAllText(projectPath).Replace(@"<Compile Include=""Controllers\AccountController.cs"" />"' ""));                      Git.Commit(repo.PhysicalPath' "Deleted the filez");                      appManager.GitDeploy(repo.PhysicalPath);                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl + "Account/LogOn"' statusCode: HttpStatusCode.NotFound);                  });
Magic Number,Kudu.FunctionalTests,ShouldOverwriteModifiedFilesInRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushShouldOverwriteModifiedFilesInRepo,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string path = @"Content/Site.css";                      string url = appManager.SiteUrl + path;                        // Act                      appManager.GitDeploy(repo.PhysicalPath);                        KuduAssert.VerifyUrl(url' verificationText);                        appManager.VfsWebRootManager.WriteAllText(path' "Hello world!");                        // Sleep a little since it's a remote call                      Thread.Sleep(500);                        KuduAssert.VerifyUrl(url' "Hello world!");                        // Make an unrelated change (newline to the end of web.config)                      repo.AppendFile(@"Mvc3Application\Web.config"' "\n");                        Git.Commit(repo.PhysicalPath' "This is a test");                        appManager.GitDeploy(repo.PhysicalPath);                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(url' verificationText);                  });
Magic Number,Kudu.FunctionalTests,ShouldOverwriteModifiedFilesInRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushShouldOverwriteModifiedFilesInRepo,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string path = @"Content/Site.css";                      string url = appManager.SiteUrl + path;                        // Act                      appManager.GitDeploy(repo.PhysicalPath);                        KuduAssert.VerifyUrl(url' verificationText);                        appManager.VfsWebRootManager.WriteAllText(path' "Hello world!");                        // Sleep a little since it's a remote call                      Thread.Sleep(500);                        KuduAssert.VerifyUrl(url' "Hello world!");                        // Make an unrelated change (newline to the end of web.config)                      repo.AppendFile(@"Mvc3Application\Web.config"' "\n");                        Git.Commit(repo.PhysicalPath' "This is a test");                        appManager.GitDeploy(repo.PhysicalPath);                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(url' verificationText);                  });
Magic Number,Kudu.FunctionalTests,GoingBackInTimeShouldOverwriteModifiedFilesInRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GoingBackInTimeShouldOverwriteModifiedFilesInRepo,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string url = appManager.SiteUrl + "/Content/Site.css";                      // Act                      appManager.GitDeploy(repo.PhysicalPath);                        KuduAssert.VerifyUrl(url' verificationText);                        repo.AppendFile(@"Mvc3Application\Content\Site.css"' "Say Whattttt!");                        // Make a small changes and commit them to the local repo                      Git.Commit(repo.PhysicalPath' "This is a small changes");                        // Push those changes                      appManager.GitDeploy(repo.PhysicalPath);                        // Make a server site change and verify it shows up                      appManager.VfsWebRootManager.WriteAllText("Content/Site.css"' "Hello world!");                        Thread.Sleep(500);                        KuduAssert.VerifyUrl(url' "Hello world!");                        // Now go back in time                      appManager.DeploymentManager.DeployAsync(id).Wait();                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(url' verificationText);                  });
Magic Number,Kudu.FunctionalTests,GoingBackInTimeShouldOverwriteModifiedFilesInRepoTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GoingBackInTimeShouldOverwriteModifiedFilesInRepo,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string url = appManager.SiteUrl + "/Content/Site.css";                      // Act                      appManager.GitDeploy(repo.PhysicalPath);                        KuduAssert.VerifyUrl(url' verificationText);                        repo.AppendFile(@"Mvc3Application\Content\Site.css"' "Say Whattttt!");                        // Make a small changes and commit them to the local repo                      Git.Commit(repo.PhysicalPath' "This is a small changes");                        // Push those changes                      appManager.GitDeploy(repo.PhysicalPath);                        // Make a server site change and verify it shows up                      appManager.VfsWebRootManager.WriteAllText("Content/Site.css"' "Hello world!");                        Thread.Sleep(500);                        KuduAssert.VerifyUrl(url' "Hello world!");                        // Now go back in time                      appManager.DeploymentManager.DeployAsync(id).Wait();                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(url' verificationText);                  });
Magic Number,Kudu.FunctionalTests,DeletesToRepositoryArePropagatedForNonWapsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,DeletesToRepositoryArePropagatedForNonWaps,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string deletePath = Path.Combine(repo.PhysicalPath' @"Content");                        // Act                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl + "Content/Site.css"' statusCode: HttpStatusCode.OK);                        Directory.Delete(deletePath' recursive: true);                      Git.Commit(repo.PhysicalPath' "Deleted all styles");                        appManager.GitDeploy(repo.PhysicalPath);                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl + "Content/Site.css"' statusCode: HttpStatusCode.NotFound);                  });
Magic Number,Kudu.FunctionalTests,PushingConfiguredBranchTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,PushingConfiguredBranch,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Set the branch to test and push to that branch                      appManager.SettingsManager.SetValue("branch"' "foo/bar").Wait();                      appManager.GitDeploy(repo.PhysicalPath' "foo/bar"' "foo/bar");                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(1' results.Count);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "foo/bar branch");                        // Now push master' but without changing the deploy branch                      appManager.GitDeploy(repo.PhysicalPath' "master"' "master");                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Here' no new deployment should have happened                      Assert.Equal(1' results.Count);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "foo/bar branch");                        // Now change deploy branch to master and do a 'Deploy Latest' (i.e. no id)                      appManager.SettingsManager.SetValue("branch"' "master").Wait();                      appManager.DeploymentManager.DeployAsync(id: null).Wait();                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Now' we should have a second deployment with master bit                      Assert.Equal(2' results.Count);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Master branch");                  });
Magic Number,Kudu.FunctionalTests,GoingBackInTimeDeploysOldFilesTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GoingBackInTimeDeploysOldFiles,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Deploy the app                      appManager.GitDeploy(repo.PhysicalPath);                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      KuduAssert.VerifyUrl(appManager.SiteUrl);                        // Add a file                      File.WriteAllText(Path.Combine(repo.PhysicalPath' "hello.txt")' "Wow");                      Git.Commit(repo.PhysicalPath' "Added hello.txt");                      string helloUrl = appManager.SiteUrl + "/hello.txt";                        // Deploy those changes                      appManager.GitDeploy(repo.PhysicalPath);                        results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(helloUrl' "Wow");                        // Go back to the first deployment                      appManager.DeploymentManager.DeployAsync(originalCommitId).Wait();                        results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      KuduAssert.VerifyUrl(helloUrl' statusCode: HttpStatusCode.NotFound);                      Assert.Equal(2' results.Count);                  });
Magic Number,Kudu.FunctionalTests,GoingBackInTimeDeploysOldFilesTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GoingBackInTimeDeploysOldFiles,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Deploy the app                      appManager.GitDeploy(repo.PhysicalPath);                        var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      KuduAssert.VerifyUrl(appManager.SiteUrl);                        // Add a file                      File.WriteAllText(Path.Combine(repo.PhysicalPath' "hello.txt")' "Wow");                      Git.Commit(repo.PhysicalPath' "Added hello.txt");                      string helloUrl = appManager.SiteUrl + "/hello.txt";                        // Deploy those changes                      appManager.GitDeploy(repo.PhysicalPath);                        results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(helloUrl' "Wow");                        // Go back to the first deployment                      appManager.DeploymentManager.DeployAsync(originalCommitId).Wait();                        results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      KuduAssert.VerifyUrl(helloUrl' statusCode: HttpStatusCode.NotFound);                      Assert.Equal(2' results.Count);                  });
Magic Number,Kudu.FunctionalTests,RedeployNodeSiteTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,RedeployNodeSite,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Act                      appManager.GitDeploy(repo.PhysicalPath);                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                        var log1 = GetLog(appManager' results[0].Id);                      Assert.Contains("Using the following command to generate deployment script"' log1);                        string id = results[0].Id;                        repo.Replace("server.js"' "world"' "world2");                      Git.Commit(repo.PhysicalPath' "Made a small change");                        appManager.GitDeploy(repo.PhysicalPath);                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                        appManager.DeploymentManager.DeployAsync(id).Wait();                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                        var log2 = GetLog(appManager' results[0].Id);                      var log3 = GetLog(appManager' results[1].Id);                      Assert.Contains("Using cached version of deployment script"' log2);                      Assert.Contains("Using cached version of deployment script"' log3);                  });
Magic Number,Kudu.FunctionalTests,RedeployNodeSiteTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,RedeployNodeSite,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      // Act                      appManager.GitDeploy(repo.PhysicalPath);                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        // Assert                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                        var log1 = GetLog(appManager' results[0].Id);                      Assert.Contains("Using the following command to generate deployment script"' log1);                        string id = results[0].Id;                        repo.Replace("server.js"' "world"' "world2");                      Git.Commit(repo.PhysicalPath' "Made a small change");                        appManager.GitDeploy(repo.PhysicalPath);                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[1].Status);                        appManager.DeploymentManager.DeployAsync(id).Wait();                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                        Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                        var log2 = GetLog(appManager' results[0].Id);                      var log3 = GetLog(appManager' results[1].Id);                      Assert.Contains("Using cached version of deployment script"' log2);                      Assert.Contains("Using cached version of deployment script"' log3);                  });
Magic Number,Kudu.FunctionalTests,GetResultsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GetResults,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string homeControllerPath = Path.Combine(repo.PhysicalPath' @"Mvc3Application\Controllers\HomeController.cs");                        // Act' Initial Commit                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change1");                        // Act' Change 2                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace(" - Change1"' " - Change2"));                      Git.Commit(repo.PhysicalPath' "Change 2!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                        // Act' Invalid Change build-break change and commit                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace("Index()"' "Index;"));                      Git.Commit(repo.PhysicalPath' "Invalid Change!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(3' results.Count);                      Assert.Equal(DeployStatus.Failed' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      Assert.Equal(DeployStatus.Success' results[2].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                  });
Magic Number,Kudu.FunctionalTests,GetResultsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GetResults,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string homeControllerPath = Path.Combine(repo.PhysicalPath' @"Mvc3Application\Controllers\HomeController.cs");                        // Act' Initial Commit                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change1");                        // Act' Change 2                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace(" - Change1"' " - Change2"));                      Git.Commit(repo.PhysicalPath' "Change 2!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                        // Act' Invalid Change build-break change and commit                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace("Index()"' "Index;"));                      Git.Commit(repo.PhysicalPath' "Invalid Change!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(3' results.Count);                      Assert.Equal(DeployStatus.Failed' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      Assert.Equal(DeployStatus.Success' results[2].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                  });
Magic Number,Kudu.FunctionalTests,GetResultsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,GetResults,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>                  {                      string homeControllerPath = Path.Combine(repo.PhysicalPath' @"Mvc3Application\Controllers\HomeController.cs");                        // Act' Initial Commit                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      var results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(1' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change1");                        // Act' Change 2                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace(" - Change1"' " - Change2"));                      Git.Commit(repo.PhysicalPath' "Change 2!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(2' results.Count);                      Assert.Equal(DeployStatus.Success' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                        // Act' Invalid Change build-break change and commit                      File.WriteAllText(homeControllerPath' File.ReadAllText(homeControllerPath).Replace("Index()"' "Index;"));                      Git.Commit(repo.PhysicalPath' "Invalid Change!");                      appManager.GitDeploy(repo.PhysicalPath);                        // Assert                      results = appManager.DeploymentManager.GetResultsAsync().Result.ToList();                      Assert.Equal(3' results.Count);                      Assert.Equal(DeployStatus.Failed' results[0].Status);                      Assert.Equal(DeployStatus.Success' results[1].Status);                      Assert.Equal(DeployStatus.Success' results[2].Status);                      KuduAssert.VerifyUrl(appManager.SiteUrl' "Welcome to ASP.NET MVC! - Change2");                  });
Magic Number,Kudu.FunctionalTests,GitRepositoryManagementTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitRepositoryManagementTests.cs,CreateClient,The following statement contains a magic number: return new HttpClient(handler)              {                  BaseAddress = new Uri(appManager.ServiceUrl)'                  Timeout = TimeSpan.FromMinutes(5)              };
Magic Number,Kudu.FunctionalTests,GitStabilityTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitStabilityTests.cs,NSimpleDeployments,The following statement contains a magic number: i < 5
Magic Number,Kudu.FunctionalTests,HgRepositoryFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\HgRepositoryFacts.cs,ChangeLogFromHgRepositoryAreAccurate,The following statement contains a magic number: Assert.Equal(2' changes.Count());
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamBasic,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic");                    using (var waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamBasic").GetStream().Result))                  {                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!String.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                        string content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.txt"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.log"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        // write to xml file' we should not get any live stream                      content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.xml"' content);                      line = waitHandle.WaitNextLine(1000);                      Assert.Null(line);                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamBasic,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic");                    using (var waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamBasic").GetStream().Result))                  {                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!String.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                        string content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.txt"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.log"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        // write to xml file' we should not get any live stream                      content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.xml"' content);                      line = waitHandle.WaitNextLine(1000);                      Assert.Null(line);                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamBasic,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic");                    using (var waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamBasic").GetStream().Result))                  {                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!String.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                        string content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.txt"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.log"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        // write to xml file' we should not get any live stream                      content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.xml"' content);                      line = waitHandle.WaitNextLine(1000);                      Assert.Null(line);                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamBasic,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                    CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic");                    using (var waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamBasic").GetStream().Result))                  {                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!String.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                        string content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.txt"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.log"' content);                      line = waitHandle.WaitNextLine(10000);                      Assert.Equal(content' line);                        // write to xml file' we should not get any live stream                      content = Guid.NewGuid().ToString();                      WriteLogText(appManager.SiteUrl' @"LogFiles\TestLogStreamBasic\temp.xml"' content);                      line = waitHandle.WaitNextLine(1000);                      Assert.Null(line);                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamSubFolder,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  // Act                  using (var localRepo = Git.Clone("LogTester"))                  {                      appManager.GitDeploy(localRepo.PhysicalPath);                  }                  List<string> logFiles = new List<string>();                  List<LogStreamWaitHandle> waitHandles = new List<LogStreamWaitHandle>();                  for (int i = 0; i < 2; ++i)                  {                      logFiles.Add(@"LogFiles\TestLogStreamFilter\Folder" + i + "\\temp.txt");                      //Create the directory                      CreateLogDirectory(appManager.SiteUrl' @"LogFiles\TestLogStreamFilter\Folder" + i);                      RemoteLogStreamManager mgr = appManager.CreateLogStreamManager("TestLogStreamFilter/folder" + i);                      var waitHandle = new LogStreamWaitHandle(mgr.GetStream().Result);                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                      waitHandles.Add(waitHandle);                  }                    using (LogStreamWaitHandle waitHandle = new LogStreamWaitHandle(appManager.CreateLogStreamManager("TestLogStreamFilter").GetStream().Result))                  {                      try                      {                          string line = waitHandle.WaitNextLine(10000);                          Assert.True(!string.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                            // write to folder0' we should not get any live stream for folder1 listener                          string content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[0]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                            // write to folder1' we should not get any live stream for folder0 listener                          content = Guid.NewGuid().ToString();                          WriteLogText(appManager.SiteUrl' logFiles[1]' content);                          line = waitHandle.WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[1].WaitNextLine(10000);                          Assert.Equal(content' line);                          line = waitHandles[0].WaitNextLine(1000);                          Assert.True(line == null' "no more message: " + line);                      }                      finally                      {                          waitHandles[0].Dispose();                          waitHandles[1].Dispose();                      }                  }              });
Magic Number,Kudu.FunctionalTests,LogStreamManagerTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\LogStreamManagerTests.cs,TestLogStreamNotFound,The following statement contains a magic number: ApplicationManager.Run(appName' appManager =>              {                  RemoteLogStreamManager manager = new RemoteLogStreamManager(appManager.ServiceUrl + "/logstream/notfound");                  using (var waitHandle = new LogStreamWaitHandle(manager.GetStream().Result))                  {                      string line = waitHandle.WaitNextLine(10000);                      Assert.True(!String.IsNullOrEmpty(line) && line.Contains("Welcome")' "check welcome message: " + line);                  }              });
Magic Number,Kudu.FunctionalTests,HelloKuduWithCorruptedGitTestsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushHelloKuduWithCorruptedGitTests,The following statement contains a magic number: await ApplicationManager.RunAsync(randomTestName' async appManager =>              {                  // Act                  using (TestRepository testRepository = Git.Clone("HelloKudu"))                  {                      appManager.GitDeploy(testRepository.PhysicalPath);                      var results = await appManager.DeploymentManager.GetResultsAsync();                        // Assert                      Assert.Equal(1' results.Count());                      Assert.Equal(DeployStatus.Success' results.ElementAt(0).Status);                        var content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal("ref: refs/heads/master"' content.Trim());                        // Corrupt the .git/HEAD file                      appManager.VfsManager.WriteAllBytes("site/repository/.git/HEAD"' new byte[23]);                      content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal('\0'' content[0]);                        testRepository.WriteFile("somefile.txt"' String.Empty);                      Git.Commit(testRepository.PhysicalPath' "some commit");                        var result = appManager.GitDeploy(testRepository.PhysicalPath);                        content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal("ref: refs/heads/master"' content.Trim());                        results = await appManager.DeploymentManager.GetResultsAsync();                        // Assert                      Assert.Equal(2' results.Count());                      Assert.Equal(DeployStatus.Success' results.ElementAt(0).Status);                      Assert.Equal(DeployStatus.Success' results.ElementAt(1).Status);                  }              });
Magic Number,Kudu.FunctionalTests,HelloKuduWithCorruptedGitTestsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\GitDeploymentTests.cs,PushHelloKuduWithCorruptedGitTests,The following statement contains a magic number: await ApplicationManager.RunAsync(randomTestName' async appManager =>              {                  // Act                  using (TestRepository testRepository = Git.Clone("HelloKudu"))                  {                      appManager.GitDeploy(testRepository.PhysicalPath);                      var results = await appManager.DeploymentManager.GetResultsAsync();                        // Assert                      Assert.Equal(1' results.Count());                      Assert.Equal(DeployStatus.Success' results.ElementAt(0).Status);                        var content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal("ref: refs/heads/master"' content.Trim());                        // Corrupt the .git/HEAD file                      appManager.VfsManager.WriteAllBytes("site/repository/.git/HEAD"' new byte[23]);                      content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal('\0'' content[0]);                        testRepository.WriteFile("somefile.txt"' String.Empty);                      Git.Commit(testRepository.PhysicalPath' "some commit");                        var result = appManager.GitDeploy(testRepository.PhysicalPath);                        content = await appManager.VfsManager.ReadAllTextAsync("site/repository/.git/HEAD");                      Assert.Equal("ref: refs/heads/master"' content.Trim());                        results = await appManager.DeploymentManager.GetResultsAsync();                        // Assert                      Assert.Equal(2' results.Count());                      Assert.Equal(DeployStatus.Success' results.ElementAt(0).Status);                      Assert.Equal(DeployStatus.Success' results.ElementAt(1).Status);                  }              });
Magic Number,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The following statement contains a magic number: ifRangeReqBadRange.Headers.Range = new RangeHeaderValue(100' 100) { Unit = "bytes" };
Magic Number,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The following statement contains a magic number: ifRangeReqBadRange.Headers.Range = new RangeHeaderValue(100' 100) { Unit = "bytes" };
Magic Number,Kudu.FunctionalTests,VfsControllerBaseTest,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Vfs\VfsControllerBaseTest.cs,RunIntegrationTest,The following statement contains a magic number: cnt < 16
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,PushAndRedeployContinuousJobAsConsoleWorker,The following statement contains a magic number: RunScenario("PushAndRedeployContinuousJobAsConsoleWorker"' appManager =>              {                  using (TestRepository testRepository = Git.Clone("ConsoleWorker"))                  {                      ///////// Part 1                      TestTracer.Trace("I) Starting ConsoleWorker test' deploying the worker");                        PushAndVerifyConsoleWorker(appManager' testRepository' new string[] { ExpectedVerificationFileContent });                        ///////// Part 2                      TestTracer.Trace("II) Make sure redeploy works for console worker");                      testRepository.Replace("ConsoleWorker\\Program.cs"' ExpectedVerificationFileContent' ExpectedChangedFileContent);                      Git.Commit(testRepository.PhysicalPath' "Made a small change");                        PushAndVerifyConsoleWorker(appManager' testRepository' new string[] { ExpectedVerificationFileContent' ExpectedChangedFileContent }' expectedDeployments: 2);                  }              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,DeleteConsoleWorkerExecutableStopsIt,The following statement contains a magic number: RunScenario("DeleteConsoleWorkerExecutableStopsIt"' appManager =>              {                  using (TestRepository testRepository = Git.Clone("ConsoleWorker"))                  {                      ///////// Part 1                      TestTracer.Trace("I) Starting ConsoleWorker test' deploying the worker");                        PushAndVerifyConsoleWorker(appManager' testRepository' new string[] { ExpectedVerificationFileContent });                        TestTracer.Trace("Make sure process is up");                      var processes = appManager.ProcessManager.GetProcessesAsync().Result;                      var workerProcess = processes.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                      Assert.NotNull(workerProcess);                        ///////// Part 2                      TestTracer.Trace("II) Verifying worker gone when executable file is removed");                        appManager.VfsManager.Delete(ConsoleWorkerExecutablePath);    #if NOTYET                      WaitUntilAssertVerified(                          "runnable script is missing"'                          TimeSpan.FromSeconds(60)'                          () =>                          {                              var job = appManager.JobsManager.GetContinuousJobAsync("deployedJob").Result;                              Assert.Null(job.RunCommand);                              Assert.Equal("No runnable script file was found."' job.Error);                          });                        appManager.VfsManager.Delete(ConsoleWorkerJobPath' recursive: true);  #endif                        WaitUntilAssertVerified(                          "no continuous jobs exist"'                          TimeSpan.FromSeconds(60)'                          () =>                          {                              var jobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                              Assert.Equal(0' jobs.Count());                          });                        WaitUntilAssertVerified(                          "make sure process is down"'                          TimeSpan.FromSeconds(30)'                          () =>                          {                              var allProcesses = appManager.ProcessManager.GetProcessesAsync().Result;                              var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                              Assert.Null(process);                          });                  }              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,DeleteConsoleWorkerExecutableStopsIt,The following statement contains a magic number: RunScenario("DeleteConsoleWorkerExecutableStopsIt"' appManager =>              {                  using (TestRepository testRepository = Git.Clone("ConsoleWorker"))                  {                      ///////// Part 1                      TestTracer.Trace("I) Starting ConsoleWorker test' deploying the worker");                        PushAndVerifyConsoleWorker(appManager' testRepository' new string[] { ExpectedVerificationFileContent });                        TestTracer.Trace("Make sure process is up");                      var processes = appManager.ProcessManager.GetProcessesAsync().Result;                      var workerProcess = processes.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                      Assert.NotNull(workerProcess);                        ///////// Part 2                      TestTracer.Trace("II) Verifying worker gone when executable file is removed");                        appManager.VfsManager.Delete(ConsoleWorkerExecutablePath);    #if NOTYET                      WaitUntilAssertVerified(                          "runnable script is missing"'                          TimeSpan.FromSeconds(60)'                          () =>                          {                              var job = appManager.JobsManager.GetContinuousJobAsync("deployedJob").Result;                              Assert.Null(job.RunCommand);                              Assert.Equal("No runnable script file was found."' job.Error);                          });                        appManager.VfsManager.Delete(ConsoleWorkerJobPath' recursive: true);  #endif                        WaitUntilAssertVerified(                          "no continuous jobs exist"'                          TimeSpan.FromSeconds(60)'                          () =>                          {                              var jobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                              Assert.Equal(0' jobs.Count());                          });                        WaitUntilAssertVerified(                          "make sure process is down"'                          TimeSpan.FromSeconds(30)'                          () =>                          {                              var allProcesses = appManager.ProcessManager.GetProcessesAsync().Result;                              var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                              Assert.Null(process);                          });                  }              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStartsAfterGoingDown,The following statement contains a magic number: RunScenario("ContinuousJobStartsAfterGoingDown"' appManager =>              {                  TestTracer.Trace("Copying the script to the continuous job directory");                    appManager.JobsManager.CreateContinuousJobAsync("basicJob1"' "run.cmd"' JobScript).Wait();                    var expectedContinuousJob = new ContinuousJob()                  {                      Name = "basicJob1"'                      JobType = "continuous"'                      Status = "PendingRestart"'                      RunCommand = "run.cmd"                  };                    WaitUntilAssertVerified(                      "verify continuous job"'                      TimeSpan.FromSeconds(60)'                      () =>                      {                          ContinuousJob deployedJob = appManager.JobsManager.GetContinuousJobAsync("basicJob1").Result;                          AssertContinuousJob(expectedContinuousJob' deployedJob);                      });                    TestTracer.Trace("Waiting for verification file to have 2 lines (which means it ran twice)");                    var expectedVerificationFileContents = new List<string>();                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: true");                  JobSettings continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.False(continuousJobSettings.IsSingleton);                    continuousJobSettings.SetSetting("is_singleton"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: false");                  continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.True(continuousJobSettings.GetSetting<bool>("is_singleton"));                    continuousJobSettings.SetSetting("is_singleton"' false);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStartsAfterGoingDown,The following statement contains a magic number: RunScenario("ContinuousJobStartsAfterGoingDown"' appManager =>              {                  TestTracer.Trace("Copying the script to the continuous job directory");                    appManager.JobsManager.CreateContinuousJobAsync("basicJob1"' "run.cmd"' JobScript).Wait();                    var expectedContinuousJob = new ContinuousJob()                  {                      Name = "basicJob1"'                      JobType = "continuous"'                      Status = "PendingRestart"'                      RunCommand = "run.cmd"                  };                    WaitUntilAssertVerified(                      "verify continuous job"'                      TimeSpan.FromSeconds(60)'                      () =>                      {                          ContinuousJob deployedJob = appManager.JobsManager.GetContinuousJobAsync("basicJob1").Result;                          AssertContinuousJob(expectedContinuousJob' deployedJob);                      });                    TestTracer.Trace("Waiting for verification file to have 2 lines (which means it ran twice)");                    var expectedVerificationFileContents = new List<string>();                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: true");                  JobSettings continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.False(continuousJobSettings.IsSingleton);                    continuousJobSettings.SetSetting("is_singleton"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: false");                  continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.True(continuousJobSettings.GetSetting<bool>("is_singleton"));                    continuousJobSettings.SetSetting("is_singleton"' false);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStartsAfterGoingDown,The following statement contains a magic number: RunScenario("ContinuousJobStartsAfterGoingDown"' appManager =>              {                  TestTracer.Trace("Copying the script to the continuous job directory");                    appManager.JobsManager.CreateContinuousJobAsync("basicJob1"' "run.cmd"' JobScript).Wait();                    var expectedContinuousJob = new ContinuousJob()                  {                      Name = "basicJob1"'                      JobType = "continuous"'                      Status = "PendingRestart"'                      RunCommand = "run.cmd"                  };                    WaitUntilAssertVerified(                      "verify continuous job"'                      TimeSpan.FromSeconds(60)'                      () =>                      {                          ContinuousJob deployedJob = appManager.JobsManager.GetContinuousJobAsync("basicJob1").Result;                          AssertContinuousJob(expectedContinuousJob' deployedJob);                      });                    TestTracer.Trace("Waiting for verification file to have 2 lines (which means it ran twice)");                    var expectedVerificationFileContents = new List<string>();                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: true");                  JobSettings continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.False(continuousJobSettings.IsSingleton);                    continuousJobSettings.SetSetting("is_singleton"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: false");                  continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.True(continuousJobSettings.GetSetting<bool>("is_singleton"));                    continuousJobSettings.SetSetting("is_singleton"' false);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ContinuousJobStartsAfterGoingDown,The following statement contains a magic number: RunScenario("ContinuousJobStartsAfterGoingDown"' appManager =>              {                  TestTracer.Trace("Copying the script to the continuous job directory");                    appManager.JobsManager.CreateContinuousJobAsync("basicJob1"' "run.cmd"' JobScript).Wait();                    var expectedContinuousJob = new ContinuousJob()                  {                      Name = "basicJob1"'                      JobType = "continuous"'                      Status = "PendingRestart"'                      RunCommand = "run.cmd"                  };                    WaitUntilAssertVerified(                      "verify continuous job"'                      TimeSpan.FromSeconds(60)'                      () =>                      {                          ContinuousJob deployedJob = appManager.JobsManager.GetContinuousJobAsync("basicJob1").Result;                          AssertContinuousJob(expectedContinuousJob' deployedJob);                      });                    TestTracer.Trace("Waiting for verification file to have 2 lines (which means it ran twice)");                    var expectedVerificationFileContents = new List<string>();                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: true");                  JobSettings continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.False(continuousJobSettings.IsSingleton);                    continuousJobSettings.SetSetting("is_singleton"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));                    TestTracer.Trace("Verify continuous job settings and set it to isSingleton: false");                  continuousJobSettings =                      appManager.JobsManager.GetContinuousJobSettingsAsync(expectedContinuousJob.Name).Result;                    Assert.True(continuousJobSettings.GetSetting<bool>("is_singleton"));                    continuousJobSettings.SetSetting("is_singleton"' false);                  appManager.JobsManager.SetContinuousJobSettingsAsync(expectedContinuousJob.Name' continuousJobSettings).Wait();                    expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                  expectedVerificationFileContents.Add(ExpectedVerificationFileContent);                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' expectedVerificationFileContents.ToArray()));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobTriggers,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    string scriptFileName = "Job file with long name and accents àéè.cmd";                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' scriptFileName' JobScript).Wait();                    var expectedTriggeredJob = new TriggeredJob()                  {                      Name = jobName'                      JobType = "triggered"'                      RunCommand = scriptFileName                  };                    TestTracer.Trace("Verify triggered job exists");                    TriggeredJob triggeredJob = appManager.JobsManager.GetTriggeredJobAsync(jobName).Result;                  AssertTriggeredJob(expectedTriggeredJob' triggeredJob);                    TestTracer.Trace("Trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo ");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job again with arguments");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "set _args=first arg'second arg"' arguments: "\"first arg\" \"second arg\"");                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    TestTracer.Trace("Trigger the job 5 more times to make sure history is trimmed");                    TestTracer.Trace("Disable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "1").Wait();                  VerifyTriggeredJobDoesNotTrigger(appManager' jobName).Wait();                    TestTracer.Trace("Enable all WebJobs");                  appManager.SettingsManager.SetValue(SettingsKeys.WebJobsStopped' "0").Wait();                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' "echo ");                    appManager.SettingsManager.SetValue(SettingsKeys.WebJobsHistorySize' "5").Wait();                    VerifyTriggeredJobTriggers(appManager' jobName' 4' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");                  VerifyTriggeredJobTriggers(appManager' jobName' 5' "Success"' "echo ");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' "{\"schedule\": \"*/10 * * * * *\"}");                    Stopwatch stopwatch = Stopwatch.StartNew();                    TestTracer.Trace("Expect schedule to trigger the job");                    VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to trigger the job again");                    VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent' ExpectedVerificationFileContent });                    stopwatch.Stop();                    Assert.InRange(stopwatch.ElapsedMilliseconds' 10*1000' 30*1000);              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    CommandResult dateTimeResult = appManager.CommandExecutor.ExecuteCommand("echo %date% %time%"' String.Empty).Result;                  DateTime currentDateTime = DateTime.Parse(dateTimeResult.Output.Trim());                  DateTime scheduledDateTime = currentDateTime.AddSeconds(10);                    string cronExpression =                      "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month);                    TestTracer.Trace("Scheduling triggered job to " + cronExpression);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' cronExpression);                    TestTracer.Trace("Expect schedule to trigger the job");                    Thread.Sleep(10*1000);                    try                  {                      VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                  }                  catch (Exception)                  {                      try                      {                          string schedulerLog = appManager.VfsManager.ReadAllText(JobsDataPath + "/triggered/" + jobName + "/job_scheduler.log");                          TestTracer.Trace("Scheduler log - " + schedulerLog);                      }                      catch                      {                      }                        throw;                  }                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to not trigger the job again");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    CommandResult dateTimeResult = appManager.CommandExecutor.ExecuteCommand("echo %date% %time%"' String.Empty).Result;                  DateTime currentDateTime = DateTime.Parse(dateTimeResult.Output.Trim());                  DateTime scheduledDateTime = currentDateTime.AddSeconds(10);                    string cronExpression =                      "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month);                    TestTracer.Trace("Scheduling triggered job to " + cronExpression);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' cronExpression);                    TestTracer.Trace("Expect schedule to trigger the job");                    Thread.Sleep(10*1000);                    try                  {                      VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                  }                  catch (Exception)                  {                      try                      {                          string schedulerLog = appManager.VfsManager.ReadAllText(JobsDataPath + "/triggered/" + jobName + "/job_scheduler.log");                          TestTracer.Trace("Scheduler log - " + schedulerLog);                      }                      catch                      {                      }                        throw;                  }                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to not trigger the job again");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    CommandResult dateTimeResult = appManager.CommandExecutor.ExecuteCommand("echo %date% %time%"' String.Empty).Result;                  DateTime currentDateTime = DateTime.Parse(dateTimeResult.Output.Trim());                  DateTime scheduledDateTime = currentDateTime.AddSeconds(10);                    string cronExpression =                      "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month);                    TestTracer.Trace("Scheduling triggered job to " + cronExpression);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' cronExpression);                    TestTracer.Trace("Expect schedule to trigger the job");                    Thread.Sleep(10*1000);                    try                  {                      VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                  }                  catch (Exception)                  {                      try                      {                          string schedulerLog = appManager.VfsManager.ReadAllText(JobsDataPath + "/triggered/" + jobName + "/job_scheduler.log");                          TestTracer.Trace("Scheduler log - " + schedulerLog);                      }                      catch                      {                      }                        throw;                  }                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to not trigger the job again");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    CommandResult dateTimeResult = appManager.CommandExecutor.ExecuteCommand("echo %date% %time%"' String.Empty).Result;                  DateTime currentDateTime = DateTime.Parse(dateTimeResult.Output.Trim());                  DateTime scheduledDateTime = currentDateTime.AddSeconds(10);                    string cronExpression =                      "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month);                    TestTracer.Trace("Scheduling triggered job to " + cronExpression);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' cronExpression);                    TestTracer.Trace("Expect schedule to trigger the job");                    Thread.Sleep(10*1000);                    try                  {                      VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                  }                  catch (Exception)                  {                      try                      {                          string schedulerLog = appManager.VfsManager.ReadAllText(JobsDataPath + "/triggered/" + jobName + "/job_scheduler.log");                          TestTracer.Trace("Scheduler log - " + schedulerLog);                      }                      catch                      {                      }                        throw;                  }                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to not trigger the job again");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule,The following statement contains a magic number: RunScenario("ScheduledTriggeredJobWithExactTimeIsInvokedOnSchedule"' appManager =>              {                  const string jobName = "job1";                    TestTracer.Trace("Copying the script to the triggered job directory");                    appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                    // Wait for file watcher to pick up                  Thread.Sleep(30 * 1000);                    CommandResult dateTimeResult = appManager.CommandExecutor.ExecuteCommand("echo %date% %time%"' String.Empty).Result;                  DateTime currentDateTime = DateTime.Parse(dateTimeResult.Output.Trim());                  DateTime scheduledDateTime = currentDateTime.AddSeconds(10);                    string cronExpression =                      "{{\"schedule\": \"{0} {1} {2} {3} {4} *\"}}".FormatInvariant(scheduledDateTime.Second' scheduledDateTime.Minute' scheduledDateTime.Hour' scheduledDateTime.Day' scheduledDateTime.Month);                    TestTracer.Trace("Scheduling triggered job to " + cronExpression);                    appManager.VfsManager.WriteAllText(TriggeredJobBinPath + "/" + jobName + "/settings.job"' cronExpression);                    TestTracer.Trace("Expect schedule to trigger the job");                    Thread.Sleep(10*1000);                    try                  {                      VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' "echo "' null' null' scheduledTriggeredJob: true);                  }                  catch (Exception)                  {                      try                      {                          string schedulerLog = appManager.VfsManager.ReadAllText(JobsDataPath + "/triggered/" + jobName + "/job_scheduler.log");                          TestTracer.Trace("Scheduler log - " + schedulerLog);                      }                      catch                      {                      }                        throw;                  }                    VerifyVerificationFile(appManager' new string[] { ExpectedVerificationFileContent });                    TestTracer.Trace("Expect schedule to not trigger the job again");              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,TriggeredJobCallsSubscribedWebHooks,The following statement contains a magic number: RunScenario("TriggeredJobTriggers"' appManager =>                  {                      using (var hookAppRepository = Git.Clone("NodeWebHookTest"))                      {                          appManager.GitDeploy(hookAppRepository.PhysicalPath);                            string hookAddress = appManager.SiteUrl + hook;                            TestTracer.Trace("Subscribe web hook to " + hookAddress);                          appManager.WebHooksManager.SubscribeAsync(new WebHook(HookEventTypes.TriggeredJobFinished' hookAddress)).Wait();                            appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' JobScript).Wait();                          appManager.JobsManager.InvokeTriggeredJobAsync(jobName).Wait();                            WaitUntilAssertVerified(                              "verify webhook called"'                              TimeSpan.FromSeconds(10)'                              () =>                              {                                  TestTracer.Trace("Verify webhook called");                                  using (var httpClient = new HttpClient())                                  {                                      var response = httpClient.GetAsync(hookAddress).Result;                                      string responseContent = response.Content.ReadAsStringAsync().Result;                                        TestTracer.Trace("Received response: {0}"' responseContent);                                        string[] webHookResults = responseContent.Split(new char[] { '\n' }' StringSplitOptions.RemoveEmptyEntries);                                        Assert.Equal(1' webHookResults.Count());                                        dynamic webHookResultJson = JsonConvert.DeserializeObject(webHookResults[0]);                                      var triggeredJobRun = JsonConvert.DeserializeObject<TriggeredJobRun>((string)webHookResultJson.body);                                      AssertTriggeredJobRun(appManager' triggeredJobRun' jobName' "Success"' "echo ");                                  }                              });                      }                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The following statement contains a magic number: RunScenario("InPlaceJobRunsInPlace"' appManager =>              {                  const string jobName = "joba";                  const string expectedTempStr = "Temp\\jobs\\triggered\\" + jobName;                  const string expectedAppDataStr = "App_Data\\jobs\\triggered\\" + jobName;                    TestTracer.Trace("Create the triggered WebJob");                  appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' "cd\n").Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' expectedTempStr);                    var jobSettings = new JobSettings();                    TestTracer.Trace("Set triggered WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' expectedAppDataStr);                    TestTracer.Trace("Set triggered WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' expectedTempStr);                    TestTracer.Trace("Create the continuous WebJob");                  appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedAppDataStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                    appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                  WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The following statement contains a magic number: RunScenario("InPlaceJobRunsInPlace"' appManager =>              {                  const string jobName = "joba";                  const string expectedTempStr = "Temp\\jobs\\triggered\\" + jobName;                  const string expectedAppDataStr = "App_Data\\jobs\\triggered\\" + jobName;                    TestTracer.Trace("Create the triggered WebJob");                  appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' "cd\n").Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' expectedTempStr);                    var jobSettings = new JobSettings();                    TestTracer.Trace("Set triggered WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' expectedAppDataStr);                    TestTracer.Trace("Set triggered WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' expectedTempStr);                    TestTracer.Trace("Create the continuous WebJob");                  appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedAppDataStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                    appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                  WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The following statement contains a magic number: RunScenario("InPlaceJobRunsInPlace"' appManager =>              {                  const string jobName = "joba";                  const string expectedTempStr = "Temp\\jobs\\triggered\\" + jobName;                  const string expectedAppDataStr = "App_Data\\jobs\\triggered\\" + jobName;                    TestTracer.Trace("Create the triggered WebJob");                  appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' "cd\n").Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' expectedTempStr);                    var jobSettings = new JobSettings();                    TestTracer.Trace("Set triggered WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' expectedAppDataStr);                    TestTracer.Trace("Set triggered WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' expectedTempStr);                    TestTracer.Trace("Create the continuous WebJob");                  appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedAppDataStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                    appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                  WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The following statement contains a magic number: RunScenario("InPlaceJobRunsInPlace"' appManager =>              {                  const string jobName = "joba";                  const string expectedTempStr = "Temp\\jobs\\triggered\\" + jobName;                  const string expectedAppDataStr = "App_Data\\jobs\\triggered\\" + jobName;                    TestTracer.Trace("Create the triggered WebJob");                  appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' "cd\n").Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' expectedTempStr);                    var jobSettings = new JobSettings();                    TestTracer.Trace("Set triggered WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' expectedAppDataStr);                    TestTracer.Trace("Set triggered WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' expectedTempStr);                    TestTracer.Trace("Create the continuous WebJob");                  appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedAppDataStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                    appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                  WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,InPlaceJobRunsInPlace,The following statement contains a magic number: RunScenario("InPlaceJobRunsInPlace"' appManager =>              {                  const string jobName = "joba";                  const string expectedTempStr = "Temp\\jobs\\triggered\\" + jobName;                  const string expectedAppDataStr = "App_Data\\jobs\\triggered\\" + jobName;                    TestTracer.Trace("Create the triggered WebJob");                  appManager.JobsManager.CreateTriggeredJobAsync(jobName' "run.cmd"' "cd\n").Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 1' "Success"' expectedTempStr);                    var jobSettings = new JobSettings();                    TestTracer.Trace("Set triggered WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 2' "Success"' expectedAppDataStr);                    TestTracer.Trace("Set triggered WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                  appManager.JobsManager.SetTriggeredJobSettingsAsync(jobName' jobSettings).Wait();                    TestTracer.Trace("Trigger the triggered WebJob");                  VerifyTriggeredJobTriggers(appManager' jobName' 3' "Success"' expectedTempStr);                    TestTracer.Trace("Create the continuous WebJob");                  appManager.JobsManager.CreateContinuousJobAsync(jobName' "run.cmd"' "cd > %WEBROOT_PATH%\\..\\..\\LogFiles\\verification.txt.%WEBSITE_INSTANCE_ID%\n").Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place true");                  jobSettings.SetSetting("is_in_place"' true);                  appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                    WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedAppDataStr }));                    TestTracer.Trace("Set continuous WebJob to is_in_place false");                  jobSettings.SetSetting("is_in_place"' false);                    appManager.JobsManager.SetContinuousJobSettingsAsync(jobName' jobSettings).Wait();                  WaitUntilAssertVerified(                      "verification file"'                      TimeSpan.FromSeconds(30)'                      () => VerifyVerificationFile(appManager' new[] { expectedTempStr }));              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CreateAndDeleteJobSucceeds,The following statement contains a magic number: RunScenario("CreateAndDeleteJobSucceeds"' appManager =>              {                  string zippedJobBinaries = BuildZippedJobBinaries();                    appManager.JobsManager.CreateTriggeredJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateTriggeredJobAsync("job2"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job2"' zippedJobBinaries).Wait();                    // Disabling a continuous job should not affect the job count                  WaitUntilAssertVerified(                      "disable continuous job"'                      TimeSpan.FromSeconds(60)'                      () => appManager.JobsManager.DisableContinuousJobAsync("job1").Wait());                    // Adding a setting to a triggered job should not affect the job count                  var jobSettings = new JobSettings();                  jobSettings["one"] = 1;                  appManager.JobsManager.SetTriggeredJobSettingsAsync("job1"' jobSettings).Wait();                    WaitUntilAssertVerified(                     "get jobs count"'                     TimeSpan.FromSeconds(60)'                     () =>                     {                         var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                         var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                           Assert.Equal(2' triggeredJobs.Count());                         Assert.Equal(2' continuousJobs.Count());                     }                     );                    VerifyTriggeredJobTriggers(appManager' "job1"' 1' "Success"' "echo ");                    appManager.JobsManager.DeleteTriggeredJobAsync("job1").Wait();                  appManager.JobsManager.DeleteTriggeredJobAsync("job2").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job1").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job2").Wait();                  WaitUntilAssertVerified(                    "get jobs count"'                    TimeSpan.FromSeconds(60)'                    () =>                    {                        var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                        var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                          Assert.Equal(0' triggeredJobs.Count());                        Assert.Equal(0' continuousJobs.Count());                    }                    );              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CreateAndDeleteJobSucceeds,The following statement contains a magic number: RunScenario("CreateAndDeleteJobSucceeds"' appManager =>              {                  string zippedJobBinaries = BuildZippedJobBinaries();                    appManager.JobsManager.CreateTriggeredJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateTriggeredJobAsync("job2"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job2"' zippedJobBinaries).Wait();                    // Disabling a continuous job should not affect the job count                  WaitUntilAssertVerified(                      "disable continuous job"'                      TimeSpan.FromSeconds(60)'                      () => appManager.JobsManager.DisableContinuousJobAsync("job1").Wait());                    // Adding a setting to a triggered job should not affect the job count                  var jobSettings = new JobSettings();                  jobSettings["one"] = 1;                  appManager.JobsManager.SetTriggeredJobSettingsAsync("job1"' jobSettings).Wait();                    WaitUntilAssertVerified(                     "get jobs count"'                     TimeSpan.FromSeconds(60)'                     () =>                     {                         var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                         var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                           Assert.Equal(2' triggeredJobs.Count());                         Assert.Equal(2' continuousJobs.Count());                     }                     );                    VerifyTriggeredJobTriggers(appManager' "job1"' 1' "Success"' "echo ");                    appManager.JobsManager.DeleteTriggeredJobAsync("job1").Wait();                  appManager.JobsManager.DeleteTriggeredJobAsync("job2").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job1").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job2").Wait();                  WaitUntilAssertVerified(                    "get jobs count"'                    TimeSpan.FromSeconds(60)'                    () =>                    {                        var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                        var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                          Assert.Equal(0' triggeredJobs.Count());                        Assert.Equal(0' continuousJobs.Count());                    }                    );              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CreateAndDeleteJobSucceeds,The following statement contains a magic number: RunScenario("CreateAndDeleteJobSucceeds"' appManager =>              {                  string zippedJobBinaries = BuildZippedJobBinaries();                    appManager.JobsManager.CreateTriggeredJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateTriggeredJobAsync("job2"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job2"' zippedJobBinaries).Wait();                    // Disabling a continuous job should not affect the job count                  WaitUntilAssertVerified(                      "disable continuous job"'                      TimeSpan.FromSeconds(60)'                      () => appManager.JobsManager.DisableContinuousJobAsync("job1").Wait());                    // Adding a setting to a triggered job should not affect the job count                  var jobSettings = new JobSettings();                  jobSettings["one"] = 1;                  appManager.JobsManager.SetTriggeredJobSettingsAsync("job1"' jobSettings).Wait();                    WaitUntilAssertVerified(                     "get jobs count"'                     TimeSpan.FromSeconds(60)'                     () =>                     {                         var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                         var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                           Assert.Equal(2' triggeredJobs.Count());                         Assert.Equal(2' continuousJobs.Count());                     }                     );                    VerifyTriggeredJobTriggers(appManager' "job1"' 1' "Success"' "echo ");                    appManager.JobsManager.DeleteTriggeredJobAsync("job1").Wait();                  appManager.JobsManager.DeleteTriggeredJobAsync("job2").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job1").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job2").Wait();                  WaitUntilAssertVerified(                    "get jobs count"'                    TimeSpan.FromSeconds(60)'                    () =>                    {                        var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                        var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                          Assert.Equal(0' triggeredJobs.Count());                        Assert.Equal(0' continuousJobs.Count());                    }                    );              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CreateAndDeleteJobSucceeds,The following statement contains a magic number: RunScenario("CreateAndDeleteJobSucceeds"' appManager =>              {                  string zippedJobBinaries = BuildZippedJobBinaries();                    appManager.JobsManager.CreateTriggeredJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateTriggeredJobAsync("job2"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job2"' zippedJobBinaries).Wait();                    // Disabling a continuous job should not affect the job count                  WaitUntilAssertVerified(                      "disable continuous job"'                      TimeSpan.FromSeconds(60)'                      () => appManager.JobsManager.DisableContinuousJobAsync("job1").Wait());                    // Adding a setting to a triggered job should not affect the job count                  var jobSettings = new JobSettings();                  jobSettings["one"] = 1;                  appManager.JobsManager.SetTriggeredJobSettingsAsync("job1"' jobSettings).Wait();                    WaitUntilAssertVerified(                     "get jobs count"'                     TimeSpan.FromSeconds(60)'                     () =>                     {                         var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                         var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                           Assert.Equal(2' triggeredJobs.Count());                         Assert.Equal(2' continuousJobs.Count());                     }                     );                    VerifyTriggeredJobTriggers(appManager' "job1"' 1' "Success"' "echo ");                    appManager.JobsManager.DeleteTriggeredJobAsync("job1").Wait();                  appManager.JobsManager.DeleteTriggeredJobAsync("job2").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job1").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job2").Wait();                  WaitUntilAssertVerified(                    "get jobs count"'                    TimeSpan.FromSeconds(60)'                    () =>                    {                        var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                        var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                          Assert.Equal(0' triggeredJobs.Count());                        Assert.Equal(0' continuousJobs.Count());                    }                    );              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CreateAndDeleteJobSucceeds,The following statement contains a magic number: RunScenario("CreateAndDeleteJobSucceeds"' appManager =>              {                  string zippedJobBinaries = BuildZippedJobBinaries();                    appManager.JobsManager.CreateTriggeredJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateTriggeredJobAsync("job2"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job1"' zippedJobBinaries).Wait();                  appManager.JobsManager.CreateContinuousJobAsync("job2"' zippedJobBinaries).Wait();                    // Disabling a continuous job should not affect the job count                  WaitUntilAssertVerified(                      "disable continuous job"'                      TimeSpan.FromSeconds(60)'                      () => appManager.JobsManager.DisableContinuousJobAsync("job1").Wait());                    // Adding a setting to a triggered job should not affect the job count                  var jobSettings = new JobSettings();                  jobSettings["one"] = 1;                  appManager.JobsManager.SetTriggeredJobSettingsAsync("job1"' jobSettings).Wait();                    WaitUntilAssertVerified(                     "get jobs count"'                     TimeSpan.FromSeconds(60)'                     () =>                     {                         var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                         var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                           Assert.Equal(2' triggeredJobs.Count());                         Assert.Equal(2' continuousJobs.Count());                     }                     );                    VerifyTriggeredJobTriggers(appManager' "job1"' 1' "Success"' "echo ");                    appManager.JobsManager.DeleteTriggeredJobAsync("job1").Wait();                  appManager.JobsManager.DeleteTriggeredJobAsync("job2").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job1").Wait();                  appManager.JobsManager.DeleteContinuousJobAsync("job2").Wait();                  WaitUntilAssertVerified(                    "get jobs count"'                    TimeSpan.FromSeconds(60)'                    () =>                    {                        var triggeredJobs = appManager.JobsManager.ListTriggeredJobsAsync().Result;                        var continuousJobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                          Assert.Equal(0' triggeredJobs.Count());                        Assert.Equal(0' continuousJobs.Count());                    }                    );              });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyTriggeredJobTriggers,The following statement contains a magic number: WaitUntilAssertVerified(                      "verify triggered job run"'                      TimeSpan.FromSeconds(30)'                      () =>                      {                          TriggeredJobHistory triggeredJobHistory = appManager.JobsManager.GetTriggeredJobHistoryAsync(jobName).Result;                          Assert.NotNull(triggeredJobHistory);                          Assert.Equal(expectedNumberOfRuns' triggeredJobHistory.TriggeredJobRuns.Count());                            TriggeredJobRun triggeredJobRun = triggeredJobHistory.TriggeredJobRuns.FirstOrDefault();                          AssertTriggeredJobRun(appManager' triggeredJobRun' jobName' expectedStatus' expectedOutput' expectedError);                      });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobEnabled,The following statement contains a magic number: WaitUntilAssertVerified(                  "continuous job enabled"'                  TimeSpan.FromSeconds(30)'                  () =>                  {                      var jobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                      Assert.Equal(1' jobs.Count());                      Assert.Equal("Running"' jobs.First().Status);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobEnabled,The following statement contains a magic number: WaitUntilAssertVerified(                  "make sure process is up"'                  TimeSpan.FromSeconds(30)'                  () =>                  {                      var allProcesses = appManager.ProcessManager.GetProcessesAsync().Result;                      var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                      Assert.NotNull(process);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobDisabled,The following statement contains a magic number: WaitUntilAssertVerified(                  "continuous job disabled"'                  TimeSpan.FromSeconds(40)'                  () =>                  {                      var jobs = appManager.JobsManager.ListContinuousJobsAsync().Result;                      Assert.Equal(1' jobs.Count());                      Assert.Equal("Stopped"' jobs.First().Status);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,VerifyContinuousJobDisabled,The following statement contains a magic number: WaitUntilAssertVerified(                  "make sure process is down"'                  TimeSpan.FromSeconds(40)'                  () =>                  {                      var allProcesses = appManager.ProcessManager.GetProcessesAsync().Result;                      var process = allProcesses.FirstOrDefault(p => String.Equals("ConsoleWorker"' p.Name' StringComparison.OrdinalIgnoreCase));                      Assert.Null(process);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,CleanupTest,The following statement contains a magic number: WaitUntilAssertVerified(                  "clean site for jobs"'                  TimeSpan.FromSeconds(60)'                  () =>                  {                      appManager.VfsManager.Delete(JobsBinPath' recursive: true);                      appManager.VfsManager.Delete(JobsDataPath' recursive: true);                        var logFiles = appManager.VfsManager.ListAsync("LogFiles").Result;                      foreach (var logFile in logFiles)                      {                          if (logFile.Name.StartsWith("appSettings.txt"' StringComparison.OrdinalIgnoreCase) ||                              logFile.Name.StartsWith("verification.txt"' StringComparison.OrdinalIgnoreCase))                          {                              appManager.VfsManager.Delete("LogFiles/" + logFile.Name);                          }                      }                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,PushAndVerifyConsoleWorker,The following statement contains a magic number: WaitUntilAssertVerified(                  "verify continuous job"'                  TimeSpan.FromSeconds(60)'                  () =>                  {                      ContinuousJob deployedJob = appManager.JobsManager.GetContinuousJobAsync("deployedJob").Result;                      AssertContinuousJob(expectedContinuousJob' deployedJob);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,PushAndVerifyConsoleWorker,The following statement contains a magic number: WaitUntilAssertVerified(                  "verification file"'                  TimeSpan.FromSeconds(30)'                  () =>                  {                      VerifyVerificationFile(appManager' expectedVerificationFileLines);                  });
Magic Number,Kudu.FunctionalTests.Jobs,WebJobsTests,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\Jobs\WebJobsTests.cs,WaitUntilAssertVerified,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,SiteExtensionShouldDeployWebJobs,The following statement contains a magic number: await ApplicationManager.RunAsync(appName' async appManager =>              {                  if (useSiteExtensionV1)                  {                      await appManager.SettingsManager.SetValue(SettingsKeys.UseSiteExtensionV1' "1");                  }                    var manager = appManager.SiteExtensionManager;                  await CleanSiteExtensions(manager);                    TestTracer.Trace("Install site extension with jobs");                  await manager.InstallExtension("filecounterwithwebjobs"' null' "https://www.myget.org/F/amitaptest/");                    TestTracer.Trace("Verify jobs were deployed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(1' continuousJobs.Length);                      Assert.Equal("filecounterwithwebjobs(cjoba)"' continuousJobs[0].Name);                      TestTracer.Trace("Job status - {0}"' continuousJobs[0].Status);                      Assert.Equal("PendingRestart"' continuousJobs[0].Status);                  }' 100' 500);                    TriggeredJob[] triggeredJobs;                  await OperationManager.AttemptAsync(async () =>                  {                      triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(2' triggeredJobs.Length);                      Assert.Equal("filecounterwithwebjobs(tjoba)"' triggeredJobs[0].Name);                      Assert.Equal("filecounterwithwebjobs(tjobb)"' triggeredJobs[1].Name);                  }' 100' 500);                    TestTracer.Trace("Uninstall site extension with jobs");                  await manager.UninstallExtension("filecounterwithwebjobs");                    TestTracer.Trace("Verify jobs removed");                  await OperationManager.AttemptAsync(async () =>                  {                      var continuousJobs2 = (await appManager.JobsManager.ListContinuousJobsAsync()).ToArray();                      Assert.Equal(0' continuousJobs2.Length);                        triggeredJobs = (await appManager.JobsManager.ListTriggeredJobsAsync()).ToArray();                      Assert.Equal(0' triggeredJobs.Length);                  }' 100' 500);              });
Magic Number,Kudu.FunctionalTests.SiteExtensions,SiteExtensionApiFacts,C:\research\architectureSmells\repos\projectkudu_kudu\Kudu.FunctionalTests\SiteExtensions\SiteExtensionApiFacts.cs,PollAndVerifyAfterArmInstallation,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
