Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Kudu.SiteManagement.Configuration,BindingConfiguration,C:\repos\projectkudu_kudu\Kudu.SiteManagement\Configuration\IBindingConfiguration.cs,BindingConfiguration,The method has 5 parameters. Parameters: url' scheme' siteType' certificate' requireSni
Long Parameter List,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The method has 5 parameters. Parameters: iis' applicationName' siteName' siteRoot' bindings
Long Statement,Kudu.SiteManagement.Configuration,KuduConfiguration,C:\repos\projectkudu_kudu\Kudu.SiteManagement\Configuration\IKuduConfiguration.cs,Load,The length of the statement  "            return new KuduConfiguration(root' ConfigurationManager.GetSection("kudu.management") as KuduConfigurationSection' ConfigurationManager.AppSettings); " is 149.
Long Statement,Kudu.SiteManagement.Context,KuduContext,C:\repos\projectkudu_kudu\Kudu.SiteManagement\Context\IKuduContext.cs,GetAddresses,The length of the statement  "            return (from ip in host.AddressList where ip.AddressFamily == AddressFamily.InterNetwork select ip.ToString()).ToList(); " is 120.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The length of the statement  "                    var serviceSite = CreateSiteAsync(iis' applicationName' GetServiceSite(applicationName)' _context.Configuration.ServiceSitePath' serviceSiteBindings); " is 150.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The length of the statement  "                        .Select(url => String.Format("{0}://{1}:{2}/"' url.Protocol' String.IsNullOrEmpty(url.Host) ? "localhost" : url.Host' url.EndPoint.Port)) " is 137.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The length of the statement  "                        .Select(url => String.Format("{0}://{1}:{2}/"' url.Protocol' String.IsNullOrEmpty(url.Host) ? "localhost" : url.Host' url.EndPoint.Port)) " is 137.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,BuildDefaultBindings,The length of the statement  "                ? new BindingInformation { Configuration = configuration' Binding = CreateBindingInformation(applicationName' configuration.Url) } " is 130.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,BuildDefaultBindings,The length of the statement  "                : new BindingInformation { Configuration = configuration' Binding = CreateBindingInformation(applicationName' configuration.Url' defaultPort: "443") }) " is 151.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,BuildDefaultBindings,The length of the statement  "                //NOTE: We order the bindings so we get the http bindings on top' this means we can easily prioritise those for testing site setup later. " is 137.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,DeleteSiteAsync,The length of the statement  "                    //NOTE: For some reason' deleting a site with a HTTPS bindings results in a NotImplementedException on Windows 7' but it seems to remove everything relevant anyways. " is 165.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,DeleteSiteAsync,The length of the statement  "            //NOTE: DeleteSiteAsync was not split into to usings before' but by calling CommitChanges midway' the iis manager goes into a read-only mode on Windows7 which then provokes " is 172.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,DeleteSiteAsync,The length of the statement  "                    string userDir = Path.GetDirectoryName(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile).TrimEnd(Path.DirectorySeparatorChar)); " is 142.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,EnsureAppPool,The length of the statement  "                // error CS0041 : Unexpected error writing debug information -- 'Retrieving the COM class factory for component with CLSID {0AE2DEB0-F901-478B-BB9F-881EE8066788} failed due to the following error : 800703fa Illegal operation attempted on a registry key that has been marked for deletion. (Exception from HRESULT: 0x800703FA).' " is 326.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The length of the statement  "                    : iis.Sites.Add(siteName' first.Binding' siteRoot' _certificateSearcher.Lookup(first.Certificate).ByFriendlyName().GetCertHash()); " is 130.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The length of the statement  "                                throw new ConfigurationErrorsException(string.Format("Could not find a certificate by the name '{0}'."' binding.Certificate)); " is 126.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,EnsureDefaultDocument,The length of the statement  "            IIS.ConfigurationSection defaultDocumentSection = applicationHostConfiguration.GetSection("system.webServer/defaultDocument"); " is 126.
Long Statement,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,ConfigurationElementContainsHostingStart,The length of the statement  "            return valueAttribute != null && String.Equals(HostingStartHtml' valueAttribute.ToString()' StringComparison.OrdinalIgnoreCase); " is 128.
Empty Catch Block,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The method has an empty catch block.
Empty Catch Block,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,DeleteSiteAsync,The method has an empty catch block.
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,GetSiteUrls,The following statement contains a magic number: return site.Bindings.Select(binding => new UriBuilder              {                  Host = string.IsNullOrEmpty(binding.Host) ? "localhost" : binding.Host'                  Scheme = binding.Protocol'                  Port = binding.EndPoint.Port == 80 ? -1 : binding.EndPoint.Port              }).Select(builder => builder.ToString()).ToList();
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,DeleteSiteAsync,The following statement contains a magic number: using (var iis = GetServerManager())              {                  // Get the app pool for this application                  ApplicationPool kuduPool = iis.ApplicationPools[appPoolName];                    if (kuduPool == null)                  {                      // If there's no app pool then do nothing                      return;                  }                    await Task.WhenAll(                      DeleteSiteAsync(iis' GetLiveSite(applicationName))'                      // Don't delete the physical files for the service site                      DeleteSiteAsync(iis' GetServiceSite(applicationName)' deletePhysicalFiles: false)                      );                      try                  {                      iis.CommitChanges();                      Thread.Sleep(1000);                  }                  catch (NotImplementedException)                  {                      //NOTE: For some reason' deleting a site with a HTTPS bindings results in a NotImplementedException on Windows 7' but it seems to remove everything relevant anyways.                  }              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,AddSiteBinding,The following statement contains a magic number: try              {                  using (ServerManager iis = GetServerManager())                  {                      if (!IsAvailable(binding.Host' binding.Port' iis))                      {                          return false;                      }                        IIS.Site site = binding.SiteType == SiteType.Live                          ? iis.Sites[GetLiveSite(applicationName)]                          : iis.Sites[GetServiceSite(applicationName)];                        if (site == null)                      {                          return true;                      }                        string bindingInformation = string.Format("{0}:{1}:{2}"' binding.Ip' binding.Port' binding.Host);                      switch (binding.Schema)                      {                          case UriScheme.Http:                              site.Bindings.Add(bindingInformation' "http");                              break;                            case UriScheme.Https:                              Certificate cert = _certificateSearcher.Lookup(binding.Certificate).ByThumbprint();                              Binding bind = site.Bindings.Add(bindingInformation' cert.GetCertHash()' cert.StoreName);                              if (binding.Sni)                              {                                  bind.SetAttributeValue("sslFlags"' SslFlags.Sni);                              }                                break;                      }                      iis.CommitChanges();                      Thread.Sleep(1000);                  }                  return true;              }              catch (Exception ex)              {                  Debug.WriteLine(ex);                  return false;              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,RemoveSiteBinding,The following statement contains a magic number: try              {                  using (ServerManager iis = GetServerManager())                  {                      IIS.Site site = siteType == SiteType.Live                          ? iis.Sites[GetLiveSite(applicationName)]                          : iis.Sites[GetServiceSite(applicationName)];                        if (site == null)                      { return true; }                        Uri uri = new Uri(siteBinding);                      Binding binding = site.Bindings                          .FirstOrDefault(x => x.Host.Equals(uri.Host)                              && x.EndPoint.Port.Equals(uri.Port)                              && x.Protocol.Equals(uri.Scheme));                        if (binding == null)                      { return true; }                        site.Bindings.Remove(binding);                      iis.CommitChanges();                      Thread.Sleep(1000);                  }                  return true;              }              catch (Exception ex)              {                  Debug.WriteLine(ex);                  return false;              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,GetRandomPort,The following statement contains a magic number: int randomPort = portNumberGenRnd.Next(1025' 65535);
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,GetRandomPort,The following statement contains a magic number: int randomPort = portNumberGenRnd.Next(1025' 65535);
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,GetRandomPort,The following statement contains a magic number: while (!IsAvailable(randomPort' iis))              {                  randomPort = portNumberGenRnd.Next(1025' 65535);              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,GetRandomPort,The following statement contains a magic number: while (!IsAvailable(randomPort' iis))              {                  randomPort = portNumberGenRnd.Next(1025' 65535);              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateBindingInformation,The following statement contains a magic number: switch (parts.Length)              {                  case 1: // kudu.mydomain                      host = parts[0];                      break;                  case 2: // kudu.mydomain:8080                      host = parts[0];                      port = parts[1];                      break;                  case 3: // 192.168.100.3:80:kudu.mydomain                      ip = parts[0];                      port = parts[1];                      host = parts[2];                      break;              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateBindingInformation,The following statement contains a magic number: switch (parts.Length)              {                  case 1: // kudu.mydomain                      host = parts[0];                      break;                  case 2: // kudu.mydomain:8080                      host = parts[0];                      port = parts[1];                      break;                  case 3: // 192.168.100.3:80:kudu.mydomain                      ip = parts[0];                      port = parts[1];                      host = parts[2];                      break;              }
Magic Number,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateBindingInformation,The following statement contains a magic number: switch (parts.Length)              {                  case 1: // kudu.mydomain                      host = parts[0];                      break;                  case 2: // kudu.mydomain:8080                      host = parts[0];                      port = parts[1];                      break;                  case 3: // 192.168.100.3:80:kudu.mydomain                      ip = parts[0];                      port = parts[1];                      host = parts[2];                      break;              }
Missing Default,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,AddSiteBinding,The following switch statement is missing a default case: switch (binding.Schema)                      {                          case UriScheme.Http:                              site.Bindings.Add(bindingInformation' "http");                              break;                            case UriScheme.Https:                              Certificate cert = _certificateSearcher.Lookup(binding.Certificate).ByThumbprint();                              Binding bind = site.Bindings.Add(bindingInformation' cert.GetCertHash()' cert.StoreName);                              if (binding.Sni)                              {                                  bind.SetAttributeValue("sslFlags"' SslFlags.Sni);                              }                                break;                      }
Missing Default,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateSiteAsync,The following switch statement is missing a default case: switch (binding.Scheme)                      {                          case UriScheme.Http:                              site.Bindings.Add(binding.Binding' "http");                              break;                            case UriScheme.Https:                              Certificate cert = _certificateSearcher.Lookup(binding.Certificate).ByFriendlyName();                              if (cert == null)                              {                                  throw new ConfigurationErrorsException(string.Format("Could not find a certificate by the name '{0}'."' binding.Certificate));                              }                                Binding bind = site.Bindings.Add(binding.Binding' cert.GetCertHash()' cert.StoreName);                              if (binding.Configuration.RequireSni)                              {                                  bind.SetAttributeValue("sslFlags"' SslFlags.Sni);                              }                              break;                      }
Missing Default,Kudu.SiteManagement,SiteManager,C:\repos\projectkudu_kudu\Kudu.SiteManagement\SiteManager.cs,CreateBindingInformation,The following switch statement is missing a default case: switch (parts.Length)              {                  case 1: // kudu.mydomain                      host = parts[0];                      break;                  case 2: // kudu.mydomain:8080                      host = parts[0];                      port = parts[1];                      break;                  case 3: // 192.168.100.3:80:kudu.mydomain                      ip = parts[0];                      port = parts[1];                      host = parts[2];                      break;              }
