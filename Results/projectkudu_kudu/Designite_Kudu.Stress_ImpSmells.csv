Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,RetryWithTryCatch,The method has 5 parameters. Parameters: operationDescription' numRetries' delayBetweenRetries' maxCompletionTime' operation
Long Statement,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,Main,The length of the statement  "            Trace.WriteLine(string.Format("Stress Starting Run.  Start time: {0}'  Scenario Name: {1}' App Name: {2}'  Duration: {3} secs"' startTime' scenarioName' appName' testDuration)); " is 177.
Long Statement,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,Main,The length of the statement  "            string msg = string.Format ("Test run complete. Total Iterations:  {0} ' Passed: {1} ' Failed: {2} "' iterationCount' testsPassed' testsFailed) ; " is 145.
Long Statement,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,ReadGitAppsList,The length of the statement  "                throw new ApplicationException("Test error:  The applications list file 'GitApps.xml' was not found. Unable to continue"); " is 122.
Long Statement,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,LogIterationResult,The length of the statement  "            string msg = string.Format("{0}' {1}' {2}' {3}' {4}' {5}' {6}"' "Stress Result"' iterationCount' DateTime.Now' passed ? "Passed" : "Failed"'  elapsedSeconds' testName' message); " is 177.
Long Statement,Kudu.Stress,StressTestCases,C:\repos\projectkudu_kudu\Kudu.Stress\StressTestCases.cs,StressGitPushScenario,The length of the statement  "            DoGitPush(testArtifacts.appManager' testArtifacts.testRespository' TestApplication.AppName' TestApplication.VerificationContent); " is 129.
Long Statement,Kudu.Stress,StressTestCases,C:\repos\projectkudu_kudu\Kudu.Stress\StressTestCases.cs,DoGitRedeploy,The length of the statement  "                string msg = string.Format("Redeploy operation failed for commit ID:  {0}.  Exception:  {1}"' commitId' ex.ToString() ); " is 120.
Long Statement,Kudu.Stress,StressTestCases,C:\repos\projectkudu_kudu\Kudu.Stress\StressTestCases.cs,DoGitRedeploy,The length of the statement  "                string msg = string.Format("Redeploy operation completed but expected commit Id was not deployed.  Commit ID:  {0}."' commitId); " is 128.
Long Statement,Kudu.Stress,StressTestCases,C:\repos\projectkudu_kudu\Kudu.Stress\StressTestCases.cs,DoGitPush,The length of the statement  "                string msg = string.Format("Deployment of app {0} failed.  Deployment count:  {1} .   Deployment Status:  {2}"' appName' results.Count' results[0].Status); " is 155.
Long Statement,Kudu.Stress,StressTestCases,C:\repos\projectkudu_kudu\Kudu.Stress\StressTestCases.cs,GetTestArtifacts,The length of the statement  "                        testArtifactStore.TryAdd(testName' new TestArtifacts() { appManager = stressAppManager' resourceMonitor = counterManager' testRespository = testRepository}); " is 157.
Long Statement,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,VerifySite,The length of the statement  "                    string log = string.Format("URL validation error: Failed to validate Site Address. Http Status Code: {0}   for site: {1}"' httpResponse.StatusCode' url); " is 153.
Long Statement,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,VerifySite,The length of the statement  "                string msg = string.Format("URL validation error:  Failed to validate content for site {0}.   Received content was:  {1}"' url' responseContent); " is 145.
Long Statement,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,RetryWithTryCatch,The length of the statement  "                        throw new ApplicationException(string.Format("Exception during operation:  {0}'  Exception Info:  {1}"' operationDescription' ex.ToString())); " is 142.
Long Statement,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,RetryWithTryCatch,The length of the statement  "                        throw new ApplicationException("The folowing operation failed to complete within the alloted time:  " + operationDescription); " is 126.
Long Statement,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The length of the statement  "                string logMsg = string.Format("Stress Process Monitor (time in secs/private bytes/handles/threads)' {0}' {1}' {2}' {3}"' (int)elapsedTime.TotalSeconds' memoryusage' handleCount' threadCount); " is 191.
Long Statement,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The length of the statement  "                    throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Private Bytes:  {0} '  Threshold: {1}"' memoryusage' memorythreshold)); " is 155.
Long Statement,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The length of the statement  "                    throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Handle Count:  {0} '  Threshold: {1}"' memoryusage' handleCountThreshold)); " is 159.
Long Statement,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The length of the statement  "                    throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Thread Count:  {0} '  Threshold: {1}"' threadCount' threadCountThreshold)); " is 159.
Long Statement,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,GetW3wpPid,The length of the statement  "            throw new ApplicationException ("Error accessing process info for w3wp.exe:  No Worker Process found for stress web app in IIS"); " is 129.
Complex Conditional,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,ParseArgs,The conditional expression  "args.Length == 0 || args[0] == "/?" || args[0] == "-?" || args[0] == "?""  is complex.
Magic Number,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,ParseArgs,The following statement contains a magic number: foreach (string arg in args)              {                  string[] parts = arg.Split(new string[]{":"}' 10' StringSplitOptions.None) ;                  if (parts.Length != 2)                  {                      Console.WriteLine(incorrectUsageTxt);                      return false;                  }                    switch (parts[0].ToLower())                  {                      case "/scenarioname":                          scenarioName = parts[1];                          break;                      case "/duration":                          testDuration = int.Parse(parts[1]);                           break;                      case "/appname":                          appName = parts[1];                          break;                      default:                          Console.WriteLine(incorrectUsageTxt);                          return false;                  }              }
Magic Number,Kudu.Stress,KuduStress,C:\repos\projectkudu_kudu\Kudu.Stress\KuduStress.cs,ParseArgs,The following statement contains a magic number: foreach (string arg in args)              {                  string[] parts = arg.Split(new string[]{":"}' 10' StringSplitOptions.None) ;                  if (parts.Length != 2)                  {                      Console.WriteLine(incorrectUsageTxt);                      return false;                  }                    switch (parts[0].ToLower())                  {                      case "/scenarioname":                          scenarioName = parts[1];                          break;                      case "/duration":                          testDuration = int.Parse(parts[1]);                           break;                      case "/appname":                          appName = parts[1];                          break;                      default:                          Console.WriteLine(incorrectUsageTxt);                          return false;                  }              }
Magic Number,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,VerifySite,The following statement contains a magic number: RetryWithTryCatch("Validate site address"' 3' TimeSpan.FromSeconds(10)' TimeSpan.FromMinutes(2)' () =>              {                  HttpClientHandler handler = new HttpClientHandler() ;                  var httpClient = new HttpClient(handler);                  httpResponse = httpClient.GetAsync(new Uri(url)).Result;                  if (httpResponse.StatusCode != HttpStatusCode.OK)                  {                      string log = string.Format("URL validation error: Failed to validate Site Address. Http Status Code: {0}   for site: {1}"' httpResponse.StatusCode' url);                      throw new ApplicationException(log);                  }              });
Magic Number,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,VerifySite,The following statement contains a magic number: RetryWithTryCatch("Validate site address"' 3' TimeSpan.FromSeconds(10)' TimeSpan.FromMinutes(2)' () =>              {                  HttpClientHandler handler = new HttpClientHandler() ;                  var httpClient = new HttpClient(handler);                  httpResponse = httpClient.GetAsync(new Uri(url)).Result;                  if (httpResponse.StatusCode != HttpStatusCode.OK)                  {                      string log = string.Format("URL validation error: Failed to validate Site Address. Http Status Code: {0}   for site: {1}"' httpResponse.StatusCode' url);                      throw new ApplicationException(log);                  }              });
Magic Number,Kudu.Stress,StressUtils,C:\repos\projectkudu_kudu\Kudu.Stress\StressUtils.cs,VerifySite,The following statement contains a magic number: RetryWithTryCatch("Validate site address"' 3' TimeSpan.FromSeconds(10)' TimeSpan.FromMinutes(2)' () =>              {                  HttpClientHandler handler = new HttpClientHandler() ;                  var httpClient = new HttpClient(handler);                  httpResponse = httpClient.GetAsync(new Uri(url)).Result;                  if (httpResponse.StatusCode != HttpStatusCode.OK)                  {                      string log = string.Format("URL validation error: Failed to validate Site Address. Http Status Code: {0}   for site: {1}"' httpResponse.StatusCode' url);                      throw new ApplicationException(log);                  }              });
Magic Number,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The following statement contains a magic number: try              {                  if (w3wpPid < 0)                  {                      w3wpPid = GetW3wpPid(this.webAppName);                      string pidMsg = string.Format("Stress Monitoring Start.  Monitoring w3wp.exe process with PID:  {0}"' w3wpPid);                      Trace.WriteLine(pidMsg);                  }                  w3wpProcess = Process.GetProcessById(w3wpPid);                    TimeSpan elapsedTime = DateTime.Now - startTime;                  int memoryusage = (int)w3wpProcess.PrivateMemorySize64;                  int handleCount = (int)w3wpProcess.HandleCount;                  int threadCount = (int)w3wpProcess.Threads.Count;                  string logMsg = string.Format("Stress Process Monitor (time in secs/private bytes/handles/threads)' {0}' {1}' {2}' {3}"' (int)elapsedTime.TotalSeconds' memoryusage' handleCount' threadCount);                  Trace.WriteLine(logMsg);                    // resource consumption check                  int memorythreshold = 300000000;                  int handleCountThreshold = 1500;                  int threadCountThreshold = 100;                    if (memoryusage > memorythreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Private Bytes:  {0} '  Threshold: {1}"' memoryusage' memorythreshold));                  }                  if (handleCount > handleCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Handle Count:  {0} '  Threshold: {1}"' memoryusage' handleCountThreshold));                  }                  if (threadCount > threadCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Thread Count:  {0} '  Threshold: {1}"' threadCount' threadCountThreshold));                  }              }              catch (Exception ex)              {                  string msg = string.Format("Error accessing w3wp process monitoring info.  Exception:  " + ex.ToString());                  throw new ApplicationException(msg);               }
Magic Number,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The following statement contains a magic number: try              {                  if (w3wpPid < 0)                  {                      w3wpPid = GetW3wpPid(this.webAppName);                      string pidMsg = string.Format("Stress Monitoring Start.  Monitoring w3wp.exe process with PID:  {0}"' w3wpPid);                      Trace.WriteLine(pidMsg);                  }                  w3wpProcess = Process.GetProcessById(w3wpPid);                    TimeSpan elapsedTime = DateTime.Now - startTime;                  int memoryusage = (int)w3wpProcess.PrivateMemorySize64;                  int handleCount = (int)w3wpProcess.HandleCount;                  int threadCount = (int)w3wpProcess.Threads.Count;                  string logMsg = string.Format("Stress Process Monitor (time in secs/private bytes/handles/threads)' {0}' {1}' {2}' {3}"' (int)elapsedTime.TotalSeconds' memoryusage' handleCount' threadCount);                  Trace.WriteLine(logMsg);                    // resource consumption check                  int memorythreshold = 300000000;                  int handleCountThreshold = 1500;                  int threadCountThreshold = 100;                    if (memoryusage > memorythreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Private Bytes:  {0} '  Threshold: {1}"' memoryusage' memorythreshold));                  }                  if (handleCount > handleCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Handle Count:  {0} '  Threshold: {1}"' memoryusage' handleCountThreshold));                  }                  if (threadCount > threadCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Thread Count:  {0} '  Threshold: {1}"' threadCount' threadCountThreshold));                  }              }              catch (Exception ex)              {                  string msg = string.Format("Error accessing w3wp process monitoring info.  Exception:  " + ex.ToString());                  throw new ApplicationException(msg);               }
Magic Number,Kudu.Stress,W3wpResourceMonitor,C:\repos\projectkudu_kudu\Kudu.Stress\W3wpResourceMonitor.cs,CheckAndLogResourceUsage,The following statement contains a magic number: try              {                  if (w3wpPid < 0)                  {                      w3wpPid = GetW3wpPid(this.webAppName);                      string pidMsg = string.Format("Stress Monitoring Start.  Monitoring w3wp.exe process with PID:  {0}"' w3wpPid);                      Trace.WriteLine(pidMsg);                  }                  w3wpProcess = Process.GetProcessById(w3wpPid);                    TimeSpan elapsedTime = DateTime.Now - startTime;                  int memoryusage = (int)w3wpProcess.PrivateMemorySize64;                  int handleCount = (int)w3wpProcess.HandleCount;                  int threadCount = (int)w3wpProcess.Threads.Count;                  string logMsg = string.Format("Stress Process Monitor (time in secs/private bytes/handles/threads)' {0}' {1}' {2}' {3}"' (int)elapsedTime.TotalSeconds' memoryusage' handleCount' threadCount);                  Trace.WriteLine(logMsg);                    // resource consumption check                  int memorythreshold = 300000000;                  int handleCountThreshold = 1500;                  int threadCountThreshold = 100;                    if (memoryusage > memorythreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Private Bytes:  {0} '  Threshold: {1}"' memoryusage' memorythreshold));                  }                  if (handleCount > handleCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Handle Count:  {0} '  Threshold: {1}"' memoryusage' handleCountThreshold));                  }                  if (threadCount > threadCountThreshold)                  {                      throw new ApplicationException(string.Format("W3wp.exe resource threshold exceeded: Thread Count:  {0} '  Threshold: {1}"' threadCount' threadCountThreshold));                  }              }              catch (Exception ex)              {                  string msg = string.Format("Error accessing w3wp process monitoring info.  Exception:  " + ex.ToString());                  throw new ApplicationException(msg);               }
