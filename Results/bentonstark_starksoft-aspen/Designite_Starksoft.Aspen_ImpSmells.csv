Implementation smell,Namespace,Class,File,Method,Description
Long Method,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The method has 104 lines of code.
Long Method,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The method has 111 lines of code.
Complex Method,Starksoft.Aspen.Ftps,FtpsFeatureCollection,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsFeatureCollection.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetHash,Cyclomatic complexity of the method is 8
Complex Method,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,ComputeHash,Cyclomatic complexity of the method is 8
Complex Method,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,TransferBytes,Cyclomatic complexity of the method is 9
Complex Method,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Open,Cyclomatic complexity of the method is 9
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,Cyclomatic complexity of the method is 9
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,Cyclomatic complexity of the method is 13
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Quote,Cyclomatic complexity of the method is 8
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,Cyclomatic complexity of the method is 9
Complex Method,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,CorrectLocalPath,Cyclomatic complexity of the method is 10
Complex Method,Starksoft.Aspen.Ftps,FtpsListItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsListItemParser.cs,ParseUnixFormat,Cyclomatic complexity of the method is 10
Complex Method,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,ExecuteGpg,Cyclomatic complexity of the method is 9
Long Parameter List,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,Encrypt,The method has 5 parameters. Parameters: algo' key' iv' mode' cleartext
Long Parameter List,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,Decrypt,The method has 5 parameters. Parameters: algo' key' iv' mode' ciphertext
Long Parameter List,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,CalculateHash,The method has 5 parameters. Parameters: table' seed' buffer' start' size
Long Parameter List,Starksoft.Aspen.Ftps,TransferProgressEventArgs,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\EventArgs\TransferProgressEventArgs.cs,TransferProgressEventArgs,The method has 6 parameters. Parameters: bytesTransferred' totalBytesTransferred' transferSize' bytesPerSecond' elapsedTime' percentComplete
Long Parameter List,Starksoft.Aspen.Ftps,FtpsMlsxItem,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItem.cs,FtpsMlsxItem,The method has 15 parameters. Parameters: name' modified' size' itemType' attributes' mode' rawText' created' uniqueId' permissions' language' mediaType' characterSet' group' owner
Long Parameter List,Starksoft.Aspen.Ftps,FtpsItem,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsItem.cs,FtpsItem,The method has 8 parameters. Parameters: name' modified' size' itemType' attributes' mode' symbolicLink' rawText
Long Parameter List,Starksoft.Aspen.Proxy,ProxyClientFactory,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\ProxyClientFactory.cs,CreateProxyClient,The method has 5 parameters. Parameters: type' proxyHost' proxyPort' proxyUsername' proxyPassword
Long Parameter List,Starksoft.Aspen.Proxy,ProxyClientFactory,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\ProxyClientFactory.cs,CreateProxyClient,The method has 6 parameters. Parameters: type' tcpClient' proxyHost' proxyPort' proxyUsername' proxyPassword
Long Parameter List,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The method has 5 parameters. Parameters: proxy' command' destinationHost' destinationPort' userId
Long Parameter List,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The method has 5 parameters. Parameters: proxy' command' destinationHost' destinationPort' userId
Long Parameter List,Starksoft.Aspen.Smartcard,SCardDll,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardDll.cs,SCardListCardsA,The method has 6 parameters. Parameters: hContext' pbAtr' rgquidInterfaces' cguidInterfaceCount' mszCards' pcchCards
Long Parameter List,Starksoft.Aspen.Smartcard,SCardDll,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardDll.cs,SCardConnectA,The method has 6 parameters. Parameters: hContext' szReader' dwShareMode' dwPreferredProtocols' phCard' pdwActiveProtocol
Long Parameter List,Starksoft.Aspen.Smartcard,SCardDll,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardDll.cs,SCardTransmit,The method has 7 parameters. Parameters: hCard' pioSendPci' pbSendBuffer' cbSendLength' pioRecvPci' pbRecvBuffer' pcbRecvLength
Long Identifier,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,,The length of the parameter _alwaysAcceptServerCertificate is 30.
Long Identifier,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,,The length of the parameter _sendProtPForImplicitSslConnections is 35.
Long Identifier,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,,The length of the parameter WAIT_FOR_COMMAND_RESPONSE_INTERVAL is 34.
Long Identifier,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,,The length of the parameter SOCKS4_CMD_REPLY_REQUEST_GRANTED is 32.
Long Identifier,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,,The length of the parameter SOCKS4_CMD_REPLY_REQUEST_REJECTED_OR_FAILED is 43.
Long Identifier,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,,The length of the parameter SOCKS4_CMD_REPLY_REQUEST_REJECTED_CANNOT_CONNECT_TO_IDENTD is 58.
Long Identifier,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,,The length of the parameter SOCKS4_CMD_REPLY_REQUEST_REJECTED_DIFFERENT_IDENTD is 50.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_NUMBER_OF_AUTH_METHODS_SUPPORTED is 44.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_NO_AUTHENTICATION_REQUIRED is 45.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_USERNAME_PASSWORD is 36.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_IANA_ASSIGNED_RANGE_BEGIN is 44.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_IANA_ASSIGNED_RANGE_END is 42.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_RESERVED_RANGE_BEGIN is 39.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_RESERVED_RANGE_END is 37.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_AUTH_METHOD_REPLY_NO_ACCEPTABLE_METHODS is 46.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_GENERAL_SOCKS_SERVER_FAILURE is 45.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_CONNECTION_NOT_ALLOWED_BY_RULESET is 50.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_NETWORK_UNREACHABLE is 36.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_HOST_UNREACHABLE is 33.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_CONNECTION_REFUSED is 35.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_COMMAND_NOT_SUPPORTED is 38.
Long Identifier,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,,The length of the parameter SOCKS5_CMD_REPLY_ADDRESS_TYPE_NOT_SUPPORTED is 43.
Long Statement,Starksoft.Aspen,ArrayBuilder,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayBuilder.cs,Append,The length of the statement  "                throw new Exception(String.Format("Data is too large to append.  Current size is {0} bytes."' _buffer.Length.ToString())); " is 122.
Long Statement,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,Parse,The length of the statement  "            // ex: modify=20120822211414;perm=adfr;size=2101;type=file;unique=16UF3F5;UNIX.group=49440;UNIX.mode=0744;UNIX.owner=49440; iphone_settings_icon.jpg " is 148.
Long Statement,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,Parse,The length of the statement  "            // ex: modify=20030225143801;perm=adfr;size=503;type=file;unique=12U24470006;UNIX.group=0;UNIX.mode=0644;UNIX.owner=0; welcome.msg " is 130.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The length of the statement  "                // test to see if the data connection failed to be established sometime the active connection fails due to security settings on the ftp server " is 142.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The length of the statement  "                    throw new FtpsDataConnectionException("Unable to establish a data connection to the destination.  The destination may have refused the connection."); " is 149.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The length of the statement  "            // if no errors occurred and this is not a quoted command then we will wait for the server to send a closing connection message " is 127.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,TransferBytes,The length of the statement  "                            TransferProgress(this' new TransferProgressEventArgs(bytesRead' bytesTotal' _transferSize' bytesPerSec' elapsed' percentComplete)); " is 131.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,TransferBytes,The length of the statement  "                        TransferProgress(this' new TransferProgressEventArgs(bytesRead' bytesTotal' _transferSize' bytesPerSec' elapsed' percentComplete)); " is 131.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateCommandConn,The length of the statement  "                throw new FtpsException("An FTP Host must be specified before opening connection to FTP destination.  Set the appropriate value using the Host property on the FtpsClient object."); " is 180.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateCommandConn,The length of the statement  "                throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "A proxy error occurred while creating connection to FTP destination {0} on port {1}."' _host' _port.ToString(CultureInfo.InvariantCulture))' pex); " is 216.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateCommandConn,The length of the statement  "                throw new FtpsConnectionOpenException(String.Format(CultureInfo.InvariantCulture' "An error occurred while opening a connection to FTP destination {0} on port {1}."' _host' _port.ToString(CultureInfo.InvariantCulture))' ex); " is 224.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetNextCommandResponse,The length of the statement  "                    throw new FtpsCommandResponseTimeoutException("A timeout occurred while waiting for the destination to send a response.  The last reponse from the destination is '" + _response.Text + "'"); " is 189.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateActiveConn,The length of the statement  "                throw new FtpsDataConnectionException(String.Format("An error occurred while issuing active port command '{0}' on an active FTP connection."' portInfo)' fex); " is 158.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetClientIPAddress,The length of the statement  "                    throw new FtpsDataConnectionException("The Client IP address supplied does not match the NetworkProtocol selected.  Please check the NetworkProtcol property setting on the FtpsClient."); " is 186.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenActiveListenerPort,The length of the statement  "                        throw new FtpsDataConnectionException(String.Format(CultureInfo.InvariantCulture' "An error occurred while trying to create an active connection on host {0} port {1}"' localHost' listenerPort.ToString(CultureInfo.InvariantCulture))' socketError); " is 246.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,WaitForDataConn,The length of the statement  "                        throw new FtpsDataConnectionException(String.Format(CultureInfo.InvariantCulture' "The ftp destination was unable to open a data connection to the ftp client on port {0}."' _activePort)); " is 187.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,WaitForDataConn,The length of the statement  "                        throw new FtpsDataConnectionTimeoutException("The data connection timed out waiting for data to transfer from the destination."); " is 129.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreatePassiveConn,The length of the statement  "                throw new FtpsDataConnectionException(String.Format(CultureInfo.InvariantCulture' "An error occurred while opening passive data connection to destination '{0}' on port '{1}'."' host' port)' ex); " is 194.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The length of the statement  "            //  on TCP port 40474 for the data channel. (Note: the destinationPort is the 158'26 pair and is: 158x256 + 26 = 40474). " is 120.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslStream,The length of the statement  "            SslStream ssl = new SslStream(stream' true' new RemoteCertificateValidationCallback(secureStream_ValidateServerCertificate)' null); " is 131.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslStream,The length of the statement  "                    throw new FtpsSecureConnectionException(String.Format("unexpected FtpSecurityProtocol type '{0}'"' _securityProtocol.ToString())); " is 130.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,secureStream_ValidateServerCertificate,The length of the statement  "                ValidateServerCertificateEventArgs args = new ValidateServerCertificateEventArgs(new X509Certificate2(certificate.GetRawCertData())' chain' sslPolicyErrors); " is 157.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,secureStream_ValidateServerCertificate,The length of the statement  "                    throw new FtpsCertificateValidationException(String.Format("Certificate validation failed.  The host name '{0}' does not match the name on the security certificate '{1}'.  To override this behavior' subscribe to the ValidateServerCertificate event to validate certificates."' _host' certificate.Issuer)); " is 304.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,secureStream_ValidateServerCertificate,The length of the statement  "                if (sslPolicyErrors == SslPolicyErrors.None || (sslPolicyErrors & SslPolicyErrors.RemoteCertificateChainErrors) == SslPolicyErrors.RemoteCertificateChainErrors) " is 160.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslExplicitCommandStream,The length of the statement  "                Debug.Assert(authCommand.Length > 0' "auth command should have a value - make sure every enum option in auth command has a corresponding value"); " is 145.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslExplicitCommandStream,The length of the statement  "                throw new FtpsSecureConnectionException(String.Format("An ftp authentication exception occurred while setting up a explicit ssl/tls command stream.  {0}"' fauth.Message)' _response' fauth);                 " is 189.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslExplicitCommandStream,The length of the statement  "                throw new FtpsSecureConnectionException(String.Format("An error occurred while setting up a explicit ssl/tls command stream.  {0}"' fex.Message)' _response' fex); " is 162.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslImplicitCommandStream,The length of the statement  "                throw new FtpsSecureConnectionException(String.Format("An ftp authentication exception occurred while setting up a implicit ssl/tls command stream.  {0}"' fauth.Message)' _response' fauth); " is 189.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslImplicitCommandStream,The length of the statement  "                throw new FtpsSecureConnectionException(String.Format("An error occurred while setting up a implicit ssl/tls command stream.  {0}"' fex.Message)' _response' fex); " is 162.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,DoIntegrityCheck,The length of the statement  "                throw new FtpsHashingException(String.Format("File integrity check failed.  The destination hash value '{0}' for the file '{1}' did not match the data transfer hash value '{2}'."' serverHash' path' streamHash)); " is 211.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,DoIntegrityCheck,The length of the statement  "            //    throw new FtpHashingException(String.Format("File integrity check failed.  The destination hash value '{0}' for the file '{1}' did not match the data transfer hash value '{2}'."' serverHash' path' streamHash)); " is 216.
Long Statement,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetHashFeatureArgument,The length of the statement  "                throw new FtpsFeatureException(String.Format("The HASH feature argument '{0}' is not supported by the FTP server."' argText)); " is 126.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.UserNameOkayButNeedPassword' FtpsResponseCode.ServiceReadyForNewUser' FtpsResponseCode.UserLoggedIn); " is 144.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.UserLoggedIn' FtpsResponseCode.ServiceReadyForNewUser' FtpsResponseCode.NotLoggedIn); " is 128.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.SystemStatusOrHelpReply' FtpsResponseCode.HelpMessage' FtpsResponseCode.FileStatus); " is 127.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.SystemStatusOrHelpReply' FtpsResponseCode.DirectoryStatus' FtpsResponseCode.FileStatus); " is 131.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.CommandOkay' FtpsResponseCode.CommandNotImplementedSuperfluousAtThisSite' FtpsResponseCode.RequestedFileActionOkayAndCompleted); " is 171.
Long Statement,Starksoft.Aspen.Ftps,FtpsRequest,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsRequest.cs,GetHappyCodes,The length of the statement  "                    return BuildResponseArray(FtpsResponseCode.AuthenticationCommandOkay' FtpsResponseCode.AuthenticationCommandOkaySecurityDataOptional); " is 134.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,ChangeUser,The length of the statement  "            // some ftp servers do not require passwords for users and will log you in immediately - no password command is required " is 120.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,DeleteDirectory,The length of the statement  "                throw new FtpsException(String.Format("The FTP destination was unable to delete the directory '{0}'."' path)' base.LastResponse' fex); " is 134.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The length of the statement  "                throw new FtpsException(String.Format("An error occurred when retrieving file date and time for '{0}'."' fileName)' base.LastResponse' fex); " is 140.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,ChangeDirectoryUp,The length of the statement  "                throw new FtpsException("An error occurred when changing directory to the parent (ChangeDirectoryUp)."' base.LastResponse' fex); " is 128.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileSize,The length of the statement  "                    throw new FtpsException(String.Format("An error occurred while attempting to get size of file '{0}' using the SIZE command."' path)' base.LastResponse' fex); " is 157.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileSize,The length of the statement  "                    throw new FtpsException(String.Format("An error occurred while attempting to get size of file {0} using the GetFileInfo() method."' path)' base.LastResponse' fex); " is 163.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetStatus,The length of the statement  "                throw new FtpsException(String.Format("An error occurred when retrieving file status for file '{0}'."' path)' base.LastResponse' fex); " is 134.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,AllocateStorage,The length of the statement  "                throw new FtpsException("An error occurred when trying to allocate storage on the destination."' base.LastResponse' fex); " is 121.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "                WriteToLog(String.Format("Action='PutFileUnique';Action='TransferError';LocalPath='{0}';CurrentDirectory='{1}';ErrorMessage='{2}'"' localPath' _currentDirectory' fex.Message)); " is 176.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "                throw new FtpsException("An error occurred while executing PutFileUnique() on the remote FTP destination."' base.LastResponse' fex); " is 132.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "            WriteToLog(String.Format("Action='PutFileUnique';Action='TransferBegin';CurrentDirectory='{0}';FileName='{1}"' _currentDirectory' fname)); " is 138.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "                WriteToLog(String.Format("Action='PutFileUnique';Action='TransferError';CurrentDirectory='{0}';FileName='{1};ErrorMessage='{1}'"' _currentDirectory' fname' ex.Message)); " is 169.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "                throw new FtpsException("An error occurred while executing PutFileUnique() on the remote FTP destination."' base.LastResponse' ex); " is 131.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileUnique,The length of the statement  "            WriteToLog(String.Format("Action='PutFileUnique';Action='TransferSuccess';CurrentDirectory='{0}';FileName='{1}'"' _currentDirectory' fname)); " is 141.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "            WriteToLog(String.Format("Action='GetFile';Status='TransferBegin';LocalPath='{0}';RemotePath='{1}';FileAction='{2}'"' localPath' remotePath' action.ToString())); " is 161.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "                WriteToLog(String.Format("Action='GetFile';Status='TransferError';LocalPath='{0}';RemotePath='{1}';FileAction='{1}';ErrorMessage='{2}"' localPath' remotePath' action.ToString()' ex.Message)); " is 191.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "                throw new FtpsException(String.Format("An unexpected exception occurred while retrieving file '{0}'."' remotePath)' base.LastResponse' ex);  " is 139.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "            WriteToLog(String.Format("Action='GetFile';Status='TransferSuccess';LocalPath='{0}';RemotePath='{1}';FileAction='{1}'"' localPath' remotePath' action.ToString())); " is 163.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "            WriteToLog(String.Format("Action='GetFile';Status='TransferBegin';LocalPath='{0}';RemotePath='{1}';FileAction='{2}'"' "none"' remotePath' "GetFileToStream")); " is 158.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "                WriteToLog(String.Format("Action='GetFile';Status='TransferError';LocalPath='{0}';RemotePath='{1}';FileAction='{1}';ErrorMessage='{2}"' "none"' remotePath' "GetFileToStream"' ex.Message)); " is 188.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "                throw new FtpsException(String.Format("An unexpected exception occurred while retrieving file '{0}'."' remotePath)' base.LastResponse' ex); " is 139.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The length of the statement  "            WriteToLog(String.Format("Action='GetFile';Status='TransferSuccess';LocalPath='{0}';RemotePath='{1}';FileAction='{1}'"' "none"' remotePath' "GetFileToStream")); " is 160.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Rename,The length of the statement  "                throw new FtpsException(String.Format("The FTP destination was unable to rename the file or directory '{0}' to the new name '{1}'."' name' newName)' base.LastResponse' fex); " is 173.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,ChangeMode,The length of the statement  "                throw new FtpsException(String.Format("Unable to the change file mode for file {0}.  Reason: {1}"' path' base.LastResponse.Text)' base.LastResponse' fex); " is 154.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,ChangeMode,The length of the statement  "                throw new FtpsException(String.Format("Unable to the change file mode for file {0}.  Reason: {1}"' path' base.LastResponse.Text)' base.LastResponse); " is 149.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The length of the statement  "            WriteToLog(String.Format("Action='PutFile';Status='TransferBegin';RemotePath='{0}';FileAction='{1}'"' remotePath' action.ToString())); " is 134.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The length of the statement  "                        base.TransferData(TransferDirection.ToServer' new FtpsRequest(base.Encoding' FtpsCmd.Stor' remotePath)' inputStream' remoteSize); " is 129.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The length of the statement  "                WriteToLog(String.Format("Action='PutFile';Status='TransferError';RemotePath='{0}';FileAction='{1}';ErrorMessage='{2}'"' remotePath' action.ToString()' fex.Message)); " is 166.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The length of the statement  "                throw new FtpsDataTransferException(String.Format("An error occurred while putting fileName '{0}'."' remotePath)' base.LastResponse' fex); " is 138.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The length of the statement  "            WriteToLog(String.Format("Action='PutFile';Status='TransferSuccess';RemotePath='{0}';FileAction='{1}'"' remotePath' action.ToString())); " is 136.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "                throw new FtpsException("The destination object must be open and connected before a transfer between servers can be intitiated."); " is 130.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "                throw new FtpsException(String.Format("An error occurred when trying to set up the passive connection on '{1}' for a destination to destination copy between '{0}' and '{1}'."' this.Host' destination.Host)' base.LastResponse' fex); " is 230.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "                throw new FtpsException(String.Format("Command instructing '{0}' to open connection failed."' this.Host)' base.LastResponse' fex); " is 130.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "                throw new FtpsException(String.Format("An error occurred transfering on a server to server copy between '{0}' and '{1}'."' this.Host' destination.Host)' base.LastResponse' fex); " is 177.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "                throw new FtpsException(String.Format("An error occurred transfering on a server to server copy between '{0}' and '{1}'."' this.Host' destination.Host)' base.LastResponse' fex); " is 177.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "            destination.WaitForHappyCodes(this.FxpTransferTimeout' FtpsResponseCode.RequestedFileActionOkayAndCompleted' FtpsResponseCode.ClosingDataConnection); " is 149.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopy,The length of the statement  "            this.WaitForHappyCodes(this.FxpTransferTimeout' FtpsResponseCode.RequestedFileActionOkayAndCompleted' FtpsResponseCode.ClosingDataConnection); " is 142.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,SendPassword,The length of the statement  "            // some ftp servers do not require passwords for users and will log you in immediately - no password command is required " is 120.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,SendPassword,The length of the statement  "                    throw new FtpsConnectionOpenException(String.Format("An error occurred when sending password information.  Reason: {0}"' base.LastResponse.Text)' fex); " is 151.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,SendUser,The length of the statement  "                throw new FtpsConnectionOpenException(String.Format("An error occurred when sending user information.  Reason: {0}"' base.LastResponse.Text)' fex); " is 147.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,WriteToLog,The length of the statement  "            string line = String.Format("[{0}] [{1}] [{2}] {3}\r\n"' DateTime.Now.ToString("G")' base.Host' base.Port.ToString()' message); " is 127.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetDirListAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetDirListAsync_RunWorkerCompleted,The length of the statement  "                GetDirListAsyncCompleted(this' new GetDirListAsyncCompletedEventArgs(_asyncException' base.IsAsyncCanceled' (FtpsItemCollection)e.Result)); " is 139.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetDirListDeepAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetDirListDeepAsync_RunWorkerCompleted,The length of the statement  "                GetDirListDeepAsyncCompleted(this' new GetDirListDeepAsyncCompletedEventArgs(_asyncException' base.IsAsyncCanceled' (FtpsItemCollection)e.Result)); " is 147.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,OpenAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopyAsync,The length of the statement  "                throw new InvalidOperationException("The FtpsClient object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 175.
Long Statement,Starksoft.Aspen.Ftps,FtpsItemCollection,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsItemCollection.cs,Merge,The length of the statement  "                FtpsItem n = new FtpsItem(item.Name' item.Modified' item.Size' item.ItemType' item.Attributes' item.Mode' item.SymbolicLink' item.RawText); " is 139.
Long Statement,Starksoft.Aspen.Ftps,FtpsListItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsListItemParser.cs,ParseUnixFormat,The length of the statement  "                return new FtpsItem(name' dateObj' sizeLng' itemTypeObj' attribs' FtpsUtilities.AttributeToMode(attribs)' symbLink' line); " is 122.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateConnection,The length of the statement  "                throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex); " is 180.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateCommandString,The length of the statement  "                string auth = Convert.ToBase64String(Encoding.ASCII.GetBytes(string.Format("{0}:{1}"' _proxyUsername' _proxyPassword))); " is 120.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateCommandString,The length of the statement  "                connectCmd = String.Format(CultureInfo.InvariantCulture' HTTP_PROXY_AUTHENTICATE_CMD' host' port.ToString(CultureInfo.InvariantCulture)' auth); " is 143.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateCommandString,The length of the statement  "                connectCmd = String.Format(CultureInfo.InvariantCulture' HTTP_PROXY_CONNECT_CMD + "\r\n"' host' port.ToString(CultureInfo.InvariantCulture)); " is 141.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    msg = String.Format(CultureInfo.InvariantCulture' "Proxy destination {0} on port {1} failed to return a recognized HTTP response code.  Server response: {2}"' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient)' _respText); " is 224.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    //HTTP/1.1 502 Proxy Error (The specified Secure Sockets Layer (SSL) port is not allowed. ISA Server is not configured to allow SSL requests from this port. Most Web browsers use port 443 for SSL requests.) " is 206.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    msg = String.Format(CultureInfo.InvariantCulture' "Proxy destination {0} on port {1} responded with a 502 code - Bad Gateway.  If you are connecting to a Microsoft ISA destination please refer to knowledge based article Q283284 for more information.  Server response: {2}"' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient)' _respText); " is 339.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    msg = String.Format(CultureInfo.InvariantCulture' "Proxy destination {0} on port {1} responded with a {2} code - {3}"' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient)' ((int)_respCode).ToString(CultureInfo.InvariantCulture)' _respText); " is 241.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,WaitForData,The length of the statement  "                    throw new ProxyException(String.Format("A timeout while waiting for the proxy server at {0} on port {1} to respond."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient) )); " is 174.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,ParseCodeAndText,The length of the statement  "                throw new ProxyException(String.Format("No HTTP response received from proxy destination.  Server response: {0}."' line)); " is 122.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,ParseCodeAndText,The length of the statement  "                throw new ProxyException(String.Format("An invalid response code was received from proxy destination.  Server response: {0}."' line)); " is 134.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateConnectionAsync,The length of the statement  "                throw new InvalidOperationException("The HttpProxy object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 174.
Long Statement,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateConnectionAsync_RunWorkerCompleted,The length of the statement  "                CreateConnectionAsyncCompleted(this' new CreateConnectionAsyncCompletedEventArgs(_asyncException' _asyncCancelled' (TcpClient)e.Result)); " is 137.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnection,The length of the statement  "                throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex); " is 180.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,GetIPAddressBytes,The length of the statement  "                    throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "A error occurred while attempting to DNS resolve the host name {0}."' destinationHost)' ex); " is 162.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    proxyErrorText = String.Format(CultureInfo.InvariantCulture' "proxy client received an unknown reply with the code value '{0}' from the proxy destination"' replyCode.ToString(CultureInfo.InvariantCulture)); " is 206.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The length of the statement  "            string exceptionMsg = String.Format(CultureInfo.InvariantCulture' "The {0} concerning destination host {1} port number {2}.  The destination reported the host as {3} port {4}."' proxyErrorText' destinationHost' destinationPort' ipAddr.ToString()' port.ToString(CultureInfo.InvariantCulture)); " is 292.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnectionAsync,The length of the statement  "                throw new InvalidOperationException("The Socks4/4a object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 174.
Long Statement,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnectionAsync_RunWorkerCompleted,The length of the statement  "                CreateConnectionAsyncCompleted(this' new CreateConnectionAsyncCompletedEventArgs(_asyncException' _asyncCancelled' (TcpClient)e.Result)); " is 137.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnection,The length of the statement  "                throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex); " is 180.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The length of the statement  "                throw new ProxyException("The proxy destination requires a username and password for authentication.  If you received this error attempting to connect to the Tor network provide an string empty value for ProxyUserName and ProxyPassword."); " is 239.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The length of the statement  "                Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);  " is 123.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The length of the statement  "                    throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid."); " is 137.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,GetDestAddressType,The length of the statement  "                    throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "The host addess {0} of type '{1}' is not a supported address type.  The supported types are InterNetwork and InterNetworkV6."' host' Enum.GetName(typeof(AddressFamily)' ipAddr.AddressFamily))); " is 263.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The length of the statement  "                    proxyErrorText = String.Format(CultureInfo.InvariantCulture' "an unknown SOCKS reply with the code value '{0}' was received"' replyCode.ToString(CultureInfo.InvariantCulture)); " is 176.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The length of the statement  "            string exceptionMsg = String.Format(CultureInfo.InvariantCulture' "proxy error: {0} for destination host {1} port number {2}.  Server response (hex): {3}."' proxyErrorText' destinationHost' destinationPort' responseText); " is 221.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnectionAsync,The length of the statement  "                throw new InvalidOperationException("The Socks4 object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 171.
Long Statement,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnectionAsync_RunWorkerCompleted,The length of the statement  "                CreateConnectionAsyncCompleted(this' new CreateConnectionAsyncCompletedEventArgs(_asyncException' _asyncCancelled' (TcpClient)e.Result)); " is 137.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgArgs,The length of the statement  "                    throw new GpgException ("A Recipient is required before encrypting data.  Please specify a valid recipient using the Recipient property on the GnuPG object."); " is 159.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,ExecuteGpg,The length of the statement  "                throw new GpgException(String.Format(CultureInfo.InvariantCulture' "Error.  Action: {0}.  Command args: {1}"' action.ToString()' procInfo.Arguments)' exp); " is 155.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgBinaryPath,The length of the statement  "                throw new GpgException(String.Format("gpg binary path executable invalid or file permissions do not allow access: {0}"' _binaryPath)); " is 134.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,EncryptAsync,The length of the statement  "              throw new InvalidOperationException("The GnuPG object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 170.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,DecryptAsync,The length of the statement  "                throw new InvalidOperationException("The Gpg object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 168.
Long Statement,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,SignAsync,The length of the statement  "                throw new InvalidOperationException("The Gpg object is already busy executing another asynchronous operation.  You can only execute one asychronous method at a time."); " is 168.
Long Statement,Starksoft.Aspen.Smartcard,SCard,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCard.cs,Connect,The length of the statement  "            int rtn = SCardDll.SCardConnectA(_hContext' readerName' (UInt32)shareMode' (UInt32)preferredProtocols' ref hCard' ref _protocol); " is 129.
Long Statement,Starksoft.Aspen.Smartcard,SCard,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCard.cs,Transmit,The length of the statement  "            int rtn = SCardDll.SCardTransmit(_hCard' ref ioRequest' ref send[0]' send.Length' pioRecvPci' ref recv[0]' ref recvLen); " is 120.
Long Statement,Starksoft.Aspen.Smartcard,SCardAdpu,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpu.cs,ToString,The length of the statement  "            b.AppendFormat("Cla={0:X02} Ins={1:X02} P1={2:X02} P2={3:X02} SW1={4:X02} SW2={5:X02}"' _cla' _ins' _p1' _p2' _sw1' _sw2); " is 122.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetHash,The conditional expression  "partialReq && (!canHash || !canHashPartial)                  || (!partialReq && !canHash)"  is complex.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenCommandConn,The conditional expression  "_securityProtocol == FtpsSecurityProtocol.Ssl2Explicit                   || _securityProtocol == FtpsSecurityProtocol.Ssl3Explicit                   || _securityProtocol == FtpsSecurityProtocol.Tls1Explicit                   || _securityProtocol == FtpsSecurityProtocol.Tls1OrSsl3Explicit                  || _securityProtocol == FtpsSecurityProtocol.Tls11Explicit                  || _securityProtocol == FtpsSecurityProtocol.Tls12Explicit"  is complex.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenCommandConn,The conditional expression  "_securityProtocol == FtpsSecurityProtocol.Ssl2Implicit                   || _securityProtocol == FtpsSecurityProtocol.Ssl3Implicit                   || _securityProtocol == FtpsSecurityProtocol.Tls1Implicit                   || _securityProtocol == FtpsSecurityProtocol.Tls1OrSsl3Implicit                  || _securityProtocol == FtpsSecurityProtocol.Tls11Implicit                  || _securityProtocol == FtpsSecurityProtocol.Tls12Implicit"  is complex.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,IsUnhappyResponse,The conditional expression  "response.Code == FtpsResponseCode.ServiceNotAvailableClosingControlConnection                  || response.Code == FtpsResponseCode.CannotOpenDataConnection                  || response.Code == FtpsResponseCode.ConnectionClosedSoTransferAborted                  || response.Code == FtpsResponseCode.RequestedFileActionNotTaken                  || response.Code == FtpsResponseCode.RequestedActionAbortedDueToLocalErrorInProcessing                  || response.Code == FtpsResponseCode.RequestedActionNotTakenInsufficientStorage                  || response.Code == FtpsResponseCode.SyntaxErrorCommandUnrecognized                  || response.Code == FtpsResponseCode.SyntaxErrorInParametersOrArguments                  || response.Code == FtpsResponseCode.CommandNotImplemented                  || response.Code == FtpsResponseCode.BadSequenceOfCommands                  || response.Code == FtpsResponseCode.CommandNotImplementedForThatParameter                  || response.Code == FtpsResponseCode.NotLoggedIn                  || response.Code == FtpsResponseCode.NeedAccountForStoringFiles                  || response.Code == FtpsResponseCode.RequestedActionNotTakenFileUnavailable                  || response.Code == FtpsResponseCode.RequestedActionAbortedPageTypeUnknown                  || response.Code == FtpsResponseCode.RequestedFileActionAbortedExceededStorageAllocation                  || response.Code == FtpsResponseCode.RequestedActionNotTakenFileNameNotAllowed"  is complex.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,GetClientIPAddress,The conditional expression  "(ip.AddressFamily == AddressFamily.InterNetwork && _networkProtocol != NetworkVersion.IPv4)                      || (ip.AddressFamily == AddressFamily.InterNetworkV6 && _networkProtocol != NetworkVersion.IPv6)"  is complex.
Complex Conditional,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Quote,The conditional expression  "ftpCmd == FtpsCmd.Pasv                   || ftpCmd == FtpsCmd.Retr                   || ftpCmd == FtpsCmd.Stor                   || ftpCmd == FtpsCmd.Stou                   || ftpCmd == FtpsCmd.Eprt                   || ftpCmd == FtpsCmd.Epsv"  is complex.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CloseCommandConn,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,MonitorCommandConnection,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,AcceptTcpClientCallback,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CloseDataConn,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CloseDataConn,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Exists,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Quote,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,TrySetClient,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Proxy,Utils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Utils.cs,GetHost,The method has an empty catch block.
Empty Catch Block,Starksoft.Aspen.Proxy,Utils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Utils.cs,GetPort,The method has an empty catch block.
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexEncode,The following statement contains a magic number: StringBuilder buffer = new StringBuilder(length * 2);
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexEncode,The following statement contains a magic number: for (int i = 0; i < len; i++ )              {                  buffer.Append(data[i].ToString("x").PadLeft(2' '0')); //same as "%02X" in C                  if (insertColonDelimiter && i < len - 1)                      buffer.Append(':');              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexDecode,The following statement contains a magic number: if ((s.Length % 2) != 0)              {                  throw new FormatException("parameter 's' must have an even number of hex characters");              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexDecode,The following statement contains a magic number: byte[] result = new byte[s.Length / 2 + paddingBytes];
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexDecode,The following statement contains a magic number: for (int i = 0; i < result.Length - paddingBytes; i++)              {                  result[i] = byte.Parse(s.Substring(i * 2' 2)' NumberStyles.AllowHexSpecifier);              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,HexDecode,The following statement contains a magic number: for (int i = 0; i < result.Length - paddingBytes; i++)              {                  result[i] = byte.Parse(s.Substring(i * 2' 2)' NumberStyles.AllowHexSpecifier);              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,GetInt24,The following statement contains a magic number: if (value > 16777215)                  throw new ArgumentOutOfRangeException("value"' "value can not be greater than 16777215 (max unsigned 24-bit integer)");
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,GetInt24,The following statement contains a magic number: byte[] buffer = new byte[3];
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,GetInt24,The following statement contains a magic number: Array.Copy(bytes' 0'  buffer' 0' 3);
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,GetInt32,The following statement contains a magic number: if (int24.Length != 3)              {                  throw new ArgumentOutOfRangeException("int24"' "byte size must be exactly three");              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,GetInt32,The following statement contains a magic number: ArrayBuilder buffer = new ArrayBuilder(4);
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetOddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  int b = bytes[i];                  bytes[i] = (byte)((b & 0xfe) |                                  ((((b >> 1) ^                                  (b >> 2) ^                                  (b >> 3) ^                                  (b >> 4) ^                                  (b >> 5) ^                                  (b >> 6) ^                                  (b >> 7)) ^ 0x01) & 0x01));              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  int oneCount = 0;                  // loop through the bits in the byte starting with                  // the second bit and running to the 8th bit.                   // (remember that the array is zero indexed so it is off by 1)                  for (int j = 0; j < 7; j++)                  {                      if (bits[i * 8 + j] == true)                          oneCount++;                  }                    // set the parity bit (bit position 0) for the byte now that we have the one's count                  // if the number of one's is even then set to 1 ("true" for the BitArray)                  // so that now the total number of bits (8) are now odd when added up                  // the opposite is true for even parity                  switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }              }
Magic Number,Starksoft.Aspen,Crc16,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc16.cs,HashCore,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  // xor byte with existing crc value                  byte index = (byte)(_crc ^ buffer[i]);                  // update crc via xor with lookup table                  _crc = (ushort)((_crc >> 8) ^ _table[index]);              }
Magic Number,Starksoft.Aspen,Crc16,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc16.cs,Initialize,The following statement contains a magic number: for (ushort i = 0; i < _table.Length; ++i)              {                  value = 0;                  temp = i;                  // set the bits of each byte                  for (byte j = 0; j < 8; ++j)                  {                      if (((value ^ temp) & 0x0001) != 0)                          value = (ushort)((value >> 1) ^ Polynomial);                      else                          value >>= 1;                        temp >>= 1;                  }                  _table[i] = value;              }
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,InitializeTable,The following statement contains a magic number: UInt32[] createTable = new UInt32[256];
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  UInt32 entry = (UInt32)i;                  for (int j = 0; j < 8; j++)                      if ((entry & 1) == 1)                          entry = (entry >> 1) ^ polynomial;                      else                          entry = entry >> 1;                  createTable[i] = entry;              }
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  UInt32 entry = (UInt32)i;                  for (int j = 0; j < 8; j++)                      if ((entry & 1) == 1)                          entry = (entry >> 1) ^ polynomial;                      else                          entry = entry >> 1;                  createTable[i] = entry;              }
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,CalculateHash,The following statement contains a magic number: for (int i = start; i < size; i++)                  unchecked                  {                      crc = (crc >> 8) ^ table[buffer[i] ^ crc & 0xff];                  }
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  			    (byte)((x >> 24) & 0xff)'  			    (byte)((x >> 16) & 0xff)'  			    (byte)((x >> 8) & 0xff)'  			    (byte)(x & 0xff)  		    };
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  			    (byte)((x >> 24) & 0xff)'  			    (byte)((x >> 16) & 0xff)'  			    (byte)((x >> 8) & 0xff)'  			    (byte)(x & 0xff)  		    };
Magic Number,Starksoft.Aspen,Crc32,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  			    (byte)((x >> 24) & 0xff)'  			    (byte)((x >> 16) & 0xff)'  			    (byte)((x >> 8) & 0xff)'  			    (byte)(x & 0xff)  		    };
Magic Number,Starksoft.Aspen.Ftps,FtpsFeatureCollection,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsFeatureCollection.cs,Parse,The following statement contains a magic number: for(int i = 1; i < lines.Length; i++)              {                  fl = lines[i];                  if (fl.Length < 2)                      throw new FtpsFeatureException("not a properly formatted feature line");                  if (fl.Substring(0' 1) != " ")                      break;                  string[] v = SplitFeature(fl);                  _list.Add(new FtpsFeature(v[0]'v[1]));              }
Magic Number,Starksoft.Aspen.Ftps,FtpsFeatureCollection,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsFeatureCollection.cs,SplitFeature,The following statement contains a magic number: string[] a = new string[2];
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseName,The following statement contains a magic number: if (name.Length < 2)                  throw new FtpsItemParsingException("name length is too short");
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseField,The following statement contains a magic number: if (fact.Length != 2)                  throw new FtpsItemParsingException("field must contain equals '=' value with only a name and value");
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int yr = int.Parse(v.Substring(0' 4)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int mon = int.Parse(v.Substring(4' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int mon = int.Parse(v.Substring(4' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int day = int.Parse(v.Substring(6' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int day = int.Parse(v.Substring(6' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int hr = int.Parse(v.Substring(8' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int hr = int.Parse(v.Substring(8' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int min = int.Parse(v.Substring(10' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int min = int.Parse(v.Substring(10' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int sec = int.Parse(v.Substring(12' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: int sec = int.Parse(v.Substring(12' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: if (v.Length == DATE_TIME_MAX_LEN)                  ms = int.Parse(v.Substring(15' 3)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsMlsxItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsMlsxItemParser.cs,ParseDateTime,The following statement contains a magic number: if (v.Length == DATE_TIME_MAX_LEN)                  ms = int.Parse(v.Substring(15' 3)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: string user = s.Substring(0' 3);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: string group = s.Substring(3' 3);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: string group = s.Substring(3' 3);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: string other = s.Substring(6' 3);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: string other = s.Substring(6' 3);
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: int mode = ParseAttrib(user) * 100;
Magic Number,Starksoft.Aspen.Ftps,FtpsUtilities,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsUtilities.cs,AttributeToMode,The following statement contains a magic number: mode += ParseAttrib(group) * 10;
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendRequest,The following statement contains a magic number: if (request.HasHappyCodes)              {                  WaitForHappyCodes(request.GetHappyCodes());              }              else              {                  // when there are no happy codes given the we have to give the server some time to response                  // since we really don't know what response is the correct one                  if (request.Command != FtpsCmd.Quit)                      Thread.Sleep(2000);                  DontWaitForHappyCodes();              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The following statement contains a magic number: try              {                  // create a thread to begin the porocess of opening a data connection to the remote server                  OpenDataConn();                    //  check for a restart position                   if (restartPosition > 0)                  {                      // instruct the server to restart file transfer at the same position where the output stream left off                      SendRequest(new FtpsRequest(_encode' FtpsCmd.Rest' restartPosition.ToString(CultureInfo.InvariantCulture)));                                            // set the data stream to the same position as the server                      data.Position = restartPosition;                  }                    // send the data transfer command that requires a separate data connection to be established to transmit data                  SendRequest(request);                    // wait for the data connection thread to signal back that a connection has been established                  WaitForDataConn();                    // test to see if the data connection failed to be established sometime the active connection fails due to security settings on the ftp server                  if (_dataConn == null)                      throw new FtpsDataConnectionException("Unable to establish a data connection to the destination.  The destination may have refused the connection.");                    // create the data stream object - handles creation of SslStream and DeflateStream objects as well                  Stream conn = _dataConn.GetStream();                    // test to see if we need to enable ssl/tls explicit mode                  if (_securityProtocol != FtpsSecurityProtocol.None)                      conn = CreateSslStream(conn);                                    // test to see if we need to enable compression by using the DeflateStream                  if (_isCompressionEnabled)                      conn = CreateZlibStream(direction' conn);                    // based on the direction of the data transfer we need to handle the input and output streams                  switch (direction)                  {                      case TransferDirection.ToClient:                          TransferBytes(conn' data' _maxDownloadSpeed * 1024);                          break;                      case TransferDirection.ToServer:                          TransferBytes(data' conn' _maxUploadSpeed * 1024);                          break;                  }                }              finally              {                  // reset the transfer size used to calc % completed                  SetTransferSize(-1);                  // attempt to close the data connection                   CloseDataConn();              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The following statement contains a magic number: try              {                  // create a thread to begin the porocess of opening a data connection to the remote server                  OpenDataConn();                    //  check for a restart position                   if (restartPosition > 0)                  {                      // instruct the server to restart file transfer at the same position where the output stream left off                      SendRequest(new FtpsRequest(_encode' FtpsCmd.Rest' restartPosition.ToString(CultureInfo.InvariantCulture)));                                            // set the data stream to the same position as the server                      data.Position = restartPosition;                  }                    // send the data transfer command that requires a separate data connection to be established to transmit data                  SendRequest(request);                    // wait for the data connection thread to signal back that a connection has been established                  WaitForDataConn();                    // test to see if the data connection failed to be established sometime the active connection fails due to security settings on the ftp server                  if (_dataConn == null)                      throw new FtpsDataConnectionException("Unable to establish a data connection to the destination.  The destination may have refused the connection.");                    // create the data stream object - handles creation of SslStream and DeflateStream objects as well                  Stream conn = _dataConn.GetStream();                    // test to see if we need to enable ssl/tls explicit mode                  if (_securityProtocol != FtpsSecurityProtocol.None)                      conn = CreateSslStream(conn);                                    // test to see if we need to enable compression by using the DeflateStream                  if (_isCompressionEnabled)                      conn = CreateZlibStream(direction' conn);                    // based on the direction of the data transfer we need to handle the input and output streams                  switch (direction)                  {                      case TransferDirection.ToClient:                          TransferBytes(conn' data' _maxDownloadSpeed * 1024);                          break;                      case TransferDirection.ToServer:                          TransferBytes(data' conn' _maxUploadSpeed * 1024);                          break;                  }                }              finally              {                  // reset the transfer size used to calc % completed                  SetTransferSize(-1);                  // attempt to close the data connection                   CloseDataConn();              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,TransferBytes,The following statement contains a magic number: while(true)              {                  bytesRead = input.Read(_dataBuffer' 0' _tcpBufferSize);                    if (bytesRead == 0)                      break;                    bytesTotal += bytesRead;                  output.Write(_dataBuffer' 0' bytesRead);                    // calculate some statistics                  elapsed = DateTime.Now.Subtract(start);                  bytesPerSec = (int)(elapsed.TotalSeconds < 1 ? bytesTotal : bytesTotal / elapsed.TotalSeconds);                    //  if the consumer subscribes to transfer progress event then fire it                  if (TransferProgress != null)                  {                      if (_transferSize > 0)                      {                          int newpc = (int)(((float)bytesTotal / (float)_transferSize) * 100);                                                   // to preserve resources and prevent a slow down of transfers due to                          // frequent event calls' only fire the event if the percentage has changed                          if (newpc != percentComplete)                          {                              percentComplete = newpc;                              TransferProgress(this' new TransferProgressEventArgs(bytesRead' bytesTotal' _transferSize' bytesPerSec' elapsed' percentComplete));                          }                      }                      else // always fire the event if we cannot calc percentages                      {                          TransferProgress(this' new TransferProgressEventArgs(bytesRead' bytesTotal' _transferSize' bytesPerSec' elapsed' percentComplete));                      }                  }                    // test to see if this is an asychronous operation and if so make sure                   // the user has not requested the operation to be canceled                  if (IsAsyncCancellationPending())                      throw new FtpsAsynchronousOperationException("Asynchronous operation canceled by user.");                                    // throttle the transfer if necessary                  ThrottleByteTransfer(maxBytesPerSecond' bytesTotal' elapsed' bytesPerSec);                }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,ThrottleByteTransfer,The following statement contains a magic number: if (maxBytesPerSecond > 0)              {                  // we only throttle if our through-put is higher than what we want                  if (bytesPerSec > maxBytesPerSecond)                  {                      double elapsedMilliSec = elapsed.TotalSeconds == 0 ? elapsed.TotalMilliseconds : elapsed.TotalSeconds * 1000;                        // need to calc a delay in milliseconds for the throttle wait based on how fast the                       // transfer is relative to the speed it needs to be                      double millisecDelay = (bytesTotal / (maxBytesPerSecond / 1000) - elapsedMilliSec);                                            // can only sleep to a max of an Int32 so we need to check this since bytesTotal is a long value                      // this should never be an issue but never say never                      if (millisecDelay > Int32.MaxValue)                          millisecDelay = Int32.MaxValue;                        // go to sleep                      Thread.Sleep((int)millisecDelay);                  }              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,ThrottleByteTransfer,The following statement contains a magic number: if (maxBytesPerSecond > 0)              {                  // we only throttle if our through-put is higher than what we want                  if (bytesPerSec > maxBytesPerSecond)                  {                      double elapsedMilliSec = elapsed.TotalSeconds == 0 ? elapsed.TotalMilliseconds : elapsed.TotalSeconds * 1000;                        // need to calc a delay in milliseconds for the throttle wait based on how fast the                       // transfer is relative to the speed it needs to be                      double millisecDelay = (bytesTotal / (maxBytesPerSecond / 1000) - elapsedMilliSec);                                            // can only sleep to a max of an Int32 so we need to check this since bytesTotal is a long value                      // this should never be an issue but never say never                      if (millisecDelay > Int32.MaxValue)                          millisecDelay = Int32.MaxValue;                        // go to sleep                      Thread.Sleep((int)millisecDelay);                  }              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,MonitorCommandConnection,The following statement contains a magic number: while (IsConnected)              {                  // every 100 cycle sleep to give a chance for the lock                  // to be shared with the competing threads                  if (cycles++ % 100 == 0) {                      cycles = 0; // reset cycles so we don't have a possible overflow                       Thread.Sleep(WAIT_FOR_COMMAND_RESPONSE_INTERVAL);                  }                    lock (_reponseMonitorLock)                  {                      try                      {                          if (_commandConn != null && _commandConn.GetStream().DataAvailable)                          {                              int bytes = _commandStream.Read(buffer' 0' _tcpBufferSize);                              string partial = _encode.GetString(buffer' 0' bytes);                              response.Append(partial);                                // write out the debug response                              Debug.Write("R: " + partial);                                if (!partial.EndsWith("\n"))                              {                                  continue;                              }                                 //  parse out the response code sent back from the server                              //  in some cases more than one response can be sent with                              //  each line separated with a crlf pair.                              string[] responseArray = SplitResponse(response.ToString());                              for (int i = 0; i < responseArray.Length; i++)                              {                                  FtpsResponse r = new FtpsResponse(responseArray[i]);                                  _responseQueue.Enqueue(r);                                  // if a 421 response code is detected then the server has closed the connection                                  if (r.Code == FtpsResponseCode.ServiceNotAvailableClosingControlConnection)                                      code421Detected = true;                              }                                response.Remove(0' response.Length);                                // if code 421 was detected then close the command connection                              if (code421Detected)                                  CloseCommandConn();                          }                      }                      catch { }                  }              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,BuildIPv4PortInfo,The following statement contains a magic number: string portInfo = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}"'                                      ipbytes[0].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[1].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[2].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[3].ToString(CultureInfo.InvariantCulture)'                                      port / 256'                                      port % 256);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,BuildIPv4PortInfo,The following statement contains a magic number: string portInfo = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}"'                                      ipbytes[0].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[1].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[2].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[3].ToString(CultureInfo.InvariantCulture)'                                      port / 256'                                      port % 256);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,BuildIPv4PortInfo,The following statement contains a magic number: string portInfo = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}"'                                      ipbytes[0].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[1].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[2].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[3].ToString(CultureInfo.InvariantCulture)'                                      port / 256'                                      port % 256);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,BuildIPv4PortInfo,The following statement contains a magic number: string portInfo = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}"'                                      ipbytes[0].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[1].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[2].ToString(CultureInfo.InvariantCulture)'                                      ipbytes[3].ToString(CultureInfo.InvariantCulture)'                                      port / 256'                                      port % 256);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenActiveListenerPort,The following statement contains a magic number: do              {                  int failureCnt = 0;                  try                  {                      listenerPort = GetNextActivePort();                      _activeListener = new TcpListener(localAddr' listenerPort);                      _activeListener.Start();                      success = true;                  }                  catch (SocketException socketError)                  {                      // test to see if the socket is no good                      if (socketError.ErrorCode == 10048                           && ++failureCnt < (_activePortRangeMax - _activePortRangeMin))                          _activeListener.Stop();                      else                          throw new FtpsDataConnectionException(String.Format(CultureInfo.InvariantCulture' "An error occurred while trying to create an active connection on host {0} port {1}"' localHost' listenerPort.ToString(CultureInfo.InvariantCulture))' socketError);                  }              } while (!success);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendEpsvCmd,The following statement contains a magic number: if (data[2].Length != 0)                  host = data[2];              else                  host = _host;
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendEpsvCmd,The following statement contains a magic number: if (data[2].Length != 0)                  host = data[2];              else                  host = _host;
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendEpsvCmd,The following statement contains a magic number: port = Int32.Parse(data[3]' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The following statement contains a magic number: host = data[0] + "." + data[1] + "." + data[2] + "." + data[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The following statement contains a magic number: host = data[0] + "." + data[1] + "." + data[2] + "." + data[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The following statement contains a magic number: port = Int32.Parse(data[4]' CultureInfo.InvariantCulture) * 256                   + Int32.Parse(data[5]' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The following statement contains a magic number: port = Int32.Parse(data[4]' CultureInfo.InvariantCulture) * 256                   + Int32.Parse(data[5]' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,SendPasvCmd,The following statement contains a magic number: port = Int32.Parse(data[4]' CultureInfo.InvariantCulture) * 256                   + Int32.Parse(data[5]' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateZlibStream,The following statement contains a magic number: switch (direction)              {                  case TransferDirection.ToClient:                      zstream = new DeflateStream(stream' CompressionMode.Decompress' true);                      // zlib fix to ignore first two bytes of header data                       zstream.BaseStream.ReadByte();                      zstream.BaseStream.ReadByte();                      break;                    case TransferDirection.ToServer:                      zstream = new DeflateStream(stream' CompressionMode.Compress' true);                      // this is a fix for the DeflateStream class only when sending compressed data to the server.                        // Zlib has two bytes of data attached to the header that we have to write before processing the data stream.                      zstream.BaseStream.WriteByte(120);                      zstream.BaseStream.WriteByte(218);                      break;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateZlibStream,The following statement contains a magic number: switch (direction)              {                  case TransferDirection.ToClient:                      zstream = new DeflateStream(stream' CompressionMode.Decompress' true);                      // zlib fix to ignore first two bytes of header data                       zstream.BaseStream.ReadByte();                      zstream.BaseStream.ReadByte();                      break;                    case TransferDirection.ToServer:                      zstream = new DeflateStream(stream' CompressionMode.Compress' true);                      // this is a fix for the DeflateStream class only when sending compressed data to the server.                        // Zlib has two bytes of data attached to the header that we have to write before processing the data stream.                      zstream.BaseStream.WriteByte(120);                      zstream.BaseStream.WriteByte(218);                      break;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Open,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,ChangeUser,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int year = int.Parse(response.Substring(0' 4)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int month = int.Parse(response.Substring(4' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int month = int.Parse(response.Substring(4' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int day = int.Parse(response.Substring(6' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int day = int.Parse(response.Substring(6' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int hour = int.Parse(response.Substring(8' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int hour = int.Parse(response.Substring(8' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int minute = int.Parse(response.Substring(10' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int minute = int.Parse(response.Substring(10' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int second = int.Parse(response.Substring(12' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileDateTime,The following statement contains a magic number: int second = int.Parse(response.Substring(12' 2)' CultureInfo.InvariantCulture);
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileInfo,The following statement contains a magic number: if (r.Command == FtpsCmd.List)              {                  string text = base.TransferText(r);                  // if there is not text data then return null                  if (String.IsNullOrEmpty(text))                      return null;                  string[] lines = text.Split(new char[] { '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  // if there are are no lines with data then return null                  if (lines.Length == 0)                      return null;                  // only parse the first line encountered in the event                  // the caller did not limit the path query correctly                  return _listItemParser.ParseLine(lines[0]);              }              else // FtpCmd.Mlst              {                  if (!base.Features.Contains(FtpsCmd.Mlst))                      throw new FtpsFeatureException("MLST command not a listed supported feature");                  base.SendRequest(new FtpsRequest(base.Encoding' FtpsCmd.Mlst' path));                  FtpsResponseCollection col = base.LastResponseList;                  if (col.Count != 3)                      throw new FtpsException("incorrect number of response lines received by MLST command text");                  // parse the second line and return a mlsx object                  FtpsItem mlsx = _mlsxItemParser.ParseLine(col[1].RawText); ;                  return mlsx;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,Quote,The following statement contains a magic number: if (command.Length < 3)                  throw new ArgumentException(String.Format("Invalid command '{0}'."' command)' "command");
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The following statement contains a magic number: Object[] args = new Object[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The following statement contains a magic number: args[2] = action;
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync_DoWork,The following statement contains a magic number: try              {                  Object[] args = (Object[])e.Argument;                  GetFile((string)args[0]' (string)args[1]' (FileAction)args[2]);              }              catch (Exception ex)              {                  _asyncException = ex;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The following statement contains a magic number: Object[] args = new Object[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileAsync,The following statement contains a magic number: args[2] = restart;
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFileStreamAsync_DoWork,The following statement contains a magic number: try              {                  Object[] args = (Object[])e.Argument;                  GetFile((string)args[0]' (Stream)args[1]' (bool)args[2]);              }              catch (Exception ex)              {                  _asyncException = ex;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The following statement contains a magic number: Object[] args = new Object[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The following statement contains a magic number: args[2] = action;
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync_DoWork,The following statement contains a magic number: try              {                  Object[] args = (Object[])e.Argument;                  PutFile((string)args[0]' (string)args[1]' (FileAction)args[2]);              }              catch (Exception ex)              {                  _asyncException = ex;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The following statement contains a magic number: Object[] args = new Object[3];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The following statement contains a magic number: args[2] = action;
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileStreamAsync_DoWork,The following statement contains a magic number: try              {                  Object[] args = (Object[])e.Argument;                  PutFile((Stream)args[0]' (string)args[1]' (FileAction)args[2]);              }              catch (Exception ex)              {                  _asyncException = ex;              }
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFileAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,OpenAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,FxpCopyAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseCode,The following statement contains a magic number: if (rawText.Length >= 3)              {                  string codeString = rawText.Substring(0' 3);                  int codeInt = 0;                    if (Int32.TryParse(codeString' out codeInt))                  {                      code = (FtpsResponseCode)codeInt;                  }              }
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseCode,The following statement contains a magic number: if (rawText.Length >= 3)              {                  string codeString = rawText.Substring(0' 3);                  int codeInt = 0;                    if (Int32.TryParse(codeString' out codeInt))                  {                      code = (FtpsResponseCode)codeInt;                  }              }
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseText,The following statement contains a magic number: if (rawText.Length > 4)                  return rawText.Substring(4).Trim();              else                  return string.Empty;
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseText,The following statement contains a magic number: if (rawText.Length > 4)                  return rawText.Substring(4).Trim();              else                  return string.Empty;
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseInformational,The following statement contains a magic number: if (rawText.Length >= 4 && rawText[3] == '-')                  return true;              else                  return false;
Magic Number,Starksoft.Aspen.Ftps,FtpsResponse,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsResponse.cs,ParseInformational,The following statement contains a magic number: if (rawText.Length >= 4 && rawText[3] == '-')                  return true;              else                  return false;
Magic Number,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HttpProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,HttpProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateConnection,The following statement contains a magic number: try              {                  // if we have no cached tcpip connection then create one                  if (_tcpClientCached == null)                  {                      if (String.IsNullOrEmpty(_proxyHost))                          throw new ProxyException("ProxyHost property must contain a value.");                        if (_proxyPort <= 0 || _proxyPort > 65535)                          throw new ProxyException("ProxyPort value must be greater than zero and less than 65535");                        //  create new tcp client object to the proxy server                      _tcpClient = new TcpClient();                        // attempt to open the connection                      _tcpClient.Connect(_proxyHost' _proxyPort);                  }                  else                  {                      _tcpClient = _tcpClientCached;                  }                    //  send connection command to proxy host for the specified destination host and port                  SendConnectionCommand(destinationHost' destinationPort);                    // remove the private reference to the tcp client so the proxy object does not keep it                  // return the open proxied tcp client object to the caller for normal use                  TcpClient rtn = _tcpClient;                  _tcpClient = null;                  return rtn;              }              catch (SocketException ex)              {                  throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex);              }
Magic Number,Starksoft.Aspen.Proxy,HttpProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\HttpProxyClient.cs,CreateConnectionAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[10 + userIdBytes.Length + hostBytes.Length];
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: destPort.CopyTo(request' 2);
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: destIp.CopyTo(request' 4);
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: userIdBytes.CopyTo(request' 8);
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: request[8 + userIdBytes.Length] = 0x00;
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: hostBytes.CopyTo(request' 9 + userIdBytes.Length);
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: request[9 + userIdBytes.Length + hostBytes.Length] = 0x00;
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[8];
Magic Number,Starksoft.Aspen.Proxy,Socks4aProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: proxy.Read(response' 0' 8);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,Socks4ProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,Socks4ProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnection,The following statement contains a magic number: if (destinationPort <= 0 || destinationPort > 65535)                  throw new ArgumentOutOfRangeException("destinationPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnection,The following statement contains a magic number: try              {                  // if we have no cached tcpip connection then create one                  if (_tcpClientCached == null)                  {                      if (String.IsNullOrEmpty(_proxyHost))                          throw new ProxyException("ProxyHost property must contain a value.");                        if (_proxyPort <= 0 || _proxyPort > 65535)                          throw new ProxyException("ProxyPort value must be greater than zero and less than 65535");                        //  create new tcp client object to the proxy server                      _tcpClient = new TcpClient();                        // attempt to open the connection                      _tcpClient.Connect(_proxyHost' _proxyPort);                  }                  else                  {                      _tcpClient = _tcpClientCached;                  }                    //  send connection command to proxy host for the specified destination host and port                  SendCommand(_tcpClient.GetStream()' SOCKS4_CMD_CONNECT' destinationHost' destinationPort' _proxyUserId);                    // remove the private reference to the tcp client so the proxy object does not keep it                  // return the open proxied tcp client object to the caller for normal use                  TcpClient rtn = _tcpClient;                  _tcpClient = null;                  return rtn;              }              catch (Exception ex)              {                  throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex);              }
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[9 + userIdBytes.Length];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: destPort.CopyTo(request' 2);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: destIp.CopyTo(request' 4);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: userIdBytes.CopyTo(request' 8);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: request[8 + userIdBytes.Length] = 0x00;
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[8];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: proxy.Read(response' 0' 8);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,GetDestinationPortBytes,The following statement contains a magic number: byte[] array = new byte[2];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,GetDestinationPortBytes,The following statement contains a magic number: array[0] = Convert.ToByte(value / 256);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,GetDestinationPortBytes,The following statement contains a magic number: array[1] = Convert.ToByte(value % 256);
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: byte[] ipBytes = new byte[4];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  ipBytes[i] = response[i + 4];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  ipBytes[i] = response[i + 4];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: byte[] portBytes = new byte[2];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: portBytes[0] = response[3];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: portBytes[1] = response[2];
Magic Number,Starksoft.Aspen.Proxy,Socks4ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks4ProxyClient.cs,CreateConnectionAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,Socks5ProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,Socks5ProxyClient,The following statement contains a magic number: if (proxyPort <= 0 || proxyPort > 65535)                  throw new ArgumentOutOfRangeException("proxyPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnection,The following statement contains a magic number: if (destinationPort <= 0 || destinationPort > 65535)                  throw new ArgumentOutOfRangeException("destinationPort"' "port must be greater than zero and less than 65535");
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnection,The following statement contains a magic number: try              {                  // if we have no cached tcpip connection then create one                  if (_tcpClientCached == null)                  {                      if (String.IsNullOrEmpty(_proxyHost))                          throw new ProxyException("ProxyHost property must contain a value.");                        if (_proxyPort <= 0 || _proxyPort > 65535)                          throw new ProxyException("ProxyPort value must be greater than zero and less than 65535");                        //  create new tcp client object to the proxy server                      _tcpClient = new TcpClient();                        // attempt to open the connection                      _tcpClient.Connect(_proxyHost' _proxyPort);                  }                  else                  {                      _tcpClient = _tcpClientCached;                  }                    //  determine which authentication method the client would like to use                  DetermineClientAuthMethod();                    // negotiate which authentication methods are supported / accepted by the server                  NegotiateServerAuthMethod();                    // send a connect command to the proxy server for destination host and port                  SendCommand(SOCKS5_CMD_CONNECT' destinationHost' destinationPort);                    // remove the private reference to the tcp client so the proxy object does not keep it                  // return the open proxied tcp client object to the caller for normal use                  TcpClient rtn = _tcpClient;                  _tcpClient = null;                  return rtn;              }              catch (Exception ex)              {                  throw new ProxyException(String.Format(CultureInfo.InvariantCulture' "Connection to proxy host {0} on port {1} failed."' Utils.GetHost(_tcpClient)' Utils.GetPort(_tcpClient))' ex);              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: byte[] authRequest = new byte[4];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: authRequest[2] = SOCKS5_AUTH_METHOD_NO_AUTHENTICATION_REQUIRED;
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: authRequest[3] = SOCKS5_AUTH_METHOD_USERNAME_PASSWORD;
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: byte[] response = new byte[2];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: if (acceptedAuthMethod == SOCKS5_AUTH_METHOD_USERNAME_PASSWORD)              {                    // USERNAME / PASSWORD SERVER REQUEST                  // Once the SOCKS V5 server has started' and the client has selected the                  // Username/Password Authentication protocol' the Username/Password                  // subnegotiation begins.  This begins with the client producing a                  // Username/Password request:                  //                  //       +----+------+----------+------+----------+                  //       |VER | ULEN |  UNAME   | PLEN |  PASSWD  |                  //       +----+------+----------+------+----------+                  //       | 1  |  1   | 1 to 255 |  1   | 1 to 255 |                  //       +----+------+----------+------+----------+                    // create a data structure (binary array) containing credentials                  // to send to the proxy server which consists of clear username and password data                  byte[] credentials = new byte[_proxyUserName.Length + _proxyPassword.Length + 3];                                    // for SOCKS5 username/password authentication the VER field must be set to 0x01                  //  http://en.wikipedia.org/wiki/SOCKS                  //      field 1: version number' 1 byte (must be 0x01)"                  credentials[0] = 0x01;                    credentials[1] = (byte)_proxyUserName.Length;                   Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyUserName)' 0' credentials' 2' _proxyUserName.Length);                   credentials[_proxyUserName.Length + 2] = (byte)_proxyPassword.Length;                  Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);                     // USERNAME / PASSWORD SERVER RESPONSE                  // The server verifies the supplied UNAME and PASSWD' and sends the                  // following response:                  //                  //   +----+--------+                  //   |VER | STATUS |                  //   +----+--------+                  //   | 1  |   1    |                  //   +----+--------+                  //                  // A STATUS field of X'00' indicates success. If the server returns a                  // `failure' (STATUS value other than X'00') status' it MUST close the                  // connection.                    // transmit credentials to the proxy server                  stream.Write(credentials' 0' credentials.Length);                    // read the response from the proxy server                  byte[] crResponse = new byte[2];                  stream.Read(crResponse' 0' crResponse.Length);                    // check to see if the proxy server accepted the credentials                  if (crResponse[1] != 0)                  {                      _tcpClient.Close();                      throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid.");                  }                }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: if (acceptedAuthMethod == SOCKS5_AUTH_METHOD_USERNAME_PASSWORD)              {                    // USERNAME / PASSWORD SERVER REQUEST                  // Once the SOCKS V5 server has started' and the client has selected the                  // Username/Password Authentication protocol' the Username/Password                  // subnegotiation begins.  This begins with the client producing a                  // Username/Password request:                  //                  //       +----+------+----------+------+----------+                  //       |VER | ULEN |  UNAME   | PLEN |  PASSWD  |                  //       +----+------+----------+------+----------+                  //       | 1  |  1   | 1 to 255 |  1   | 1 to 255 |                  //       +----+------+----------+------+----------+                    // create a data structure (binary array) containing credentials                  // to send to the proxy server which consists of clear username and password data                  byte[] credentials = new byte[_proxyUserName.Length + _proxyPassword.Length + 3];                                    // for SOCKS5 username/password authentication the VER field must be set to 0x01                  //  http://en.wikipedia.org/wiki/SOCKS                  //      field 1: version number' 1 byte (must be 0x01)"                  credentials[0] = 0x01;                    credentials[1] = (byte)_proxyUserName.Length;                   Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyUserName)' 0' credentials' 2' _proxyUserName.Length);                   credentials[_proxyUserName.Length + 2] = (byte)_proxyPassword.Length;                  Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);                     // USERNAME / PASSWORD SERVER RESPONSE                  // The server verifies the supplied UNAME and PASSWD' and sends the                  // following response:                  //                  //   +----+--------+                  //   |VER | STATUS |                  //   +----+--------+                  //   | 1  |   1    |                  //   +----+--------+                  //                  // A STATUS field of X'00' indicates success. If the server returns a                  // `failure' (STATUS value other than X'00') status' it MUST close the                  // connection.                    // transmit credentials to the proxy server                  stream.Write(credentials' 0' credentials.Length);                    // read the response from the proxy server                  byte[] crResponse = new byte[2];                  stream.Read(crResponse' 0' crResponse.Length);                    // check to see if the proxy server accepted the credentials                  if (crResponse[1] != 0)                  {                      _tcpClient.Close();                      throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid.");                  }                }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: if (acceptedAuthMethod == SOCKS5_AUTH_METHOD_USERNAME_PASSWORD)              {                    // USERNAME / PASSWORD SERVER REQUEST                  // Once the SOCKS V5 server has started' and the client has selected the                  // Username/Password Authentication protocol' the Username/Password                  // subnegotiation begins.  This begins with the client producing a                  // Username/Password request:                  //                  //       +----+------+----------+------+----------+                  //       |VER | ULEN |  UNAME   | PLEN |  PASSWD  |                  //       +----+------+----------+------+----------+                  //       | 1  |  1   | 1 to 255 |  1   | 1 to 255 |                  //       +----+------+----------+------+----------+                    // create a data structure (binary array) containing credentials                  // to send to the proxy server which consists of clear username and password data                  byte[] credentials = new byte[_proxyUserName.Length + _proxyPassword.Length + 3];                                    // for SOCKS5 username/password authentication the VER field must be set to 0x01                  //  http://en.wikipedia.org/wiki/SOCKS                  //      field 1: version number' 1 byte (must be 0x01)"                  credentials[0] = 0x01;                    credentials[1] = (byte)_proxyUserName.Length;                   Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyUserName)' 0' credentials' 2' _proxyUserName.Length);                   credentials[_proxyUserName.Length + 2] = (byte)_proxyPassword.Length;                  Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);                     // USERNAME / PASSWORD SERVER RESPONSE                  // The server verifies the supplied UNAME and PASSWD' and sends the                  // following response:                  //                  //   +----+--------+                  //   |VER | STATUS |                  //   +----+--------+                  //   | 1  |   1    |                  //   +----+--------+                  //                  // A STATUS field of X'00' indicates success. If the server returns a                  // `failure' (STATUS value other than X'00') status' it MUST close the                  // connection.                    // transmit credentials to the proxy server                  stream.Write(credentials' 0' credentials.Length);                    // read the response from the proxy server                  byte[] crResponse = new byte[2];                  stream.Read(crResponse' 0' crResponse.Length);                    // check to see if the proxy server accepted the credentials                  if (crResponse[1] != 0)                  {                      _tcpClient.Close();                      throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid.");                  }                }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: if (acceptedAuthMethod == SOCKS5_AUTH_METHOD_USERNAME_PASSWORD)              {                    // USERNAME / PASSWORD SERVER REQUEST                  // Once the SOCKS V5 server has started' and the client has selected the                  // Username/Password Authentication protocol' the Username/Password                  // subnegotiation begins.  This begins with the client producing a                  // Username/Password request:                  //                  //       +----+------+----------+------+----------+                  //       |VER | ULEN |  UNAME   | PLEN |  PASSWD  |                  //       +----+------+----------+------+----------+                  //       | 1  |  1   | 1 to 255 |  1   | 1 to 255 |                  //       +----+------+----------+------+----------+                    // create a data structure (binary array) containing credentials                  // to send to the proxy server which consists of clear username and password data                  byte[] credentials = new byte[_proxyUserName.Length + _proxyPassword.Length + 3];                                    // for SOCKS5 username/password authentication the VER field must be set to 0x01                  //  http://en.wikipedia.org/wiki/SOCKS                  //      field 1: version number' 1 byte (must be 0x01)"                  credentials[0] = 0x01;                    credentials[1] = (byte)_proxyUserName.Length;                   Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyUserName)' 0' credentials' 2' _proxyUserName.Length);                   credentials[_proxyUserName.Length + 2] = (byte)_proxyPassword.Length;                  Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);                     // USERNAME / PASSWORD SERVER RESPONSE                  // The server verifies the supplied UNAME and PASSWD' and sends the                  // following response:                  //                  //   +----+--------+                  //   |VER | STATUS |                  //   +----+--------+                  //   | 1  |   1    |                  //   +----+--------+                  //                  // A STATUS field of X'00' indicates success. If the server returns a                  // `failure' (STATUS value other than X'00') status' it MUST close the                  // connection.                    // transmit credentials to the proxy server                  stream.Write(credentials' 0' credentials.Length);                    // read the response from the proxy server                  byte[] crResponse = new byte[2];                  stream.Read(crResponse' 0' crResponse.Length);                    // check to see if the proxy server accepted the credentials                  if (crResponse[1] != 0)                  {                      _tcpClient.Close();                      throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid.");                  }                }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,NegotiateServerAuthMethod,The following statement contains a magic number: if (acceptedAuthMethod == SOCKS5_AUTH_METHOD_USERNAME_PASSWORD)              {                    // USERNAME / PASSWORD SERVER REQUEST                  // Once the SOCKS V5 server has started' and the client has selected the                  // Username/Password Authentication protocol' the Username/Password                  // subnegotiation begins.  This begins with the client producing a                  // Username/Password request:                  //                  //       +----+------+----------+------+----------+                  //       |VER | ULEN |  UNAME   | PLEN |  PASSWD  |                  //       +----+------+----------+------+----------+                  //       | 1  |  1   | 1 to 255 |  1   | 1 to 255 |                  //       +----+------+----------+------+----------+                    // create a data structure (binary array) containing credentials                  // to send to the proxy server which consists of clear username and password data                  byte[] credentials = new byte[_proxyUserName.Length + _proxyPassword.Length + 3];                                    // for SOCKS5 username/password authentication the VER field must be set to 0x01                  //  http://en.wikipedia.org/wiki/SOCKS                  //      field 1: version number' 1 byte (must be 0x01)"                  credentials[0] = 0x01;                    credentials[1] = (byte)_proxyUserName.Length;                   Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyUserName)' 0' credentials' 2' _proxyUserName.Length);                   credentials[_proxyUserName.Length + 2] = (byte)_proxyPassword.Length;                  Array.Copy(ASCIIEncoding.ASCII.GetBytes(_proxyPassword)' 0' credentials' _proxyUserName.Length + 3' _proxyPassword.Length);                     // USERNAME / PASSWORD SERVER RESPONSE                  // The server verifies the supplied UNAME and PASSWD' and sends the                  // following response:                  //                  //   +----+--------+                  //   |VER | STATUS |                  //   +----+--------+                  //   | 1  |   1    |                  //   +----+--------+                  //                  // A STATUS field of X'00' indicates success. If the server returns a                  // `failure' (STATUS value other than X'00') status' it MUST close the                  // connection.                    // transmit credentials to the proxy server                  stream.Write(credentials' 0' credentials.Length);                    // read the response from the proxy server                  byte[] crResponse = new byte[2];                  stream.Read(crResponse' 0' crResponse.Length);                    // check to see if the proxy server accepted the credentials                  if (crResponse[1] != 0)                  {                      _tcpClient.Close();                      throw new ProxyException("Proxy authentification failure!  The proxy server has reported that the userid and/or password is not valid.");                  }                }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,GetDestPortBytes,The following statement contains a magic number: byte[] array = new byte[2];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,GetDestPortBytes,The following statement contains a magic number: array[0] = Convert.ToByte(value / 256);
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,GetDestPortBytes,The following statement contains a magic number: array[1] = Convert.ToByte(value % 256);
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[4 + destAddr.Length + 2];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[4 + destAddr.Length + 2];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: request[2] = SOCKS5_RESERVED;
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: request[3] = addressType;
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: destAddr.CopyTo(request' 4);
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: destPort.CopyTo(request' 4 + destAddr.Length);
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[255];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: byte addrType = response[3];
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following statement contains a magic number: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Magic Number,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,CreateConnectionAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,ExecuteGpg,The following statement contains a magic number: try              {                  //  start the gpg process and get back a process start info object                  _proc = Process.Start(procInfo);                                    _proc.StandardInput.WriteLine(_passphrase);                  _proc.StandardInput.Flush();                    _outputStream = outputStream;                  _errorStream = new MemoryStream();                    // set up threads to run the output stream and error stream asynchronously                  ThreadStart outputEntry = new ThreadStart(AsyncOutputReader);                  Thread outputThread = new Thread(outputEntry);                  outputThread.Name = "gpg stdout";                  outputThread.Start();                  ThreadStart errorEntry = new ThreadStart(AsyncErrorReader);                  Thread errorThread = new Thread(errorEntry);                  errorThread.Name = "gpg stderr";                  errorThread.Start();                    //  copy the input stream to the process standard input object                  CopyStream(inputStream' _proc.StandardInput.BaseStream);                                                    _proc.StandardInput.Flush();                                   // close the process standard input object                  _proc.StandardInput.Close();                    //  wait for the process to return with an exit code (with a timeout variable)                  if (!_proc.WaitForExit(_timeout))                  {                      throw new GpgException("A time out event occurred while executing the GPG program.");                  }                    if (!outputThread.Join(_timeout / 2))                      outputThread.Abort();                    if (!errorThread.Join(_timeout / 2))                      errorThread.Abort();                    //  if the process exit code is not 0 then read the error text from the gpg.exe process                   if (_proc.ExitCode != 0  && !_ignoreErrors)                  {                      StreamReader rerror = new StreamReader(_errorStream);                      _errorStream.Position = 0;                      gpgErrorText = rerror.ReadToEnd();                  }                            // key name is output to error stream so read from the error stream and write out                  // to the output stream                  if (action == ActionTypes.Import)                  {                      _errorStream.Position = 0;                      byte[] buffer = new byte[4048];                      int count;                      while ((count = _errorStream.Read(buffer' 0' buffer.Length)) != 0)                      {                          outputStream.Write(buffer' 0' count);                      }                  }                }              catch (Exception exp)              {                  throw new GpgException(String.Format(CultureInfo.InvariantCulture' "Error.  Action: {0}.  Command args: {1}"' action.ToString()' procInfo.Arguments)' exp);              }              finally              {                  Dispose();              }
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,ExecuteGpg,The following statement contains a magic number: try              {                  //  start the gpg process and get back a process start info object                  _proc = Process.Start(procInfo);                                    _proc.StandardInput.WriteLine(_passphrase);                  _proc.StandardInput.Flush();                    _outputStream = outputStream;                  _errorStream = new MemoryStream();                    // set up threads to run the output stream and error stream asynchronously                  ThreadStart outputEntry = new ThreadStart(AsyncOutputReader);                  Thread outputThread = new Thread(outputEntry);                  outputThread.Name = "gpg stdout";                  outputThread.Start();                  ThreadStart errorEntry = new ThreadStart(AsyncErrorReader);                  Thread errorThread = new Thread(errorEntry);                  errorThread.Name = "gpg stderr";                  errorThread.Start();                    //  copy the input stream to the process standard input object                  CopyStream(inputStream' _proc.StandardInput.BaseStream);                                                    _proc.StandardInput.Flush();                                   // close the process standard input object                  _proc.StandardInput.Close();                    //  wait for the process to return with an exit code (with a timeout variable)                  if (!_proc.WaitForExit(_timeout))                  {                      throw new GpgException("A time out event occurred while executing the GPG program.");                  }                    if (!outputThread.Join(_timeout / 2))                      outputThread.Abort();                    if (!errorThread.Join(_timeout / 2))                      errorThread.Abort();                    //  if the process exit code is not 0 then read the error text from the gpg.exe process                   if (_proc.ExitCode != 0  && !_ignoreErrors)                  {                      StreamReader rerror = new StreamReader(_errorStream);                      _errorStream.Position = 0;                      gpgErrorText = rerror.ReadToEnd();                  }                            // key name is output to error stream so read from the error stream and write out                  // to the output stream                  if (action == ActionTypes.Import)                  {                      _errorStream.Position = 0;                      byte[] buffer = new byte[4048];                      int count;                      while ((count = _errorStream.Read(buffer' 0' buffer.Length)) != 0)                      {                          outputStream.Write(buffer' 0' count);                      }                  }                }              catch (Exception exp)              {                  throw new GpgException(String.Format(CultureInfo.InvariantCulture' "Error.  Action: {0}.  Command args: {1}"' action.ToString()' procInfo.Arguments)' exp);              }              finally              {                  Dispose();              }
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,ExecuteGpg,The following statement contains a magic number: try              {                  //  start the gpg process and get back a process start info object                  _proc = Process.Start(procInfo);                                    _proc.StandardInput.WriteLine(_passphrase);                  _proc.StandardInput.Flush();                    _outputStream = outputStream;                  _errorStream = new MemoryStream();                    // set up threads to run the output stream and error stream asynchronously                  ThreadStart outputEntry = new ThreadStart(AsyncOutputReader);                  Thread outputThread = new Thread(outputEntry);                  outputThread.Name = "gpg stdout";                  outputThread.Start();                  ThreadStart errorEntry = new ThreadStart(AsyncErrorReader);                  Thread errorThread = new Thread(errorEntry);                  errorThread.Name = "gpg stderr";                  errorThread.Start();                    //  copy the input stream to the process standard input object                  CopyStream(inputStream' _proc.StandardInput.BaseStream);                                                    _proc.StandardInput.Flush();                                   // close the process standard input object                  _proc.StandardInput.Close();                    //  wait for the process to return with an exit code (with a timeout variable)                  if (!_proc.WaitForExit(_timeout))                  {                      throw new GpgException("A time out event occurred while executing the GPG program.");                  }                    if (!outputThread.Join(_timeout / 2))                      outputThread.Abort();                    if (!errorThread.Join(_timeout / 2))                      errorThread.Abort();                    //  if the process exit code is not 0 then read the error text from the gpg.exe process                   if (_proc.ExitCode != 0  && !_ignoreErrors)                  {                      StreamReader rerror = new StreamReader(_errorStream);                      _errorStream.Position = 0;                      gpgErrorText = rerror.ReadToEnd();                  }                            // key name is output to error stream so read from the error stream and write out                  // to the output stream                  if (action == ActionTypes.Import)                  {                      _errorStream.Position = 0;                      byte[] buffer = new byte[4048];                      int count;                      while ((count = _errorStream.Read(buffer' 0' buffer.Length)) != 0)                      {                          outputStream.Write(buffer' 0' count);                      }                  }                }              catch (Exception exp)              {                  throw new GpgException(String.Format(CultureInfo.InvariantCulture' "Error.  Action: {0}.  Command args: {1}"' action.ToString()' procInfo.Arguments)' exp);              }              finally              {                  Dispose();              }
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,EncryptAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,DecryptAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,SignAsync,The following statement contains a magic number: Object[] args = new Object[2];
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (lines.Length < 1)                  sub = SplitSpaces(lines[2]);
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (pub.Length >= 6) {	                  if (pub[5].Length > 1)                      _keyExpiration = DateTime.Parse(pub[5].Substring(0' pub[5].Length-1));                      _keyCreation = DateTime.Parse(pub[2]);                  }                   else                   {                      // try to parse it                      DateTime.TryParse(pub[2]' out _keyExpiration);                  }
Magic Number,Starksoft.Aspen.GnuPG,GpgKey,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\GpgKey.cs,ParseRaw,The following statement contains a magic number: if (sub != null) {                      _subKey = sub[1];                  DateTime.TryParse(sub[2]' out _subKeyExpiration);              }
Magic Number,Starksoft.Aspen.Smartcard,SCard,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCard.cs,Transmit,The following statement contains a magic number: ioRequest.cbPciLength = 8;
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpu,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpu.cs,GetSendBuffer,The following statement contains a magic number: ArrayBuilder b = new ArrayBuilder(4);
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpu,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpu.cs,SetProperties,The following statement contains a magic number: _p1 = cmd[2];
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpu,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpu.cs,SetProperties,The following statement contains a magic number: _p2 = cmd[3];
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpuRecv,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpuRecv.cs,SetReceiveData,The following statement contains a magic number: _receiveData = ArrayUtils.Subarray(receiveData' 0' receiveData.Length - 2);
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpuRecv,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpuRecv.cs,SetReceiveData,The following statement contains a magic number: byte[] swValues = ArrayUtils.Subarray(receiveData' receiveData.Length - 2' 2);
Magic Number,Starksoft.Aspen.Smartcard,SCardAdpuRecv,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Smartcard\SCardAdpuRecv.cs,SetReceiveData,The following statement contains a magic number: byte[] swValues = ArrayUtils.Subarray(receiveData' receiveData.Length - 2' 2);
Missing Default,Starksoft.Aspen,ArrayUtils,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\ArrayUtils.cs,SetParity,The following switch statement is missing a default case: switch (parity)                  {                      case ParityOptions.Odd:                          if (oneCount % 2 == 0)                              buffer[i] |= (1 << 7);                          else                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          break;                      case ParityOptions.Even:                          if (oneCount % 2 == 0)                              buffer[i] &= unchecked((byte)(~(1 << 7)));                          else                              buffer[i] |= (1 << 7);                          break;                  }
Missing Default,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,ComputeHash,The following switch statement is missing a default case: switch (hash)              {                  case HashingAlgorithm.Crc32:                      hashAlgo = new Starksoft.Aspen.Crc32();                      break;                  case HashingAlgorithm.Md5:                      hashAlgo = new MD5CryptoServiceProvider();                      break;                  case HashingAlgorithm.Sha1:                      hashAlgo = new SHA1CryptoServiceProvider();                      break;                  case HashingAlgorithm.Sha256:  #if CLR_4_PLUS                      hashAlgo = new SHA256CryptoServiceProvider();                      break;  #else                      throw new FtpsException("Sha256 algorithm not supported on this CLR version; recompile with .NET 4.0 or higher");  #endif                  case HashingAlgorithm.Sha512:  #if CLR_4_PLUS                      hashAlgo = new SHA512CryptoServiceProvider();                      break;  #else                      throw new FtpsException("Sha256 algorithm not supported on this CLR version; recompile with .NET 4.0 or higher");  #endif                }
Missing Default,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,TransferData,The following switch statement is missing a default case: switch (direction)              {                  case TransferDirection.ToClient:                      if (!data.CanWrite)                          throw new FtpsDataTransferException("Data transfer error.  Data conn does not allow write operation.");                      break;                  case TransferDirection.ToServer:                      if (!data.CanRead)                          throw new FtpsDataTransferException("Data transfer error.  Data conn does not allow read operation.");                      break;              }
Missing Default,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,OpenDataConnAndTransferData,The following switch statement is missing a default case: switch (direction)                  {                      case TransferDirection.ToClient:                          TransferBytes(conn' data' _maxDownloadSpeed * 1024);                          break;                      case TransferDirection.ToServer:                          TransferBytes(data' conn' _maxUploadSpeed * 1024);                          break;                  }
Missing Default,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateSslExplicitCommandStream,The following switch statement is missing a default case: switch (_securityProtocol)                  {                      case FtpsSecurityProtocol.Tls1OrSsl3Explicit:                      case FtpsSecurityProtocol.Ssl3Explicit:                      case FtpsSecurityProtocol.Ssl2Explicit:                          authCommand = "SSL";                          break;                      case FtpsSecurityProtocol.Tls1Explicit:                      case FtpsSecurityProtocol.Tls11Explicit:                      case FtpsSecurityProtocol.Tls12Explicit:                          authCommand = "TLS";                          break;                  }
Missing Default,Starksoft.Aspen.Ftps,FtpsBase,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsBase.cs,CreateZlibStream,The following switch statement is missing a default case: switch (direction)              {                  case TransferDirection.ToClient:                      zstream = new DeflateStream(stream' CompressionMode.Decompress' true);                      // zlib fix to ignore first two bytes of header data                       zstream.BaseStream.ReadByte();                      zstream.BaseStream.ReadByte();                      break;                    case TransferDirection.ToServer:                      zstream = new DeflateStream(stream' CompressionMode.Compress' true);                      // this is a fix for the DeflateStream class only when sending compressed data to the server.                        // Zlib has two bytes of data attached to the header that we have to write before processing the data stream.                      zstream.BaseStream.WriteByte(120);                      zstream.BaseStream.WriteByte(218);                      break;              }
Missing Default,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,GetFile,The following switch statement is missing a default case: switch (action)                  {                      case FileAction.CreateNew:                          // create a file stream to stream the file locally to disk that only creates the file if it does not already exist                          using (Stream localFile = File.Open(localPath' FileMode.CreateNew))                          {                              TransferData(TransferDirection.ToClient' request' localFile);                          }                          break;                                            case FileAction.Create:                          // create a file stream to stream the file locally to disk                          using (Stream localFile = File.Open(localPath' FileMode.Create))                          {                              TransferData(TransferDirection.ToClient' request' localFile);                          }                          break;                      case FileAction.CreateOrAppend:                          // open the local file                          using (Stream localFile = File.Open(localPath' FileMode.OpenOrCreate))                          {                              // set the file position to the end so that any new data will be appended                                                      localFile.Position = localFile.Length;                              TransferData(TransferDirection.ToClient' request' localFile);                          }                          break;                      case FileAction.Resume:                          if (!base.Features.Contains(FtpsCmd.Rest' "STREAM"))                              throw new FtpsCommandNotSupportedException("Cannot resume file transfer." '"REST STREAM");                            using (Stream localFile = File.Open(localPath' FileMode.Open))                          {                              //  make sure we have a valid file size                              if (remoteSize == -1)                                  throw new FtpsException("unable to determine file size for resume transfer");                                // if the files are the same size then there is nothing to transfer                              if (localFile.Length == remoteSize)                                  return;                                // attempt to adjust the transfer size                              if (IsTransferProgressEventSet()) {                                  if (localFile.Length > remoteSize) {                                      SetTransferSize(localFile.Length - remoteSize);                                  }                              }                                TransferData(TransferDirection.ToClient' request' localFile' localFile.Length - 1);                          }                          break;                      case FileAction.ResumeOrCreate:                          if (File.Exists(localPath) && (new FileInfo(localPath)).Length > 0)                              GetFile(remotePath' localPath' FileAction.Resume);                          else                              GetFile(remotePath' localPath' FileAction.Create);                          break;                  }
Missing Default,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,PutFile,The following switch statement is missing a default case: switch (action)                  {                      case FileAction.CreateOrAppend:                          base.TransferData(TransferDirection.ToServer' new FtpsRequest(base.Encoding' FtpsCmd.Appe' remotePath)' inputStream);                          break;                      case FileAction.CreateNew:                          if (Exists(remotePath))                          {                              throw new FtpsException("Cannot overwrite existing file when action FileAction.CreateNew is specified.");                          }                          base.TransferData(TransferDirection.ToServer' new FtpsRequest(base.Encoding' FtpsCmd.Stor' remotePath)' inputStream);                          break;                      case FileAction.Create:                          base.TransferData(TransferDirection.ToServer' new FtpsRequest(base.Encoding' FtpsCmd.Stor' remotePath)' inputStream);                          break;                      case FileAction.Resume:                          if (!base.Features.Contains(FtpsCmd.Rest' "STREAM"))                              throw new FtpsCommandNotSupportedException("Cannot resume file transfer."' "REST STREAM");                            //  get the file size for a resume                          long remoteSize;                          if (!TryGetFileSize(remotePath' out remoteSize))                              throw new FtpsException("unable to determine file size for resume transfer");                            //  if the files are the same size then there is nothing to transfer                          if (remoteSize == inputStream.Length)                              return;                            // attempt to adjust the transfer size                          if (IsTransferProgressEventSet() && inputStream.CanSeek) {                              if (inputStream.Length > remoteSize) {                                  SetTransferSize(inputStream.Length - remoteSize);                              }                          }                            //  transfer file to the server                          base.TransferData(TransferDirection.ToServer' new FtpsRequest(base.Encoding' FtpsCmd.Stor' remotePath)' inputStream' remoteSize);                          break;                      case FileAction.ResumeOrCreate:                          // if the remote file exists then do a resume otherwise do a create                          if (Exists(remotePath))                          {                              PutFile(inputStream' remotePath' FileAction.Resume);                          }                          else                          {                              PutFile(inputStream' remotePath' FileAction.Create);                          }                          break;                  }
Missing Default,Starksoft.Aspen.Ftps,FtpsClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsClient.cs,SetFileTransferType,The following switch statement is missing a default case: switch (t)              {                  case TransferType.Binary:                      base.SendRequest(new FtpsRequest(base.Encoding' FtpsCmd.Type' TYPE_BINARY_I));                      break;                  case TransferType.Ascii:                      base.SendRequest(new FtpsRequest(base.Encoding' FtpsCmd.Type' TYPE_ASCII_A));                      break;              }
Missing Default,Starksoft.Aspen.Ftps,FtpsListItemParser,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Ftps\FtpsListItemParser.cs,ParseUnixFormat,The following switch statement is missing a default case: switch (itemType.ToLower(CultureInfo.InvariantCulture))              {                  case "l":                      itemTypeObj = FtpItemType.SymbolicLink;                      break;                  case "d":                      itemTypeObj = FtpItemType.Directory;                      break;                  case "-":                      itemTypeObj = FtpItemType.File;                      break;                  case "b":                      itemTypeObj = FtpItemType.BlockSpecialFile;                      break;                  case "c":                      itemTypeObj = FtpItemType.CharacterSpecialFile;                      break;                  case "p":                      itemTypeObj = FtpItemType.NamedSocket;                      break;                  case "s":                      itemTypeObj = FtpItemType.DomainSocket;                      break;              }
Missing Default,Starksoft.Aspen.Proxy,Socks5ProxyClient,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\Proxy\Socks5ProxyClient.cs,HandleProxyCommandError,The following switch statement is missing a default case: switch (addrType)              {                  case SOCKS5_ADDRTYPE_DOMAIN_NAME:                      int addrLen = Convert.ToInt32(response[4]);                      byte[] addrBytes = new byte[addrLen];                      for (int i = 0; i < addrLen; i++)                          addrBytes[i] = response[i + 5];                      addr = System.Text.ASCIIEncoding.ASCII.GetString(addrBytes);                      byte[] portBytesDomain = new byte[2];                      portBytesDomain[0] = response[6 + addrLen];                      portBytesDomain[1] = response[5 + addrLen];                      port = BitConverter.ToInt16(portBytesDomain' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV4:                      byte[] ipv4Bytes = new byte[4];                      for (int i = 0; i < 4; i++)                          ipv4Bytes[i] = response[i + 4];                      IPAddress ipv4 = new IPAddress(ipv4Bytes);                      addr = ipv4.ToString();                      byte[] portBytesIpv4 = new byte[2];                      portBytesIpv4[0] = response[9];                      portBytesIpv4[1] = response[8];                      port = BitConverter.ToInt16(portBytesIpv4' 0);                       break;                    case SOCKS5_ADDRTYPE_IPV6:                      byte[] ipv6Bytes = new byte[16];                      for (int i = 0; i < 16; i++)                          ipv6Bytes[i] = response[i + 4];                      IPAddress ipv6 = new IPAddress(ipv6Bytes);                      addr = ipv6.ToString();                      byte[] portBytesIpv6 = new byte[2];                      portBytesIpv6[0] = response[21];                      portBytesIpv6[1] = response[20];                      port = BitConverter.ToInt16(portBytesIpv6' 0);                       break;              }
Missing Default,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgArgs,The following switch statement is missing a default case: switch (action)               {                  case ActionTypes.Encrypt:                  case ActionTypes.SignEncrypt:                  if (String.IsNullOrEmpty (_recipient))                      throw new GpgException ("A Recipient is required before encrypting data.  Please specify a valid recipient using the Recipient property on the GnuPG object.");                      break;              }
Missing Default,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgArgs,The following switch statement is missing a default case: switch (action)              {                  case ActionTypes.Encrypt:                      if (_outputType == OutputTypes.AsciiArmor)                          options.Append ("--armor ");                        // if a filename needs to be embedded in the encrypted blob' set it                      if (!String.IsNullOrEmpty(_filename))                          options.Append(String.Format(CultureInfo.InvariantCulture' "--set-filename \"{0}\" "' _filename));                        options.Append ("--encrypt ");                      break;                  case ActionTypes.Decrypt:                      options.Append("--decrypt ");                      break;                  case ActionTypes.Sign:                      switch (_outputSignatureType)                      {                          case OutputSignatureTypes.ClearText:                              options.Append("--clearsign ");                              break;                          case OutputSignatureTypes.Detached:                              options.Append("--detach-sign ");                              break;                          case OutputSignatureTypes.Signature:                              options.Append("--sign ");                              break;                      }                      break;                  case ActionTypes.SignEncrypt:                      if (_outputType == OutputTypes.AsciiArmor)                          options.Append ("--armor ");                        // if a filename needs to be embedded in the encrypted blob' set it                      if (!String.IsNullOrEmpty(_filename))                          options.Append(String.Format(CultureInfo.InvariantCulture' "--set-filename \"{0}\" "' _filename));                        // determine which type of signature to generate                      switch (_outputSignatureType)                      {                          case OutputSignatureTypes.ClearText:                              options.Append("--clearsign ");                              break;                          case OutputSignatureTypes.Detached:                              options.Append("--detach-sign ");                              break;                          case OutputSignatureTypes.Signature:                              options.Append("--sign ");                              break;                      }                      break;                  case ActionTypes.Verify:                      options.Append("--verify ");                      break;                  case ActionTypes.Import:                      options.Append("--import ");                      break;              }
Missing Default,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgArgs,The following switch statement is missing a default case: switch (_outputSignatureType)                      {                          case OutputSignatureTypes.ClearText:                              options.Append("--clearsign ");                              break;                          case OutputSignatureTypes.Detached:                              options.Append("--detach-sign ");                              break;                          case OutputSignatureTypes.Signature:                              options.Append("--sign ");                              break;                      }
Missing Default,Starksoft.Aspen.GnuPG,Gpg,C:\repos\bentonstark_starksoft-aspen\Starksoft.Aspen\GnuPG\Gpg.cs,GetGpgArgs,The following switch statement is missing a default case: switch (_outputSignatureType)                      {                          case OutputSignatureTypes.ClearText:                              options.Append("--clearsign ");                              break;                          case OutputSignatureTypes.Detached:                              options.Append("--detach-sign ");                              break;                          case OutputSignatureTypes.Signature:                              options.Append("--sign ");                              break;                      }
