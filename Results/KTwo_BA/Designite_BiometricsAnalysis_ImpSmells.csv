Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,Cyclomatic complexity of the method is 8
Complex Method,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,Cyclomatic complexity of the method is 8
Complex Method,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,Cyclomatic complexity of the method is 12
Complex Method,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,Cyclomatic complexity of the method is 8
Complex Method,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,Cyclomatic complexity of the method is 18
Complex Method,BiometricsAnalysis.Tables,DBScripts,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Tables\DBScripts.cs,faceRecognitionAddEntries,Cyclomatic complexity of the method is 9
Long Parameter List,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The method has 5 parameters.
Long Parameter List,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToImage,The method has 5 parameters.
Long Parameter List,BiometricsAnalysis.Tables,Face,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Tables\Face.cs,Face,The method has 6 parameters.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,insert_face,The length of the statement  "*/string query = "INSERT INTO faces (EntryId' Percentage' IsSample' Comment' Img)" + " VALUES (@EntryId' @Percentage' @IsSample' @Comment' @Img)"; " is 146.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,insert_face,The length of the statement  "	string select = "SELECT * FROM faces WHERE EntryId = @EntryId AND Percentage = @Percentage " + "AND IsSample = @IsSample AND Comment = @Comment AND Img = @Img"; " is 160.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,hex2binary,The length of the statement  "	return String.Join (String.Empty' hexvalue.Select (c => Convert.ToString (Convert.ToInt32 (c.ToString ()' 16)' 2).PadLeft (4' '0'))); " is 133.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The length of the statement  "	return Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray (); " is 184.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToImage,The length of the statement  "	var byteArray = Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray (); " is 193.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,insert_audit,The length of the statement  "	string query = "INSERT INTO audits (id_log' name_audit' info_audit' date_audit) VALUES (@id_log' @name_audit' @info_audit' @date_audit)"; " is 137.
Long Statement,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,get_Faces,The length of the statement  "	string select = "SELECT FaceId FROM entries e JOIN faces f ON e.EntryId = f.EntryId WHERE FirstName = @FirstName AND LastName = @LastName"; " is 139.
Long Statement,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_compute_btn_Click,The length of the statement  "		out1.Text = "Length Ratio:" + sgn.rasp + "% \n" + "Comparares all the ratios of all the " + "possible distanced between all points and then counts how many of them correspond within" + " given Error"; " is 200.
Long Statement,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_compute_btn_Click,The length of the statement  "		out2.Text = "Angle Similarity:" + sgn.rasp2 + "% \n " + "Calculates all the angles bwtween all " + "3 consecutive points' and then checks for similarities whitin given Error. performed by simulating the derivate in one point"; " is 226.
Long Statement,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_compute_btn_Click,The length of the statement  "		out3.Text = "Circumcised Circle Center:" + sgn.rasp3 + "% \n " + "Calculates the center of the circumcised circle of the signature " + "and compares the ratios of all the distances between the center and signature's points within" + " given Error"; " is 248.
Long Statement,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The length of the statement  "		lung [i] = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - points.ElementAt (i + 1).x)' 2) + Math.Pow ((points.ElementAt (i).y - points.ElementAt (i + 1).y)' 2)); " is 166.
Long Statement,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The length of the statement  "		_lung [i] = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _points.ElementAt (i + 1).x)' 2) + Math.Pow ((_points.ElementAt (i).y - _points.ElementAt (i + 1).y)' 2)); " is 171.
Long Statement,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The length of the statement  "	cos_unghi = (double)(((A1.x - A2.x) * (A3.x - A2.x) + (A1.y - A2.y) * (A3.y - A2.y)) / (Math.Sqrt (Math.Pow (A1.x - A2.x' 2) + Math.Pow (A1.y - A2.y' 2)) * Math.Sqrt ((Math.Pow (A3.x - A2.x' 2) + Math.Pow (A3.y - A2.y' 2))))); " is 226.
Long Statement,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The length of the statement  "		temp = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - centru.x)' 2) + Math.Pow ((points.ElementAt (i).y - centru.y)' 2)); " is 126.
Long Statement,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The length of the statement  "		temp = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _centru.x)' 2) + Math.Pow ((_points.ElementAt (i).y - _centru.y)' 2)); " is 130.
Complex Conditional,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,crypt,The conditional expression  "plainText_bytes_string [i] == '0' && xored [j] == '0' || plainText_bytes_string [i] == '1' && xored [j] == '1'"  is complex.
Complex Conditional,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,crypt,The conditional expression  "plainText_bytes_string [i] == '0' && xored [j] == '1' || plainText_bytes_string [i] == '1' && xored [j] == '0'"  is complex.
Complex Conditional,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,decrypt,The conditional expression  "cyptedText [i] == '0' && xored [j] == '0' || cyptedText [i] == '1' && xored [j] == '1'"  is complex.
Complex Conditional,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,decrypt,The conditional expression  "cyptedText [i] == '0' && xored [j] == '1' || cyptedText [i] == '1' && xored [j] == '0'"  is complex.
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,xorNumber,The following statement contains a magic number: while (result_f > 0) {  	remainder = result_f % 2;  	result_f /= 2;  	result = remainder.ToString () + result;  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,xorNumber,The following statement contains a magic number: while (result_f > 0) {  	remainder = result_f % 2;  	result_f /= 2;  	result = remainder.ToString () + result;  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,xorNumber,The following statement contains a magic number: remainder = result_f % 2;  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,xorNumber,The following statement contains a magic number: result_f /= 2;  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8) {  	byteList.Add (Convert.ToByte (data.Substring (i' 8)' 2));  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8) {  	byteList.Add (Convert.ToByte (data.Substring (i' 8)' 2));  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8) {  	byteList.Add (Convert.ToByte (data.Substring (i' 8)' 2));  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: i += 8
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: byteList.Add (Convert.ToByte (data.Substring (i' 8)' 2));  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,BinaryToString,The following statement contains a magic number: byteList.Add (Convert.ToByte (data.Substring (i' 8)' 2));  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,StringToBinary,The following statement contains a magic number: foreach (char c in data.ToCharArray ()) {  	sb.Append (Convert.ToString (c' 2).PadLeft (8' '0'));  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,StringToBinary,The following statement contains a magic number: foreach (char c in data.ToCharArray ()) {  	sb.Append (Convert.ToString (c' 2).PadLeft (8' '0'));  }  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,StringToBinary,The following statement contains a magic number: sb.Append (Convert.ToString (c' 2).PadLeft (8' '0'));  
Magic Number,BiometricsAnalysis,BCM,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\BCM.cs,StringToBinary,The following statement contains a magic number: sb.Append (Convert.ToString (c' 2).PadLeft (8' '0'));  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: if (mod4Len != 0) {  	// pad to length multiple of 8  	binary = binary.PadLeft (((binary.Length / 8) + 1) * 8' '0');  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: if (mod4Len != 0) {  	// pad to length multiple of 8  	binary = binary.PadLeft (((binary.Length / 8) + 1) * 8' '0');  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: binary = binary.PadLeft (((binary.Length / 8) + 1) * 8' '0');  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: binary = binary.PadLeft (((binary.Length / 8) + 1) * 8' '0');  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: for (int i = 0; i < binary.Length; i += 8) {  	string eightBits = binary.Substring (i' 8);  	result.AppendFormat ("{0:X2}"' Convert.ToByte (eightBits' 2));  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: for (int i = 0; i < binary.Length; i += 8) {  	string eightBits = binary.Substring (i' 8);  	result.AppendFormat ("{0:X2}"' Convert.ToByte (eightBits' 2));  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: for (int i = 0; i < binary.Length; i += 8) {  	string eightBits = binary.Substring (i' 8);  	result.AppendFormat ("{0:X2}"' Convert.ToByte (eightBits' 2));  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: i += 8
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryStringToHexString,The following statement contains a magic number: result.AppendFormat ("{0:X2}"' Convert.ToByte (eightBits' 2));  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,hex2binary,The following statement contains a magic number: return String.Join (String.Empty' hexvalue.Select (c => Convert.ToString (Convert.ToInt32 (c.ToString ()' 16)' 2).PadLeft (4' '0')));  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,hex2binary,The following statement contains a magic number: return String.Join (String.Empty' hexvalue.Select (c => Convert.ToString (Convert.ToInt32 (c.ToString ()' 16)' 2).PadLeft (4' '0')));  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,hex2binary,The following statement contains a magic number: return String.Join (String.Empty' hexvalue.Select (c => Convert.ToString (Convert.ToInt32 (c.ToString ()' 16)' 2).PadLeft (4' '0')));  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The following statement contains a magic number: return Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray ();  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The following statement contains a magic number: return Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray ();  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The following statement contains a magic number: return Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray ();  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,BinaryToByte,The following statement contains a magic number: return Enumerable.Range (0' int.MaxValue / 8).Select (i => i * 8).TakeWhile (i => i < bites.Length).Select (i => bites.Substring (i' 8)).Select (s => Convert.ToByte (s' 2)).ToArray ();  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,ImageToBinary,The following statement contains a magic number: for (int counter = 0; counter < b.Length; counter++) {  	StringBuilder out_string = new StringBuilder ();  	byte mask = 128;  	for (int i = 7; i >= 0; --i) {  		out_string.Append ((b [counter] & mask) != 0 ? "1" : "0");  		mask >>= 1;  	}  	biteString [counter] = out_string.ToString ();  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,ImageToBinary,The following statement contains a magic number: for (int counter = 0; counter < b.Length; counter++) {  	StringBuilder out_string = new StringBuilder ();  	byte mask = 128;  	for (int i = 7; i >= 0; --i) {  		out_string.Append ((b [counter] & mask) != 0 ? "1" : "0");  		mask >>= 1;  	}  	biteString [counter] = out_string.ToString ();  }  
Magic Number,BiometricsAnalysis,Database_Utils,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Database_Utils.cs,ImageToBinary,The following statement contains a magic number: for (int i = 7; i >= 0; --i) {  	out_string.Append ((b [counter] & mask) != 0 ? "1" : "0");  	mask >>= 1;  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile1 (filePath);  	file1.Content = "File 1:\n" + sgn.file1_text;  	// _signPage.file1.Content = sgn.file1_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		if (sgn.points1 [i].x < minX)  			minX = sgn.points1 [i].x;  		if (sgn.points1 [i].x > maxX)  			maxX = sgn.points1 [i].x;  		if (sgn.points1 [i].y < minY)  			minY = sgn.points1 [i].y;  		if (sgn.points1 [i].y > maxY)  			maxY = sgn.points1 [i].y;  	}  	for (int i = 0; i < sgn.points1.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Black;  		line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  		signature1.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points1.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Black;  	line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  	signature1.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points1.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Black;  	line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  	signature1.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points1.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Black;  	line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  	signature1.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points1.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Black;  	line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  	signature1.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points1.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Black;  	line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  	signature1.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: line.StrokeThickness = 4;  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: line.X1 = (sgn.points1 [i].x - minX) * (500 / (maxX - minX));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: line.Y1 = (sgn.points1 [i].y - minY) * (500 / (maxY - minY));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: line.X2 = (sgn.points1 [i + 1].x - minX) * (500 / (maxX - minX));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file1_btn_Click,The following statement contains a magic number: line.Y2 = (sgn.points1 [i + 1].y - minY) * (500 / (maxY - minY));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: if (filePath != "") {  	sgn.getFile2 (filePath);  	file2.Content = "File 2:\n" + sgn.file2_text;  	//   _signPage.file2.Content = sgn.file2_text;  	int minX = 99999' minY = 99999' maxX = 0' maxY = 0;  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		if (sgn.points2 [i].x < minX)  			minX = sgn.points2 [i].x;  		if (sgn.points2 [i].x > maxX)  			maxX = sgn.points2 [i].x;  		if (sgn.points2 [i].y < minY)  			minY = sgn.points2 [i].y;  		if (sgn.points2 [i].y > maxY)  			maxY = sgn.points2 [i].y;  	}  	for (int i = 0; i < sgn.points2.Length - 1; i++) {  		Line line = new Line ();  		line.Visibility = System.Windows.Visibility.Visible;  		line.StrokeThickness = 4;  		line.Stroke = System.Windows.Media.Brushes.Red;  		line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  		line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  		line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  		line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  		signature2.Children.Add (line);  	}  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points2.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Red;  	line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  	signature2.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points2.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Red;  	line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  	signature2.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points2.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Red;  	line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  	signature2.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points2.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Red;  	line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  	signature2.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: for (int i = 0; i < sgn.points2.Length - 1; i++) {  	Line line = new Line ();  	line.Visibility = System.Windows.Visibility.Visible;  	line.StrokeThickness = 4;  	line.Stroke = System.Windows.Media.Brushes.Red;  	line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  	line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  	line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  	line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  	signature2.Children.Add (line);  }  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: line.StrokeThickness = 4;  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: line.X1 = (sgn.points2 [i].x - minX) * (500 / (maxX - minX));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: line.Y1 = (sgn.points2 [i].y - minY) * (500 / (maxY - minY));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: line.X2 = (sgn.points2 [i + 1].x - minX) * (500 / (maxX - minX));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,signature_open_file2_btn_Click,The following statement contains a magic number: line.Y2 = (sgn.points2 [i + 1].y - minY) * (500 / (maxY - minY));  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,drawFaceCanvasGrid,The following statement contains a magic number: line.StrokeThickness = 4;  
Magic Number,BiometricsAnalysis,MainWindow,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\MainWindow.xaml.cs,drawFaceCanvasGrid,The following statement contains a magic number: line.Y2 = FaceCanvasGrid.Width - 10;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile1,The following statement contains a magic number: for (int i = 0; i < lines1.Length; i++) {  	string[] temp = lines1 [i].Split (' ');  	x1 [i] = temp [0];  	y1 [i] = temp [1];  	file1_text += x1 [i] + " " + y1 [i] + "\r\n";  	points1 [i].x = Convert.ToInt32 (x1 [i]) - 8000;  	points1 [i].y = Convert.ToInt32 (y1 [i]) - 17000;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile1,The following statement contains a magic number: for (int i = 0; i < lines1.Length; i++) {  	string[] temp = lines1 [i].Split (' ');  	x1 [i] = temp [0];  	y1 [i] = temp [1];  	file1_text += x1 [i] + " " + y1 [i] + "\r\n";  	points1 [i].x = Convert.ToInt32 (x1 [i]) - 8000;  	points1 [i].y = Convert.ToInt32 (y1 [i]) - 17000;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile1,The following statement contains a magic number: points1 [i].x = Convert.ToInt32 (x1 [i]) - 8000;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile1,The following statement contains a magic number: points1 [i].y = Convert.ToInt32 (y1 [i]) - 17000;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile2,The following statement contains a magic number: for (int i = 0; i < lines2.Length; i++) {  	string[] temp = lines2 [i].Split (' ');  	x2 [i] = temp [0];  	y2 [i] = temp [1];  	file2_text += x2 [i] + " " + y2 [i] + "\r\n";  	points2 [i].x = Convert.ToInt32 (x2 [i]) - 7000;  	points2 [i].y = Convert.ToInt32 (y2 [i]) - 18000;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile2,The following statement contains a magic number: for (int i = 0; i < lines2.Length; i++) {  	string[] temp = lines2 [i].Split (' ');  	x2 [i] = temp [0];  	y2 [i] = temp [1];  	file2_text += x2 [i] + " " + y2 [i] + "\r\n";  	points2 [i].x = Convert.ToInt32 (x2 [i]) - 7000;  	points2 [i].y = Convert.ToInt32 (y2 [i]) - 18000;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile2,The following statement contains a magic number: points2 [i].x = Convert.ToInt32 (x2 [i]) - 7000;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,getFile2,The following statement contains a magic number: points2 [i].y = Convert.ToInt32 (y2 [i]) - 18000;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compute,The following statement contains a magic number: if (rasp == 0)  	output += "Nu corespund";  else {  	output = "LR:" + rasp + "% DS:" + rasp2 + "% CI:" + rasp3 + "% TOTAL: " + ((rasp + rasp3) / 2 + rasp2) / 2 + "%";  	output1 = "" + rasp;  	output2 = "" + rasp2;  	output3 = "" + rasp3;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compute,The following statement contains a magic number: if (rasp == 0)  	output += "Nu corespund";  else {  	output = "LR:" + rasp + "% DS:" + rasp2 + "% CI:" + rasp3 + "% TOTAL: " + ((rasp + rasp3) / 2 + rasp2) / 2 + "%";  	output1 = "" + rasp;  	output2 = "" + rasp2;  	output3 = "" + rasp3;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compute,The following statement contains a magic number: output = "LR:" + rasp + "% DS:" + rasp2 + "% CI:" + rasp3 + "% TOTAL: " + ((rasp + rasp3) / 2 + rasp2) / 2 + "%";  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compute,The following statement contains a magic number: output = "LR:" + rasp + "% DS:" + rasp2 + "% CI:" + rasp3 + "% TOTAL: " + ((rasp + rasp3) / 2 + rasp2) / 2 + "%";  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: if (Math.Abs (points.Length - _points.Length) > points.Length / 2) {  	return 0;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	int temp = 1;  	int[] rap = new int[1000];  	for (int j = 0; j < points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  		rap [j] = temp;  	}  	raporturi.Add (rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	int temp = 1;  	int[] rap = new int[1000];  	for (int j = 0; j < points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  		rap [j] = temp;  	}  	raporturi.Add (rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	int temp = 1;  	int[] rap = new int[1000];  	for (int j = 0; j < points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  		rap [j] = temp;  	}  	raporturi.Add (rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int j = 0; j < points.Length; j++) {  	temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  	rap [j] = temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int j = 0; j < points.Length; j++) {  	temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  	rap [j] = temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((points [i].x - points [j].x)' 2) + Math.Pow ((points [i].y - points [j].y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	int temp = 1;  	int[] _rap = new int[1000];  	for (int j = 0; j < _points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  		_rap [j] = temp;  	}  	_raporturi.Add (_rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	int temp = 1;  	int[] _rap = new int[1000];  	for (int j = 0; j < _points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  		_rap [j] = temp;  	}  	_raporturi.Add (_rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	int temp = 1;  	int[] _rap = new int[1000];  	for (int j = 0; j < _points.Length; j++) {  		temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  		_rap [j] = temp;  	}  	_raporturi.Add (_rap);  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int j = 0; j < _points.Length; j++) {  	temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  	_rap [j] = temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: for (int j = 0; j < _points.Length; j++) {  	temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  	_rap [j] = temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((_points [i].x - _points [j].x)' 2) + Math.Pow ((_points [i].y - _points [j].y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare_raport,The following statement contains a magic number: return nr * 100 / (points.Length * points.Length);  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: if (Math.Abs (points.Length - _points.Length) > points.Length / 2) {  	return 0;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < points.Length - 1; i++) {  	unghi [i] = (int)unghi_ (points.ElementAt (i - 1)' points.ElementAt (i)' points.ElementAt (i + 1));  	lung [i] = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - points.ElementAt (i + 1).x)' 2) + Math.Pow ((points.ElementAt (i).y - points.ElementAt (i + 1).y)' 2));  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < points.Length - 1; i++) {  	unghi [i] = (int)unghi_ (points.ElementAt (i - 1)' points.ElementAt (i)' points.ElementAt (i + 1));  	lung [i] = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - points.ElementAt (i + 1).x)' 2) + Math.Pow ((points.ElementAt (i).y - points.ElementAt (i + 1).y)' 2));  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: lung [i] = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - points.ElementAt (i + 1).x)' 2) + Math.Pow ((points.ElementAt (i).y - points.ElementAt (i + 1).y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: lung [i] = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - points.ElementAt (i + 1).x)' 2) + Math.Pow ((points.ElementAt (i).y - points.ElementAt (i + 1).y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < _points.Length - 1; i++) {  	_unghi [i] = (int)unghi_ (_points.ElementAt (i - 1)' _points.ElementAt (i)' _points.ElementAt (i + 1));  	_lung [i] = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _points.ElementAt (i + 1).x)' 2) + Math.Pow ((_points.ElementAt (i).y - _points.ElementAt (i + 1).y)' 2));  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < _points.Length - 1; i++) {  	_unghi [i] = (int)unghi_ (_points.ElementAt (i - 1)' _points.ElementAt (i)' _points.ElementAt (i + 1));  	_lung [i] = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _points.ElementAt (i + 1).x)' 2) + Math.Pow ((_points.ElementAt (i).y - _points.ElementAt (i + 1).y)' 2));  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: _lung [i] = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _points.ElementAt (i + 1).x)' 2) + Math.Pow ((_points.ElementAt (i).y - _points.ElementAt (i + 1).y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: _lung [i] = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _points.ElementAt (i + 1).x)' 2) + Math.Pow ((_points.ElementAt (i).y - _points.ElementAt (i + 1).y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < size - 2; i++)  	if (Math.Abs (unghi [i] - _unghi [i]) <= 20)  		//&& Math.Abs(lung[i] - _lung[i]) < 50)  		nr++;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: for (int i = 1; i < size - 2; i++)  	if (Math.Abs (unghi [i] - _unghi [i]) <= 20)  		//&& Math.Abs(lung[i] - _lung[i]) < 50)  		nr++;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: if (Math.Abs (unghi [i] - _unghi [i]) <= 20)  	//&& Math.Abs(lung[i] - _lung[i]) < 50)  	nr++;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: return nr * 100 / (points.Length - 2);  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,compare3,The following statement contains a magic number: return nr * 100 / (points.Length - 2);  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The following statement contains a magic number: cos_unghi = (double)(((A1.x - A2.x) * (A3.x - A2.x) + (A1.y - A2.y) * (A3.y - A2.y)) / (Math.Sqrt (Math.Pow (A1.x - A2.x' 2) + Math.Pow (A1.y - A2.y' 2)) * Math.Sqrt ((Math.Pow (A3.x - A2.x' 2) + Math.Pow (A3.y - A2.y' 2)))));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The following statement contains a magic number: cos_unghi = (double)(((A1.x - A2.x) * (A3.x - A2.x) + (A1.y - A2.y) * (A3.y - A2.y)) / (Math.Sqrt (Math.Pow (A1.x - A2.x' 2) + Math.Pow (A1.y - A2.y' 2)) * Math.Sqrt ((Math.Pow (A3.x - A2.x' 2) + Math.Pow (A3.y - A2.y' 2)))));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The following statement contains a magic number: cos_unghi = (double)(((A1.x - A2.x) * (A3.x - A2.x) + (A1.y - A2.y) * (A3.y - A2.y)) / (Math.Sqrt (Math.Pow (A1.x - A2.x' 2) + Math.Pow (A1.y - A2.y' 2)) * Math.Sqrt ((Math.Pow (A3.x - A2.x' 2) + Math.Pow (A3.y - A2.y' 2)))));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The following statement contains a magic number: cos_unghi = (double)(((A1.x - A2.x) * (A3.x - A2.x) + (A1.y - A2.y) * (A3.y - A2.y)) / (Math.Sqrt (Math.Pow (A1.x - A2.x' 2) + Math.Pow (A1.y - A2.y' 2)) * Math.Sqrt ((Math.Pow (A3.x - A2.x' 2) + Math.Pow (A3.y - A2.y' 2)))));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,unghi_,The following statement contains a magic number: return (unghi * (180.0 / Math.PI));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: _centru.x = (_minX + _maxX) / 2;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: _centru.y = (_minY + _maxY) / 2;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: centru.x = (minX + maxY) / 2;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: centru.y = (minY + maxY) / 2;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: if (Math.Abs (points.Length - _points.Length) > points.Length / 2) {  	return 0;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	int temp = 1;  	temp = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - centru.x)' 2) + Math.Pow ((points.ElementAt (i).y - centru.y)' 2));  	rap [i] = temp;  	//	temp = (int)((int) Math.sqrt(Math.pow((points.get(0).x-points.get(points.size()-1).x)'2)  	//	   +Math.pow((points.get(0).y-points.get(points.size()-1).y)'2)))/temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	int temp = 1;  	temp = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - centru.x)' 2) + Math.Pow ((points.ElementAt (i).y - centru.y)' 2));  	rap [i] = temp;  	//	temp = (int)((int) Math.sqrt(Math.pow((points.get(0).x-points.get(points.size()-1).x)'2)  	//	   +Math.pow((points.get(0).y-points.get(points.size()-1).y)'2)))/temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - centru.x)' 2) + Math.Pow ((points.ElementAt (i).y - centru.y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((points.ElementAt (i).x - centru.x)' 2) + Math.Pow ((points.ElementAt (i).y - centru.y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	int temp = 1;  	temp = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _centru.x)' 2) + Math.Pow ((_points.ElementAt (i).y - _centru.y)' 2));  	_rap [i] = temp;  	//	temp = (int)((int) Math.sqrt(Math.pow((_points.get(0).x-_points.get(_points.size()-1).x)'2)  	//	   +Math.pow((_points.get(0).y-_points.get(_points.size()-1).y)'2)))/temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	int temp = 1;  	temp = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _centru.x)' 2) + Math.Pow ((_points.ElementAt (i).y - _centru.y)' 2));  	_rap [i] = temp;  	//	temp = (int)((int) Math.sqrt(Math.pow((_points.get(0).x-_points.get(_points.size()-1).x)'2)  	//	   +Math.pow((_points.get(0).y-_points.get(_points.size()-1).y)'2)))/temp;  }  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _centru.x)' 2) + Math.Pow ((_points.ElementAt (i).y - _centru.y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: temp = (int)Math.Sqrt (Math.Pow ((_points.ElementAt (i).x - _centru.x)' 2) + Math.Pow ((_points.ElementAt (i).y - _centru.y)' 2));  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: for (int i = 0; i < size; i++)  	if (Math.Abs (rap [i] - _rap [i]) <= 5000)  		nr++;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: if (Math.Abs (rap [i] - _rap [i]) <= 5000)  	nr++;  
Magic Number,BiometricsAnalysis.Signature,SignatureModule,C:\repos\KTwo_BA\biometricsanalysis\BiometricsAnalysis\Signature\SignatureModule.cs,centru_intern,The following statement contains a magic number: return nr * 100 / (points.Length);  
