Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WarMachines.Engine,WarMachineEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Engine\WarMachineEngine.cs,ProcessCommands,Cyclomatic complexity of the method is 10
Long Statement,WarMachines.Engine,Command,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Engine\Command.cs,TranslateInput,The length of the statement  "            this.Parameters = input.Substring(indexOfFirstSeparator + 1).Split(new[] { SplitCommandSymbol }' StringSplitOptions.RemoveEmptyEntries); " is 136.
Magic Number,WarMachines.Engine,WarMachineEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Engine\WarMachineEngine.cs,ProcessCommands,The following statement contains a magic number: switch (command.Name)                  {                      case "HirePilot":                          var pilotName = command.Parameters[0];                          commandResult = this.HirePilot(pilotName);                          reports.Add(commandResult);                          break;                      case "Report":                          var pilotReporting = command.Parameters[0];                          commandResult = this.PilotReport(pilotReporting);                          reports.Add(commandResult);                          break;                      case "ManufactureTank":                          var tankName = command.Parameters[0];                          var tankAttackPoints = double.Parse(command.Parameters[1]);                          var tankDefensePoints = double.Parse(command.Parameters[2]);                          commandResult = this.ManufactureTank(tankName' tankAttackPoints' tankDefensePoints);                          reports.Add(commandResult);                          break;                      case "DefenseMode":                          var defenseModeTankName = command.Parameters[0];                          commandResult = this.ToggleTankDefenseMode(defenseModeTankName);                          reports.Add(commandResult);                          break;                      case "ManufactureFighter":                          var fighterName = command.Parameters[0];                          var fighterAttackPoints = double.Parse(command.Parameters[1]);                          var fighterDefensePoints = double.Parse(command.Parameters[2]);                          var fighterStealthMode = command.Parameters[3] == "StealthON" ? true : false;                          commandResult = this.ManufactureFighter(fighterName' fighterAttackPoints' fighterDefensePoints' fighterStealthMode);                          reports.Add(commandResult);                          break;                      case "StealthMode":                          var stealthModeFighterName = command.Parameters[0];                          commandResult = this.ToggleFighterStealthMode(stealthModeFighterName);                          reports.Add(commandResult);                          break;                      case "Engage":                          var selectedPilotName = command.Parameters[0];                          var selectedMachineName = command.Parameters[1];                          commandResult = this.EngageMachine(selectedPilotName' selectedMachineName);                          reports.Add(commandResult);                          break;                      case "Attack":                          var attackingMachine = command.Parameters[0];                          var defendingMachine = command.Parameters[1];                          commandResult = this.AttackMachines(attackingMachine' defendingMachine);                          reports.Add(commandResult);                          break;                      default: reports.Add(string.Format(InvalidCommand' command.Name)); break;                  }
Magic Number,WarMachines.Engine,WarMachineEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Engine\WarMachineEngine.cs,ProcessCommands,The following statement contains a magic number: switch (command.Name)                  {                      case "HirePilot":                          var pilotName = command.Parameters[0];                          commandResult = this.HirePilot(pilotName);                          reports.Add(commandResult);                          break;                      case "Report":                          var pilotReporting = command.Parameters[0];                          commandResult = this.PilotReport(pilotReporting);                          reports.Add(commandResult);                          break;                      case "ManufactureTank":                          var tankName = command.Parameters[0];                          var tankAttackPoints = double.Parse(command.Parameters[1]);                          var tankDefensePoints = double.Parse(command.Parameters[2]);                          commandResult = this.ManufactureTank(tankName' tankAttackPoints' tankDefensePoints);                          reports.Add(commandResult);                          break;                      case "DefenseMode":                          var defenseModeTankName = command.Parameters[0];                          commandResult = this.ToggleTankDefenseMode(defenseModeTankName);                          reports.Add(commandResult);                          break;                      case "ManufactureFighter":                          var fighterName = command.Parameters[0];                          var fighterAttackPoints = double.Parse(command.Parameters[1]);                          var fighterDefensePoints = double.Parse(command.Parameters[2]);                          var fighterStealthMode = command.Parameters[3] == "StealthON" ? true : false;                          commandResult = this.ManufactureFighter(fighterName' fighterAttackPoints' fighterDefensePoints' fighterStealthMode);                          reports.Add(commandResult);                          break;                      case "StealthMode":                          var stealthModeFighterName = command.Parameters[0];                          commandResult = this.ToggleFighterStealthMode(stealthModeFighterName);                          reports.Add(commandResult);                          break;                      case "Engage":                          var selectedPilotName = command.Parameters[0];                          var selectedMachineName = command.Parameters[1];                          commandResult = this.EngageMachine(selectedPilotName' selectedMachineName);                          reports.Add(commandResult);                          break;                      case "Attack":                          var attackingMachine = command.Parameters[0];                          var defendingMachine = command.Parameters[1];                          commandResult = this.AttackMachines(attackingMachine' defendingMachine);                          reports.Add(commandResult);                          break;                      default: reports.Add(string.Format(InvalidCommand' command.Name)); break;                  }
Magic Number,WarMachines.Engine,WarMachineEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Engine\WarMachineEngine.cs,ProcessCommands,The following statement contains a magic number: switch (command.Name)                  {                      case "HirePilot":                          var pilotName = command.Parameters[0];                          commandResult = this.HirePilot(pilotName);                          reports.Add(commandResult);                          break;                      case "Report":                          var pilotReporting = command.Parameters[0];                          commandResult = this.PilotReport(pilotReporting);                          reports.Add(commandResult);                          break;                      case "ManufactureTank":                          var tankName = command.Parameters[0];                          var tankAttackPoints = double.Parse(command.Parameters[1]);                          var tankDefensePoints = double.Parse(command.Parameters[2]);                          commandResult = this.ManufactureTank(tankName' tankAttackPoints' tankDefensePoints);                          reports.Add(commandResult);                          break;                      case "DefenseMode":                          var defenseModeTankName = command.Parameters[0];                          commandResult = this.ToggleTankDefenseMode(defenseModeTankName);                          reports.Add(commandResult);                          break;                      case "ManufactureFighter":                          var fighterName = command.Parameters[0];                          var fighterAttackPoints = double.Parse(command.Parameters[1]);                          var fighterDefensePoints = double.Parse(command.Parameters[2]);                          var fighterStealthMode = command.Parameters[3] == "StealthON" ? true : false;                          commandResult = this.ManufactureFighter(fighterName' fighterAttackPoints' fighterDefensePoints' fighterStealthMode);                          reports.Add(commandResult);                          break;                      case "StealthMode":                          var stealthModeFighterName = command.Parameters[0];                          commandResult = this.ToggleFighterStealthMode(stealthModeFighterName);                          reports.Add(commandResult);                          break;                      case "Engage":                          var selectedPilotName = command.Parameters[0];                          var selectedMachineName = command.Parameters[1];                          commandResult = this.EngageMachine(selectedPilotName' selectedMachineName);                          reports.Add(commandResult);                          break;                      case "Attack":                          var attackingMachine = command.Parameters[0];                          var defendingMachine = command.Parameters[1];                          commandResult = this.AttackMachines(attackingMachine' defendingMachine);                          reports.Add(commandResult);                          break;                      default: reports.Add(string.Format(InvalidCommand' command.Name)); break;                  }
Magic Number,WarMachines.Machines,Machine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Machines\Machine.cs,Attack,The following statement contains a magic number: this.DefensePoints = 100;
Magic Number,WarMachines.Machines,Tank,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Machines\Tank.cs,ToggleDefenseMode,The following statement contains a magic number: this.DefensePoints += this.DefenseMode ? 30 : -30;
Magic Number,WarMachines.Machines,Tank,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Machines\Tank.cs,ToggleDefenseMode,The following statement contains a magic number: this.DefensePoints += this.DefenseMode ? 30 : -30;
Magic Number,WarMachines.Machines,Tank,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Machines\Tank.cs,ToggleDefenseMode,The following statement contains a magic number: this.AttackPoints -= this.DefenseMode ? 40 : -40;
Magic Number,WarMachines.Machines,Tank,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - OOP Exam - Spring\OOP - 12 December 2013\Solutions\01. War Machines\Machines\Tank.cs,ToggleDefenseMode,The following statement contains a magic number: this.AttackPoints -= this.DefenseMode ? 40 : -40;
