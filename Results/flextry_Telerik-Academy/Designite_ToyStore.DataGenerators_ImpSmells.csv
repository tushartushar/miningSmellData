Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,GetRandomAgeRangeIdFromDatabase,The length of the statement  "	var randomAgeRangeId = ageRanges.OrderBy (a => a.AgeRangeId).Skip (numberOfAgeRangesToSkip).Select (a => a.AgeRangeId).First (); " is 128.
Long Statement,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,GetRandomManufacturerIdFromDatabase,The length of the statement  "	var randomManufacturerId = manufacturers.OrderBy (m => m.ManufacturerId).Skip (numberOfManufacturersToSkip).Select (a => a.ManufacturerId).First (); " is 148.
Long Statement,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,GetRandomCategoriesFromDatabase,The length of the statement  "	var numberOfCategoriesToSkip = RandomDataGenerator.Instance.GetRandomInt (0' categories.Count () - categoriesToTake - 1); " is 121.
Long Statement,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,GetRandomCategoriesFromDatabase,The length of the statement  "	var selectedCategories = categories.OrderBy (c => c.CategoryId).Skip (numberOfCategoriesToSkip).Take (categoriesToTake).ToList (); " is 130.
Magic Number,ToyStore.DataGenerators,AgeRangeGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\AgeRangeGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var ageRange = new AgeRange () {  		MinAge = minAge'  		MaxAge = upperBound  	};  	this.ToyStoreContext.AgeRanges.Add (ageRange);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  	this.ChangeAgeValue (ref minAge' ref lowerBound' ref upperBound);  }  
Magic Number,ToyStore.DataGenerators,AgeRangeGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\AgeRangeGenerator.cs,Seed,The following statement contains a magic number: if (i % 100 == 0) {  	this.Logger.Log (".");  	this.ToyStoreContext.SaveChanges ();  }  
Magic Number,ToyStore.DataGenerators,AgeRangeGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\AgeRangeGenerator.cs,ChangeAgeValue,The following statement contains a magic number: if (minAge++ + 2 >= upperBound) {  	lowerBound++;  	upperBound += lowerBound - 2;  	minAge = lowerBound;  }  
Magic Number,ToyStore.DataGenerators,AgeRangeGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\AgeRangeGenerator.cs,ChangeAgeValue,The following statement contains a magic number: if (minAge++ + 2 >= upperBound) {  	lowerBound++;  	upperBound += lowerBound - 2;  	minAge = lowerBound;  }  
Magic Number,ToyStore.DataGenerators,AgeRangeGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\AgeRangeGenerator.cs,ChangeAgeValue,The following statement contains a magic number: upperBound += lowerBound - 2;  
Magic Number,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var toy = new Toy () {  		Name = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		Type = this.GetRandomStringOrNull (MinLength' MaxLength)'  		Price = (decimal)Math.Round (RandomDataGenerator.Instance.GetRandomDouble () * 1000' 2)'  		Color = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		AgeRangeId = this.GetRandomAgeRangeIdFromDatabase ()'  		ManufacturerId = this.GetRandomManufacturerIdFromDatabase ()'  		Categories = this.GetRandomCategoriesFromDatabase ()  	};  	this.ToyStoreContext.Toys.Add (toy);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  }  
Magic Number,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var toy = new Toy () {  		Name = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		Type = this.GetRandomStringOrNull (MinLength' MaxLength)'  		Price = (decimal)Math.Round (RandomDataGenerator.Instance.GetRandomDouble () * 1000' 2)'  		Color = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		AgeRangeId = this.GetRandomAgeRangeIdFromDatabase ()'  		ManufacturerId = this.GetRandomManufacturerIdFromDatabase ()'  		Categories = this.GetRandomCategoriesFromDatabase ()  	};  	this.ToyStoreContext.Toys.Add (toy);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  }  
Magic Number,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var toy = new Toy () {  		Name = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		Type = this.GetRandomStringOrNull (MinLength' MaxLength)'  		Price = (decimal)Math.Round (RandomDataGenerator.Instance.GetRandomDouble () * 1000' 2)'  		Color = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)'  		AgeRangeId = this.GetRandomAgeRangeIdFromDatabase ()'  		ManufacturerId = this.GetRandomManufacturerIdFromDatabase ()'  		Categories = this.GetRandomCategoriesFromDatabase ()  	};  	this.ToyStoreContext.Toys.Add (toy);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  }  
Magic Number,ToyStore.DataGenerators,ToyGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ToyGenerator.cs,Seed,The following statement contains a magic number: if (i % 100 == 0) {  	this.Logger.Log (".");  	this.ToyStoreContext.SaveChanges ();  }  
Magic Number,ToyStore.DataGenerators,CategoryGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\CategoryGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var category = new Category () {  		Name = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)  	};  	this.ToyStoreContext.Categories.Add (category);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  }  
Magic Number,ToyStore.DataGenerators,CategoryGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\CategoryGenerator.cs,Seed,The following statement contains a magic number: if (i % 100 == 0) {  	this.Logger.Log (".");  	this.ToyStoreContext.SaveChanges ();  }  
Magic Number,ToyStore.DataGenerators,ManufacturerGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ManufacturerGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++) {  	var manufacturer = new Manufacturer () {  		Name = uniqueNames [i]'  		Country = RandomDataGenerator.Instance.GetRandomString (MinLength' MaxLength)  	};  	this.ToyStoreContext.Manufacturers.Add (manufacturer);  	if (i % 100 == 0) {  		this.Logger.Log (".");  		this.ToyStoreContext.SaveChanges ();  	}  }  
Magic Number,ToyStore.DataGenerators,ManufacturerGenerator,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Exam Preparation\ToyStore (Database First)\ToyStore.DataGenerators\ManufacturerGenerator.cs,Seed,The following statement contains a magic number: if (i % 100 == 0) {  	this.Logger.Log (".");  	this.ToyStoreContext.SaveChanges ();  }  
