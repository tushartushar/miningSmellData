Implementation smell,Namespace,Class,File,Method,Description
Long Method,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The method has 246 lines of code.
Complex Method,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,Cyclomatic complexity of the method is 17
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: Console.WindowHeight = 25;
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: Console.WindowWidth = 50;
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: double speedIncreaser = 100;
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: for (int i = 0; i <= 4; i++)              {                  snakeElements.Enqueue(new Position(0' i));              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: for (int i = 0; i < randomNumberGenerator.Next(1' 11); i++)              {                  do                  {                      rocks.Add(new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                          randomNumberGenerator.Next(1' Console.WindowWidth - 1)));                  }                  while (snakeElements.Contains(rocks[i]) ||                         (food.row == rocks[i].row && food.col == rocks[i].col));              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: byte down = 2;
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: byte up = 3;
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
Magic Number,Snake,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Games\Snake\JustSnake.Console\JustSnake.cs,Main,The following statement contains a magic number: while (true)              {                  //Check if we are typed specific key                  if (Console.KeyAvailable)                  {                      //We are typed any key => we have to keep this key in variable                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        //Now we check which is this key                      if (userKeyInput.Key == ConsoleKey.RightArrow)                      {                          //Change position if only old position is not opposite of new position                          if (currentDirection != left)                              currentDirection = right;                      }                      else if (userKeyInput.Key == ConsoleKey.LeftArrow)                      {                          if (currentDirection != right)                              currentDirection = left;                      }                      else if (userKeyInput.Key == ConsoleKey.DownArrow)                      {                          if (currentDirection != up)                              currentDirection = down;                      }                      else if (userKeyInput.Key == ConsoleKey.UpArrow)                      {                          if (currentDirection != down)                              currentDirection = up;                      }                  }                    //Get current coordinatios of snake head                  Position snakeCurrentHead = snakeElements.Last();                    //Calculation coordinatios of next direction                  Position nextDirection = directions[currentDirection];                    //Calculation coordinatios of the new snake head                  Position snakeNewHead = new Position(                      snakeCurrentHead.row + nextDirection.row'                      snakeCurrentHead.col + nextDirection.col);                    //Check if snake kill yourself                  if (snakeElements.Contains(snakeNewHead) || rocks.Contains(snakeNewHead))                  {                      Console.ForegroundColor = ConsoleColor.Black;                      Console.BackgroundColor = ConsoleColor.White;                      Console.SetCursorPosition(0' 0);                      Console.WriteLine("GAME OVER!" + "\n" + "Your points are {0}!"' (snakeElements.Count - 5) * 100);                        Console.SetCursorPosition(10' 11);                      Console.WriteLine("Press [SPACE] for new game...");                        Console.SetCursorPosition(0' Console.WindowHeight - 1);                      ConsoleKeyInfo userKeyInput = Console.ReadKey();                        if (userKeyInput.Key == ConsoleKey.Spacebar)                      {                          Console.ResetColor();                          Console.Clear();                          goto end;                      }                      else                      {                          Console.ResetColor();                            Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return;                      }                  }                    //Check if snake is got the food' if not clear last element                  if (snakeNewHead.row == food.row && snakeNewHead.col == food.col)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        Console.Beep(80' 50);                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        //Print food on the Console                      Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(food.col' food.row);                      Console.Write("@");                      Console.ResetColor();                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Red;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                  else                  {                      //Get and clear last element of snake                      Position lastElement = snakeElements.Dequeue();                      Console.SetCursorPosition(lastElement.col' lastElement.row);                      Console.Write(" ");                  }                    //Check if coordinatios of new head are available                  if (snakeNewHead.row < 0)                      snakeNewHead.row = Console.WindowHeight - 2;                  else if (snakeNewHead.row >= Console.WindowHeight - 1)                      snakeNewHead.row = 0;                  else if (snakeNewHead.col < 0)                      snakeNewHead.col = Console.WindowWidth - 2;                  else if (snakeNewHead.col >= Console.WindowWidth - 1)                      snakeNewHead.col = 0;                    //Convert old head as a body                  Console.SetCursorPosition(snakeCurrentHead.col' snakeCurrentHead.row);                  Console.WriteLine("*");                    //Print head with a individual symbol                  snakeElements.Enqueue(snakeNewHead);                  Console.SetCursorPosition(snakeNewHead.col' snakeNewHead.row);                  if (currentDirection == right)                      Console.Write(">");                  else if (currentDirection == left)                      Console.Write("<");                  else if (currentDirection == down)                      Console.Write("V");                  else if (currentDirection == up)                      Console.Write("^");                    if (Environment.TickCount - foodPushTime >= 6000)                  {                      Console.SetCursorPosition(food.col' food.row);                      Console.Write(" ");                        do                      {                          food = new Position(                              randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                              randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          foodPushTime = Environment.TickCount;                      }                      while (snakeElements.Contains(food) || rocks.Contains(food));                        int fiftyFifty = randomNumberGenerator.Next(1' 3);                        if (fiftyFifty == 1)                      {                          //Adding new rock                          Position rockElement;                            do                          {                              rockElement = new Position(randomNumberGenerator.Next(1' Console.WindowHeight - 1)'                                  randomNumberGenerator.Next(1' Console.WindowWidth - 1));                          }                          while (snakeElements.Contains(rockElement) ||                                 (food.row == rockElement.row && food.col == rockElement.col));                            rocks.Add(new Position(rockElement.row' rockElement.col));                            Console.ForegroundColor = ConsoleColor.Green;                          Console.SetCursorPosition(rockElement.col' rockElement.row);                          Console.Write("=");                          Console.ResetColor();                      }                  }                    //Always show the food                  Console.ForegroundColor = ConsoleColor.Cyan;                  Console.SetCursorPosition(food.col' food.row);                  Console.Write("@");                  Console.ResetColor();                    speedIncreaser = speedIncreaser - 0.025;                  Thread.Sleep((int)speedIncreaser);              }
