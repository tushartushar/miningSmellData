Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Performance.Algorithms,QuickSortAlgorithm<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\QuickSortAlgorithm.cs,QuickSort,Cyclomatic complexity of the method is 8
Magic Number,Performance.Algorithms,InsertionSortAlgorithm<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\InsertionSortAlgorithm.cs,Sort,The following statement contains a magic number: for (i = 1; i < collection.Count; i++)              {                  x = collection[i];                  left = 0;                  right = i - 1;                    // Binary search                  while (left <= right)                  {                      middle = (left + right) / 2;                        if (x.CompareTo(collection[middle]) < 0)                      {                          right = middle - 1;                      }                      else                      {                          left = middle + 1;                      }                  }                    for (j = i - 1; j >= left; j--)                  {                      collection[j + 1] = collection[j];                  }                    collection[left] = x;              }
Magic Number,Performance.Algorithms,MergeSortAlgorithm<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\MergeSortAlgorithm.cs,Partitioning,The following statement contains a magic number: int middleIndex = (leftIndex + rightIndex) / 2;
Magic Number,Performance.Algorithms,QuickSortAlgorithm<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\QuickSortAlgorithm.cs,QuickSort,The following statement contains a magic number: T frontier = collection[(leftIndex + rightIndex) / 2];
Magic Number,Performance,Utils,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: var count = rnd.Next(1' 15);
Magic Number,Performance,Utils,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  chars[i] = (char)('a' + rnd.Next(0' 26));                    if (rnd.Next() % 2 == 0)                  {                      chars[i] = char.ToUpper(chars[i]);                  }              }
Magic Number,Performance,Utils,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  chars[i] = (char)('a' + rnd.Next(0' 26));                    if (rnd.Next() % 2 == 0)                  {                      chars[i] = char.ToUpper(chars[i]);                  }              }
