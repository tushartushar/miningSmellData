Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Performance.Algorithms,QuickSortAlgorithm,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\QuickSortAlgorithm.cs,QuickSort,Cyclomatic complexity of the method is 8
Long Statement,Performance,AlgorithmsPerformance,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\AlgorithmsPerformance.cs,TestWithIntegers,The length of the statement  "	if (!Utils.AreSequencesEqual (quickSortCollection' mergeSortCollection) || !Utils.AreSequencesEqual (mergeSortCollection' selectionSortCollection) || !Utils.AreSequencesEqual (selectionSortCollection' insertionSortCollection)) { " is 228.
Long Statement,Performance,AlgorithmsPerformance,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\AlgorithmsPerformance.cs,TestWithDoubles,The length of the statement  "	if (!Utils.AreSequencesEqual (quickSortCollection' mergeSortCollection) || !Utils.AreSequencesEqual (mergeSortCollection' selectionSortCollection) || !Utils.AreSequencesEqual (selectionSortCollection' insertionSortCollection)) { " is 228.
Long Statement,Performance,AlgorithmsPerformance,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\AlgorithmsPerformance.cs,TestWithStrings,The length of the statement  "	if (!Utils.AreSequencesEqual (quickSortCollection' mergeSortCollection) || !Utils.AreSequencesEqual (mergeSortCollection' selectionSortCollection) || !Utils.AreSequencesEqual (selectionSortCollection' insertionSortCollection)) { " is 228.
Magic Number,Performance.Algorithms,InsertionSortAlgorithm,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\InsertionSortAlgorithm.cs,Sort,The following statement contains a magic number: for (i = 1; i < collection.Count; i++) {  	x = collection [i];  	left = 0;  	right = i - 1;  	// Binary search  	while (left <= right) {  		middle = (left + right) / 2;  		if (x.CompareTo (collection [middle]) < 0) {  			right = middle - 1;  		} else {  			left = middle + 1;  		}  	}  	for (j = i - 1; j >= left; j--) {  		collection [j + 1] = collection [j];  	}  	collection [left] = x;  }  
Magic Number,Performance.Algorithms,InsertionSortAlgorithm,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\InsertionSortAlgorithm.cs,Sort,The following statement contains a magic number: while (left <= right) {  	middle = (left + right) / 2;  	if (x.CompareTo (collection [middle]) < 0) {  		right = middle - 1;  	} else {  		left = middle + 1;  	}  }  
Magic Number,Performance.Algorithms,InsertionSortAlgorithm,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Algorithms\InsertionSortAlgorithm.cs,Sort,The following statement contains a magic number: middle = (left + right) / 2;  
Magic Number,Performance,Utils,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	chars [i] = (char)('a' + rnd.Next (0' 26));  	if (rnd.Next () % 2 == 0) {  		chars [i] = char.ToUpper (chars [i]);  	}  }  
Magic Number,Performance,Utils,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	chars [i] = (char)('a' + rnd.Next (0' 26));  	if (rnd.Next () % 2 == 0) {  		chars [i] = char.ToUpper (chars [i]);  	}  }  
Magic Number,Performance,Utils,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: chars [i] = (char)('a' + rnd.Next (0' 26));  
Magic Number,Performance,Utils,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\09. Code Tuning and Optimization\04. Sorting algorithms performance\Utils.cs,GetArrayWithRandomChars,The following statement contains a magic number: if (rnd.Next () % 2 == 0) {  	chars [i] = char.ToUpper (chars [i]);  }  
