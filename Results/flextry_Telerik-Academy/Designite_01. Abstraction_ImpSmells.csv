Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Shapes,Circle,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\Circle.cs,CalcPerimeter,The following statement contains a magic number: double perimeter = 2 * Math.PI * this.Radius;
Magic Number,Shapes,FiguresExample,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\FiguresExample.cs,Main,The following statement contains a magic number: Circle circle = new Circle(5);
Magic Number,Shapes,FiguresExample,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\FiguresExample.cs,Main,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 3);
Magic Number,Shapes,FiguresExample,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\FiguresExample.cs,Main,The following statement contains a magic number: Rectangle rect = new Rectangle(2' 3);
Magic Number,Shapes,FiguresExample,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\FiguresExample.cs,Main,The following statement contains a magic number: try              {                  //var circleNegativeRadius = new Circle(-5);                  //var rectangleNegativeWidth = new Rectangle(-5' 5);                  var rectangleNegativeHeight = new Rectangle(5' -5);              }              catch (Exception e)              {                  Console.WriteLine(e.Message);              }
Magic Number,Shapes,FiguresExample,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\FiguresExample.cs,Main,The following statement contains a magic number: try              {                  //var circleNegativeRadius = new Circle(-5);                  //var rectangleNegativeWidth = new Rectangle(-5' 5);                  var rectangleNegativeHeight = new Rectangle(5' -5);              }              catch (Exception e)              {                  Console.WriteLine(e.Message);              }
Magic Number,Shapes,Rectangle,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\07. High-Quality Classes\01. Abstraction\Rectangle.cs,CalcPerimeter,The following statement contains a magic number: double perimeter = 2 * (this.Width + this.Height);
