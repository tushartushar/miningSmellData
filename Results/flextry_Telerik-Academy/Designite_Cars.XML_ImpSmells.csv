Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cars.XML,XmlQueryBuilder,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryBuilder.cs,BuildWhereQuery,Cyclomatic complexity of the method is 30
Complex Method,Cars.XML,XmlQueryBuilder,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryBuilder.cs,BuildOrderQuery,Cyclomatic complexity of the method is 12
Long Statement,Cars.XML,XmlQueryWriter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryWriter.cs,Save,The length of the statement  "	var carsXml = new XElement ("Cars"' new XAttribute (XNamespace.Xmlns + "xsi"' carsXmlNamespaceInstance)' new XAttribute (XNamespace.Xmlns + "xsd"' carsXmlNamespaceSchema)); " is 172.
Long Statement,Cars.XML,XmlQueryWriter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryWriter.cs,GenerateCarXElement,The length of the statement  "	var carXml = new XElement ("Car"' new XAttribute ("Manufacturer"' car.Manufacturer.Name)' new XAttribute ("Model"' car.Model)' new XAttribute ("Year"' car.Year)' new XAttribute ("Price"' Math.Round (car.Price' 2))' new XElement ("TransmissionType"' car.TransmissionType.ToString ().ToLower ())); " is 295.
Missing Default,Cars.XML,XmlQueryBuilder,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryBuilder.cs,BuildWhereQuery,The following switch statement is missing a default case: switch (whereClause.PropertyName) {  case "City": {  	if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Dealer.Cities.Any (c => c.Name == whereClauseValue));  	}  	break;  }  case "Dealer": {  	if (whereClauseType == ContainsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Dealer.Name.Contains (whereClauseValue));  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Dealer.Name == whereClauseValue);  	}  	break;  }  case "Manufacturer": {  	if (whereClauseType == ContainsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Manufacturer.Name.Contains (whereClauseValue));  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Manufacturer.Name == whereClauseValue);  	}  	break;  }  case "Model": {  	if (whereClauseType == ContainsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Model.Contains (whereClauseValue));  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Model == whereClauseValue);  	}  	break;  }  case "Price": {  	var valueToDecimal = decimal.Parse (whereClauseValue);  	if (whereClauseType == GreaterThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.Price > valueToDecimal);  	} else if (whereClauseType == LessThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.Price < valueToDecimal);  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Price == valueToDecimal);  	}  	break;  }  case "Id": {  	var valueToInt = int.Parse (whereClauseValue);  	if (whereClauseType == GreaterThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.CarId > valueToInt);  	} else if (whereClauseType == LessThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.CarId < valueToInt);  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.CarId == valueToInt);  	}  	break;  }  case "Year": {  	var valueToInt = int.Parse (whereClauseValue);  	if (whereClauseType == GreaterThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.Year > valueToInt);  	} else if (whereClauseType == LessThanWhereClause) {  		carsQuery = carsQuery.Where (i => i.Year < valueToInt);  	} else if (whereClauseType == EqualsWhereClauseType) {  		carsQuery = carsQuery.Where (i => i.Year == valueToInt);  	}  	break;  }  }  
Missing Default,Cars.XML,XmlQueryBuilder,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Cars (Code First)\Cars.XML\XmlQueryBuilder.cs,BuildOrderQuery,The following switch statement is missing a default case: switch (orderByProperty) {  case "Id": {  	carsQuery = carsQuery.OrderBy (c => c.CarId);  	break;  }  case "Year": {  	carsQuery = carsQuery.OrderBy (c => c.Year);  	break;  }  case "Model": {  	carsQuery = carsQuery.OrderBy (c => c.Model);  	break;  }  case "Price": {  	carsQuery = carsQuery.OrderBy (c => c.Price);  	break;  }  case "Manufacturer": {  	carsQuery = carsQuery.OrderBy (c => c.Manufacturer.Name);  	break;  }  case "Dealer": {  	carsQuery = carsQuery.OrderBy (c => c.Dealer.Name);  	break;  }  }  
