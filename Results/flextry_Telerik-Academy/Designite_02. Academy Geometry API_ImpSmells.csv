Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AcademyGeometry,ExtendedFigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\ExtendedFigureController.cs,ExecuteFigureInstanceCommand,Cyclomatic complexity of the method is 11
Complex Method,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureInstanceCommand,Cyclomatic complexity of the method is 10
Long Statement,AcademyGeometry,Figure,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Figure.cs,RotateInXY,The length of the statement  "		Vector3D rotatedCenteredCurrent = new Vector3D (centeredCurrent.X * Math.Cos (angleRads) - centeredCurrent.Y * Math.Sin (angleRads)' centeredCurrent.X * Math.Sin (angleRads) + centeredCurrent.Y * Math.Cos (angleRads)' centeredCurrent.Z); " is 237.
Long Statement,AcademyGeometry,Vector3D,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Vector3D.cs,Parse,The length of the statement  "	return new Vector3D (double.Parse (componentStrings [0])' double.Parse (componentStrings [1])' double.Parse (componentStrings [2])); " is 132.
Magic Number,AcademyGeometry,ExtendedFigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\ExtendedFigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	var radius = double.Parse (splitFigString [2]);  	this.currentFigure = new Circle (location' radius);  	break;  }  case "cylinder": {  	Vector3D bottom = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	var radius = double.Parse (splitFigString [3]);  	this.currentFigure = new Cylinder (bottom' top' radius);  	break;  }  default: {  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  }  
Magic Number,AcademyGeometry,ExtendedFigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\ExtendedFigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	var radius = double.Parse (splitFigString [2]);  	this.currentFigure = new Circle (location' radius);  	break;  }  case "cylinder": {  	Vector3D bottom = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	var radius = double.Parse (splitFigString [3]);  	this.currentFigure = new Cylinder (bottom' top' radius);  	break;  }  default: {  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  }  
Magic Number,AcademyGeometry,ExtendedFigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\ExtendedFigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	var radius = double.Parse (splitFigString [2]);  	this.currentFigure = new Circle (location' radius);  	break;  }  case "cylinder": {  	Vector3D bottom = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	var radius = double.Parse (splitFigString [3]);  	this.currentFigure = new Cylinder (bottom' top' radius);  	break;  }  default: {  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  }  
Magic Number,AcademyGeometry,Figure,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Figure.cs,RotateInXY,The following statement contains a magic number: for (int i = 0; i < this.vertices.Count; i++) {  	Vector3D centeredCurrent = this.vertices [i] - rotCenter;  	double angleRads = angleDegrees * Math.PI / 180.0;  	Vector3D rotatedCenteredCurrent = new Vector3D (centeredCurrent.X * Math.Cos (angleRads) - centeredCurrent.Y * Math.Sin (angleRads)' centeredCurrent.X * Math.Sin (angleRads) + centeredCurrent.Y * Math.Cos (angleRads)' centeredCurrent.Z);  	this.vertices [i] = rotatedCenteredCurrent + rotCenter;  }  
Magic Number,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	this.currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	this.currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	this.currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	this.currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	this.currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	this.currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	this.currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	this.currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	this.currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureInstanceCommand,The following statement contains a magic number: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
Magic Number,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureInstanceCommand,The following statement contains a magic number: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
Magic Number,AcademyGeometry,Triangle,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Triangle.cs,GetArea,The following statement contains a magic number: return Math.Abs (Vector3D.CrossProduct (AB' AC).Magnitude) / 2;  
Magic Number,AcademyGeometry,Vector3D,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Vector3D.cs,DotProduct,The following statement contains a magic number: for (int d = 0; d < 3; d++) {  	result += a [d] * b [d];  }  
Magic Number,AcademyGeometry,Vector3D,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\Vector3D.cs,Parse,The following statement contains a magic number: return new Vector3D (double.Parse (componentStrings [0])' double.Parse (componentStrings [1])' double.Parse (componentStrings [2]));  
Missing Default,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureCreationCommand,The following switch statement is missing a default case: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	this.currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	this.currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	this.currentFigure = new Triangle (a' b' c);  	break;  }  }  
Missing Default,AcademyGeometry,FigureController,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP 2013 - Sample Exam\Solutions\02. Academy Geometry API\FigureController.cs,ExecuteFigureInstanceCommand,The following switch statement is missing a default case: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
