Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DynamicProgramming,Utility,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\10. Dynamic Programming\01. Knapsack Problem\Utility.cs,ParseInput,The length of the statement  "		var productCharacteristics = Regex.Matches (line' @"(\w+=)+(\d+)").Cast<Match> ().Select (a => int.Parse (a.Groups [2].Value)).ToArray (); " is 138.
Long Statement,DynamicProgramming,Utility,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\10. Dynamic Programming\01. Knapsack Problem\Utility.cs,PrintOptimalSolutions,The length of the statement  "		Console.WriteLine ("- {0} -> Total Weight: {1} | Total Cost: {2}"' string.Join (" | "' solution.Select (p => p.Name))' solution.Sum (p => p.Weight)' solution.Sum (p => p.Cost)); " is 177.
Magic Number,DynamicProgramming,Utility,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\10. Dynamic Programming\01. Knapsack Problem\Utility.cs,ParseInput,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var line = Console.ReadLine ();  	var productName = Regex.Matches (line' @"(\w+).-").Cast<Match> ().First ().Groups [1].Value;  	var productCharacteristics = Regex.Matches (line' @"(\w+=)+(\d+)").Cast<Match> ().Select (a => int.Parse (a.Groups [2].Value)).ToArray ();  	products [i] = new Product (productName' productCharacteristics [0]' productCharacteristics [1]);  }  
