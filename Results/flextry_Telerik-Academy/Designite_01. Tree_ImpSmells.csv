Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The length of the statement  "                    var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 2)' sumFromMiddleNode); " is 127.
Long Statement,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The length of the statement  "                    allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 5)' sumFromMiddleNode); " is 123.
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      var longestPaths = treeTraversal.GetLongestPathInTree(tree.ParentNode);                      PrintPaths(longestPaths' null);                  }                    Console.WriteLine("\nStarting from Middle Nodes (Longest paths in subtrees):");                  {                      var longestPaths = treeTraversal.GetLongestPathInTree(tree.Nodes.First(n => n.Value == 2));                      PrintPaths(longestPaths' null);                        longestPaths = treeTraversal.GetLongestPathInTree(tree.Nodes.First(n => n.Value == 5));                      PrintPaths(longestPaths' null);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      var longestPaths = treeTraversal.GetLongestPathInTree(tree.ParentNode);                      PrintPaths(longestPaths' null);                  }                    Console.WriteLine("\nStarting from Middle Nodes (Longest paths in subtrees):");                  {                      var longestPaths = treeTraversal.GetLongestPathInTree(tree.Nodes.First(n => n.Value == 2));                      PrintPaths(longestPaths' null);                        longestPaths = treeTraversal.GetLongestPathInTree(tree.Nodes.First(n => n.Value == 5));                      PrintPaths(longestPaths' null);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      int sumFromRoot = 9;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.ParentNode' sumFromRoot);                      PrintPaths(allPathsWithGivenSum' sumFromRoot);                                      }                    Console.WriteLine("\nStarting from Middle Nodes (Paths with given sum in subtrees):");                  {                      int sumFromMiddleNode = 6;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 2)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                        allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 5)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      int sumFromRoot = 9;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.ParentNode' sumFromRoot);                      PrintPaths(allPathsWithGivenSum' sumFromRoot);                                      }                    Console.WriteLine("\nStarting from Middle Nodes (Paths with given sum in subtrees):");                  {                      int sumFromMiddleNode = 6;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 2)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                        allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 5)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      int sumFromRoot = 9;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.ParentNode' sumFromRoot);                      PrintPaths(allPathsWithGivenSum' sumFromRoot);                                      }                    Console.WriteLine("\nStarting from Middle Nodes (Paths with given sum in subtrees):");                  {                      int sumFromMiddleNode = 6;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 2)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                        allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 5)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    Console.WriteLine("\nStarting from Root Node:");                  {                      int sumFromRoot = 9;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.ParentNode' sumFromRoot);                      PrintPaths(allPathsWithGivenSum' sumFromRoot);                                      }                    Console.WriteLine("\nStarting from Middle Nodes (Paths with given sum in subtrees):");                  {                      int sumFromMiddleNode = 6;                      var allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 2)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                        allPathsWithGivenSum = treeTraversal.GetAllPathsInTreeWithGivenSum(tree.Nodes.First(n => n.Value == 5)' sumFromMiddleNode);                      PrintPaths(allPathsWithGivenSum' sumFromMiddleNode);                  }              }
Magic Number,TreesTraversals,TreeTraversalEntryPoint,C:\repos\flextry_Telerik-Academy\Programming with C#\5. C# Data Structures and Algorithms\03. Trees and Traversals\01. Tree\TreeTraversalEntryPoint.cs,Main,The following statement contains a magic number: {                  var treeTraversal = new TreeTraversalStrategy();                    var sum = 16;                  var allSubtreesPaths = treeTraversal.GetAllSubtreesWithGivenSum(tree' sum);                  PrintPaths(allSubtreesPaths' sum);              }
