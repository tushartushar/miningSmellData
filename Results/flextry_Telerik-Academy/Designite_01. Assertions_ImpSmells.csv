Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Algorithms,SearchingAlgorithms,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\SearchingAlgorithms.cs,BinarySearch,The following statement contains a magic number: while (startIndex <= endIndex)              {                  int midIndex = (startIndex + endIndex) / 2;                    if (arr[midIndex].Equals(value))                  {                      return midIndex;                  }                  if (arr[midIndex].CompareTo(value) < 0)                  {                      // Search on the right half                      startIndex = midIndex + 1;                  }                  else                  {                      // Search on the right half                      endIndex = midIndex - 1;                  }              }
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: int[] arr = new int[] { 3' -1' 15' 4' 17' 2' 33' 0 };
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: Console.WriteLine(SearchingAlgorithms.BinarySearch(arr' -1000));
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: Console.WriteLine(SearchingAlgorithms.BinarySearch(arr' 17));
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: Console.WriteLine(SearchingAlgorithms.BinarySearch(arr' 10));
Magic Number,Algorithms.Test,AssertionsTest,C:\repos\flextry_Telerik-Academy\Programming with C#\4. C# High-Quality Code\08. Defensive Programming, Assertions and Exceptions\01. Assertions\AssertionsTest.cs,Main,The following statement contains a magic number: Console.WriteLine(SearchingAlgorithms.BinarySearch(arr' 1000));
