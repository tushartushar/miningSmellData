Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The length of the parameter numberOfEmployeesWithoutManager is 31.
Long Identifier,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,,The length of the parameter PercentageOfEmployeesWithoutManager is 35.
Long Statement,Company.DataGenerators,DepartmentGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\DepartmentGenerator.cs,Seed,The length of the statement  "            var uniqueDepartmentNames = RandomDataGenerator.Instance.GetUniqueStringsCollection(MinNameLength' MaxNameLength' this.SeedDataCount); " is 134.
Long Statement,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The length of the statement  "                    YearSalary = RandomDataGenerator.Instance.GetRandomInt(50000' 250000) //(decimal)RandomDataGenerator.Instance.GetRandomDouble() * RandomDataGenerator.Instance.GetRandomInt(10000' 50000)' " is 186.
Long Statement,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomEmployees,The length of the statement  "            var numberOfEmployeesToSkip = RandomDataGenerator.Instance.GetRandomInt(0' numberOfEmployees - numberOfEmployeesToTake - 1); " is 124.
Long Statement,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The length of the statement  "                    for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++) " is 123.
Magic Number,Company.DataGenerators,DepartmentGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\DepartmentGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++)              {                  var department = new Department()                  {                      Name = uniqueDepartmentNames[i]                  };                    this.CompanyDbContext.Departments.Add(department);                    if (i % 100 == 0)                  {                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The following statement contains a magic number: var numberOfEmployeesWithoutManager = (this.SeedDataCount / 100) * PercentageOfEmployeesWithoutManager;
Magic Number,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++)              {                  var employee = new Employee()                  {                      FirstName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      LastName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      DepartmentId = this.GetRandomDepartmentId()'                      YearSalary = RandomDataGenerator.Instance.GetRandomInt(50000' 250000) //(decimal)RandomDataGenerator.Instance.GetRandomDouble() * RandomDataGenerator.Instance.GetRandomInt(10000' 50000)'                  };                    this.CompanyDbContext.Employees.Add(employee);                                if (i % 100 == 0)                  {                      Console.Write(".");                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++)              {                  var employee = new Employee()                  {                      FirstName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      LastName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      DepartmentId = this.GetRandomDepartmentId()'                      YearSalary = RandomDataGenerator.Instance.GetRandomInt(50000' 250000) //(decimal)RandomDataGenerator.Instance.GetRandomDouble() * RandomDataGenerator.Instance.GetRandomInt(10000' 50000)'                  };                    this.CompanyDbContext.Employees.Add(employee);                                if (i % 100 == 0)                  {                      Console.Write(".");                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++)              {                  var employee = new Employee()                  {                      FirstName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      LastName = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)'                      DepartmentId = this.GetRandomDepartmentId()'                      YearSalary = RandomDataGenerator.Instance.GetRandomInt(50000' 250000) //(decimal)RandomDataGenerator.Instance.GetRandomDouble() * RandomDataGenerator.Instance.GetRandomInt(10000' 50000)'                  };                    this.CompanyDbContext.Employees.Add(employee);                                if (i % 100 == 0)                  {                      Console.Write(".");                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,EmployeeGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\EmployeeGenerator.cs,SetManagerIdsToEmployees,The following statement contains a magic number: for (int i = 0; i < numberOfEmployeesWithManager; i++)              {                  allEmployees[i].ManagerId = this.GetRandomManagerId();                  this.CompanyDbContext.Entry(allEmployees[i]).State = System.Data.Entity.EntityState.Modified;                    if (i % 100 == 0)                  {                      Console.Write(".");                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,Seed,The following statement contains a magic number: for (int i = 0; i < this.SeedDataCount; i++)              {                  var project = new Project()                  {                      Name = RandomDataGenerator.Instance.GetRandomString(MinNameLength' MaxNameLength)                  };                    this.CompanyDbContext.Projects.Add(project);                  this.AddEmployeesToProject(project);                    if (i % 100 == 0)                  {                      Console.Write(".");                      this.CompanyDbContext.SaveChanges();                  }              }
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomEndDays = RandomDataGenerator.Instance.GetRandomInt(0' 5 * 365);
Magic Number,Company.DataGenerators,ProjectGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ProjectGenerator.cs,GetRandomDateTimeRanges,The following statement contains a magic number: var randomEndDays = RandomDataGenerator.Instance.GetRandomInt(0' 5 * 365);
Magic Number,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The following statement contains a magic number: while (generatedReportsCount < this.SeedDataCount)              {                  foreach (var employee in employees)                  {                      var numberOfReportsToGenerate = RandomDataGenerator.Instance.GetRandomInt(LowerBound' UpperBound);                        for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++)                      {                          var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);                          var randomDate = DateTime.Now.AddDays(randomStartDays);                            this.CompanyDbContext.Reports.Add(new Report()                          {                              EmployeeId = employee.EmployeeId'                              Time = randomDate                          });                      }                        if (generatedReportsCount % 100 == 0)                      {                          Console.Write(".");                          this.CompanyDbContext.SaveChanges();                      }                  }              }
Magic Number,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The following statement contains a magic number: while (generatedReportsCount < this.SeedDataCount)              {                  foreach (var employee in employees)                  {                      var numberOfReportsToGenerate = RandomDataGenerator.Instance.GetRandomInt(LowerBound' UpperBound);                        for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++)                      {                          var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);                          var randomDate = DateTime.Now.AddDays(randomStartDays);                            this.CompanyDbContext.Reports.Add(new Report()                          {                              EmployeeId = employee.EmployeeId'                              Time = randomDate                          });                      }                        if (generatedReportsCount % 100 == 0)                      {                          Console.Write(".");                          this.CompanyDbContext.SaveChanges();                      }                  }              }
Magic Number,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The following statement contains a magic number: while (generatedReportsCount < this.SeedDataCount)              {                  foreach (var employee in employees)                  {                      var numberOfReportsToGenerate = RandomDataGenerator.Instance.GetRandomInt(LowerBound' UpperBound);                        for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++)                      {                          var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);                          var randomDate = DateTime.Now.AddDays(randomStartDays);                            this.CompanyDbContext.Reports.Add(new Report()                          {                              EmployeeId = employee.EmployeeId'                              Time = randomDate                          });                      }                        if (generatedReportsCount % 100 == 0)                      {                          Console.Write(".");                          this.CompanyDbContext.SaveChanges();                      }                  }              }
Magic Number,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The following statement contains a magic number: while (generatedReportsCount < this.SeedDataCount)              {                  foreach (var employee in employees)                  {                      var numberOfReportsToGenerate = RandomDataGenerator.Instance.GetRandomInt(LowerBound' UpperBound);                        for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++)                      {                          var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);                          var randomDate = DateTime.Now.AddDays(randomStartDays);                            this.CompanyDbContext.Reports.Add(new Report()                          {                              EmployeeId = employee.EmployeeId'                              Time = randomDate                          });                      }                        if (generatedReportsCount % 100 == 0)                      {                          Console.Write(".");                          this.CompanyDbContext.SaveChanges();                      }                  }              }
Magic Number,Company.DataGenerators,ReportGenerator,C:\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2013-2014 - Databases\Databases - Practical Exam @ Sept 2014\Company (Database First)\Company\Company.DataGenerators\ReportGenerator.cs,Seed,The following statement contains a magic number: while (generatedReportsCount < this.SeedDataCount)              {                  foreach (var employee in employees)                  {                      var numberOfReportsToGenerate = RandomDataGenerator.Instance.GetRandomInt(LowerBound' UpperBound);                        for (int i = 0; i < numberOfReportsToGenerate && generatedReportsCount <= this.SeedDataCount; i++' generatedReportsCount++)                      {                          var randomStartDays = RandomDataGenerator.Instance.GetRandomInt(-5 * 365' 5 * 365);                          var randomDate = DateTime.Now.AddDays(randomStartDays);                            this.CompanyDbContext.Reports.Add(new Report()                          {                              EmployeeId = employee.EmployeeId'                              Time = randomDate                          });                      }                        if (generatedReportsCount % 100 == 0)                      {                          Console.Write(".");                          this.CompanyDbContext.SaveChanges();                      }                  }              }
