Method,LOC,CC,PC
AdjacencyList<T>:AdjacencyList,3,1,0
AdjacencyList<T>:AdjacencyList,5,1,1
AdjacencyList<T>:AddVertex,9,2,1
AdjacencyList<T>:AddEdge,14,3,2
AdjacencyList<T>:IsNeighbourOf,5,1,2
AdjacencyList<T>:GetNeighbours,5,1,1
AdjacencyList<T>:GetEdgeList,5,1,0
WeightedAdjacencyList<T>:WeightedAdjacencyList,3,1,0
WeightedAdjacencyList<T>:WeightedAdjacencyList,5,1,1
WeightedAdjacencyList<T>:AddVertex,9,2,1
WeightedAdjacencyList<T>:AddEdge,15,3,3
WeightedAdjacencyList<T>:IsNeighbourOf,6,1,2
WeightedAdjacencyList<T>:GetAllWeights,6,1,1
WeightedAdjacencyList<T>:GetNeighbours,6,1,1
Node<T>:Node,4,1,2
Node<T>:Equals,3,1,1
Node<T>:Equals,4,1,1
Node<T>:Equals,11,3,1
Node<T>:GetHashCode,3,1,0
AvlTree<TKey;TValue>:ObjectInvariant,3,1,0
AvlTree<TKey;TValue>:Add,6,1,2
AvlTree<TKey;TValue>:Add,26,2,4
AvlTree<TKey;TValue>:FixHeight,23,5,1
AvlTree<TKey;TValue>:RebalanceLeft,34,4,1
AvlTree<TKey;TValue>:RebalanceRight,33,4,1
AvlTree<TKey;TValue>:RotateLeft,10,2,1
AvlTree<TKey;TValue>:RotateRight,10,2,1
AvlTree<TKey;TValue>:Exists,19,3,2
AvlTree<TKey;TValue>:Exists,4,1,1
AvlTree<TKey;TValue>:IsBalanced,3,1,0
AvlTree<TKey;TValue>:IsBalanced,18,4,1
AvlTree<TKey;TValue>:Find,4,1,1
AvlTree<TKey;TValue>:Remove,7,2,1
AvlTree<TKey;TValue>:PushLeft,8,2,2
AvlTree<TKey;TValue>:GetEnumerator,14,3,0
AvlTree<TKey;TValue>:GetEnumerator,3,1,0
Node<TKey;TValue>:Node,9,1,4
Node<TKey;TValue>:Equals,7,2,1
Node<TKey;TValue>:Equals,8,2,1
Node<TKey;TValue>:GetHashCode,9,1,0
BinarySearchTree<TKey;TValue>:ObjectInvariant,3,1,0
BinarySearchTree<TKey;TValue>:FindNode,22,3,1
BinarySearchTree<TKey;TValue>:Find,5,1,1
BinarySearchTree<TKey;TValue>:Add,41,5,2
BinarySearchTree<TKey;TValue>:Predecessor,17,4,1
BinarySearchTree<TKey;TValue>:Predecessor,6,1,1
BinarySearchTree<TKey;TValue>:Successor,17,4,1
BinarySearchTree<TKey;TValue>:Successor,6,1,1
BinarySearchTree<TKey;TValue>:Remove,66,11,1
BinarySearchTree<TKey;TValue>:FindSplitNode,24,3,2
BinarySearchTree<TKey;TValue>:IsLeafNode,5,1,1
BinarySearchTree<TKey;TValue>:IsInRange,9,1,3
BinarySearchTree<TKey;TValue>:GetAllNodes,19,3,1
BinarySearchTree<TKey;TValue>:GetAllNodes,47,3,2
BinarySearchTree<TKey;TValue>:PushLeft,9,2,2
BinarySearchTree<TKey;TValue>:GetEnumerator,14,3,0
BinarySearchTree<TKey;TValue>:GetEnumerator,3,1,0
BinarySearchTreeTranspose<TKey;TValue>:Transpose,18,2,1
BinarySearchTreeTranspose<TKey;TValue>:Reorient,26,3,1
BinarySearchTreeTranspose<TKey;TValue>:RotateLeft,10,2,1
BinarySearchTreeTranspose<TKey;TValue>:RotateRight,10,2,1
BinarySearchTreeTranspose<TKey;TValue>:Find,6,1,1
Node<TKey;TValue>:Node,9,1,3
Node<TKey;TValue>:Equals,7,2,1
Node<TKey;TValue>:Equals,8,2,1
Node<TKey;TValue>:GetHashCode,9,1,0
BinomialHeap<T>:CreateBinomialHeap,3,1,0
BinomialHeap<T>:CreateBinomialHeap,5,1,1
BinomialHeap<T>:BinomialHeap,2,1,0
BinomialHeap<T>:BinomialHeap,4,1,1
BinomialHeap<T>:Link,8,1,2
BinomialHeap<T>:Merge,55,6,1
BinomialHeap<T>:Unify,60,7,1
BinomialHeap<T>:Insert,7,1,1
BinomialHeap<T>:GetMin,14,3,0
BinomialHeap<T>:ExtractMin,17,2,1
Node<T>:Node,7,1,4
Node<T>:Node,2,1,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
BloomFilter<T>:ObjectInvariant,3,1,0
BloomFilter<T>:BloomFilter,7,1,2
BloomFilter<T>:ToBytes,7,1,1
BloomFilter<T>:CreateHashes,24,4,1
BloomFilter<T>:Add,9,2,1
BloomFilter<T>:AddRange,7,2,1
BloomFilter<T>:Contains,13,3,1
BloomFilter<T>:Contains,4,1,1
BloomFilter<T>:Clear,4,1,0
BPlusTree<TKey;TValue>:ObjectInvariant,4,1,0
BPlusTree<TKey;TValue>:BPlusTree,6,1,2
BPlusTree<TKey;TValue>:Find,7,2,2
BPlusTree<TKey;TValue>:Find,4,1,1
IntermediateNode<TKey;TValue>:IntermediateNode,5,1,1
LeafNode<TKey;TValue>:LeafNode,4,1,1
LeafNode<TKey;TValue>:GetChildIndex,14,3,1
LeafNode<TKey;TValue>:GetChild,4,1,1
INode:GetLocation,0,1,1
BTree<TKey;TValue>:ObjectInvariant,5,1,0
BTree<TKey;TValue>:BTree,3,1,0
BTree<TKey;TValue>:Search,32,4,3
BTree<TKey;TValue>:Insert,55,6,4
BTree<TKey;TValue>:Split,9,2,1
BTree<TKey;TValue>:Add,11,2,2
BTree<TKey;TValue>:Less,3,1,2
BTree<TKey;TValue>:Equals,3,1,2
Entry<TKey;TValue>:Entry,5,1,3
Node<TKey;TValue>:Node,4,1,1
CircularBuffer<T>:ObjectInvariant,5,1,0
CircularBuffer<T>:CircularBuffer,3,1,0
CircularBuffer<T>:CircularBuffer,4,1,1
CircularBuffer<T>:Add,3,1,1
CircularBuffer<T>:Clear,3,1,0
CircularBuffer<T>:Contains,4,1,1
CircularBuffer<T>:CopyTo,3,1,2
CircularBuffer<T>:Remove,3,1,1
CircularBuffer<T>:GetEnumerator,3,1,0
CircularBuffer<T>:GetEnumerator,3,1,0
ConcurrentAdjacencyList<T>:AddVertex,4,1,1
ConcurrentAdjacencyList<T>:AddEdge,6,1,2
ConcurrentAdjacencyList<T>:IsNeighbourOf,5,1,2
ConcurrentAdjacencyList<T>:GetNeighbours,4,1,1
ConcurrentHashSet<T>:Add,14,1,1
ConcurrentHashSet<T>:Clear,14,1,0
ConcurrentHashSet<T>:Contains,14,1,1
ConcurrentHashSet<T>:Remove,14,1,1
LinearProbingDictionary<Tkey;TValue>:LinearProbingDictionary,7,1,2
LinearProbingDictionary<Tkey;TValue>:LinearProbingDictionary,2,1,1
LinearProbingDictionary<Tkey;TValue>:Add,17,3,2
LinearProbingDictionary<Tkey;TValue>:GetIndex,24,2,1
LinearProbingDictionary<Tkey;TValue>:ContainsKey,3,1,1
LinearProbingDictionary<Tkey;TValue>:Remove,9,2,1
LinearProbingDictionary<Tkey;TValue>:TryGetValue,13,2,2
LinearProbingDictionary<Tkey;TValue>:Add,3,1,1
LinearProbingDictionary<Tkey;TValue>:Clear,4,1,0
LinearProbingDictionary<Tkey;TValue>:Contains,3,1,1
LinearProbingDictionary<Tkey;TValue>:CopyTo,10,3,2
LinearProbingDictionary<Tkey;TValue>:Remove,9,2,1
LinearProbingDictionary<Tkey;TValue>:GetEnumerator,10,3,0
LinearProbingDictionary<Tkey;TValue>:GetEnumerator,3,1,0
Pair<TKey;TValue>:Pair,4,1,2
Pair<TKey;TValue>:Equals,7,2,1
Pair<TKey;TValue>:GetHashCode,8,1,0
LinkedDictionary<TKey;TValue>:LinkedDictionary,6,1,1
LinkedDictionary<TKey;TValue>:ContainsValue,3,1,1
LinkedDictionary<TKey;TValue>:Add,8,1,2
LinkedDictionary<TKey;TValue>:ContainsKey,5,1,1
LinkedDictionary<TKey;TValue>:Remove,11,3,1
LinkedDictionary<TKey;TValue>:TryGetValue,3,1,2
LinkedDictionary<TKey;TValue>:Add,3,1,1
LinkedDictionary<TKey;TValue>:Clear,4,1,0
LinkedDictionary<TKey;TValue>:Contains,4,1,1
LinkedDictionary<TKey;TValue>:CopyTo,3,1,2
LinkedDictionary<TKey;TValue>:Remove,3,1,1
LinkedDictionary<TKey;TValue>:GetEnumerator,9,2,0
LinkedDictionary<TKey;TValue>:GetEnumerator,3,1,0
LinkedDictionary<TKey;TValue>:Pair,4,1,2
Value<TKey;TValue>:Value,5,1,3
Value<TKey;TValue>:GetHashCode,3,1,0
Value<TKey;TValue>:Equals,8,2,1
Heap<T>:ObjectInvariant,3,1,0
Heap<T>:Add,40,5,1
Heap<T>:Heapify,19,3,1
Heap<T>:SwapData,7,1,2
Heap<T>:GetMin,7,2,0
Heap<T>:LastNode,24,5,0
Heap<T>:RemoveMin,19,4,0
Node<T>:Node,7,1,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
HeapStructuredBinaryTree<TKey;TValue>:ObjectInvariant,3,1,0
HeapStructuredBinaryTree<TKey;TValue>:Add,67,10,2
HeapStructuredBinaryTree<TKey;TValue>:Find,43,5,1
Node<TKey;TValue>:Node,12,2,3
Node<TKey;TValue>:Equals,7,2,1
Node<TKey;TValue>:Equals,8,2,1
Node<TKey;TValue>:GetHashCode,9,1,0
SortedList<T>:ObjectInvariant,4,1,0
SortedList<T>:SortedList,3,1,0
SortedList<T>:SortedList,4,1,1
SortedList<T>:SortedList,5,1,1
SortedList<T>:Add,13,3,1
SortedList<T>:Remove,4,1,1
SortedList<T>:CopyTo,10,2,2
SortedList<T>:GetEnumerator,3,1,0
SortedList<T>:GetEnumerator,3,1,0
QuadTree<T>:ObjectInvariant,3,1,0
QuadTree<T>:QuadTree,6,1,2
QuadTree<T>:Add,17,3,2
Children<T>:Children,15,1,3
Children<T>:Children,7,1,5
Children<T>:GetContainingChild,11,3,1
Children<T>:ToList,10,1,0
Children<T>:GetEnumerator,3,1,0
Children<T>:GetEnumerator,3,1,0
Node<T>:ObjectInvariant,4,1,0
Node<T>:Node,7,1,3
Node<T>:IsInRegion,3,1,1
Node<T>:GetContainingChild,3,1,1
Node<T>:SplitRegionIntoChildNodes,3,1,0
Node<T>:Add,11,2,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
NullChildren<T>:NullChildren,2,1,1
NullChildren<T>:GetContainingChild,3,1,1
Point:Point,4,1,2
Rectangle:Rectangle,7,1,3
Rectangle:Intersects,4,1,1
Rectangle:Contains,4,1,1
Rectangle:IsInRectangle,6,1,1
RegionQuadTree<T>:RegionQuadTree,4,1,1
RegionQuadTree<T>:SetData,25,3,2
Children<T>:Children,15,1,2
Children<T>:Children,7,1,5
Children<T>:GetContainingChild,11,3,1
Children<T>:ToList,10,1,0
Children<T>:GetEnumerator,3,1,0
Children<T>:GetEnumerator,3,1,0
Node<T>:Node,6,1,3
Node<T>:IsInRegion,3,1,1
Node<T>:GetContainingChild,3,1,1
Node<T>:SplitRegionIntoChildNodes,3,1,0
Node<T>:SetData,26,2,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
NullChildren<T>:NullChildren,2,1,1
NullChildren<T>:GetContainingChild,3,1,1
Point:Point,4,1,2
Rectangle:Rectangle,7,1,3
Rectangle:Intersects,4,1,1
Rectangle:Contains,4,1,1
Rectangle:IsInRectangle,6,1,1
RootedTree<T>:PushLeft,8,2,2
RootedTree<T>:Merge,13,2,2
Node<T>:ObjectInvariant,3,1,0
Node<T>:Node,7,1,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
CompressedTrie:ObjectInvariant,3,1,0
CompressedTrie:CompressedTrie,3,1,0
CompressedTrie:Exists,17,3,1
CompressedTrie:Add,21,4,1
Node:ObjectInvariant,4,1,0
Node:Node,5,1,1
Node:Node,7,1,2
Node:GetChild,9,2,1
Node:AddChild,33,2,1
Node:MoveToChildren,11,3,1
Node:AddNullNode,3,1,0
Node:GetHashCode,10,1,0
Node:Equals,9,2,1
Node:ToString,3,1,0
NodeComparare:Compare,5,1,2
NullNode:NullNode,2,1,1
DirectedAcyclicWordGraph:Add,3,1,1
DirectedAcyclicWordGraph:Find,15,3,1
Edge:Edge,7,1,3
Edge:Equals,10,2,1
Edge:GetHashCode,10,1,0
Node:Node,3,1,1
Node:AddEdge,6,1,1
Node:FindEdge,3,1,1
Node:Equals,8,2,1
Node:GetHashCode,8,1,0
Builder:CreateInstance,3,1,0
IntervalTree:ObjectInvariant,3,1,0
IntervalTree:IntervalTree,2,1,0
IntervalTree:Add,43,5,1
IntervalTree:Find,24,3,2
IntervalTree:FindNode,19,3,1
IntervalTree:Remove,9,2,1
IntervalTree:Find,4,1,1
Interval:StructInvariant,3,1,0
Interval:Interval,4,1,2
Interval:Equals,4,1,1
StartComparer:Compare,3,1,2
EndComparer:Compare,3,1,2
Node:Node,5,1,1
Node:AddInterval,7,1,1
Node:GetIntervals,30,4,1
Node:IsInInterval,3,1,1
Node:Remove,4,1,1
Node:Equals,3,1,1
Node:CompareTo,11,2,1
Node:CompareTo,11,2,1
MoveToFrontList<T>:ObjectInvariant,3,1,0
MoveToFrontList<T>:MoveToFrontList,3,1,0
MoveToFrontList<T>:MoveToFrontList,4,1,1
MoveToFrontList<T>:Get,12,2,1
MoveToFrontList<T>:Add,5,1,1
MoveToFrontList<T>:Remove,5,1,1
MoveToFrontList<T>:CopyTo,10,2,2
MoveToFrontList<T>:GetEnumerator,3,1,0
MoveToFrontList<T>:GetEnumerator,3,1,0
FrequencyList<T>:ObjectInvariant,3,1,0
FrequencyList<T>:FrequencyList,5,1,0
FrequencyList<T>:Adjust,16,2,1
FrequencyList<T>:Exists,15,3,1
FrequencyList<T>:Get,6,1,1
FrequencyList<T>:GetNode,14,2,1
FrequencyList<T>:GetNode,13,3,1
FrequencyList<T>:Remove,14,2,1
FrequencyList<T>:Add,10,1,1
Node<T>:ObjectInvariant,3,1,0
Node<T>:Node,2,1,0
Node<T>:Node,4,1,1
Node<T>:GetHashCode,8,1,0
Node<T>:Equals,8,2,1
Deque<T>:Deque,3,1,0
Deque<T>:Deque,4,1,1
Deque<T>:AddFirst,4,1,1
Deque<T>:AddLast,4,1,1
Deque<T>:RemoveFirst,9,2,0
Deque<T>:RemoveLast,9,2,0
Deque<T>:GetEnumerator,3,1,0
Deque<T>:GetEnumerator,3,1,0
RedBlackTree<TKey;TValue>:RedBlackTree,10,1,1
RedBlackTree<TKey;TValue>:Find,23,3,1
RedBlackTree<TKey;TValue>:Insert,46,6,2
RedBlackTree<TKey;TValue>:Clear,4,1,0
RedBlackTree<TKey;TValue>:IsEmpty,3,1,0
RedBlackTree<TKey;TValue>:FindMax,13,3,0
RedBlackTree<TKey;TValue>:FindMin,13,3,0
RedBlackTree<TKey;TValue>:Print,10,2,0
RedBlackTree<TKey;TValue>:Print,9,2,1
RedBlackTree<TKey;TValue>:HandleReorient,18,3,1
RedBlackTree<TKey;TValue>:Rotate,37,4,2
RedBlackTree<TKey;TValue>:RotateRight,10,2,1
RedBlackTree<TKey;TValue>:RotateLeft,10,2,1
Node<TKey;TValue>:Node,6,1,1
Node<TKey;TValue>:Node,7,1,4
SkipList<TKey;TValue>:ObjectInvariant,5,1,0
SkipList<TKey;TValue>:SkipList,15,2,2
SkipList<TKey;TValue>:CreateInstance,4,1,1
SkipList<TKey;TValue>:GetRandomLevel,11,2,0
SkipList<TKey;TValue>:Insert,55,4,2
SkipList<TKey;TValue>:Delete,34,7,1
SkipList<TKey;TValue>:Search,25,4,1
SkipList<TKey;TValue>:CopyTo,13,2,2
SkipList<TKey;TValue>:GetEnumerator,8,2,0
SkipList<TKey;TValue>:GetEnumerator,3,1,0
NullSkipNode<TKey;TValue>:NullSkipNode,2,1,1
NullSkipNode<TKey;TValue>:Equals,8,2,1
SkipNode<TKey;TValue>:ObjectInvariant,4,1,0
SkipNode<TKey;TValue>:SkipNode,4,1,1
SkipNode<TKey;TValue>:SkipNode,7,1,3
SplayTree<T>:Add,3,1,1
SplayTree<T>:Remove,3,1,1
SplayTree<T>:Find,4,1,1
Node<T>:ObjectInvariant,3,1,0
Node<T>:Node,7,1,2
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:GetHashCode,9,1,0
TransposeList<T>:ObjectInvariant,4,1,0
TransposeList<T>:TransposeList,4,1,0
TransposeList<T>:GetLastNode,9,2,0
TransposeList<T>:Adjust,14,2,1
TransposeList<T>:Get,14,3,1
TransposeList<T>:GetNode,13,3,1
TransposeList<T>:Remove,11,2,1
TransposeList<T>:Add,9,1,1
TransposeList<T>:GetEnumerator,8,2,0
TransposeList<T>:GetEnumerator,3,1,0
TransposeList<T>:Clear,4,1,0
TransposeList<T>:Contains,12,3,1
TransposeList<T>:CopyTo,4,1,2
TransposeList<T>:Remove,3,1,1
Node<T>:Node,2,1,0
Node<T>:Node,3,1,1
Node<T>:GetHashCode,8,1,0
Node<T>:Equals,7,2,1
Node<T>:Equals,8,2,1
Node<T>:Equals,7,2,1
Trie:ObjectInvariant,4,1,0
Trie:Trie,3,1,0
Trie:Exists,16,3,1
Trie:Add,13,2,2
Trie:Add,19,4,1
Trie:HasOneChild,4,1,1
Trie:Remove,24,4,1
Trie:AllStrings,14,3,1
Trie:GetStringsContainingPrefix,16,3,1
Trie:Enumerate,17,3,1
Trie:GetEnumerator,3,1,0
Trie:GetEnumerator,3,1,0
Node:ObjectInvariant,3,1,0
Node:Node,2,1,0
Node:Node,8,1,3
Node:HasChild,3,1,1
Node:AddChild,11,2,1
Node:AddNullChild,3,1,0
Node:HasNullChild,3,1,0
Node:RemoveChild,3,1,1
Node:RemoveNullChild,3,1,0
Node:GetHashCode,10,1,0
Node:Equals,9,2,1
Node:ToString,3,1,0
Node:GetChildrenList,3,1,0
NodeComparer:Compare,5,1,2
NullNode:NullNode,2,1,2
StringUtils:CommonPrefix,4,1,2
StringUtils:CommonPrefixLength,13,3,2
