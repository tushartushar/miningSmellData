Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Tokenize,Cyclomatic complexity of the method is 21
Complex Method,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,op,Cyclomatic complexity of the method is 12
Long Statement,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Tokenize,The length of the statement  "				while (i < expression.Length && expression [i] != ' ' && (char.IsDigit (expression [i]) || expression [i] == '.' || expression [i] == '-')) " is 139.
Long Statement,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Parse,The length of the statement  "			while (i < result.Length && result [i] != ' ' && (char.IsDigit (result [i]) || result [i] != '.' || result [i] != '-')) { " is 121.
Complex Conditional,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Tokenize,The conditional expression  "st.Count > 0 && !comma && (st.Peek () == 'p' || st.Peek () == 's' || st.Peek () == 'l')"  is complex.
Complex Conditional,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,Parse,The conditional expression  "char.IsDigit (result [i]) || (i + 1 < result.Length && result [i] == '-' && char.IsDigit (result [i + 1]))"  is complex.
Magic Number,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,op,The following statement contains a magic number: switch (ch) {  case '+':  case '-':  	return 1;  case '*':  case '/':  	return 3;  case '^':  case 'p':  case 's':  // sqrt(x)  case 'n':  // sin(x)  case 'c':  // cos(x)  case 't':  // tan(x)  case 'l':  	return 4;  // ln(x)  default:  	return 0;  }  
Magic Number,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,op,The following statement contains a magic number: switch (ch) {  case '+':  case '-':  	return 1;  case '*':  case '/':  	return 3;  case '^':  case 'p':  case 's':  // sqrt(x)  case 'n':  // sin(x)  case 'c':  // cos(x)  case 't':  // tan(x)  case 'l':  	return 4;  // ln(x)  default:  	return 0;  }  
Magic Number,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,op,The following statement contains a magic number: return 3;  
Magic Number,RPN,ReversePolishNotation,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\05. Using Classes and Objects\07. Reverse Polish Notation\ReversePolishNotation.cs,op,The following statement contains a magic number: return 4;  
