Implementation smell,Namespace,Class,File,Method,Description
Long Method,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The method has 130 lines of code.
Long Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The method has 127 lines of code.
Long Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The method has 119 lines of code.
Long Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The method has 103 lines of code.
Long Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The method has 145 lines of code.
Complex Method,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,Cyclomatic complexity of the method is 9
Complex Method,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,Cyclomatic complexity of the method is 11
Complex Method,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,Cyclomatic complexity of the method is 8
Complex Method,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,Cyclomatic complexity of the method is 14
Complex Method,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,Cyclomatic complexity of the method is 15
Complex Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,Cyclomatic complexity of the method is 17
Complex Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,Cyclomatic complexity of the method is 15
Complex Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,Cyclomatic complexity of the method is 15
Complex Method,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,Cyclomatic complexity of the method is 9
Long Parameter List,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The method has 6 parameters. Parameters: invadersCoords' top' left' count' space' size
Long Statement,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The length of the statement  "                case 2: currentInvaders = InvaderCoords2; currentShipType = Ship2; Console.ForegroundColor = ConsoleColor.Yellow; break; " is 120.
Long Statement,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The length of the statement  "                case 3: currentInvaders = InvaderCoords3; currentShipType = Ship3; Console.ForegroundColor = ConsoleColor.DarkCyan; break; " is 122.
Long Statement,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The length of the statement  "                    if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0) " is 131.
Complex Conditional,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The conditional expression  "x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth"  is complex.
Complex Conditional,FreeSpaceInvaders,ObjectProperties,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\ObjectProperties.cs,PrintObject,The conditional expression  "coords[count].Col < 0 || coords[count].Col >= Console.WindowWidth ||                          coords[count].Row < 0 || coords[count].Row >= Console.WindowHeight"  is complex.
Complex Conditional,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The conditional expression  "!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0"  is complex.
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Boss,The following statement contains a magic number: Boss.SetObjectCoords(BossMatrix' BossCoords' 20' 15);
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Boss,The following statement contains a magic number: Boss.SetObjectCoords(BossMatrix' BossCoords' 20' 15);
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: int step = 2;
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,MoveBoss,The following statement contains a magic number: if (direction == "right")              {                  for (int i = 0; i < BossCoords.Count; i++)                  {                      if (!continueMove && BossCoords[BossCoords.Count - 1].Col >= Console.WindowWidth / 2) step = 0;                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col + step);                  }                    if (row == 1 && col == 1 && BossCoords[0].Row >= Console.BufferHeight - 15)                  {                      row = -1; col = -1;                      direction = "left";                  }                    if (BossCoords[0].Col >= Console.WindowWidth)                  {                      col = 0; row = 0;                        if (iteration++ == 1 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 4 && iteration % 2 == 0 && continueMove)                      {                          row = -1; col = -1;                      }                        direction = "left";                  }              }              else if (direction == "left")              {                  for (int i = 0; i < BossCoords.Count; i++)                      BossCoords[i] = new Coordinates(BossCoords[i].Row + row' BossCoords[i].Col - step);                    if (row == -1 && col == -1)                  {                      continueMove = false;                  }                      if (BossCoords[BossCoords.Count - 1].Col < 0)                  {                      col = 0; row = 0;                        if (iteration++ == 2 && continueMove)                          for (int i = 0; i < BossCoords.Count; i++)                              BossCoords[i] = new Coordinates(BossCoords[i].Row - 5' BossCoords[i].Col);                        if (iteration > 3 && iteration % 2 != 0 && continueMove)                      {                          row = 1; col = 1;                      }                        direction = "right";                  }              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: int randomIndex = new Random().Next(BossCoords.Count - 6' BossCoords.Count);
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (Program.StopGame) return;                    if (x >= 0 && x < Console.WindowHeight && y >= 0 && y < Console.WindowWidth)                  {                      Console.SetCursorPosition(y' x - 1);                      Console.Write(" ");                        if (Program.StopGame) return;                        Console.ForegroundColor = ConsoleColor.Cyan;                      Console.SetCursorPosition(y' x);                      Console.Write("|");                      Console.ForegroundColor = ConsoleColor.Black;                  }                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      Invaders.IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,FlyingSaucer,The following statement contains a magic number: if (!Boss.BossTime)              {                  if (!Invaders.Right)                  {                      direction = "right";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' -8' 1);                  }                  else                  {                      direction = "left";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' Console.WindowWidth' 1);                  }              }              else              {                  if (direction == "left")                  {                      direction = "right";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' -8' 1);                  }                  else                  {                      direction = "left";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' Console.WindowWidth' 1);                  }              }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,FlyingSaucer,The following statement contains a magic number: if (!Boss.BossTime)              {                  if (!Invaders.Right)                  {                      direction = "right";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' -8' 1);                  }                  else                  {                      direction = "left";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' Console.WindowWidth' 1);                  }              }              else              {                  if (direction == "left")                  {                      direction = "right";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' -8' 1);                  }                  else                  {                      direction = "left";                      AlienCoords = new List<Coordinates>();                      FlyingSaucer.SetObjectCoords(AlienMatrix' AlienCoords' Console.WindowWidth' 1);                  }              }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: int step = 3;
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,FlyingSaucer,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\FlyingSaucer.cs,MoveAlien,The following statement contains a magic number: if (Field.Speed <= 200 && Field.Speed > 100) { step = 3; Score = 250; }              else if (Field.Speed <= 100) { step = 1; Score = 500; }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords1' top: 7' left: 4' count: 10' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords1' top: 7' left: 4' count: 10' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords1' top: 7' left: 4' count: 10' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords1' top: 7' left: 4' count: 10' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords2' top: 11' left: 5' count: 8' space: 7' size: 5);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords2' top: 11' left: 5' count: 8' space: 7' size: 5);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords2' top: 11' left: 5' count: 8' space: 7' size: 5);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords2' top: 11' left: 5' count: 8' space: 7' size: 5);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords2' top: 11' left: 5' count: 8' space: 7' size: 5);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords3' top: 15' left: 10' count: 8' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords3' top: 15' left: 10' count: 8' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords3' top: 15' left: 10' count: 8' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Invaders,The following statement contains a magic number: SetInvadersCoords(ref InvaderCoords3' top: 15' left: 10' count: 8' space: 6);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: Invaders.PrintInvaders(2);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: Invaders.PrintInvaders(3);
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,SetInvadersCoords,The following statement contains a magic number: for (int i = 0; i < count; i++' left += space)              {                  if (size == 3)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2) });                  }                  else if (size == 5)                  {                      invadersCoords.Add(new Coordinates[] { new Coordinates(top' left)'                       new Coordinates(top' left + 1)' new Coordinates(top' left + 2)' new Coordinates(top' left + 3)'                      new Coordinates(top' left + 4) });                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveRight,The following statement contains a magic number: for (int i = 0; i < invadersCoords.Count; i++)              {                  if (invadersCoords[i] != null)                  {                      if (invadersCoords[i][2].Col + 5 > Console.WindowWidth)                      {                          ChangeColumn(ref invadersCoords' i' 1);                          MoveDown();                          Right = false;                          break;                      }                        ChangeColumn(ref invadersCoords' i' 1);                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveRight,The following statement contains a magic number: for (int i = 0; i < invadersCoords.Count; i++)              {                  if (invadersCoords[i] != null)                  {                      if (invadersCoords[i][2].Col + 5 > Console.WindowWidth)                      {                          ChangeColumn(ref invadersCoords' i' 1);                          MoveDown();                          Right = false;                          break;                      }                        ChangeColumn(ref invadersCoords' i' 1);                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveLeft,The following statement contains a magic number: for (int i = 0; i < invadersCoords.Count; i++)              {                  if (invadersCoords[i] != null)                  {                      if (invadersCoords[i][0].Col - 2 <= 0)                      {                          MoveDown();                          Right = true;                          break;                      }                        ChangeColumn(ref invadersCoords' i' -1);                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: if (Field.Speed - 115 > 0) Field.Speed -= 35;
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: if (Field.Speed - 115 > 0) Field.Speed -= 35;
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: for (int i = 1; i <= 3; i++)              {                  List<Coordinates[]> currentInvaders;                  int currentRow = 0;                    switch (i)                  {                      case 1: currentInvaders = InvaderCoords1; break;                      case 2: currentInvaders = InvaderCoords2; break;                      case 3: currentInvaders = InvaderCoords3; break;                      default: return;                  }                    for (int j = 0; j < currentInvaders.Count; j++)                  {                      if (currentInvaders[j] != null)                      {                          currentRow = currentInvaders[j][0].Row;                            if (currentRow == 22)                          {                              Invaders.IsShooted = true;                              return;                          }                            for (int k = 0; k < currentInvaders[j].Length; k++) currentInvaders[j][k].Row++;                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: for (int i = 1; i <= 3; i++)              {                  List<Coordinates[]> currentInvaders;                  int currentRow = 0;                    switch (i)                  {                      case 1: currentInvaders = InvaderCoords1; break;                      case 2: currentInvaders = InvaderCoords2; break;                      case 3: currentInvaders = InvaderCoords3; break;                      default: return;                  }                    for (int j = 0; j < currentInvaders.Count; j++)                  {                      if (currentInvaders[j] != null)                      {                          currentRow = currentInvaders[j][0].Row;                            if (currentRow == 22)                          {                              Invaders.IsShooted = true;                              return;                          }                            for (int k = 0; k < currentInvaders[j].Length; k++) currentInvaders[j][k].Row++;                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: for (int i = 1; i <= 3; i++)              {                  List<Coordinates[]> currentInvaders;                  int currentRow = 0;                    switch (i)                  {                      case 1: currentInvaders = InvaderCoords1; break;                      case 2: currentInvaders = InvaderCoords2; break;                      case 3: currentInvaders = InvaderCoords3; break;                      default: return;                  }                    for (int j = 0; j < currentInvaders.Count; j++)                  {                      if (currentInvaders[j] != null)                      {                          currentRow = currentInvaders[j][0].Row;                            if (currentRow == 22)                          {                              Invaders.IsShooted = true;                              return;                          }                            for (int k = 0; k < currentInvaders[j].Length; k++) currentInvaders[j][k].Row++;                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,MoveDown,The following statement contains a magic number: for (int i = 1; i <= 3; i++)              {                  List<Coordinates[]> currentInvaders;                  int currentRow = 0;                    switch (i)                  {                      case 1: currentInvaders = InvaderCoords1; break;                      case 2: currentInvaders = InvaderCoords2; break;                      case 3: currentInvaders = InvaderCoords3; break;                      default: return;                  }                    for (int j = 0; j < currentInvaders.Count; j++)                  {                      if (currentInvaders[j] != null)                      {                          currentRow = currentInvaders[j][0].Row;                            if (currentRow == 22)                          {                              Invaders.IsShooted = true;                              return;                          }                            for (int k = 0; k < currentInvaders[j].Length; k++) currentInvaders[j][k].Row++;                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: switch (type)              {                  case 1: currentInvaders = InvaderCoords1; currentShipType = Ship1; Console.ForegroundColor = ConsoleColor.Cyan; break;                  case 2: currentInvaders = InvaderCoords2; currentShipType = Ship2; Console.ForegroundColor = ConsoleColor.Yellow; break;                  case 3: currentInvaders = InvaderCoords3; currentShipType = Ship3; Console.ForegroundColor = ConsoleColor.DarkCyan; break;                  default: return;              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: switch (type)              {                  case 1: currentInvaders = InvaderCoords1; currentShipType = Ship1; Console.ForegroundColor = ConsoleColor.Cyan; break;                  case 2: currentInvaders = InvaderCoords2; currentShipType = Ship2; Console.ForegroundColor = ConsoleColor.Yellow; break;                  case 3: currentInvaders = InvaderCoords3; currentShipType = Ship3; Console.ForegroundColor = ConsoleColor.DarkCyan; break;                  default: return;              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: for (int i = 0; i < currentInvaders.Count; i++)              {                  if (currentInvaders[i] != null)                  {                      for (int j = 0; j < 3; j++)                      {                          Console.SetCursorPosition(currentInvaders[i][0].Col' currentInvaders[i][0].Row - 2 + j);                          Console.Write(string.Join(""' currentShipType[j]));                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,PrintInvaders,The following statement contains a magic number: for (int i = 0; i < currentInvaders.Count; i++)              {                  if (currentInvaders[i] != null)                  {                      for (int j = 0; j < 3; j++)                      {                          Console.SetCursorPosition(currentInvaders[i][0].Col' currentInvaders[i][0].Row - 2 + j);                          Console.Write(string.Join(""' currentShipType[j]));                      }                  }              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: if (ShootRow == 1 && InvaderCoords3.Count == 0) ShootRow = 2;
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: if (ShootRow == 2 && InvaderCoords2.Count == 0) ShootRow = 3;
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: if (ShootRow == 2 && InvaderCoords2.Count == 0) ShootRow = 3;
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: if (ShootRow == 3 && InvaderCoords1.Count == 0)              {                  ShootRow = -1;                  return;              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: switch (ShootRow)              {                  case 3: count = InvaderCoords1.Count; invadersCoords = InvaderCoords1; break;                  case 2: count = InvaderCoords2.Count; invadersCoords = InvaderCoords2; break;                  case 1: count = InvaderCoords3.Count; invadersCoords = InvaderCoords3; break;                  default: return;              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: switch (ShootRow)              {                  case 3: count = InvaderCoords1.Count; invadersCoords = InvaderCoords1; break;                  case 2: count = InvaderCoords2.Count; invadersCoords = InvaderCoords2; break;                  case 1: count = InvaderCoords3.Count; invadersCoords = InvaderCoords3; break;                  default: return;              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following statement contains a magic number: while (x < Console.WindowHeight - 5)              {                  if (IsShooted) return;                    Console.SetCursorPosition(y' x - 1);                  Console.Write(" ");                    Console.SetCursorPosition(y' x);                  Console.Write("|");                    Coordinates coords = new Coordinates { Row = x' Col = y };                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(coords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(coords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(coords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            ShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount == 1)                  {                      IsShooted = true; return;                  }                  else if (PlayerShip.PlayerCoords.Contains(coords) && Field.LivesCount > 1)                  {                      Field.LivesCount--;                  }                    x++;                  Thread.Sleep(100);              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,PlayerShip,The following statement contains a magic number: PlayerShip.SetObjectCoords(Player' PlayerCoords' 46' 28);
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,PlayerShip,The following statement contains a magic number: PlayerShip.SetObjectCoords(Player' PlayerCoords' 46' 28);
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Thread.Sleep(PlayerShootSpeed);                    currentBarrelCoords.Row -= 1;                    #region [Check if some of the tower is hit]                  for (int j = 1; j <= 4; j++)                  {                      int index = 0;                        switch (j)                      {                          case 1: index = Towers.Tower1Coords.IndexOf(currentBarrelCoords); break;                          case 2: index = Towers.Tower2Coords.IndexOf(currentBarrelCoords); break;                          case 3: index = Towers.Tower3Coords.IndexOf(currentBarrelCoords); break;                          default: index = -1; break;                      }                        if (index != -1)                      {                          switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }                            Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                          Console.Write(" ");                          Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                          Console.Write(" ");                            Program.IsPlayerShootNow = false;                          Towers.IsHitTower = true;                            return;                      }                  }                  #endregion                    #region [Check if some of the invaders are hit]                  for (int j = 3; j >= 1; j--)                  {                      List<Coordinates[]> currentInvaders;                        switch (j)                      {                          case 3: currentInvaders = Invaders.InvaderCoords3; break;                          case 2: currentInvaders = Invaders.InvaderCoords2; break;                          case 1: currentInvaders = Invaders.InvaderCoords1; break;                          default: return;                      }                        for (int k = 0; k < currentInvaders.Count; k++)                      {                          if (currentInvaders[k] != null && currentInvaders[k].Contains(currentBarrelCoords))                          {                              Field.Score += 10;                              if (j == 2) Field.Score += 15;                              else if (j == 1) Field.Score += 40;                              Field.IsChangedScore = true;                                currentInvaders.Remove(currentInvaders[k]);                                if (DestroySound != null) DestroySound.Play();                                Program.IsPlayerShootNow = false;                                return;                          }                      }                  }                    #endregion                    #region [Check if flying saucer is hit]                    if (FlyingSaucer.AlienCoords.Contains(currentBarrelCoords))                  {                      if (ExplosionSound != null) ExplosionSound.Play();                      Field.Score += FlyingSaucer.Score;                      FlyingSaucer.IsExits = false;                      FlyingSaucer.AlienCoords = new List<ObjectProperties.Coordinates>();                  }                    #endregion                    #region [Check if boss is hit]                    if (Boss.BossTime && Boss.BossCoords.Contains(currentBarrelCoords))                  {                      Program.IsPlayerShootNow = false;                      Boss.Hitted--;                      Field.Score += 50;                      return;                  }                    #endregion                    Console.ForegroundColor = ConsoleColor.White;                  Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row);                  Console.Write("|");                    Console.SetCursorPosition(currentBarrelCoords.Col' currentBarrelCoords.Row + 1);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: if (!FromOtherMenu && System.IO.File.Exists("Sounds/outer_space.mp3"))              {                  IntroSound = new WMPLib.WindowsMediaPlayer();                  IntroSound.URL = "Sounds/outer_space.mp3";                  IntroSound.controls.play();                  IntroSound.settings.playCount = 10;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: if (System.IO.File.Exists("Sounds/saucer.mp3"))              {                  SaucerSound = new WMPLib.WindowsMediaPlayer();                  SaucerSound.settings.autoStart = false;                  SaucerSound.URL = "Sounds/saucer.mp3";                  SaucerSound.settings.volume = 5;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: if (System.IO.File.Exists("Sounds/boss.mp3"))              {                  BossSound = new WMPLib.WindowsMediaPlayer();                  BossSound.settings.autoStart = false;                  BossSound.URL = "Sounds/boss.mp3";                  BossSound.settings.playCount = 2;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: if (System.IO.File.Exists("Sounds/movement.mp3"))              {                  Movement = new WMPLib.WindowsMediaPlayer();                  Movement.settings.autoStart = false;                  Movement.URL = "Sounds/movement.mp3";                  Movement.settings.volume = 50;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: if (System.IO.File.Exists("Sounds/shoot.mp3"))              {                  ShootSound = new WMPLib.WindowsMediaPlayer();                  ShootSound.settings.autoStart = false;                  ShootSound.URL = "Sounds/shoot.mp3";                  ShootSound.settings.volume = 10;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,Main,The following statement contains a magic number: do              {                  if (!StopGame)                  {                      Towers.PrintTowers();                      Field.ShowStatus();                        Field.CheckForAvailableKey();                                            if (!Boss.BossTime)                      {                          Invaders.MoveInvaders();                          Invaders.PrintInvaders();                      }                      else if (Boss.BossTime && Boss.Hitted > 0)                      {                          if (Movement != null) Movement = null;                                                    Field.Speed = 200;                          PlayerShip.PlayerShootSpeed = 20;                          Boss.MoveBoss();                          ObjectProperties.PrintObject(Boss.BossMatrix' Boss.BossCoords' 0' "boss");                                                    if (new Random().Next(1' 5) == 2)                          {                              Thread shoot = new Thread(Boss.Shoot);                              shoot.IsBackground = true;                              shoot.Start();                          }                      }                  }                                    if (Boss.Hitted <= 0)                  {                      if (BossSound != null) BossSound.controls.stop();                                            StopGame = true;                      Invaders.IsShooted = true;                      Field.Score += 1000;                      Thread.Sleep(300);                      Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                      Field.EndGame();                      Environment.Exit(Environment.ExitCode);                  }                                    if (!StopGame)                  {                      // Generates new shoot                      if (new Random().Next(1' 8) == 2)                      {                          Thread shoot = new Thread(Invaders.Shoot);                          shoot.IsBackground = true;                          shoot.Start();                      }                                            // Prints player's object                      PlayerShip.PrintObject(PlayerShip.Player' PlayerShip.PlayerCoords' type: "player");                                            // Move flying saucer if exits' if not exit -> creates a new one                      MoveOrGenerateFlyingSaucer();                                            if (!ShowMessage && Invaders.InvaderCoords1.Count == 0 && Invaders.InvaderCoords2.Count == 0 && Invaders.InvaderCoords3.Count == 0)                      {                          if (Movement != null) Movement.controls.stop();                            Boss.BossTime = true;                                                    if (BossSound != null) BossSound.controls.play();                                                    Invaders.ShootNow = true;                          ShowMessage = true;                      }                  }                                    // Check if the player is alive                  IsPlayerAlive();                                    Thread.Sleep(Field.Speed);                  Console.Clear();              }              while (true);
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MenuUserChoice,The following statement contains a magic number: if (choice == 1)              {                  Field.ThreeSeconds();                  if (IntroSound != null) IntroSound.controls.stop();              }              else if (choice == 2)              {                  Field.MenuInstructions();              }              else if (choice == 3)              {                  Field.MenuRankList();              }              else if (choice == 4)              {                  Field.MenuAbout();              }              else              {                  Console.SetCursorPosition(0' Console.WindowHeight - 2);                  Console.Write(new string(' '' Console.WindowWidth - 1));                  Console.SetCursorPosition(Console.WindowWidth / 2 - 13' Console.WindowHeight - 2);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MoveOrGenerateFlyingSaucer,The following statement contains a magic number: if (FlyingSaucer.IsExits)              {                  FlyingSaucer.MoveAlien();                  ObjectProperties.PrintObject(FlyingSaucer.AlienMatrix' FlyingSaucer.AlienCoords' 0' "alien");              }              else if (!FlyingSaucer.IsExits && new Random().Next(1' 20) == 2)              {                  if (!Boss.BossTime && SaucerSound != null) SaucerSound.controls.play();                                    Program.aliens = new FlyingSaucer();                  FlyingSaucer.IsExits = true;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,MoveOrGenerateFlyingSaucer,The following statement contains a magic number: if (FlyingSaucer.IsExits)              {                  FlyingSaucer.MoveAlien();                  ObjectProperties.PrintObject(FlyingSaucer.AlienMatrix' FlyingSaucer.AlienCoords' 0' "alien");              }              else if (!FlyingSaucer.IsExits && new Random().Next(1' 20) == 2)              {                  if (!Boss.BossTime && SaucerSound != null) SaucerSound.controls.play();                                    Program.aliens = new FlyingSaucer();                  FlyingSaucer.IsExits = true;              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,IsPlayerAlive,The following statement contains a magic number: if (Invaders.IsShooted)              {                  if (Movement != null) Movement.controls.stop();                                    StopGame = true;                  Thread.Sleep(300);                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Field.EndGame();                  Environment.Exit(0);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,IsPlayerAlive,The following statement contains a magic number: if (Invaders.IsShooted)              {                  if (Movement != null) Movement.controls.stop();                                    StopGame = true;                  Thread.Sleep(300);                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Field.EndGame();                  Environment.Exit(0);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,IsPlayerAlive,The following statement contains a magic number: if (Invaders.IsShooted)              {                  if (Movement != null) Movement.controls.stop();                                    StopGame = true;                  Thread.Sleep(300);                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Field.EndGame();                  Environment.Exit(0);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,IsPlayerAlive,The following statement contains a magic number: if (Invaders.IsShooted)              {                  if (Movement != null) Movement.controls.stop();                                    StopGame = true;                  Thread.Sleep(300);                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Field.EndGame();                  Environment.Exit(0);              }
Magic Number,FreeSpaceInvaders,Program,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Program.cs,IsPlayerAlive,The following statement contains a magic number: if (Invaders.IsShooted)              {                  if (Movement != null) Movement.controls.stop();                                    StopGame = true;                  Thread.Sleep(300);                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Field.EndGame();                  Environment.Exit(0);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Field,The following statement contains a magic number: string[] content = new string[10];
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Field,The following statement contains a magic number: int end = 10;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: ConsoleHelper.SetConsoleFont(9);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: Console.SetWindowSize(95' 35);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: Console.SetWindowSize(95' 35);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: Console.SetBufferSize(95' 35);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: Console.SetBufferSize(95' 35);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,GetFieldOptions,The following statement contains a magic number: lines = "   <" + new string('-'' Console.WindowWidth - 8) + ">";
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ShowStatus,The following statement contains a magic number: Console.SetCursorPosition(0' Console.WindowHeight - 5);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ShowStatus,The following statement contains a magic number: Console.WriteLine("{0}\n     SCORE: {1:0000} {2} | FREE SPACE INVADERS |  {2} LIVES: {3}\n{0}"'                  lines' Score' new string(' '' Console.BufferWidth / 2 - 29)' new string('♥'' LivesCount).PadRight(3' ' '));
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ShowStatus,The following statement contains a magic number: Console.WriteLine("{0}\n     SCORE: {1:0000} {2} | FREE SPACE INVADERS |  {2} LIVES: {3}\n{0}"'                  lines' Score' new string(' '' Console.BufferWidth / 2 - 29)' new string('♥'' LivesCount).PadRight(3' ' '));
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ShowStatus,The following statement contains a magic number: Console.WriteLine("{0}\n     SCORE: {1:0000} {2} | FREE SPACE INVADERS |  {2} LIVES: {3}\n{0}"'                  lines' Score' new string(' '' Console.BufferWidth / 2 - 29)' new string('♥'' LivesCount).PadRight(3' ' '));
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: int space = 12' choice = 1;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < arrow.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 - choice - 2);                  Console.Write(arrow[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < arrow.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 - choice - 2);                  Console.Write(arrow[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < arrow.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 - choice - 2);                  Console.Write(arrow[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: int count = 15;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < freeSpace.Length; i++)              {                  if (freeSpace[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (freeSpace[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (freeSpace[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (freeSpace[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 39' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < freeSpace.Length; i++)              {                  if (freeSpace[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (freeSpace[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (freeSpace[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (freeSpace[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 39' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < freeSpace.Length; i++)              {                  if (freeSpace[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (freeSpace[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (freeSpace[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (freeSpace[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 39' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < invaders.Length; i++)              {                  if (invaders[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (invaders[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (invaders[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (invaders[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 37' Console.WindowHeight / 2 + 6 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < invaders.Length; i++)              {                  if (invaders[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (invaders[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (invaders[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (invaders[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 37' Console.WindowHeight / 2 + 6 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < invaders.Length; i++)              {                  if (invaders[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (invaders[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (invaders[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (invaders[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 37' Console.WindowHeight / 2 + 6 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < invaders.Length; i++)              {                  if (invaders[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (invaders[i] == '#')                  {                      Console.BackgroundColor = ConsoleColor.Gray;                      Console.Write(" ");                  }                    if (invaders[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (invaders[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 37' Console.WindowHeight / 2 + 6 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(12' Console.WindowHeight - 2);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(12' Console.WindowHeight - 2);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < menus.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - 5' Console.WindowHeight / 2 - 3 + i);                  Console.WriteLine(menus[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < menus.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - 5' Console.WindowHeight / 2 - 3 + i);                  Console.WriteLine(menus[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < menus.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - 5' Console.WindowHeight / 2 - 3 + i);                  Console.WriteLine(menus[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: for (int i = 0; i < menus.Length; i++)              {                  Console.SetCursorPosition(Console.WindowWidth / 2 - 5' Console.WindowHeight / 2 - 3 + i);                  Console.WriteLine(menus[i]);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 11' Console.WindowHeight / 2 - 2 + menus.Length);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 11' Console.WindowHeight / 2 - 2 + menus.Length);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 11' Console.WindowHeight / 2 - 2 + menus.Length);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 11' Console.WindowHeight / 2 - 2 + menus.Length);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,Introduction,The following statement contains a magic number: while (true)              {                  while (Console.KeyAvailable)                  {                      ConsoleKeyInfo userKey = Console.ReadKey(true);                        if (choice <= 4 && userKey.Key == ConsoleKey.DownArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice++;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (choice > 1 && userKey.Key == ConsoleKey.UpArrow)                      {                          Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1' Console.WindowHeight / 2 + choice - 4);                          Console.Write(new string(' '' arrow.Length));                            choice--;                          for (int i = 0; i < arrow.Length; i++)                          {                              Console.SetCursorPosition(Console.WindowWidth / 2 - space + 1 + i' Console.WindowHeight / 2 + choice - 4);                              Console.Write(arrow[i]);                          }                      }                      else if (userKey.Key == ConsoleKey.Enter)                      {                          Console.SetCursorPosition(0' Console.WindowHeight - 1);                          return choice;                      }                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: int left = -12' top = 3;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: int left = -12' top = 3;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 30; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 25);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 30; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 25);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 30; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 25);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 30; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 25);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 44' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 44' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 25; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 44' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 3 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship3[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 3 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship3[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 3 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship3[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 3 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship3[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 2);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 2);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 23' top + 8 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship2[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 23' top + 8 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship2[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 23' top + 8 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship2[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 23' top + 8 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship2[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 7);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 7);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 13 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship1[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 13 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship1[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 13 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship1[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 24' top + 13 - i);                  Console.WriteLine(string.Join(""' Invaders.Ship1[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 12);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 12);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 21' top + 18 - i);                  Console.WriteLine(string.Join(""' alien[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 21' top + 18 - i);                  Console.WriteLine(string.Join(""' alien[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 21' top + 18 - i);                  Console.WriteLine(string.Join(""' alien[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  Console.SetCursorPosition(left + 21' top + 18 - i);                  Console.WriteLine(string.Join(""' alien[2 - i]));              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 17);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 30' top + 17);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 24' top + 21);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(left + 24' top + 21);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuInstructions,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  if (i == 0 || i == 5) Console.ForegroundColor = ConsoleColor.Cyan;                  else if (i > 0) Console.ForegroundColor = ConsoleColor.DarkGreen;                    Console.SetCursorPosition(36' 3 + i + i);                    if (i == 5)                  {                      Console.SetCursorPosition(36' 3 + i + 7);                  }                    if (i >= 6)                  {                      Console.ForegroundColor = ConsoleColor.Gray;                      Console.SetCursorPosition(41' 3 + i + 8);                  }                  if (i >= 12)                  {                      Console.SetCursorPosition(41' 3 + i + i - 3);                  }                    for (int j = 0; j < messages[i].Length; j++)                  {                      if (i >= 6 && (messages[i][j] == '-' || messages[i][j] == '|')) Console.ForegroundColor = ConsoleColor.DarkMagenta;                      else if (i >= 6 && (messages[i][j] == '<' || messages[i][j] == '>')) Console.ForegroundColor = ConsoleColor.White;                      else if (i >= 6) Console.ForegroundColor = ConsoleColor.Gray;                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: int count = 16;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < goofy.Length; i++)              {                  if (goofy[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (goofy[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (goofy[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < goofy.Length; i++)              {                  if (goofy[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (goofy[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (goofy[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < goofy.Length; i++)              {                  if (goofy[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (goofy[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (goofy[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: count = 2;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < team.Length; i++)              {                  if (team[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (team[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (team[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 + 8 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < team.Length; i++)              {                  if (team[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (team[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (team[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 + 8 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < team.Length; i++)              {                  if (team[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (team[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (team[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 + 8 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < team.Length; i++)              {                  if (team[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (team[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (team[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 20' Console.WindowHeight / 2 + 8 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: int left = 3' top = 10;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: int left = 3' top = 10;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 60; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 11);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 60; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 11);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 60; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 11);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 60; i++)              {                  Console.SetCursorPosition(left + 15 + i' top - 1);                  Console.Write(" ");                  Console.SetCursorPosition(left + 15 + i' top + 11);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 12; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 74' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 12; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 74' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < 12; i++)              {                  Console.SetCursorPosition(left + 15' top + i);                  Console.Write(" ");                  Console.SetCursorPosition(left + 74' top + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  Console.SetCursorPosition(22' 11 + i);                    if (i == messages.Length - 1) Console.ForegroundColor = ConsoleColor.Yellow;                  for (int j = 0; j < messages[i].Length; j++)                  {                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: for (int i = 0; i < messages.Length; i++)              {                  Console.SetCursorPosition(22' 11 + i);                    if (i == messages.Length - 1) Console.ForegroundColor = ConsoleColor.Yellow;                  for (int j = 0; j < messages[i].Length; j++)                  {                      Console.Write(messages[i][j]);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuAbout,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: int count = 16;
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < ranking.Length; i++)              {                  if (ranking[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (ranking[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (ranking[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 31' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < ranking.Length; i++)              {                  if (ranking[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (ranking[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (ranking[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 31' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < ranking.Length; i++)              {                  if (ranking[i] == '@')                  {                      Console.BackgroundColor = ConsoleColor.Red;                      Console.Write(" ");                  }                    if (ranking[i] == ' ')                  {                      Console.BackgroundColor = ConsoleColor.Black;                      Console.Write(" ");                  }                    if (ranking[i] == '\n')                  {                      Console.WriteLine();                      Console.SetCursorPosition(Console.WindowWidth / 2 - 31' Console.WindowHeight / 2 - --count);                  }              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 45; i++)              {                  Console.SetCursorPosition(25 + i' 26);                  Console.Write(" ");                  Console.SetCursorPosition(25 + i' 10);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 45; i++)              {                  Console.SetCursorPosition(25 + i' 26);                  Console.Write(" ");                  Console.SetCursorPosition(25 + i' 10);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 45; i++)              {                  Console.SetCursorPosition(25 + i' 26);                  Console.Write(" ");                  Console.SetCursorPosition(25 + i' 10);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 45; i++)              {                  Console.SetCursorPosition(25 + i' 26);                  Console.Write(" ");                  Console.SetCursorPosition(25 + i' 10);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 45; i++)              {                  Console.SetCursorPosition(25 + i' 26);                  Console.Write(" ");                  Console.SetCursorPosition(25 + i' 10);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  Console.SetCursorPosition(25' 11 + i);                  Console.Write(" ");                  Console.SetCursorPosition(69' 11 + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  Console.SetCursorPosition(25' 11 + i);                  Console.Write(" ");                  Console.SetCursorPosition(69' 11 + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  Console.SetCursorPosition(25' 11 + i);                  Console.Write(" ");                  Console.SetCursorPosition(69' 11 + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  Console.SetCursorPosition(25' 11 + i);                  Console.Write(" ");                  Console.SetCursorPosition(69' 11 + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  Console.SetCursorPosition(25' 11 + i);                  Console.Write(" ");                  Console.SetCursorPosition(69' 11 + i);                  Console.Write(" ");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(40' 12);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(40' 12);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: if (Ranklist.Count == 0)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.SetCursorPosition(29' 17);                  Console.Write("-> There are no players in ranking...");                    Console.SetCursorPosition(35' 19);                  Console.Write("Be first with own record!");              }              else              {                  for (int i = 0; i < Ranklist.Count; i++)                  {                      Console.SetCursorPosition(27' 14 + i);                      if (Ranklist[i].Name.Length >= 20)                          Ranklist[i] = new RankList(Ranklist[i].Name.Remove(19).Insert(19' ".")' Ranklist[i].Result);                          Console.Write("{0'2}. {1} - {2} PTS"' i + 1' Ranklist[i].Name' Ranklist[i].Result);                  }                    Console.SetCursorPosition(27' 14 + Ranklist.Count);                  Console.Write(".....");              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,MenuRankList,The following statement contains a magic number: Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight - 4);
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: string[] seconds = new string[3];
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: seconds[2] = @"  @@@@@@      @@      @@  @@@@@@      @@      @@  @@@@@@ ";
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following statement contains a magic number: for (int i = 2; i >= 0; i--)              {                  int newLines = 7;                    Console.Clear();                    Console.SetCursorPosition(15' 20 - newLines);                    for (int j = 0; j < seconds[i].Length; j++)                  {                      if (seconds[i][j] == '@')                      {                          switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }                            Console.Write(" ");                      }                      else if (seconds[i][j] == '\n')                      {                          Console.WriteLine();                          newLines--;                          Console.SetCursorPosition(43' 20 - newLines);                      }                      else                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                  }                    Console.WriteLine();                  Thread.Sleep(1000);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,EndGame,The following statement contains a magic number: try              {                  if (Boss.BossTime && Boss.Hitted <= 0)                  {                      if (System.IO.File.Exists("Sounds/winner.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/winner.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = winner;                      isWinner = true;                  }                  else                  {                      if (System.IO.File.Exists("Sounds/game_over.mp3"))                      {                          endSound = new WMPLib.WindowsMediaPlayer();                          endSound.URL = "Sounds/game_over.mp3";                          endSound.settings.autoStart = false;                          endSound.settings.playCount = 10;                          endSound.controls.play();                      }                        message = gameOver;                  }              }              catch (Exception)              {                  return;              }              finally              {                  Console.Clear();                  Console.Clear();                  int count = 17;                  Console.SetCursorPosition(Console.WindowWidth / 2' Console.WindowHeight / 2 - count);                    for (int i = 0; i < message.Length; i++)                  {                      if (message[i] == '@')                      {                          if (isWinner) Console.BackgroundColor = ConsoleColor.Green;                          else Console.BackgroundColor = ConsoleColor.Red;                          Console.Write(" ");                      }                        if (message[i] == '#')                      {                          Console.BackgroundColor = ConsoleColor.Gray;                          Console.Write(" ");                      }                        if (message[i] == ' ')                      {                          Console.BackgroundColor = ConsoleColor.Black;                          Console.Write(" ");                      }                        if (message[i] == '\n')                      {                          Console.WriteLine();                          Console.SetCursorPosition(Console.WindowWidth / 2 - 33' Console.WindowHeight / 2 - --count);                      }                  }                    Console.BackgroundColor = ConsoleColor.Black;                  Console.ForegroundColor = ConsoleColor.Yellow;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 8' Console.WindowHeight / 2 + 5);                  Console.WriteLine("Your score: {0}"' Field.Score.ToString().PadLeft(4' '0'));                    Console.ForegroundColor = ConsoleColor.White;                  Console.CursorVisible = true;                  Console.SetCursorPosition(Console.WindowWidth / 2 - 10' Console.WindowHeight / 2 + 8);                  Console.Write("Enter your name: ");                    Console.ForegroundColor = ConsoleColor.Magenta;                  Console.InputEncoding = Encoding.Default;                  Console.OutputEncoding = Encoding.Default;                    string name = Console.ReadLine();                  name = name.TrimStart().TrimEnd();                  if (name == null || name == string.Empty || name.Length == 0) name = "unknown";                  if (name.Length >= 20) name = name.Remove(19).Insert(19' ".");                    Console.CursorVisible = false;                    Ranklist.Add(new RankList(name' Field.Score));                  Ranklist = Ranklist.OrderByDescending(x => x.Result).ToList();                    try                  {                      // Write names and scores to the ranklist file                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter("Ranking/ranklist.txt"' false' Encoding.Unicode))                          for (int i = 0; i < Ranklist.Count; i++)                              if (Ranklist[i].Result > 0) writer.WriteLine("{0} - {1}"' Ranklist[i].Name' Ranklist[i].Result);                  }                  catch (Exception)                  {                      Environment.Exit(Environment.ExitCode);                  }                    Console.ForegroundColor = ConsoleColor.Gray;                  Console.BackgroundColor = ConsoleColor.Black;                    Console.SetCursorPosition(33' 28);                  Environment.Exit(1);              }
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower1Coords' 19' 23);
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower1Coords' 19' 23);
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower2Coords' 44' 23);
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower2Coords' 44' 23);
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower3Coords' 69' 23);
Magic Number,FreeSpaceInvaders,Towers,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Towers.cs,Towers,The following statement contains a magic number: Towers.SetObjectCoords(tower1' Tower3Coords' 69' 23);
Missing Default,FreeSpaceInvaders,Boss,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Boss.cs,Shoot,The following switch statement is missing a default case: switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }
Missing Default,FreeSpaceInvaders,Invaders,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Invaders.cs,Shoot,The following switch statement is missing a default case: switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }
Missing Default,FreeSpaceInvaders,PlayerShip,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\PlayerShip.cs,Shoot,The following switch statement is missing a default case: switch (j)                          {                              case 1: Towers.Tower1Coords[index] = new Coordinates(); break;                              case 2: Towers.Tower2Coords[index] = new Coordinates(); break;                              case 3: Towers.Tower3Coords[index] = new Coordinates(); break;                          }
Missing Default,FreeSpaceInvaders,Field,C:\repos\flextry_Telerik-Academy\Programming with C#\2. C# Fundamentals II\09. Teamwork - Console game\Source code\01. Game\Field.cs,ThreeSeconds,The following switch statement is missing a default case: switch (i)                          {                              case 2: Console.BackgroundColor = ConsoleColor.White; break;                              case 1: Console.BackgroundColor = ConsoleColor.Green; break;                              case 0: Console.BackgroundColor = ConsoleColor.Red; break;                          }
