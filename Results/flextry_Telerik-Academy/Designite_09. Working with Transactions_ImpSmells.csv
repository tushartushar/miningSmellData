Implementation smell,Namespace,Class,File,Method,Description
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnExplicitlyStartedTransaction,The following statement contains a magic number: var employeeId = 5;
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnExplicitlyStartedTransaction,The following statement contains a magic number: using (var dbContext = new NorthwindEntities())              {                  using (var transaction = dbContext.Database.BeginTransaction())                  {                      try                      {                          #region [Add Orders]                                                    // This cause an error                          var firstOrder = new Order()                          {                              CustomerID = customerId'                              EmployeeID = invalidEmployeeId // employeeId                          };                                                    dbContext.Orders.Add(firstOrder);                                                    var secondOrder = new Order()                          {                              CustomerID = customerId'                              EmployeeID = employeeId                          };                                                    secondOrder.Order_Details.Add(new Order_Detail()                          {                              OrderID = secondOrder.OrderID'                              ProductID = 5'                              UnitPrice = 12.34m'                              Quantity = 100'                              Discount = 0.2f                          });                                                    dbContext.Orders.Add(secondOrder);                                                    #endregion                                                    affectedRows = dbContext.SaveChanges();                                                    // Finish successfully => Commit transaction                          transaction.Commit();                                                    // Test to Rollback() insted of Commit() and you will see that the changes are rolled-back                          //transaction.Rollback();                                                    Console.WriteLine("- Finish successfully => Commit transaction");                      }                      catch (Exception)                      {                          // Finish Unsuccessfully => Rollback transaction                          transaction.Rollback();                                                    Console.WriteLine("- Exception: Finish Unsuccessfully => Rollback transaction");                      }                  }              }
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnExplicitlyStartedTransaction,The following statement contains a magic number: using (var dbContext = new NorthwindEntities())              {                  using (var transaction = dbContext.Database.BeginTransaction())                  {                      try                      {                          #region [Add Orders]                                                    // This cause an error                          var firstOrder = new Order()                          {                              CustomerID = customerId'                              EmployeeID = invalidEmployeeId // employeeId                          };                                                    dbContext.Orders.Add(firstOrder);                                                    var secondOrder = new Order()                          {                              CustomerID = customerId'                              EmployeeID = employeeId                          };                                                    secondOrder.Order_Details.Add(new Order_Detail()                          {                              OrderID = secondOrder.OrderID'                              ProductID = 5'                              UnitPrice = 12.34m'                              Quantity = 100'                              Discount = 0.2f                          });                                                    dbContext.Orders.Add(secondOrder);                                                    #endregion                                                    affectedRows = dbContext.SaveChanges();                                                    // Finish successfully => Commit transaction                          transaction.Commit();                                                    // Test to Rollback() insted of Commit() and you will see that the changes are rolled-back                          //transaction.Rollback();                                                    Console.WriteLine("- Finish successfully => Commit transaction");                      }                      catch (Exception)                      {                          // Finish Unsuccessfully => Rollback transaction                          transaction.Rollback();                                                    Console.WriteLine("- Exception: Finish Unsuccessfully => Rollback transaction");                      }                  }              }
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnImplicitlyStartedTransaction,The following statement contains a magic number: var employeeId = 6;
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnImplicitlyStartedTransaction,The following statement contains a magic number: using (var dbContext = new NorthwindEntities())              {                  try                  {                      #region [Add Orders]                                            // This cause an error                      var firstOrder = new Order()                      {                          CustomerID = customerId'                          EmployeeID = invalidEmployeeId // employeeId                      };                                            dbContext.Orders.Add(firstOrder);                                            var secondOrder = new Order()                      {                          CustomerID = customerId'                          EmployeeID = employeeId                      };                                            secondOrder.Order_Details.Add(new Order_Detail()                      {                          OrderID = secondOrder.OrderID'                          ProductID = 5'                          UnitPrice = 12.34m'                          Quantity = 100'                          Discount = 0.2f                      });                        dbContext.Orders.Add(secondOrder);                        #endregion                                        affectedRows = dbContext.SaveChanges();                                        Console.WriteLine("- Finish successfully => Commit transaction");                  }                  catch (Exception)                  {                      Console.WriteLine("- Exception: Finish Unsuccessfully => Rollback transaction");                  }              }
Magic Number,EntityFramework.ConsoleClient,WorkingWithTransactions,C:\repos\flextry_Telerik-Academy\Databases\08. Entity Framework\09. Working with Transactions\WorkingWithTransactions.cs,TestOnImplicitlyStartedTransaction,The following statement contains a magic number: using (var dbContext = new NorthwindEntities())              {                  try                  {                      #region [Add Orders]                                            // This cause an error                      var firstOrder = new Order()                      {                          CustomerID = customerId'                          EmployeeID = invalidEmployeeId // employeeId                      };                                            dbContext.Orders.Add(firstOrder);                                            var secondOrder = new Order()                      {                          CustomerID = customerId'                          EmployeeID = employeeId                      };                                            secondOrder.Order_Details.Add(new Order_Detail()                      {                          OrderID = secondOrder.OrderID'                          ProductID = 5'                          UnitPrice = 12.34m'                          Quantity = 100'                          Discount = 0.2f                      });                        dbContext.Orders.Add(secondOrder);                        #endregion                                        affectedRows = dbContext.SaveChanges();                                        Console.WriteLine("- Finish successfully => Commit transaction");                  }                  catch (Exception)                  {                      Console.WriteLine("- Exception: Finish Unsuccessfully => Rollback transaction");                  }              }
