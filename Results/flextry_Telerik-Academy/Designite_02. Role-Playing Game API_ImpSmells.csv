Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Magic Number,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,HandleGoCommand,The following statement contains a magic number: currentAsMoving.GoTo(Point.Parse(commandWords[2]));
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,ExtendedEngine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\ExtendedEngine.cs,ExecuteCreateObjectCommand,The following statement contains a magic number: switch (commandWords[1])              {                  case "knight":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Knight(name' position' owner));                          break;                      }                  case "house":                      {                          Point position = Point.Parse(commandWords[2]);                          int owner = int.Parse(commandWords[3]);                          this.AddObject(new House(position' owner));                          break;                      }                  case "giant":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Giant(name' position));                          break;                      }                  case "rock":                      {                          int hitpoints = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Rock(hitpoints' position));                          break;                      }                  case "ninja":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Ninja(name' position' owner));                          break;                      }                  default:                      {                          base.ExecuteCreateObjectCommand(commandWords);                          break;                      }              }
Magic Number,AcademyRPG,Giant,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Giant.cs,Giant,The following statement contains a magic number: this.HitPoints = 200;
Magic Number,AcademyRPG,Giant,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Giant.cs,Giant,The following statement contains a magic number: this.AttackPoints = 150;
Magic Number,AcademyRPG,Giant,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Giant.cs,Giant,The following statement contains a magic number: this.DefensePoints = 80;
Magic Number,AcademyRPG,Giant,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Giant.cs,TryGather,The following statement contains a magic number: this.AttackPoints += 100;
Magic Number,AcademyRPG,Guard,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Guard.cs,Guard,The following statement contains a magic number: this.HitPoints = 100;
Magic Number,AcademyRPG,House,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\House.cs,House,The following statement contains a magic number: this.HitPoints = 500;
Magic Number,AcademyRPG,Knight,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Knight.cs,Knight,The following statement contains a magic number: this.HitPoints = 100;
Magic Number,AcademyRPG,Knight,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Knight.cs,Knight,The following statement contains a magic number: this.AttackPoints = 100;
Magic Number,AcademyRPG,Knight,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Knight.cs,Knight,The following statement contains a magic number: this.DefensePoints = 100;
Magic Number,AcademyRPG,Lumberjack,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Lumberjack.cs,Lumberjack,The following statement contains a magic number: this.HitPoints = 50;
Magic Number,AcademyRPG,Ninja,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Ninja.cs,TryGather,The following statement contains a magic number: this.AttackPoints += resource.Quantity * 2;
Magic Number,AcademyRPG,Point,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Point.cs,Parse,The following statement contains a magic number: string coordinatesPairString = pointString.Substring(1' pointString.Length - 2);
Magic Number,AcademyRPG,Point,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Point.cs,GetHashCode,The following statement contains a magic number: return this.X * 7 + this.Y;
Missing Default,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteCreateObjectCommand,The following switch statement is missing a default case: switch (commandWords[1])              {                  case "lumberjack":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Lumberjack(name' position' owner));                          break;                      }                  case "guard":                      {                          string name = commandWords[2];                          Point position = Point.Parse(commandWords[3]);                          int owner = int.Parse(commandWords[4]);                          this.AddObject(new Guard(name' position' owner));                          break;                      }                  case "tree":                      {                          int size = int.Parse(commandWords[2]);                          Point position = Point.Parse(commandWords[3]);                          this.AddObject(new Tree(size' position));                          break;                      }              }
Missing Default,AcademyRPG,Engine,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\0. Exams\Telerik 2012-2013 - OOP Exam\C# OOP - 25 March 2013 - Morning\Solutions\02. Role-Playing Game API\Engine.cs,ExecuteControllableCommand,The following switch statement is missing a default case: switch (commandWords[1])                  {                      case "go":                          {                              this.HandleGoCommand(commandWords' current);                              break;                          }                      case "attack":                          {                              this.HandleAttackCommand(current);                              break;                          }                      case "gather":                          {                              this.HandleGatherCommand(current);                              break;                          }                  }
