Implementation smell,Namespace,Class,File,Method,Description
Long Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,SortInPlace,The method has 114 lines of code.
Long Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,StableSortInPlace,The method has 126 lines of code.
Long Method,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,DeleteItemFromRange,The method has 166 lines of code.
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,RemoveDuplicatesInPlace,Cyclomatic complexity of the method is 12
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,FirstConsecutiveEqual,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,FirstConsecutiveWhere,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,TryFindLastWhere,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,SearchForSubsequence,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,RandomSubset,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,GeneratePermutations,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,GenerateSortedPermutations,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,SortInPlace,Cyclomatic complexity of the method is 17
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,StableSortInPlace,Cyclomatic complexity of the method is 18
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,BinarySearch,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,MergeSorted,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,LexicographicalCompare,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,RemoveWhere,Cyclomatic complexity of the method is 16
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Partition,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,StablePartition,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Copy,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Copy,Cyclomatic complexity of the method is 13
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Copy,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,RotateInPlace,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,CollectionBase<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\CollectionBase.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,Insert,Cyclomatic complexity of the method is 16
Complex Method,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,InsertRange,Cyclomatic complexity of the method is 22
Complex Method,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,RemoveAt,Cyclomatic complexity of the method is 14
Complex Method,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,RemoveRange,Cyclomatic complexity of the method is 23
Complex Method,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,Insert,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,MultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionary.cs,CloneContents,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,MultiDictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionaryBase.cs,DebuggerDisplayString,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,EnumerableValuesCollection,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionaryBase.cs,Contains,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,EnumerableValuesCollection,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionaryBase.cs,Contains,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,View,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedBag.cs,IndexOf,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,View,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedBag.cs,LastIndexOf,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,View,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedBag.cs,IndexOf,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,OrderedMultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedMultiDictionary.cs,CloneContents,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,ReadOnlyCollectionBase<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyCollectionBase.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,ReadOnlyCollectionBase<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyCollectionBase.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,InsertRange,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,InsertRange,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,GetEnumerator,Cyclomatic complexity of the method is 14
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,NCopiesOfNode,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Rebalance,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,AddBalancedNodeToRebalanceArray,Cyclomatic complexity of the method is 10
Complex Method,Wintellect.PowerCollections,LeafNode,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,InsertInPlace,Cyclomatic complexity of the method is 9
Complex Method,Wintellect.PowerCollections,ReadOnlyMultiDictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyMultiDictionaryBase.cs,DebuggerDisplayString,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,Insert,Cyclomatic complexity of the method is 17
Complex Method,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,DeleteItemFromRange,Cyclomatic complexity of the method is 15
Complex Method,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,ValidateSubTree,Cyclomatic complexity of the method is 8
Complex Method,Wintellect.PowerCollections,OrderedDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedDictionary.cs,CloneContents,Cyclomatic complexity of the method is 8
Long Parameter List,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,ToString,The method has 5 parameters. Parameters: collection' recursive' start' separator' end
Long Parameter List,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Copy,The method has 5 parameters. Parameters: source' sourceIndex' dest' destIndex' count
Long Parameter List,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Copy,The method has 5 parameters. Parameters: source' sourceIndex' dest' destIndex' count
Long Parameter List,Wintellect.PowerCollections,MultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionary.cs,MultiDictionary,The method has 5 parameters. Parameters: allowDuplicateValues' keyEqualityComparer' valueEqualityComparer' equalityComparer' hash
Long Parameter List,Wintellect.PowerCollections,OrderedMultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedMultiDictionary.cs,OrderedMultiDictionary,The method has 6 parameters. Parameters: allowDuplicateValues' keyCount' keyComparer' valueComparer' comparer' tree
Long Parameter List,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,InsertSplit,The method has 5 parameters. Parameters: ggparent' gparent' parent' node' rotated
Long Statement,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,PrintStats,The length of the statement  "            Console.WriteLine("loadFactor={0}  thresholdGrow={1}  thresholdShrink={2}"' loadFactor' thresholdGrow' thresholdShrink); " is 120.
Long Statement,Wintellect.PowerCollections,MultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionary.cs,Clone,The length of the statement  "            return new MultiDictionary<TKey' TValue>(allowDuplicateValues' keyEqualityComparer' valueEqualityComparer' equalityComparer'  " is 124.
Long Statement,Wintellect.PowerCollections,MultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionary.cs,CloneContents,The length of the statement  "            MultiDictionary<TKey' TValue> newDict = new MultiDictionary<TKey' TValue>(allowDuplicateValues' keyEqualityComparer' valueEqualityComparer); " is 140.
Long Statement,Wintellect.PowerCollections,OrderedMultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedMultiDictionary.cs,Clone,The length of the statement  "            OrderedMultiDictionary<TKey' TValue> newDict = new OrderedMultiDictionary<TKey' TValue>(allowDuplicateValues' keyCount' keyComparer' valueComparer' comparer' tree.Clone()); " is 172.
Long Statement,Wintellect.PowerCollections,OrderedMultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedMultiDictionary.cs,CloneContents,The length of the statement  "            OrderedMultiDictionary<TKey' TValue> newDict = new OrderedMultiDictionary<TKey' TValue>(allowDuplicateValues' keyComparer' valueComparer); " is 138.
Long Statement,Wintellect.PowerCollections,Pair,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Pair.cs,ToString,The length of the statement  "            return string.Format("First: {0}' Second: {1}"' (First == null) ? "null" : First.ToString()' (Second == null) ? "null" : Second.ToString()); " is 140.
Long Statement,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,CheckBalance,The length of the statement  "                (root.Depth > BALANCEFACTOR && !(root.Depth - BALANCEFACTOR <= MAXFIB && Count >= FIBONACCI[root.Depth - BALANCEFACTOR])))  " is 122.
Long Statement,Wintellect.PowerCollections,ConcatNode,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Print,The length of the statement  "                Console.WriteLine("{0}CONCAT {1} {2} count={3} depth={4}"' prefixNode' shared ? "S" : " "' IsBalanced() ? "B" : (IsAlmostBalanced() ? "A" : " ")' count' depth); " is 160.
Long Statement,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,Insert,The length of the statement  "                if (duplicateFound != null && (dupPolicy == DuplicatePolicy.ReplaceFirst || dupPolicy == DuplicatePolicy.ReplaceLast)) { " is 120.
Long Statement,Wintellect.PowerCollections,OrderedDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\OrderedDictionary.cs,Range,The length of the statement  "            return new View(this' tree.DoubleBoundedRangeTester(NewPair(from)' fromInclusive' NewPair(to)' toInclusive)' false' false); " is 123.
Complex Conditional,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Range,The conditional expression  "start < 0 || start > list.Count || (start == list.Count && count != 0)"  is complex.
Complex Conditional,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,Range,The conditional expression  "start < 0 || start > array.Length || (start == array.Length && count != 0)"  is complex.
Complex Conditional,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Range,The conditional expression  "index < 0 || index > this.Count || (index == this.Count && count != 0)"  is complex.
Complex Conditional,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,CheckBalance,The conditional expression  "root != null &&                  (root.Depth > BALANCEFACTOR && !(root.Depth - BALANCEFACTOR <= MAXFIB && Count >= FIBONACCI[root.Depth - BALANCEFACTOR]))"  is complex.
Complex Conditional,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,Insert,The conditional expression  "node.left != null && node.left.IsRed && node.right != null && node.right.IsRed"  is complex.
Complex Conditional,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,DeleteItemFromRange,The conditional expression  "(node.left == null || !node.left.IsRed) && (node.right == null || !node.right.IsRed)"  is complex.
Complex Conditional,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,DeleteItemFromRange,The conditional expression  "(sib.left == null || !sib.left.IsRed) && (sib.right == null || !sib.right.IsRed)"  is complex.
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,GenerateSortedPermutations,The following statement contains a magic number: key = length - 2;
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,SortInPlace,The following statement contains a magic number: int[] leftStack = new int[32]' rightStack = new int[32];
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,SortInPlace,The following statement contains a magic number: int[] leftStack = new int[32]' rightStack = new int[32];
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,StableSortInPlace,The following statement contains a magic number: int[] leftStack = new int[32]' rightStack = new int[32];
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,StableSortInPlace,The following statement contains a magic number: int[] leftStack = new int[32]' rightStack = new int[32];
Magic Number,Wintellect.PowerCollections,Algorithms,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,BinarySearch,The following statement contains a magic number: int m = l + (r - l) / 2;
Magic Number,Wintellect.PowerCollections,CollectionEqualityComparer<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,GetHashCode,The following statement contains a magic number: hash = (hash << 9) | (hash >> 23);
Magic Number,Wintellect.PowerCollections,CollectionEqualityComparer<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Algorithms.cs,GetHashCode,The following statement contains a magic number: hash = (hash << 9) | (hash >> 23);
Magic Number,Wintellect.PowerCollections,CollectionBase<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\CollectionBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,Insert,The following statement contains a magic number: index < count / 2
Magic Number,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,InsertRange,The following statement contains a magic number: index < count / 2
Magic Number,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,RemoveAt,The following statement contains a magic number: index < count / 2
Magic Number,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,RemoveRange,The following statement contains a magic number: index < dequeCount / 2
Magic Number,Wintellect.PowerCollections,Deque<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Deque.cs,IncreaseBuffer,The following statement contains a magic number: T[] newBuffer = new T[length * 2];
Magic Number,Wintellect.PowerCollections,DictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\DictionaryBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,Hash,The following statement contains a magic number: this.loadFactor = 0.70F;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash += ~(hash << 15);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash ^=  (hash >> 10);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash +=  (hash << 3);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash ^=  (hash >> 6);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash += ~(hash << 11);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetFullHash,The following statement contains a magic number: hash ^=  (hash >> 16);
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,EnsureEnoughSlots,The following statement contains a magic number: newSize *= 2;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,ShrinkIfNeeded,The following statement contains a magic number: newSize *= 2;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,GetSecondaryShift,The following statement contains a magic number: int x = newSize - 2;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,ResizeTable,The following statement contains a magic number: thresholdShrink = thresholdGrow / 3;
Magic Number,Wintellect.PowerCollections,Hash<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\Hash.cs,Validate,The following statement contains a magic number: Debug.Assert(thresholdGrow / 3 == thresholdShrink);
Magic Number,Wintellect.PowerCollections,MultiDictionary<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionary.cs,Add,The following statement contains a magic number: TValue[] newValues = new TValue[existingCount * 2];
Magic Number,Wintellect.PowerCollections,MultiDictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\MultiDictionaryBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,ReadOnlyCollectionBase<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyCollectionBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,ReadOnlyDictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyDictionaryBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,NCopiesOfNode,The following statement contains a magic number: n *= 2;
Magic Number,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Rebalance,The following statement contains a magic number: root.Depth <= 1 || (root.Depth-2 <= MAXFIB && Count >= FIBONACCI[root.Depth-2])
Magic Number,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Rebalance,The following statement contains a magic number: root.Depth <= 1 || (root.Depth-2 <= MAXFIB && Count >= FIBONACCI[root.Depth-2])
Magic Number,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Rebalance,The following statement contains a magic number: Debug.Assert(root.Depth <= 1 || (root.Depth - 2 <= MAXFIB && Count >= FIBONACCI[root.Depth - 2]));
Magic Number,Wintellect.PowerCollections,BigList<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\BigList.cs,Rebalance,The following statement contains a magic number: Debug.Assert(root.Depth <= 1 || (root.Depth - 2 <= MAXFIB && Count >= FIBONACCI[root.Depth - 2]));
Magic Number,Wintellect.PowerCollections,ReadOnlyMultiDictionaryBase<TKey;TValue>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\ReadOnlyMultiDictionaryBase.cs,DebuggerDisplayString,The following statement contains a magic number: const int MAXLENGTH = 250;
Magic Number,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,GetNodeStack,The following statement contains a magic number: maxDepth = 21;
Magic Number,Wintellect.PowerCollections,RedBlackTree<T>,D:\research\architectureSmells\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\PowerCollections\Source\PowerCollections\RedBlack.cs,Insert,The following statement contains a magic number: nodeStackPtr -= 2;
