Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DataStructures.BinarySearchTreeSpace,BinarySearchTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinarySearchTree\BinarySearchTree.cs,Remove,Cyclomatic complexity of the method is 11
Complex Method,DataStructures.BinomialHeapSpace,BinomialHeap,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinomialHeap\BinomialHeap.cs,Unify,Cyclomatic complexity of the method is 8
Complex Method,DataStructures.BTreeSpace,BTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Insert,Cyclomatic complexity of the method is 9
Complex Method,DataStructures.HsbtSpace,HeapStructuredBinaryTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\HSBT\HeapStructuredBinaryTree.cs,Add,Cyclomatic complexity of the method is 10
Long Statement,DataStructures.AdjacencyList,WeightedAdjacencyList,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AdjacencyList\WeightedAdjacencyList.cs,GetNeighbours,The length of the statement  "	return dict.ContainsKey (vertex) ? dict [vertex].Select (n => new Tuple<T' double> (n.item' n.weight)).ToList () : new List<Tuple<T' double>> (); " is 145.
Long Statement,DataStructures.QuadTreeSpace,Rectangle,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Rectangle.cs,Contains,The length of the statement  "	return IsInRectangle (rectangle.TopLeftPoint) && IsInRectangle (new Point (rectangle.TopLeftPoint.X + Width' rectangle.TopLeftPoint.Y + Height)); " is 145.
Long Statement,DataStructures.QuadTreeSpace,Rectangle,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Rectangle.cs,IsInRectangle,The length of the statement  "	return (point.X >= TopLeftPoint.X) && (point.X <= (TopLeftPoint.X + Width)) && (point.Y >= TopLeftPoint.Y) && (point.Y >= (TopLeftPoint.Y + Height)); " is 149.
Long Statement,DataStructures.RegionQuadTreeSpace,Rectangle,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Rectangle.cs,Contains,The length of the statement  "	return IsInRectangle (rectangle.TopLeftPoint) && IsInRectangle (new Point (rectangle.TopLeftPoint.X + Width' rectangle.TopLeftPoint.Y + Height)); " is 145.
Long Statement,DataStructures.RegionQuadTreeSpace,Rectangle,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Rectangle.cs,IsInRectangle,The length of the statement  "	return (point.X >= TopLeftPoint.X) && (point.X <= (TopLeftPoint.X + Width)) && (point.Y >= TopLeftPoint.Y) && (point.Y >= (TopLeftPoint.Y + Height)); " is 149.
Long Statement,DataStructures.SkipListSpace,SkipList,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\SkipList\NullSkipNode.cs,CreateInstance,The length of the statement  "	return new SkipList<TKey' TValue> (Probability' (int)(Math.Ceiling (Math.Log (maxNodes) / Math.Log (1 / Probability) - 1))); " is 124.
Long Statement,DataStructures.TrieSpace,Trie,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,Exists,The length of the statement  "	Contract.Requires<ArgumentException> (!string.IsNullOrEmpty (word)' "Trie doesn't include empty string or null values"); " is 120.
Long Statement,DataStructures.TrieSpace,Trie,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,Add,The length of the statement  "	Contract.Requires<ArgumentException> (!string.IsNullOrEmpty (word)' "Trie doesn't include empty string or null values"); " is 120.
Long Statement,DataStructures.TrieSpace,Trie,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,Add,The length of the statement  "	Contract.Requires<ArgumentException> (!string.IsNullOrEmpty (word)' "Trie doesn't include empty string or null values"); " is 120.
Long Statement,DataStructures.TrieSpace,Trie,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,Remove,The length of the statement  "	Contract.Requires<ArgumentException> (!string.IsNullOrEmpty (word)' "Trie doesn't include empty string or null values"); " is 120.
Magic Number,DataStructures.AvlTreeSpace,AvlTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceLeft,The following statement contains a magic number: if (leftHeight > (rightHeight + 1)) {  	Contract.Assert ((leftHeight == rightHeight + 2)' "Tree is unbalanced already");  	//Check which one of the left subtree is greater  	if (left.Left.Height > left.Right.Height) {  		Contract.Assert ((left.Left.Height == left.Right.Height + 1)' "Tree is unbalanced already");  		root = RotateRight (root);  		return root;  	} else {  		Contract.Assert ((left.Right.Height == left.Left.Height + 1)' "Tree is unbalanced already");  		root.Left = RotateLeft (root);  		root = RotateRight (root);  		return root;  	}  } else {  	//Tree is already balanced  	Contract.Assert ((leftHeight == rightHeight)' "Tree is beyond balanced state");  	return root;  }  
Magic Number,DataStructures.AvlTreeSpace,AvlTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceLeft,The following statement contains a magic number: Contract.Assert ((leftHeight == rightHeight + 2)' "Tree is unbalanced already");  
Magic Number,DataStructures.AvlTreeSpace,AvlTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceRight,The following statement contains a magic number: if (rightHeight > (leftHeight + 1)) {  	Contract.Assert ((rightHeight == leftHeight + 2)' "Tree is unbalanced already");  	if (right.Right.Height > right.Left.Height) {  		Contract.Assert ((right.Right.Height == right.Left.Height + 1)' "Tree is unbalanced already");  		root = RotateLeft (root);  		return root;  	} else {  		Contract.Assert ((right.Left.Height == right.Right.Height + 1)' "Tree is unbalanced already");  		root.Right = RotateRight (root.Right);  		root = RotateLeft (root);  		return root;  	}  } else {  	//Tree is already balanced  	Contract.Assert ((leftHeight == rightHeight)' "Tree is beyond balanced state");  	return root;  }  
Magic Number,DataStructures.AvlTreeSpace,AvlTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceRight,The following statement contains a magic number: Contract.Assert ((rightHeight == leftHeight + 2)' "Tree is unbalanced already");  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames) {  	byte[] digest;  	using (HashAlgorithm algorithm = HashAlgorithm.Create (algoName)) {  		digest = algorithm.ComputeHash (bytes);  	}  	for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  		int h = 0;  		for (int j = (i * 4); j < (i * 4) + 4; j++) {  			h <<= 8;  			h |= ((int)digest [j]) & 0xFF;  		}  		result [k] = h;  		k++;  	}  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames) {  	byte[] digest;  	using (HashAlgorithm algorithm = HashAlgorithm.Create (algoName)) {  		digest = algorithm.ComputeHash (bytes);  	}  	for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  		int h = 0;  		for (int j = (i * 4); j < (i * 4) + 4; j++) {  			h <<= 8;  			h |= ((int)digest [j]) & 0xFF;  		}  		result [k] = h;  		k++;  	}  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames) {  	byte[] digest;  	using (HashAlgorithm algorithm = HashAlgorithm.Create (algoName)) {  		digest = algorithm.ComputeHash (bytes);  	}  	for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  		int h = 0;  		for (int j = (i * 4); j < (i * 4) + 4; j++) {  			h <<= 8;  			h |= ((int)digest [j]) & 0xFF;  		}  		result [k] = h;  		k++;  	}  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames) {  	byte[] digest;  	using (HashAlgorithm algorithm = HashAlgorithm.Create (algoName)) {  		digest = algorithm.ComputeHash (bytes);  	}  	for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  		int h = 0;  		for (int j = (i * 4); j < (i * 4) + 4; j++) {  			h <<= 8;  			h |= ((int)digest [j]) & 0xFF;  		}  		result [k] = h;  		k++;  	}  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames) {  	byte[] digest;  	using (HashAlgorithm algorithm = HashAlgorithm.Create (algoName)) {  		digest = algorithm.ComputeHash (bytes);  	}  	for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  		int h = 0;  		for (int j = (i * 4); j < (i * 4) + 4; j++) {  			h <<= 8;  			h |= ((int)digest [j]) & 0xFF;  		}  		result [k] = h;  		k++;  	}  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  	int h = 0;  	for (int j = (i * 4); j < (i * 4) + 4; j++) {  		h <<= 8;  		h |= ((int)digest [j]) & 0xFF;  	}  	result [k] = h;  	k++;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  	int h = 0;  	for (int j = (i * 4); j < (i * 4) + 4; j++) {  		h <<= 8;  		h |= ((int)digest [j]) & 0xFF;  	}  	result [k] = h;  	k++;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  	int h = 0;  	for (int j = (i * 4); j < (i * 4) + 4; j++) {  		h <<= 8;  		h |= ((int)digest [j]) & 0xFF;  	}  	result [k] = h;  	k++;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  	int h = 0;  	for (int j = (i * 4); j < (i * 4) + 4; j++) {  		h <<= 8;  		h |= ((int)digest [j]) & 0xFF;  	}  	result [k] = h;  	k++;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++) {  	int h = 0;  	for (int j = (i * 4); j < (i * 4) + 4; j++) {  		h <<= 8;  		h |= ((int)digest [j]) & 0xFF;  	}  	result [k] = h;  	k++;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int j = (i * 4); j < (i * 4) + 4; j++) {  	h <<= 8;  	h |= ((int)digest [j]) & 0xFF;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int j = (i * 4); j < (i * 4) + 4; j++) {  	h <<= 8;  	h |= ((int)digest [j]) & 0xFF;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int j = (i * 4); j < (i * 4) + 4; j++) {  	h <<= 8;  	h |= ((int)digest [j]) & 0xFF;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: for (int j = (i * 4); j < (i * 4) + 4; j++) {  	h <<= 8;  	h |= ((int)digest [j]) & 0xFF;  }  
Magic Number,DataStructures.BloomFilterSpace,BloomFilter,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: h <<= 8;  
Magic Number,DataStructures.BPlusTreeSpace,BPlusTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\BPlusTree.cs,ObjectInvariant,The following statement contains a magic number: Contract.Invariant (NumberOfKeysInIntermediateNode > 2);  
Magic Number,DataStructures.BPlusTreeSpace,BPlusTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\BPlusTree.cs,BPlusTree,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException> (n > 2);  
Magic Number,DataStructures.BTreeSpace,BTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: h.numberOfChildren = MaximumChildrenPerNode / 2;  
Magic Number,DataStructures.BTreeSpace,BTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: for (int j = 0; j < MaximumChildrenPerNode / 2; j++) {  	t.Children [j] = h.Children [MaximumChildrenPerNode / 2 + j];  }  
Magic Number,DataStructures.BTreeSpace,BTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: for (int j = 0; j < MaximumChildrenPerNode / 2; j++) {  	t.Children [j] = h.Children [MaximumChildrenPerNode / 2 + j];  }  
Magic Number,DataStructures.BTreeSpace,BTree,F:\newReposMay17\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: t.Children [j] = h.Children [MaximumChildrenPerNode / 2 + j];  
