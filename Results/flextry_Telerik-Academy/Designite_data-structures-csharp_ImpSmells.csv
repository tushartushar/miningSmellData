Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DataStructures.BinarySearchTreeSpace,BinarySearchTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinarySearchTree\BinarySearchTree.cs,Remove,Cyclomatic complexity of the method is 11
Complex Method,DataStructures.HsbtSpace,HeapStructuredBinaryTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\HSBT\HeapStructuredBinaryTree.cs,Add,Cyclomatic complexity of the method is 10
Long Parameter List,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The method has 5 parameters. Parameters: parent' topLeft' topRight' bottomLeft' bottomRight
Long Parameter List,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The method has 5 parameters. Parameters: parent' topLeft' topRight' bottomLeft' bottomRight
Long Identifier,DataStructures.BPlusTreeSpace,BPlusTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\BPlusTree.cs,,The length of the parameter NumberOfKeysInIntermediateNode is 30.
Magic Number,DataStructures.AvlTreeSpace,AvlTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceLeft,The following statement contains a magic number: if (leftHeight > (rightHeight + 1))              {                  Contract.Assert((leftHeight == rightHeight + 2)' "Tree is unbalanced already");                  //Check which one of the left subtree is greater                  if (left.Left.Height > left.Right.Height)                  {                      Contract.Assert((left.Left.Height == left.Right.Height + 1)' "Tree is unbalanced already");                      root = RotateRight(root);                      return root;                  }                  else                  {                      Contract.Assert((left.Right.Height == left.Left.Height + 1)' "Tree is unbalanced already");                      root.Left = RotateLeft(root);                      root = RotateRight(root);                      return root;                  }              }              else              {                  //Tree is already balanced                  Contract.Assert((leftHeight == rightHeight)' "Tree is beyond balanced state");                  return root;              }
Magic Number,DataStructures.AvlTreeSpace,AvlTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\AvlTree.cs,RebalanceRight,The following statement contains a magic number: if (rightHeight > (leftHeight + 1))              {                  Contract.Assert((rightHeight == leftHeight + 2)' "Tree is unbalanced already");                    if (right.Right.Height > right.Left.Height)                  {                      Contract.Assert((right.Right.Height == right.Left.Height + 1)' "Tree is unbalanced already");                      root = RotateLeft(root);                      return root;                  }                  else                  {                      Contract.Assert((right.Left.Height == right.Right.Height + 1)' "Tree is unbalanced already");                      root.Right = RotateRight(root.Right);                      root = RotateLeft(root);                      return root;                  }              }              else              {                  //Tree is already balanced                  Contract.Assert((leftHeight == rightHeight)' "Tree is beyond balanced state");                  return root;              }
Magic Number,DataStructures.AvlTreeSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.AvlTreeSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\AvlTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.BinarySearchTreeSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinarySearchTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.BinarySearchTreeSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinarySearchTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.BinomialHeapSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinomialHeap\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.BinomialHeapSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BinomialHeap\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.BloomFilterSpace,BloomFilter<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames)              {                  byte[] digest;                  using (HashAlgorithm algorithm = HashAlgorithm.Create(algoName))                  {                      digest = algorithm.ComputeHash(bytes);                  }                  for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++)                  {                      int h = 0;                      for (int j = (i * 4); j < (i * 4) + 4; j++)                      {                          h <<= 8;                          h |= ((int)digest[j]) & 0xFF;                      }                      result[k] = h;                      k++;                  }              }
Magic Number,DataStructures.BloomFilterSpace,BloomFilter<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames)              {                  byte[] digest;                  using (HashAlgorithm algorithm = HashAlgorithm.Create(algoName))                  {                      digest = algorithm.ComputeHash(bytes);                  }                  for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++)                  {                      int h = 0;                      for (int j = (i * 4); j < (i * 4) + 4; j++)                      {                          h <<= 8;                          h |= ((int)digest[j]) & 0xFF;                      }                      result[k] = h;                      k++;                  }              }
Magic Number,DataStructures.BloomFilterSpace,BloomFilter<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames)              {                  byte[] digest;                  using (HashAlgorithm algorithm = HashAlgorithm.Create(algoName))                  {                      digest = algorithm.ComputeHash(bytes);                  }                  for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++)                  {                      int h = 0;                      for (int j = (i * 4); j < (i * 4) + 4; j++)                      {                          h <<= 8;                          h |= ((int)digest[j]) & 0xFF;                      }                      result[k] = h;                      k++;                  }              }
Magic Number,DataStructures.BloomFilterSpace,BloomFilter<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames)              {                  byte[] digest;                  using (HashAlgorithm algorithm = HashAlgorithm.Create(algoName))                  {                      digest = algorithm.ComputeHash(bytes);                  }                  for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++)                  {                      int h = 0;                      for (int j = (i * 4); j < (i * 4) + 4; j++)                      {                          h <<= 8;                          h |= ((int)digest[j]) & 0xFF;                      }                      result[k] = h;                      k++;                  }              }
Magic Number,DataStructures.BloomFilterSpace,BloomFilter<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BloomFilter\BloomFilter.cs,CreateHashes,The following statement contains a magic number: foreach (string algoName in algorithmNames)              {                  byte[] digest;                  using (HashAlgorithm algorithm = HashAlgorithm.Create(algoName))                  {                      digest = algorithm.ComputeHash(bytes);                  }                  for (int i = 0; i < digest.Length / 4 && k < numberOfHashFunctions; i++)                  {                      int h = 0;                      for (int j = (i * 4); j < (i * 4) + 4; j++)                      {                          h <<= 8;                          h |= ((int)digest[j]) & 0xFF;                      }                      result[k] = h;                      k++;                  }              }
Magic Number,DataStructures.BPlusTreeSpace,BPlusTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\BPlusTree.cs,ObjectInvariant,The following statement contains a magic number: Contract.Invariant(NumberOfKeysInIntermediateNode > 2);
Magic Number,DataStructures.BPlusTreeSpace,BPlusTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\BPlusTree.cs,BPlusTree,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException>(n > 2);
Magic Number,DataStructures.BPlusTreeSpace,IntermediateNode<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BPlusTree\IntermediateNode.cs,IntermediateNode,The following statement contains a magic number: Contract.Requires<ArgumentOutOfRangeException>(numberOfChildren > 2);
Magic Number,DataStructures.BTreeSpace,BTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: Node<TKey' TValue> t = new Node<TKey' TValue>(MaximumChildrenPerNode / 2);
Magic Number,DataStructures.BTreeSpace,BTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: h.numberOfChildren = MaximumChildrenPerNode / 2;
Magic Number,DataStructures.BTreeSpace,BTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: for (int j = 0; j < MaximumChildrenPerNode / 2; j++)              {                  t.Children[j] = h.Children[MaximumChildrenPerNode / 2 + j];              }
Magic Number,DataStructures.BTreeSpace,BTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Split,The following statement contains a magic number: for (int j = 0; j < MaximumChildrenPerNode / 2; j++)              {                  t.Children[j] = h.Children[MaximumChildrenPerNode / 2 + j];              }
Magic Number,DataStructures.BTreeSpace,BTree<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\BTree\BTree.cs,Add,The following statement contains a magic number: Node<TKey' TValue> t = new Node<TKey' TValue>(2);
Magic Number,DataStructures.HashSpace,Pair<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Hash\LinearProbingDictionary.cs,GetHashCode,The following statement contains a magic number: int hash = 31;
Magic Number,DataStructures.HashSpace,Pair<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Hash\LinearProbingDictionary.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      hash = hash + 17 * Key.GetHashCode();                  }
Magic Number,DataStructures.HeapSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Heap\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.HeapSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Heap\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.HsbtSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\HSBT\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.HsbtSpace,Node<TKey;TValue>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\HSBT\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + key.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var topRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftTopPoint = new Point(region.TopLeftPoint.X' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var topLeftRectangle = new Rectangle(topLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var topLeftRectangle = new Rectangle(topLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var topRightRectangle = new Rectangle(topRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var topRightRectangle = new Rectangle(topRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftRectangle = new Rectangle(bottomLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftRectangle = new Rectangle(bottomLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightRectangle = new Rectangle(bottomRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightRectangle = new Rectangle(bottomRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.QuadTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + values.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.QuadTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\QuadTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + values.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var topRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftTopPoint = new Point(region.TopLeftPoint.X' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightTopPoint = new Point(region.TopLeftPoint.X + region.Width / 2' region.TopLeftPoint.Y + region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var topLeftRectangle = new Rectangle(topLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var topLeftRectangle = new Rectangle(topLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var topRightRectangle = new Rectangle(topRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var topRightRectangle = new Rectangle(topRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftRectangle = new Rectangle(bottomLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomLeftRectangle = new Rectangle(bottomLeftTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightRectangle = new Rectangle(bottomRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Children<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Children.cs,Children,The following statement contains a magic number: var bottomRightRectangle = new Rectangle(bottomRightTopPoint' region.Width / 2' region.Height / 2);
Magic Number,DataStructures.RegionQuadTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.RegionQuadTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RegionQuadTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + val.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.RootedTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RootedTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.RootedTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\RootedTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.CompressedTrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\CompressedTrie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + stringFragment.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.CompressedTrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\CompressedTrie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + stringFragment.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.CompressedTrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\CompressedTrie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + stringFragment.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Edge,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Edge.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * ch.GetHashCode() + hash;                      hash = 23 * StartNode.GetHashCode() + hash;                      hash = 23 * EndNode.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Edge,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Edge.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * ch.GetHashCode() + hash;                      hash = 23 * StartNode.GetHashCode() + hash;                      hash = 23 * EndNode.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Edge,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Edge.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * ch.GetHashCode() + hash;                      hash = 23 * StartNode.GetHashCode() + hash;                      hash = 23 * EndNode.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Edge,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Edge.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * ch.GetHashCode() + hash;                      hash = 23 * StartNode.GetHashCode() + hash;                      hash = 23 * EndNode.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Id.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.DAWGSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\DAWG\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Id.GetHashCode() + hash;                      return hash;                  }
Magic Number,DataStructures.FrequencyListSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\FrequencyList\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Value.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.FrequencyListSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\FrequencyList\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Value.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.SplayTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\SplayTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.SplayTreeSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\SplayTree\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.TransposeListSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\TransposeList\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.TransposeListSpace,Node<T>,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\TransposeList\Node.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hash = 17;                      hash = 23 * Data.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.TrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + ch.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.TrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + ch.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
Magic Number,DataStructures.TrieSpace,Node,C:\repos\flextry_Telerik-Academy\Programming with C#\Codes\Libraries\DSA\data-structures-csharp-master\data-structures-csharp\data-structures-csharp\Trie\Node.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap                  {                      int hash = 17;                      // Suitable nullity checks etc' of course :)                      hash = hash * 23 + ch.GetHashCode();                      hash = hash * 23 + wordFromRoot.GetHashCode();                      return hash;                  }
