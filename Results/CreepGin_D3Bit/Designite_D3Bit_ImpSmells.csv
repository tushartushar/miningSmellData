Implementation smell,Namespace,Class,File,Method,Description
Long Method,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The method has 108 lines of code.
Complex Method,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetBlockBounding,Cyclomatic complexity of the method is 9
Complex Method,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,Cyclomatic complexity of the method is 20
Long Parameter List,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetTextLineBounds,The method has 6 parameters. Parameters: bitmap' bound' lineHeight' colorFunc' xScanStart' xScanEnd
Long Statement,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ColorWithInRange,The length of the statement  "            return c.R >= ranges[0] && c.R <= ranges[1] && c.G >= ranges[2] && c.G <= ranges[3] && c.B >= ranges[4] && c.B <= ranges[5]; " is 124.
Long Statement,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetTextLineBounds,The length of the statement  "                res.Add(GetBlockBounding(bitmap' new Bound(new Point(bound.P1.X' y - 2)' new Point(bound.P2.X' y + lineHeight))' colorFunc)); " is 125.
Long Statement,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The length of the statement  "            filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1; " is 123.
Long Statement,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The length of the statement  "            BitmapData pbits = sharpenImage.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb); " is 130.
Long Statement,D3Bit,Tesseract,C:\repos\CreepGin_D3Bit\D3Bit\Tesseract.cs,GetTextFromBitmap,The length of the statement  "            ProcessStartInfo info = new ProcessStartInfo(@"tesseract\tesseract.exe"' string.Format(@"tesseract\x.png tesseract\x -l {0} {1}"' language_code' extraParams)); " is 159.
Long Statement,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The length of the statement  "            itemName = Tesseract.GetTextFromBitmap(itemNameBlock).Replace("\r"' "").Replace("\n"' " ").Replace("GB"' "O").Replace("G3"' "O").Replace("EB"' "O").Replace("G9"' "O"); " is 167.
Long Statement,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The length of the statement  "                                                                 new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0)); " is 126.
Long Statement,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The length of the statement  "                    var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First(); " is 140.
Long Statement,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The length of the statement  "                var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First(); " is 140.
Empty Catch Block,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The method has an empty catch block.
Magic Number,D3Bit,Extensions,C:\repos\CreepGin_D3Bit\D3Bit\Extensions.cs,DiceCoefficient,The following statement contains a magic number: return (2 * matches) / totalBigrams;
Magic Number,D3Bit,Extensions,C:\repos\CreepGin_D3Bit\D3Bit\Extensions.cs,ToBiGrams,The following statement contains a magic number: return ToNGrams(input' 2);
Magic Number,D3Bit,Extensions,C:\repos\CreepGin_D3Bit\D3Bit\Extensions.cs,ToTriGrams,The following statement contains a magic number: return ToNGrams(input' 3);
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ColorWithInRange,The following statement contains a magic number: return c.R >= ranges[0] && c.R <= ranges[1] && c.G >= ranges[2] && c.G <= ranges[3] && c.B >= ranges[4] && c.B <= ranges[5];
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ColorWithInRange,The following statement contains a magic number: return c.R >= ranges[0] && c.R <= ranges[1] && c.G >= ranges[2] && c.G <= ranges[3] && c.B >= ranges[4] && c.B <= ranges[5];
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ColorWithInRange,The following statement contains a magic number: return c.R >= ranges[0] && c.R <= ranges[1] && c.G >= ranges[2] && c.G <= ranges[3] && c.B >= ranges[4] && c.B <= ranges[5];
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ColorWithInRange,The following statement contains a magic number: return c.R >= ranges[0] && c.R <= ranges[1] && c.G >= ranges[2] && c.G <= ranges[3] && c.B >= ranges[4] && c.B <= ranges[5];
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,FindHorizontalLines,The following statement contains a magic number: for (int y = 0; y < height; y += 2)              {                  for (int x = 0; x < width; x += 1)                  {                      Color c = bitmap.GetPixel(x' y);                      if (ColorWithInRange(c' ranges))                      {                          if (start == -1)                              start = x;                      }                      else if (start != -1)                      {                          int w = x - start;                          if (w > min && w < max)                          {                              /*                              int s = start;                              while (s-- != 0)                              {                                  if (!ColorWithInRange(bitmap.GetPixel(s' y)' ranges))                                      break;                              }                              s++;                              int e = x;                              while (e-- != 0)                              {                                  if (ColorWithInRange(bitmap.GetPixel(e' y)' ranges))                                      break;                              }                              res.Add(new Line(new Point(s' y)' new Point(e' y)));                              */                              res.Add(new Line(new Point(start' y)' new Point(x' y)));                          }                          start = -1;                      }                  }                  start = -1;              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetTextLineBounds,The following statement contains a magic number: for (int y = bound.P1.Y; y < bound.P2.Y; y++)              {                  bool found = false;                  for (int x = xScanStart; x < xScanEnd; x += 1)                  {                      Color c = bitmap.GetPixel(x' y);                      if (colorFunc(c))                      {                          found = true;                          break;                      }                  }                  if (!found && res.Count > 0 && y - res[res.Count - 1].P2.Y > lineHeight * 2)                      break;                  if (!found)                      continue;                  res.Add(GetBlockBounding(bitmap' new Bound(new Point(bound.P1.X' y - 2)' new Point(bound.P2.X' y + lineHeight))' colorFunc));                  y += lineHeight;              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetTextLineBounds,The following statement contains a magic number: for (int y = bound.P1.Y; y < bound.P2.Y; y++)              {                  bool found = false;                  for (int x = xScanStart; x < xScanEnd; x += 1)                  {                      Color c = bitmap.GetPixel(x' y);                      if (colorFunc(c))                      {                          found = true;                          break;                      }                  }                  if (!found && res.Count > 0 && y - res[res.Count - 1].P2.Y > lineHeight * 2)                      break;                  if (!found)                      continue;                  res.Add(GetBlockBounding(bitmap' new Bound(new Point(bound.P1.X' y - 2)' new Point(bound.P2.X' y + lineHeight))' colorFunc));                  y += lineHeight;              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,GetBlockBounding,The following statement contains a magic number: return GetBlockBounding(bitmap' bound' c => GetGrayValue(c) > 180);
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ImproveForOCR,The following statement contains a magic number: for (int y = 0; y < bitmap.Height; y++)              {                  for (int x = 0; x < bitmap.Width; x++)                  {                      Color c = bitmap.GetPixel(x' y);                      int v = GetGrayValue(c);                      if (v > 160)                          newBitmap.SetPixel(x' y' Color.FromArgb(255 - v' 255 - v' 255 - v));                      else                          newBitmap.SetPixel(x' y' Color.White);                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ImproveForOCR,The following statement contains a magic number: for (int y = 0; y < bitmap.Height; y++)              {                  for (int x = 0; x < bitmap.Width; x++)                  {                      Color c = bitmap.GetPixel(x' y);                      int v = GetGrayValue(c);                      if (v > 160)                          newBitmap.SetPixel(x' y' Color.FromArgb(255 - v' 255 - v' 255 - v));                      else                          newBitmap.SetPixel(x' y' Color.White);                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ImproveForOCR,The following statement contains a magic number: for (int y = 0; y < bitmap.Height; y++)              {                  for (int x = 0; x < bitmap.Width; x++)                  {                      Color c = bitmap.GetPixel(x' y);                      int v = GetGrayValue(c);                      if (v > 160)                          newBitmap.SetPixel(x' y' Color.FromArgb(255 - v' 255 - v' 255 - v));                      else                          newBitmap.SetPixel(x' y' Color.White);                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,ImproveForOCR,The following statement contains a magic number: for (int y = 0; y < bitmap.Height; y++)              {                  for (int x = 0; x < bitmap.Width; x++)                  {                      Color c = bitmap.GetPixel(x' y);                      int v = GetGrayValue(c);                      if (v > 160)                          newBitmap.SetPixel(x' y' Color.FromArgb(255 - v' 255 - v' 255 - v));                      else                          newBitmap.SetPixel(x' y' Color.White);                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,DpsFix,The following statement contains a magic number: Bitmap largeBitmap = new Bitmap(400' 200);
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,DpsFix,The following statement contains a magic number: Bitmap largeBitmap = new Bitmap(400' 200);
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,DpsFix,The following statement contains a magic number: int i = 75;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,DpsFix,The following statement contains a magic number: int j = 70;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: int filterWidth = 3;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: int filterHeight = 3;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[0' 0] = filter[0' 1] = filter[0' 2] = filter[1' 0] = filter[1' 2] = filter[2' 0] = filter[2' 1] = filter[2' 2] = -1;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: filter[1' 1] = 9;
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      double red = 0.0' green = 0.0' blue = 0.0;                        for (int filterX = 0; filterX < filterWidth; filterX++)                      {                          for (int filterY = 0; filterY < filterHeight; filterY++)                          {                              int imageX = (x - filterWidth / 2 + filterX + width) % width;                              int imageY = (y - filterHeight / 2 + filterY + height) % height;                                rgb = imageY * pbits.Stride + 3 * imageX;                                red += rgbValues[rgb + 2] * filter[filterX' filterY];                              green += rgbValues[rgb + 1] * filter[filterX' filterY];                              blue += rgbValues[rgb + 0] * filter[filterX' filterY];                          }                          int r = Math.Min(Math.Max((int)(factor * red + bias)' 0)' 255);                          int g = Math.Min(Math.Max((int)(factor * green + bias)' 0)' 255);                          int b = Math.Min(Math.Max((int)(factor * blue + bias)' 0)' 255);                            result[x' y] = Color.FromArgb(r' g' b);                      }                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      rgb = y * pbits.Stride + 3 * x;                        rgbValues[rgb + 2] = result[x' y].R;                      rgbValues[rgb + 1] = result[x' y].G;                      rgbValues[rgb + 0] = result[x' y].B;                  }              }
Magic Number,D3Bit,ImageUtil,C:\repos\CreepGin_D3Bit\D3Bit\ImageUtil.cs,Sharpen,The following statement contains a magic number: for (int x = 0; x < width; ++x)              {                  for (int y = 0; y < height; ++y)                  {                      rgb = y * pbits.Stride + 3 * x;                        rgbValues[rgb + 2] = result[x' y].R;                      rgbValues[rgb + 1] = result[x' y].G;                      rgbValues[rgb + 0] = result[x' y].B;                  }              }
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var lines = ImageUtil.FindHorizontalLines(bitmap' 260' 650' new int[] { 0' 10' 0' 10' 0' 10 });
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var lines = ImageUtil.FindHorizontalLines(bitmap' 260' 650' new int[] { 0' 10' 0' 10' 0' 10 });
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var lines = ImageUtil.FindHorizontalLines(bitmap' 260' 650' new int[] { 0' 10' 0' 10' 0' 10 });
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var lines = ImageUtil.FindHorizontalLines(bitmap' 260' 650' new int[] { 0' 10' 0' 10' 0' 10 });
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var lines = ImageUtil.FindHorizontalLines(bitmap' 260' 650' new int[] { 0' 10' 0' 10' 0' 10 });
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var groups =                  lines.GroupBy(l => l.P1.X).Where(                      l =>                      l.Last().P1.Y - l.First().P1.Y > 200 &&                      l.Count() > 4 &&                      GetMaxVerticalDistance(l.ToList()) > 80 &&                      l.Count() == l.Where(i => Math.Abs(i.XLength - l.First().XLength) < i.XLength*0.1).Count()).OrderByDescending(                          l => l.First().XLength).ThenByDescending(l => l.Count());
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var groups =                  lines.GroupBy(l => l.P1.X).Where(                      l =>                      l.Last().P1.Y - l.First().P1.Y > 200 &&                      l.Count() > 4 &&                      GetMaxVerticalDistance(l.ToList()) > 80 &&                      l.Count() == l.Where(i => Math.Abs(i.XLength - l.First().XLength) < i.XLength*0.1).Count()).OrderByDescending(                          l => l.First().XLength).ThenByDescending(l => l.Count());
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var groups =                  lines.GroupBy(l => l.P1.X).Where(                      l =>                      l.Last().P1.Y - l.First().P1.Y > 200 &&                      l.Count() > 4 &&                      GetMaxVerticalDistance(l.ToList()) > 80 &&                      l.Count() == l.Where(i => Math.Abs(i.XLength - l.First().XLength) < i.XLength*0.1).Count()).OrderByDescending(                          l => l.First().XLength).ThenByDescending(l => l.Count());
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: var groups =                  lines.GroupBy(l => l.P1.X).Where(                      l =>                      l.Last().P1.Y - l.First().P1.Y > 200 &&                      l.Count() > 4 &&                      GetMaxVerticalDistance(l.ToList()) > 80 &&                      l.Count() == l.Where(i => Math.Abs(i.XLength - l.First().XLength) < i.XLength*0.1).Count()).OrderByDescending(                          l => l.First().XLength).ThenByDescending(l => l.Count());
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: if (groups.Count() > 0)              {                  lines = groups.ElementAt(0).ToList();                  //Count line clusters                  int clusterCount = 0;                  int lastY = lines.ElementAt(0).P1.Y;                  foreach (var line in lines)                  {                      if (line.P1.Y - lastY > 5)                          clusterCount++;                      lastY = line.P1.Y;                  }                    var min = new Point(bitmap.Width' bitmap.Height);                  var max = new Point(0' 0);                  foreach (var line in groups.ElementAt(0))                  {                      if (line.P1.X <= min.X && line.P1.Y <= min.Y)                          min = line.P1;                      else if (line.P2.X >= max.X && line.P2.Y >= max.Y)                          max = line.P2;                  }                  Bound bound = new Bound(min' max);                  if (clusterCount==2)                      bound = new Bound(new Point(min.X' min.Y - (int)Math.Round((42/410.0)*(max.X-min.X)))' max);                  return bitmap.Clone(bound.ToRectangle()' bitmap.PixelFormat);              }
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: if (groups.Count() > 0)              {                  lines = groups.ElementAt(0).ToList();                  //Count line clusters                  int clusterCount = 0;                  int lastY = lines.ElementAt(0).P1.Y;                  foreach (var line in lines)                  {                      if (line.P1.Y - lastY > 5)                          clusterCount++;                      lastY = line.P1.Y;                  }                    var min = new Point(bitmap.Width' bitmap.Height);                  var max = new Point(0' 0);                  foreach (var line in groups.ElementAt(0))                  {                      if (line.P1.X <= min.X && line.P1.Y <= min.Y)                          min = line.P1;                      else if (line.P2.X >= max.X && line.P2.Y >= max.Y)                          max = line.P2;                  }                  Bound bound = new Bound(min' max);                  if (clusterCount==2)                      bound = new Bound(new Point(min.X' min.Y - (int)Math.Round((42/410.0)*(max.X-min.X)))' max);                  return bitmap.Clone(bound.ToRectangle()' bitmap.PixelFormat);              }
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: if (groups.Count() > 0)              {                  lines = groups.ElementAt(0).ToList();                  //Count line clusters                  int clusterCount = 0;                  int lastY = lines.ElementAt(0).P1.Y;                  foreach (var line in lines)                  {                      if (line.P1.Y - lastY > 5)                          clusterCount++;                      lastY = line.P1.Y;                  }                    var min = new Point(bitmap.Width' bitmap.Height);                  var max = new Point(0' 0);                  foreach (var line in groups.ElementAt(0))                  {                      if (line.P1.X <= min.X && line.P1.Y <= min.Y)                          min = line.P1;                      else if (line.P2.X >= max.X && line.P2.Y >= max.Y)                          max = line.P2;                  }                  Bound bound = new Bound(min' max);                  if (clusterCount==2)                      bound = new Bound(new Point(min.X' min.Y - (int)Math.Round((42/410.0)*(max.X-min.X)))' max);                  return bitmap.Clone(bound.ToRectangle()' bitmap.PixelFormat);              }
Magic Number,D3Bit,Screenshot,C:\repos\CreepGin_D3Bit\D3Bit\Screenshot.cs,GetToolTip,The following statement contains a magic number: if (groups.Count() > 0)              {                  lines = groups.ElementAt(0).ToList();                  //Count line clusters                  int clusterCount = 0;                  int lastY = lines.ElementAt(0).P1.Y;                  foreach (var line in lines)                  {                      if (line.P1.Y - lastY > 5)                          clusterCount++;                      lastY = line.P1.Y;                  }                    var min = new Point(bitmap.Width' bitmap.Height);                  var max = new Point(0' 0);                  foreach (var line in groups.ElementAt(0))                  {                      if (line.P1.X <= min.X && line.P1.Y <= min.Y)                          min = line.P1;                      else if (line.P2.X >= max.X && line.P2.Y >= max.Y)                          max = line.P2;                  }                  Bound bound = new Bound(min' max);                  if (clusterCount==2)                      bound = new Bound(new Point(min.X' min.Y - (int)Math.Round((42/410.0)*(max.X-min.X)))' max);                  return bitmap.Clone(bound.ToRectangle()' bitmap.PixelFormat);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,Tooltip,The following statement contains a magic number: Resized = ImageUtil.ResizeImage(bitmap' 400' (int)(400.0 / bitmap.Width * bitmap.Height));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,Tooltip,The following statement contains a magic number: Resized = ImageUtil.ResizeImage(bitmap' 400' (int)(400.0 / bitmap.Width * bitmap.Height));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,Tooltip,The following statement contains a magic number: _affixStartY = s(88/320.0);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,Tooltip,The following statement contains a magic number: _affixStartY = s(88/320.0);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: Bound itemNamebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(15/410.0)' s(15/410.0))' new Point(s(395/410.0)' s(52/410.0)))).Expand(4);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: if (itemNamebound.Width < 20)                  return itemName;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: itemNameBlock = ImageUtil.ResizeImage(itemNameBlock' (int)(90.0 / itemNameBlock.Height * itemNameBlock.Width)' 90);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemName,The following statement contains a magic number: itemNameBlock = ImageUtil.ResizeImage(itemNameBlock' (int)(90.0 / itemNameBlock.Height * itemNameBlock.Width)' 90);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseItemType,The following statement contains a magic number: try              {                  Func<Color' bool> colorFunc =                      c =>                      ImageUtil.GetGrayValue(c) > 130 && !(Math.Abs(c.R - c.G) < 30 && Math.Abs(c.G - c.B) < 30);                  Bound itemTypebound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(55 / 410.0))'                                                                             new Point(s(270 / 410.0)' s(92 / 400.0)))'                                                                   colorFunc).Expand(6);                  if (itemTypebound.Height > s(46 / 400.0))                      itemTypebound = new Bound(new Point(itemTypebound.P1.X' itemTypebound.P1.Y)'                                                new Point(itemTypebound.P2.X' itemTypebound.P1.Y + s(30 / 411.0)));                  if (itemTypebound.Width < 5)                      return itemType;                  ImageUtil.DrawBlockBounding(Processed' itemTypebound);                  Bitmap itemTypeBlock = Resized.Clone(itemTypebound.ToRectangle()' Resized.PixelFormat);                  itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' itemTypeBlock.Width * 8' itemTypeBlock.Height * 8);                  //itemTypeBlock = ImageUtil.ResizeImage(itemTypeBlock' (int)(80.0 / itemTypeBlock.Height * itemTypeBlock.Width)' 80);                  string text =                      Tesseract.GetTextFromBitmap(ImageUtil.Sharpen(itemTypeBlock)).Replace("\r"' "").Replace("\n"' " ");                  var words = text.Split(new[] { ' ' });                  if (words.Length > 1)                  {                      if (reverseQuality)                      {                          string qualityString = words[words.Length - 1];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Take(words.Length - 1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                      else                      {                          string qualityString = words[0];                          quality =                              Data.ItemQualities.OrderByDescending(i => qualityString.DiceCoefficient(i.Value)).First().Key;                          itemType = String.Join(" "' words.Skip(1));                          itemType = Data.ItemTypes.OrderByDescending(i => itemType.DiceCoefficient(i.Value)).First().Key;                          return itemType;                      }                                        }              }              catch { }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: Func<Color' bool> whiteFunc =                  c => c.B > 150 && Math.Abs(c.R - c.G) < 8 && Math.Abs(c.R - c.B) < 8;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: Func<Color' bool> whiteFunc =                  c => c.B > 150 && Math.Abs(c.R - c.G) < 8 && Math.Abs(c.R - c.B) < 8;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: Func<Color' bool> whiteFunc =                  c => c.B > 150 && Math.Abs(c.R - c.G) < 8 && Math.Abs(c.R - c.B) < 8;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(80' 158 < Resized.Height ? 158 : Resized.Height)'                                                                 new Point(200' 218 < Resized.Height ? 218 : Resized.Height))'                                                       13'                                                       whiteFunc' 80' 200);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: if (bounds.Count != 2)                  return "";
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseMeta,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var newBound = new Bound(new Point(bound.P1.X - 6' bound.P1.Y - 4)'                                           new Point(bound.P2.X + 4' bound.P2.Y + 4));                  var block = Resized.Clone(bound.Expand(3).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width * 6' block.Height * 6);                  string text = Tesseract.GetTextFromBitmap(block' @"-psm 7 nobatch tesseract\d3meta");                  text = text.Replace(" "' "").Replace("+"' "");                  if (text.StartsWith("4-") && text.EndsWith("70"))                      text = text.Replace("4-"' "").Replace("70"' "%");                  res.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c =>                  ImageUtil.GetGrayValue(c) > 240 && (Math.Abs(c.R - c.G) < 5 && Math.Abs(c.G - c.B) < 5);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c =>                  ImageUtil.GetGrayValue(c) > 240 && (Math.Abs(c.R - c.G) < 5 && Math.Abs(c.G - c.B) < 5);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c =>                  ImageUtil.GetGrayValue(c) > 240 && (Math.Abs(c.R - c.G) < 5 && Math.Abs(c.G - c.B) < 5);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: Bound dpsBound = ImageUtil.GetBlockBounding(Resized'                                                                   new Bound(new Point(s(82 / 410.0)' s(86 / 410.0))' new Point(s(238 / 410.0)' s(160 / 410.0)))' colorFunc).Expand(s(10/410.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: if (dpsBound.Width < 24)                  return dps;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: dpsBlock = ImageUtil.ResizeImage(dpsBlock' (int)(22.0 / dpsBlock.Height * dpsBlock.Width)' 22);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseDPS,The following statement contains a magic number: dpsBlock = ImageUtil.ResizeImage(dpsBlock' (int)(22.0 / dpsBlock.Height * dpsBlock.Width)' 22);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: Func<Color' bool> whiteFunc =                  c => c.B > 160 && Math.Abs(c.R - c.G) < 1 && Math.Abs(c.R - c.B) < 1;
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c => c.B > 150 && c.G < 120 && c.R < 120 || whiteFunc(c);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c => c.B > 150 && c.G < 120 && c.R < 120 || whiteFunc(c);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: Func<Color' bool> colorFunc =                  c => c.B > 150 && c.G < 120 && c.R < 120 || whiteFunc(c);
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: for (int y = _affixStartY; y < _affixStartY + 80; y++)              {                  bool found = false;                  for (int x = s(58 / 320.0); x < s(74 / 320.0); x += 1)                  {                      Color c = Resized.GetPixel(x' y);                      if (c.B > 150 && c.G < 120 && c.R < 120)                      {                          found = true;                          break;                      }                  }                  if (found)                  {                      _affixStartY = y;                      break;                  }              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: var bounds = ImageUtil.GetTextLineBounds(Resized'                                                       new Bound(new Point(s(6 / 320.0)' _affixStartY)'                                                                 new Point(s(300/320.0)' Resized.Height - s(54/320.0)))'                                                       s(10/320.0)'                                                       colorFunc' s(58 / 320.0)' s(74 / 320.0));
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var bound in bounds)              {                  if (bound.Width < 20)                      continue;                  ImageUtil.DrawBlockBounding(Processed' bound);                  var block = Resized.Clone(bound.Expand(4).ToRectangle()' Resized.PixelFormat);                  block = ImageUtil.ResizeImage(block' block.Width*6' block.Height*6);                  //block = ImageUtil.ResizeImage(block' (int)(80.0 / block.Height * block.Width)' 80);                  string text = Tesseract.GetTextFromBitmap(block);                  if (Enumerable.Range(s(58 / 320.0)' 15).Where(x => whiteFunc(Resized.GetPixel(x' bound.P1.Y + 4))).Count() > 0)                  {                      affixStrings.Add("Empty Socket");                      var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                      Match m;                      if (pair.Coe > 0.20 && (m = Regex.Match(text' "([0-9]+-[0-9]+|[0-9\\.]+)")).Success)                      {                          string v = m.Value + " " + pair.Key;                          socketBonuses += socketBonuses == "" ? v : "' " + v;                      }                  }                  else if (bound.P1.X < s(16 / 320.0))                      affixStrings[affixStrings.Count - 1] += " " + text;                  else                      affixStrings.Add(text);              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var affixString in affixStrings)              {                  string text = affixString;                  while (text.Contains("1 1"))                      text = text.Replace("1 1"' "11");                  var pair = Data.affixMatches.Select(p => new { p.Key' p.Value' Coe = text.DiceCoefficient(p.Value) }).OrderByDescending(o => o.Coe).First();                  if (pair.Coe < 0.20)                      continue;                  List<string> values = new List<string>();                  Match m = Regex.Match(text' "[0-9]+-[0-9]+");                  if (m.Success)                  {                      if((pair.Key == "Dmg") || (pair.Key == "Dmg%"))                      {                          var parts = m.Value.Split(new char[] {'-'});                          res.Add("MinD"' parts[0]);                          res.Add("MaxD"' parts[1]);                          continue;                      }                      values.Add(m.Value);                  }                  else if ((m = Regex.Match(text' "[0-9\\.']+")).Success)                      values.Add(m.Value.Replace("'"' "."));                    if (values.Count == 0 && pair.Key != "Soc" && pair.Key != "Ind")                      continue;                  if (!res.ContainsKey(pair.Key) && pair.Key == "Soc")                      res.Add(pair.Key' "1");                  else if (!res.ContainsKey(pair.Key))                      res.Add(pair.Key' String.Join("*"' values));                  else if (pair.Key == "Soc")                      res[pair.Key] = (int.Parse(res[pair.Key]) + 1).ToString();              }
Magic Number,D3Bit,Tooltip,C:\repos\CreepGin_D3Bit\D3Bit\Tooltip.cs,ParseAffixes,The following statement contains a magic number: foreach (var r in res)              {                  string key = r.Key;                  string value = r.Value;                  if (key == "Life%")                  {                      int n;                      if (int.TryParse(value' out n))                      {                          if (n > 20)                              n = int.Parse(n.ToString().Substring(0' 1));                          value = n.ToString();                      }                  }                  finalRes.Add(key' value);              }
