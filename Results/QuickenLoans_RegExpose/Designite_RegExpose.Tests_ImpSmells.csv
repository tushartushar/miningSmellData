Implementation smell,Namespace,Class,File,Method,Description
Long Method,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The method has 140 lines of code.
Long Parameter List,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test,The method has 5 parameters. Parameters: pattern' ignoreCase' singleLine' multiLine' testNumber
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithTwoCharacterLiteralChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[2]' Is.InstanceOf<AlternationChoice>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[3]' Is.InstanceOf<AlternationChoice>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[0].Children.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[2].Children.Count' Is.EqualTo(1));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[3].Children.Count' Is.EqualTo(1));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[0].Children[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[2].Children[0]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,AnAlternationWithAllCharacterNodesChoicesParsesCorrectly,The following statement contains a magic number: Assert.That(choices[3].Children[0]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[2]' Is.InstanceOf<AlternationChoice>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[0].Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[1].Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[2].Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[2].Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[0].Children[1]).Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[1].Children[0]).Number' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[1].Children[1]).Number' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[2].Children[0]' Is.InstanceOf<CapturingParens>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[2].Children[0]).Number' Is.EqualTo(5));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[2].Children[0]).Number' Is.EqualTo(5));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(choices[2].Children[1]' Is.InstanceOf<CapturingParens>());
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[2].Children[1]).Number' Is.EqualTo(6));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedChoices,The following statement contains a magic number: Assert.That(((CapturingParens)choices[2].Children[1]).Number' Is.EqualTo(6));
Magic Number,RegExpose.Tests.CompilerTests,AlternationParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\AlternationParsingTests.cs,CapturedAlternation,The following statement contains a magic number: Assert.That(choices.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,BackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,BackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(((Backreference)nodes[1]).Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,BackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes[2]' Is.InstanceOf<Backreference>());
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,BackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(((Backreference)nodes[2]).Number' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,BackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(((Backreference)nodes[2]).Number' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,AngleBracketNamedBackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,AngleBracketNamedBackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes[1].Index' Is.EqualTo(7));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,TickNamedBackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,BackreferenceParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\BackreferenceParsingTests.cs,TickNamedBackreferencesAreParsedCorrectly,The following statement contains a magic number: Assert.That(nodes[1].Index' Is.EqualTo(7));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,ACapturingParensWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,ACapturingParensWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,ACapturingParensWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(nodes.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children1.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(capturingParens2.Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children2.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,MultipleCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children2[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children1.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[3]' Is.InstanceOf<CapturingParens>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: var capturingParens2 = (CapturingParens) children1[3];
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(capturingParens2.Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children2.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedCapturingParensParseCorrectly,The following statement contains a magic number: Assert.That(children2[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: Assert.That(children1.Count' Is.EqualTo(5));
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[2]' Is.InstanceOf<GreedyQuestionMark>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[3]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: Assert.That(children1[4]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: var greedyQuestionMark = (GreedyQuestionMark)children1[2];
Magic Number,RegExpose.Tests.CompilerTests,CapturingParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CapturingParensParsingTests.cs,NestedQuantifierParensParseCorrectly,The following statement contains a magic number: Assert.That(children2.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(result.Children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child10.Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child100.Min' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child100.Max' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child101.Min' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2 = result.Children[2] as LazyStar;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child20.Children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child202 = child20.Children[2] as NonCapturingParens;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child2020.Choices.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child2020Choice0.Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child2020Choice1.Children.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice2 = child2020.Choices[2];
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: Assert.That(child2020Choice2.Children.Count' Is.EqualTo(7));
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice22 = child2020Choice2.Children[2] as CharacterLiteral;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice23 = child2020Choice2.Children[3] as CharacterLiteral;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice24 = child2020Choice2.Children[4] as CharacterLiteral;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice25 = child2020Choice2.Children[5] as CharacterLiteral;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child2020Choice26 = child2020Choice2.Children[6] as CharacterLiteral;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child203 = child20.Children[3] as GreedyQuestionMark;
Magic Number,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test1,The following statement contains a magic number: var child3 = result.Children[3] as Dollar;
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,AtomicGroupingParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,AtomicGroupingParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,AtomicGroupingParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookAheadParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,PositiveLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,MiscParensParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\MiscParensParsingTests.cs,NegativeLookBehindParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,ANamedCaptureWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,ANamedCaptureWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children[2]' Is.InstanceOf<CharacterClassShorthand>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,ANamedCaptureWithMultipleCharacterNodesParsesCorrectly,The following statement contains a magic number: Assert.That(children[3]' Is.InstanceOf<Dot>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(nodes.Count' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children1.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children1[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(namedCapture2.Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children2.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,MultipleNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children2[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children1.Count' Is.EqualTo(4));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children1[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children1[3]' Is.InstanceOf<NamedCapture>());
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: var namedCapture2 = (NamedCapture)children1[3];
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(namedCapture2.Number' Is.EqualTo(2));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children2.Count' Is.EqualTo(3));
Magic Number,RegExpose.Tests.CompilerTests,NamedCaptureParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\NamedCaptureParsingTests.cs,NestedNamedCaptureParseCorrectly,The following statement contains a magic number: Assert.That(children2[2]' Is.InstanceOf<CharacterLiteral>());
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,GreedyQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<GreedyQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,GreedyQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<GreedyQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,GreedyQuantifierMaxOmittedWithComma,The following statement contains a magic number: AssertResult<GreedyQuantifier>(result' 2' null);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,GreedyQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<GreedyQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,GreedyQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<GreedyQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,LazyQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<LazyQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,LazyQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<LazyQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,LazyQuantifierMaxOmittedWithComma,The following statement contains a magic number: AssertResult<LazyQuantifier>(result' 2' null);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,LazyQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<LazyQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,LazyQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<LazyQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,PossessiveQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<PossessiveQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,PossessiveQuantifierMinAndMaxSpecified,The following statement contains a magic number: AssertResult<PossessiveQuantifier>(result' 2' 4);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,PossessiveQuantifierMaxOmittedWithComma,The following statement contains a magic number: AssertResult<PossessiveQuantifier>(result' 2' null);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,PossessiveQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<PossessiveQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,QuantifierParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\QuantifierParsingTests.cs,PossessiveQuantifierMaxOmittedCommaOmitted,The following statement contains a magic number: AssertResult<PossessiveQuantifier>(result' 2' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMultipleRangedCharacterClassIntoCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 3);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMultipleRangedCharacterClassIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassRange(parts[2]' "0"' "5"' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMultipleRangedCharacterClassIntoCharacterClassCaseInsensitive,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsCharacterClassIntoCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 3);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsCharacterClassIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassRange(parts[2]' "A"' "M"' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsCharacterClassIntoCharacterClassCaseInsentive,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 3);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsCharacterClassIntoCharacterClassCaseInsentive,The following statement contains a magic number: AssertCharacterClassRange(parts[2]' "g"' "m"' true);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseCharacterClassWithBeginningOrEndDashIntoCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseCharacterClassWithBeginningOrEndDashIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[1]' pattern.Substring(2' 1)' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMultipleRangedCharacterClassIntoNegatedCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMultipleRangedCharacterClassIntoNegatedCharacterClassCaseInsensitive,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsNegatedCharacterClassIntoCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 3);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsNegatedCharacterClassIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassRange(parts[2]' "A"' "M"' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsNegatedCharacterClassIntoCharacterClassCaseInsensitive,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 3);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseMixedPartsNegatedCharacterClassIntoCharacterClassCaseInsensitive,The following statement contains a magic number: AssertCharacterClassRange(parts[2]' "g"' "m"' true);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseNegatedCharacterClassWithBeginningOrEndDashIntoCharacterClass,The following statement contains a magic number: var parts = AssertPartsCount(characterClass' 2);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseNegatedCharacterClassWithBeginningOrEndDashIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[0]' pattern.Substring(2' 1)' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,ParseNegatedCharacterClassWithBeginningOrEndDashIntoCharacterClass,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[1]' pattern.Substring(3' 1)' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,CaretInCharacterClassAfterFirstPositionIsAcceptedUnescaped,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[0]' pattern.Substring(1' pattern.Length - 2)' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,CaretInNegatedCharacterClassAfterFirstPositionIsAcceptedUnescaped,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[0]' pattern.Substring(2' pattern.Length - 3)' false);
Magic Number,RegExpose.Tests.CompilerTests,CharacterClassParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\CharacterClassParsingTests.cs,CaretInNegatedCharacterClassAfterFirstPositionIsAcceptedUnescaped,The following statement contains a magic number: AssertCharacterClassLiteralCharacters(parts[0]' pattern.Substring(2' pattern.Length - 3)' false);
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(                     "| Index | Step          | Node Type                | {0} | Message"'                     "Pattern".PadRight(Math.Max(pattern.Length + 2' 7)));
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(                     "| Index | Step          | Node Type                | {0} | Message"'                     "Pattern".PadRight(Math.Max(pattern.Length + 2' 7)));
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(                     "|---------------+--------------------------+-{0}-+---------------------------------------------------"'                     "".PadRight(Math.Max(pattern.Length + 2' 7)' '-'));
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(                     "|---------------+--------------------------+-{0}-+---------------------------------------------------"'                     "".PadRight(Math.Max(pattern.Length + 2' 7)' '-'));
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(engine.GetParseSteps().Aggregate(                 new StringBuilder()'                 (sb' step) => sb.AppendFormat(                     "{0}{1}{2}{3}"'                     "| " + step.Type.ToString().PadRight(14)'                     "| " + step.NodeType.PadRight(25)'                     "| " + step.Pattern.PadRight(Math.Max(pattern.Length + 3' 8))'                     "| " + step.Message).AppendLine()).ToString());
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(engine.GetParseSteps().Aggregate(                 new StringBuilder()'                 (sb' step) => sb.AppendFormat(                     "{0}{1}{2}{3}"'                     "| " + step.Type.ToString().PadRight(14)'                     "| " + step.NodeType.PadRight(25)'                     "| " + step.Pattern.PadRight(Math.Max(pattern.Length + 3' 8))'                     "| " + step.Message).AppendLine()).ToString());
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(engine.GetParseSteps().Aggregate(                 new StringBuilder()'                 (sb' step) => sb.AppendFormat(                     "{0}{1}{2}{3}"'                     "| " + step.Type.ToString().PadRight(14)'                     "| " + step.NodeType.PadRight(25)'                     "| " + step.Pattern.PadRight(Math.Max(pattern.Length + 3' 8))'                     "| " + step.Message).AppendLine()).ToString());
Magic Number,RegExpose.Tests,MatchTestsBase,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\MatchTests.cs,DumpParseSteps,The following statement contains a magic number: Debug.WriteLine(engine.GetParseSteps().Aggregate(                 new StringBuilder()'                 (sb' step) => sb.AppendFormat(                     "{0}{1}{2}{3}"'                     "| " + step.Type.ToString().PadRight(14)'                     "| " + step.NodeType.PadRight(25)'                     "| " + step.Pattern.PadRight(Math.Max(pattern.Length + 3' 8))'                     "| " + step.Message).AppendLine()).ToString());
Missing Default,RegExpose.Tests.CompilerTests,ComplexParsingTests,C:\research\architectureSmells\repos\QuickenLoans_RegExpose\RegExpose.Tests\CompilerTests\ComplexParsingTests.cs,Test,The following switch statement is missing a default case: switch (testNumber)             {                 case 1:                     Test1(result);                     break;             }
