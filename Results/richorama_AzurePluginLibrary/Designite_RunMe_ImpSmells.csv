Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,InstallPackages,The length of the statement  "                            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue(DATA_CONNECTION_STRING)); " is 133.
Long Statement,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,InstallPackage,The length of the statement  "            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue(DATA_CONNECTION_STRING)); " is 133.
Long Statement,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,UnZip,The length of the statement  "            var process = Process.Start(Path.Combine(workingDirectory' "7za.exe")' string.Format("x -y \"{0}\" -oc:\\applications"' zipFile)); " is 130.
Magic Number,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,InstallPackages,The following statement contains a magic number: foreach (string package in packages)              {                  Console.WriteLine("Installing Package " + package);                  try                  {                      if (!string.IsNullOrWhiteSpace(package))                      {                          // Parse out the container\file pair                          var fields = package.Trim().Split(new char[] { '/'' '\\' }' 2);                            var containerName = fields[0];                          var packageName = fields[1];                            if (packageName == "*")                          {                              CloudStorageAccount storageAccount = CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue(DATA_CONNECTION_STRING));                              CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();                              var container = blobClient.GetContainerReference(containerName);                              foreach (var blobListItem in container.ListBlobs().OrderBy(x => x.Uri.ToString()))                              {                                  var blob = container.GetBlobReference(blobListItem.Uri.ToString());                                  InstallPackageIfNewer(true' workingDirectory' containerName' blob.Name);                              }                          }                          else                          {                              InstallPackageIfNewer(true' workingDirectory' containerName' packageName);                          }                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(string.Format("Package \"{0}\" failed to install' {1}"' package' e)' "Information");                  }              }
Magic Number,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,IsNewPackage,The following statement contains a magic number: blobClient.RetryPolicy = RetryPolicies.Retry(100' TimeSpan.FromSeconds(1));
Magic Number,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,IsNewPackage,The following statement contains a magic number: blobClient.Timeout = TimeSpan.FromSeconds(600);
Magic Number,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,InstallPackage,The following statement contains a magic number: blobClient.RetryPolicy = RetryPolicies.Retry(100' TimeSpan.FromSeconds(1));
Magic Number,RunMe,Program,C:\repos\richorama_AzurePluginLibrary\utils\RunMe\Program.cs,InstallPackage,The following statement contains a magic number: blobClient.Timeout = TimeSpan.FromSeconds(600);
