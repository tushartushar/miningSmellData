Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The method has 134 lines of code.
Long Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has 219 lines of code.
Long Method,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The method has 148 lines of code.
Long Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,visit,The method has 101 lines of code.
Long Method,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The method has 165 lines of code.
Complex Method,NAnt.Contrib.Tasks,DicsoTask,C:\repos\nant_nantcontrib\src\Tasks\DiscoTask.cs,ExecuteTask,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks,FxCopTask,C:\repos\nant_nantcontrib\src\Tasks\FxCopTask.cs,BuildArguments,Cyclomatic complexity of the method is 17
Complex Method,NAnt.Contrib.Tasks,HxCompTask,C:\repos\nant_nantcontrib\src\Tasks\HxCompTask.cs,ExecuteTask,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks,HxRegTask,C:\repos\nant_nantcontrib\src\Tasks\HxRegTask.cs,ExecuteTask,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks,MgmtClassGenTask,C:\repos\nant_nantcontrib\src\Tasks\MgmtClassGenTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks,SchemaValidatedTask,C:\repos\nant_nantcontrib\src\Tasks\SchemaValidatedTask.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks,WsdlTask,C:\repos\nant_nantcontrib\src\Tasks\WsdlTask.cs,ExecuteTask,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddDirectory,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRelativePath,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadApplicationSearch,Cyclomatic complexity of the method is 19
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,Cyclomatic complexity of the method is 15
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,Cyclomatic complexity of the method is 20
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,Cyclomatic complexity of the method is 27
Complex Method,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSAddFilesTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSAddFilesTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSGetTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSGetTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 12
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSProjectDatabaseTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSProjectDatabaseTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSPutTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSPutTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamAutoLabel,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamAutoLabel.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckin,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckin.cs,visit,Cyclomatic complexity of the method is 14
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,visit,Cyclomatic complexity of the method is 17
Complex Method,NAnt.Contrib.Tasks.StarTeam,TreeBasedTask,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\TreeBasedTask.cs,IsIncluded,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMCheckin,C:\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMCheckin.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 18
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMCheckout,C:\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMCheckout.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMGet,C:\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMGet.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 15
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMLabel,C:\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMLabel.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 9
Complex Method,NAnt.Contrib.Tasks.Web,WebBase,C:\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,FindServerInstance,Cyclomatic complexity of the method is 9
Complex Method,NAnt.Contrib.Util,FileUtils,C:\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,Cyclomatic complexity of the method is 10
Long Parameter List,NAnt.Contrib.Tasks,COMRegisterTask,C:\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,UnRegisterTypeLib,The method has 5 parameters. Parameters: libID' wVerMajor' wVerMinor' lCID' tSysKind
Long Parameter List,NAnt.Contrib.Tasks,COMRegisterTask,C:\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,FormatMessage,The method has 7 parameters. Parameters: flags' source' messageId' languageId' buffer' size' arguments
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddDirectory,The method has 5 parameters. Parameters: database' directoryTable' ParentDirectory' Directory' Depth
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRelativePath,The method has 6 parameters. Parameters: database' Name' Parent' Default' Path' directoryTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,The method has 7 parameters. Parameters: database' fileName' fileAssembly' componentName' assemblyComponentName' classTable' progIdTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has 15 parameters. Parameters: database' directoryTable' Component' fileTable' ComponentDirectory' ComponentName' Sequence' msiAssemblyTable' msiAssemblyNameTable' componentTable' featureComponentTable' classTable' progIdTable' selfRegTable' modComponentTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The method has 7 parameters. Parameters: featureTable' conditionTable' ParentFeature' database' Feature' Depth' Order
Long Parameter List,NAnt.Contrib.Tasks.Msi,TypeLibRecord,C:\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,TypeLibRecord,The method has 5 parameters. Parameters: LibId' TypeLibFileName' AssemblyName' FeatureName' AssemblyComponent
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDllEntry,The method has 5 parameters. Parameters: memid' invKind' pBstrDllName' pBstrName' pwOrdinal
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDocumentation,The method has 5 parameters. Parameters: index' strName' strDocString' dwHelpContext' strHelpFile
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,Invoke,The method has 7 parameters. Parameters: pvInstance' memid' wFlags' pDispParams' pVarResult' pExcepInfo' puArgErr
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDocumentation2,The method has 5 parameters. Parameters: memid' lcid' pbstrHelpString' pdwHelpStringContext' pbstrHelpStringDll
Long Parameter List,NAnt.Contrib.Util,IniFile,C:\repos\nant_nantcontrib\src\Util\IniFile.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: lpApplicationName' lpKeyName' lpDefault' lpReturnedString' nSize' lpFileName
Long Identifier,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoResumeOrchestrationInstance is 32.
Long Identifier,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoSuspendOrchestrationInstance is 33.
Long Identifier,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoTerminateOrchestrationInstance is 35.
Long Identifier,NAnt.Contrib.Tasks.SourceSafe,History,C:\repos\nant_nantcontrib\src\Tasks\SourceSafe\History.cs,LogChange,The length of the parameter FILE_OR_PROJECT_DOES_NOT_EXIST is 30.
Long Identifier,NAnt.Contrib.Tasks.Web,CreateVirtualDirectory,C:\repos\nant_nantcontrib\src\Tasks\Web\CreateVirtualDirectory.cs,,The length of the parameter _authPersistSingleRequestIfProxy is 32.
Long Identifier,NAnt.Contrib.Tasks.Web,CreateVirtualDirectory,C:\repos\nant_nantcontrib\src\Tasks\Web\CreateVirtualDirectory.cs,,The length of the parameter _authPersistSingleRequestAlwaysIfProxy is 38.
Long Statement,NAnt.Contrib.Tasks,TypedCollectionTask,C:\repos\nant_nantcontrib\src\Tasks\TypedCollectionTask.cs,GenerateCollectionClasses,The length of the statement  "                    string outputFile = Path.GetDirectoryName(path) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension( path ) + langExt; " is 131.
Long Statement,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The length of the statement  "            Regex referenceRegEx = new Regex(@"(Object|Reference)\s*=\s*({|\*\\G{)(?<tlbguid>[0-9\-A-Fa-f]*($^\.)*)}\#(?<majorver>[0-9a-fA-F($^\.)]*)\.(?<minorver>[0-9a-fA-F($^\.)]*)\#(?<lcid>[0-9]($^\.)*)(;|\#)(?<tlbname>[^\#\n\r]*)"); " is 224.
Long Statement,NAnt.Contrib.Tasks.Mks,ChangesTask,C:\repos\nant_nantcontrib\src\Tasks\Mks\History.cs,GetChanges,The length of the statement  "                string cmd = "rlog  --filter=changed --headerFormat='¬' --trailerformat='' --format=¦au^{author}~dt^{date}~de^{description}~mn^{membername}~mr^{memberrev}~rn^{revision} -S '" + _sandbox + "'"; " is 192.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductName property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productname_property.asp"); " is 179.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductCode property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productcode_property.asp"); " is 179.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductVersion property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productversion_property.asp"); " is 185.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("Manufacturer property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/manufacturer_property.asp"); " is 181.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The length of the statement  "                        if ((value.name == null || value.name == String.Empty) && (value.value == null || value.value == String.Empty) && (value.Value == null)) " is 136.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(key.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null || value.name == String.Empty) ? "(Default)":value.name.Replace("}"' "}}").Replace("{"' "{{"))); " is 219.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(regKey.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null) ? string.Empty : value.name.Replace("}"' "}}").Replace("{"' "{{"))); " is 195.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDirFileLocators,The length of the statement  "                        signatureTable.InsertRecord(signature' dirfileKey.file.name' dirfileKey.file.minversion' dirfileKey.file.maxversion' dirfileKey.file.minsize' dirfileKey.file.maxsize' dirfileKey.file.mindate' dirfileKey.file.maxdate' dirfileKey.file.languages); " is 244.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDepreciatedLocators,The length of the statement  "            Log(Level.Info' "* /search/key is depreciated.  Please use /search/app' /search/registry' /search/ini' or /search/dirfile syntax instead."); " is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddRegistryLocaterEntry,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(key.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + value.name.Replace("}"' "}}").Replace("{"' "{{")); " is 152.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIconData,The length of the statement  "                        throw new BuildException(String.Format(CultureInfo.InvariantCulture' "Unable to open file:\n\t{0}"' iconPath)' Location); " is 121.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadUserDefinedTables,The length of the statement  "                    string tableStructureContents = tableStructureColumns + "\n" + tableStructureColumnTypes + "\n" + tableStructureKeys + "\n"; " is 124.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,RemoveControlEvent,The length of the statement  "                        controlEvent.dialog' controlEvent.control' controlEvent.name' controlEvent.argument' controlEvent.condition)' Location); " is 120.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,The length of the statement  "                                classTable.InsertRecord(clsid' "InprocServer32"' assemblyComponentName' progId' className' null' null' null' 0' null' null' featureName' 0); " is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                    if (basePath.EndsWith(Path.DirectorySeparatorChar.ToString()) || basePath.EndsWith(Path.AltDirectorySeparatorChar.ToString())) " is 126.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                    throw new BuildException(String.Format(CultureInfo.InvariantCulture' "Could not open file {0}"' filePath)' Location' ex); " is 121.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                        bool installToGAC = ((fileOverride == null) || (fileOverride.installtogac == false)) ? Component.installassembliestogac : fileOverride.installtogac; " is 148.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadComponents,The length of the statement  "                            if (((XmlElement)_xmlNode).SelectSingleNode("registry/key[@component='" + component.name + "']/value[@id='" + keyFileName + "']") == null) { " is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadBannerImage,The length of the statement  "                    using (InstallerRecordReader reader = database.FindRecords("Binary"' new InstallerSearchClause("Name"' Comparison.Equals' "bannrbmp"))) { " is 137.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadBackgroundImage,The length of the statement  "                    using (InstallerRecordReader reader = database.FindRecords("Binary"' new InstallerSearchClause("Name"' Comparison.Equals' "dlgbmp"))) { " is 135.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadLicense,The length of the statement  "                using (InstallerRecordReader recordReader = database.FindRecords("Control"' new InstallerSearchClause("Control"' Comparison.Equals' "AgreementText"))) { " is 152.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The length of the statement  "                                if ((configItem.module == null || configItem.module.Equals(String.Empty)) || configItem.module.ToLower().Equals(mergeModule.ToLower()) || configItem.module.ToLower().Equals(Path.GetFileName(mergeModule.ToLower()))) { " is 216.
Long Statement,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleSignature,The length of the statement  "                Log(Level.Verbose' "Storing Module Signature:\n\tId:\t\t" + msi.id + "\n\tVersion:\t" + msi.version + "\n\tLanguage:\t" + Convert.ToInt32(msi.language)); " is 153.
Long Statement,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The length of the statement  "                        StringReader stream = new StringReader("<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0' >" + " is 123.
Long Statement,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The length of the statement  "                                "    <xsl:for-each select=\"//test-suite[@name='"+testSuiteName+"' and ancestor::test-suite[@name='"+parent+"'][position()=last()]]\">" + " is 137.
Long Statement,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetChangelistNumber,The length of the statement  "            string CurrentChangelists = getProcessOutput("p4"' string.Format("-u {0} -c {1} changes -s pending -u {0}"' User' Client )' null ); " is 131.
Long Statement,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateClient,The length of the statement  "                "View:\n " + View + " " + Regex.Replace(View' @"//\w+/"' "//" + Clientname + "/") + "\n\n" );   //p4root/... //clientname/... " is 125.
Long Statement,NAnt.Contrib.Tasks.StarTeam,LabelTask,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\LabelTask.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass(); " is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckin,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckin.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass(); " is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass(); " is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass(); " is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The length of the statement  "            b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name); " is 166.
Long Statement,NAnt.Contrib.Tasks.StarTeam,TreeBasedTask,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\TreeBasedTask.cs,ExecuteTask,The length of the statement  "                        throw new BuildException(string.Format("Could not get handle to root folder ({0}) found."'starTeamRootFolder.Path)'Location'e); " is 127.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspAllowOutOfProcComponents: " + newVirDir.Properties["AspAllowOutOfProcComponents"].Value.ToString()); " is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspEnableApplicationRestart: " + newVirDir.Properties["AspEnableApplicationRestart"].Value.ToString()); " is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspScriptErrorSentToBrowser: " + newVirDir.Properties["AspScriptErrorSentToBrowser"].Value.ToString()); " is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AuthPersistSingleRequestIfProxy: " + newVirDir.Properties["AuthPersistSingleRequestIfProxy"].Value.ToString()); " is 128.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AuthPersistSingleRequestAlwaysIfProxy: " + newVirDir.Properties["AuthPersistSingleRequestAlwaysIfProxy"].Value.ToString()); " is 140.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "UNCAuthenticationPassthrough: " + newVirDir.Properties["UNCAuthenticationPassthrough"].Value.ToString()); " is 122.
Long Statement,NAnt.Contrib.Util,FileUtils,C:\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The length of the statement  "            while (i < absoluteLen && i < baseLen && string.Compare(fullBasePath[i].ToString()' fullAbsolutePath[i].ToString()' caseInsensitive) == 0) { " is 140.
Long Statement,NAnt.Contrib.Util,FileUtils,C:\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The length of the statement  "            if (i == baseLen && (fullAbsolutePath[i] == Path.DirectorySeparatorChar || fullAbsolutePath[i-1] == Path.DirectorySeparatorChar)) { " is 131.
Complex Conditional,NAnt.Contrib.Tasks,XsdTask,C:\repos\nant_nantcontrib\src\Tasks\XsdTask.cs,Initialize,The conditional expression  "Xdr == null && XmlDoc == null && Assembly == null && Schema == null"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The conditional expression  "(value.name == null || value.name == String.Empty) && (value.value == null || value.value == String.Empty) && (value.Value == null)"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The conditional expression  "(configItem.module == null || configItem.module.Equals(String.Empty)) || configItem.module.ToLower().Equals(mergeModule.ToLower()) || configItem.module.ToLower().Equals(Path.GetFileName(mergeModule.ToLower()))"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.NUnit2Report,LocalResXmlResolver,C:\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,GetEntity,The conditional expression  "absoluteUri.Scheme == SCHEME_MRES ||                       (absoluteUri.Scheme == "file"                           && ! File.Exists(absoluteUri.AbsolutePath)                          && _resFiles.Contains(filename))"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.PVCS,PVCSCommandArgument,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSCommandArgument.cs,ToString,The conditional expression  "(CommandValue is int) || (CommandValue is long) || (CommandValue is float) || (CommandValue is double)"  is complex.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CleanOutput,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CleanOutput,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetLanguage,The method has an empty catch block.
Magic Number,NAnt.Contrib.Tasks,COMRegisterTask,C:\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,RegisterExeServer,The following statement contains a magic number: bool exited = process.WaitForExit(5000);
Magic Number,NAnt.Contrib.Tasks,COMRegisterTask,C:\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,GetWin32ErrorMessage,The following statement contains a magic number: StringBuilder sb = new StringBuilder(1024);
Magic Number,NAnt.Contrib.Tasks,ConcatTask,C:\repos\nant_nantcontrib\src\Tasks\ConcatTask.cs,AppendFiles,The following statement contains a magic number: const int size = 64*1024;
Magic Number,NAnt.Contrib.Tasks,ConcatTask,C:\repos\nant_nantcontrib\src\Tasks\ConcatTask.cs,AppendFiles,The following statement contains a magic number: const int size = 64*1024;
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: try {                  do {                      if (ShowHeaders) {                          // output header                          DataTable schema = results.GetSchemaTable();                          if (schema != null) {                              writer.WriteLine();                                int totalHeaderSize = 0;                              foreach (DataRow row in schema.Rows) {                                  string columnName = row["ColumnName"].ToString();                                  writer.Write(columnName + new string(' '' 2));                                  totalHeaderSize += columnName.Length + 2;                              }                                writer.WriteLine();                                if (totalHeaderSize > 2) {                                  writer.WriteLine(new String('-'' totalHeaderSize - 2));                              }                          }                      }                                        // holds a value indicating whether an empty separator line                      // should be output                      bool sepLine = false;                        // output results                      while (results.Read()) {                          bool first = true;                          StringBuilder line = new StringBuilder(100);                          for (int i = 0; i < results.FieldCount; i++) {                              if (first) {                                  first = false;                              } else {                                  line.Append("' ");                              }                              line.Append(QuoteChar);                              line.Append(results[i].ToString());                              line.Append(QuoteChar);                          }                          // output result                          writer.WriteLine(line.ToString());                          // determine whether separator line should be output                          sepLine = line.Length > 0;                      }                      if (sepLine) {                          writer.WriteLine();                      }                  } while (results.NextResult());              } finally {                  results.Close();              }
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: try {                  do {                      if (ShowHeaders) {                          // output header                          DataTable schema = results.GetSchemaTable();                          if (schema != null) {                              writer.WriteLine();                                int totalHeaderSize = 0;                              foreach (DataRow row in schema.Rows) {                                  string columnName = row["ColumnName"].ToString();                                  writer.Write(columnName + new string(' '' 2));                                  totalHeaderSize += columnName.Length + 2;                              }                                writer.WriteLine();                                if (totalHeaderSize > 2) {                                  writer.WriteLine(new String('-'' totalHeaderSize - 2));                              }                          }                      }                                        // holds a value indicating whether an empty separator line                      // should be output                      bool sepLine = false;                        // output results                      while (results.Read()) {                          bool first = true;                          StringBuilder line = new StringBuilder(100);                          for (int i = 0; i < results.FieldCount; i++) {                              if (first) {                                  first = false;                              } else {                                  line.Append("' ");                              }                              line.Append(QuoteChar);                              line.Append(results[i].ToString());                              line.Append(QuoteChar);                          }                          // output result                          writer.WriteLine(line.ToString());                          // determine whether separator line should be output                          sepLine = line.Length > 0;                      }                      if (sepLine) {                          writer.WriteLine();                      }                  } while (results.NextResult());              } finally {                  results.Close();              }
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: try {                  do {                      if (ShowHeaders) {                          // output header                          DataTable schema = results.GetSchemaTable();                          if (schema != null) {                              writer.WriteLine();                                int totalHeaderSize = 0;                              foreach (DataRow row in schema.Rows) {                                  string columnName = row["ColumnName"].ToString();                                  writer.Write(columnName + new string(' '' 2));                                  totalHeaderSize += columnName.Length + 2;                              }                                writer.WriteLine();                                if (totalHeaderSize > 2) {                                  writer.WriteLine(new String('-'' totalHeaderSize - 2));                              }                          }                      }                                        // holds a value indicating whether an empty separator line                      // should be output                      bool sepLine = false;                        // output results                      while (results.Read()) {                          bool first = true;                          StringBuilder line = new StringBuilder(100);                          for (int i = 0; i < results.FieldCount; i++) {                              if (first) {                                  first = false;                              } else {                                  line.Append("' ");                              }                              line.Append(QuoteChar);                              line.Append(results[i].ToString());                              line.Append(QuoteChar);                          }                          // output result                          writer.WriteLine(line.ToString());                          // determine whether separator line should be output                          sepLine = line.Length > 0;                      }                      if (sepLine) {                          writer.WriteLine();                      }                  } while (results.NextResult());              } finally {                  results.Close();              }
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: try {                  do {                      if (ShowHeaders) {                          // output header                          DataTable schema = results.GetSchemaTable();                          if (schema != null) {                              writer.WriteLine();                                int totalHeaderSize = 0;                              foreach (DataRow row in schema.Rows) {                                  string columnName = row["ColumnName"].ToString();                                  writer.Write(columnName + new string(' '' 2));                                  totalHeaderSize += columnName.Length + 2;                              }                                writer.WriteLine();                                if (totalHeaderSize > 2) {                                  writer.WriteLine(new String('-'' totalHeaderSize - 2));                              }                          }                      }                                        // holds a value indicating whether an empty separator line                      // should be output                      bool sepLine = false;                        // output results                      while (results.Read()) {                          bool first = true;                          StringBuilder line = new StringBuilder(100);                          for (int i = 0; i < results.FieldCount; i++) {                              if (first) {                                  first = false;                              } else {                                  line.Append("' ");                              }                              line.Append(QuoteChar);                              line.Append(results[i].ToString());                              line.Append(QuoteChar);                          }                          // output result                          writer.WriteLine(line.ToString());                          // determine whether separator line should be output                          sepLine = line.Length > 0;                      }                      if (sepLine) {                          writer.WriteLine();                      }                  } while (results.NextResult());              } finally {                  results.Close();              }
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: try {                  do {                      if (ShowHeaders) {                          // output header                          DataTable schema = results.GetSchemaTable();                          if (schema != null) {                              writer.WriteLine();                                int totalHeaderSize = 0;                              foreach (DataRow row in schema.Rows) {                                  string columnName = row["ColumnName"].ToString();                                  writer.Write(columnName + new string(' '' 2));                                  totalHeaderSize += columnName.Length + 2;                              }                                writer.WriteLine();                                if (totalHeaderSize > 2) {                                  writer.WriteLine(new String('-'' totalHeaderSize - 2));                              }                          }                      }                                        // holds a value indicating whether an empty separator line                      // should be output                      bool sepLine = false;                        // output results                      while (results.Read()) {                          bool first = true;                          StringBuilder line = new StringBuilder(100);                          for (int i = 0; i < results.FieldCount; i++) {                              if (first) {                                  first = false;                              } else {                                  line.Append("' ");                              }                              line.Append(QuoteChar);                              line.Append(results[i].ToString());                              line.Append(QuoteChar);                          }                          // output result                          writer.WriteLine(line.ToString());                          // determine whether separator line should be output                          sepLine = line.Length > 0;                      }                      if (sepLine) {                          writer.WriteLine();                      }                  } while (results.NextResult());              } finally {                  results.Close();              }
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,The following statement contains a magic number: if (regKey != null) {                  foreach (string ver in regKey.GetSubKeyNames()) {                      Microsoft.Win32.RegistryKey regKeyCulture = regKey.OpenSubKey(string.Format("{0}\\{1}"' ver' lcid));                      if (regKeyCulture == null)                          continue;                        ushort tmpMajor = 0;                      ushort tmpMinor16 = 0;                      string [] parts = ver.Split('.');                      if (parts.Length > 0) {                          tmpMajor = (ushort) Convert.ToUInt16(parts[0]' 16);                          if (parts.Length > 1) {                              tmpMinor16 = Convert.ToUInt16(parts[1]' 16);  // Treat minor as hex                          }                      }                               if (major < tmpMajor  || (major == tmpMajor && minor16 <= tmpMinor16)) {                          // Found it..                          Microsoft.Win32.RegistryKey regKeyWin32 = regKeyCulture.OpenSubKey("win32");                          if (regKeyWin32 != null) {                              tlbFile = (string)regKeyWin32.GetValue("");                              regKeyWin32.Close();                              break;                          }                      }                  }                  regKey.Close();              }
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,The following statement contains a magic number: if (regKey != null) {                  foreach (string ver in regKey.GetSubKeyNames()) {                      Microsoft.Win32.RegistryKey regKeyCulture = regKey.OpenSubKey(string.Format("{0}\\{1}"' ver' lcid));                      if (regKeyCulture == null)                          continue;                        ushort tmpMajor = 0;                      ushort tmpMinor16 = 0;                      string [] parts = ver.Split('.');                      if (parts.Length > 0) {                          tmpMajor = (ushort) Convert.ToUInt16(parts[0]' 16);                          if (parts.Length > 1) {                              tmpMinor16 = Convert.ToUInt16(parts[1]' 16);  // Treat minor as hex                          }                      }                               if (major < tmpMajor  || (major == tmpMajor && minor16 <= tmpMinor16)) {                          // Found it..                          Microsoft.Win32.RegistryKey regKeyWin32 = regKeyCulture.OpenSubKey("win32");                          if (regKeyWin32 != null) {                              tlbFile = (string)regKeyWin32.GetValue("");                              regKeyWin32.Close();                              break;                          }                      }                  }                  regKey.Close();              }
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader(Project.GetFullPath(projectFile)' Encoding.ASCII)) {                  while ((fileLine = reader.ReadLine()) != null) {                      match = keyValueRegEx.Match(fileLine);                      if (!match.Success) {                          continue;                      }                        key = match.Groups["key"].Value;                      keyValue = match.Groups["value"].Value;                        switch (key) {                          case "Class":                          case "Module":                              // This is a class or module source file - extract the file name and add it to the sources fileset                              // The entry is of the form "Class=ClassName;ClassFile.cls"                              match = codeRegEx.Match(fileLine);                              if (match.Success) {                                  sources.Includes.Add(match.Groups["filename"].Value);                              }                              break;                          case "Designer":                          case "Form":                          case "UserControl":                          case "PropertyPage":                          case "ResFile32":                              // This is a form' control' or property page source file - add the file name to the sources fileset                              // The entry is of the form "Form=Form1.frm"                              sources.Includes.Add(keyValue.Trim('"'));                              break;                          case "Object":                          case "Reference":                              // This is a source file - extract the reference name and add it to the references fileset                              match = referenceRegEx.Match(fileLine);                              if (!match.Success) {                                  break;                              }                                string tlbName = match.Groups["tlbname"].Value;                              if (File.Exists(tlbName)) {                                  references.Includes.Add(tlbName);                              } else {                                  // the tlb filename embedded in the VBP file is just                                  // a hint about where to look for it. If the file isn't                                  // at that location' the typelib ID is used to lookup                                  // the file name                                    string temp = match.Groups["majorver"].Value;                                  ushort majorVer = 0;                                  if (key == "Object") {                                      // for OCX's major is a decimal value                                      majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                  } else {                                      // for dll's major is a hex value                                      majorVer = (ushort) Convert.ToUInt16(temp' 16);                                  }                                                                // minor is considered a hex value                                  temp = match.Groups["minorver"].Value;                                  ushort minorVer16 = Convert.ToUInt16(temp' 16);                                    temp = match.Groups["lcid"].Value;                                  uint lcid = 0;                                                                if (temp.Length != 0) {                                      lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                  }                                                                string tlbGuid = match.Groups["tlbguid"].Value;                                  Guid guid = new Guid(tlbGuid);                                    // find the type library file                                   tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                  if (tlbName == null) {                                      Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                           guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                  } else {                                      if (File.Exists(tlbName)) {                                          references.Includes.Add(tlbName);                                      } else {                                          Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                      }                                  }                              }                              break;                          case "ExeName32":                              // Store away the built file name so that we can check against it later                              // If the project was never built in the IDE' or the project file wasn't saved                              // after the build occurred' this setting won't exist. In that case' VB uses the                              // ProjectName as the DLL/EXE name                              outputFile = keyValue.Trim('"');                              break;                          case "Type":                              // Store away the project type - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectType = keyValue;                              break;                          case "Name":                              // Store away the project name - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectName = keyValue.Trim('"');                              break;                      }                  }                  reader.Close();              }
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader(Project.GetFullPath(projectFile)' Encoding.ASCII)) {                  while ((fileLine = reader.ReadLine()) != null) {                      match = keyValueRegEx.Match(fileLine);                      if (!match.Success) {                          continue;                      }                        key = match.Groups["key"].Value;                      keyValue = match.Groups["value"].Value;                        switch (key) {                          case "Class":                          case "Module":                              // This is a class or module source file - extract the file name and add it to the sources fileset                              // The entry is of the form "Class=ClassName;ClassFile.cls"                              match = codeRegEx.Match(fileLine);                              if (match.Success) {                                  sources.Includes.Add(match.Groups["filename"].Value);                              }                              break;                          case "Designer":                          case "Form":                          case "UserControl":                          case "PropertyPage":                          case "ResFile32":                              // This is a form' control' or property page source file - add the file name to the sources fileset                              // The entry is of the form "Form=Form1.frm"                              sources.Includes.Add(keyValue.Trim('"'));                              break;                          case "Object":                          case "Reference":                              // This is a source file - extract the reference name and add it to the references fileset                              match = referenceRegEx.Match(fileLine);                              if (!match.Success) {                                  break;                              }                                string tlbName = match.Groups["tlbname"].Value;                              if (File.Exists(tlbName)) {                                  references.Includes.Add(tlbName);                              } else {                                  // the tlb filename embedded in the VBP file is just                                  // a hint about where to look for it. If the file isn't                                  // at that location' the typelib ID is used to lookup                                  // the file name                                    string temp = match.Groups["majorver"].Value;                                  ushort majorVer = 0;                                  if (key == "Object") {                                      // for OCX's major is a decimal value                                      majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                  } else {                                      // for dll's major is a hex value                                      majorVer = (ushort) Convert.ToUInt16(temp' 16);                                  }                                                                // minor is considered a hex value                                  temp = match.Groups["minorver"].Value;                                  ushort minorVer16 = Convert.ToUInt16(temp' 16);                                    temp = match.Groups["lcid"].Value;                                  uint lcid = 0;                                                                if (temp.Length != 0) {                                      lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                  }                                                                string tlbGuid = match.Groups["tlbguid"].Value;                                  Guid guid = new Guid(tlbGuid);                                    // find the type library file                                   tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                  if (tlbName == null) {                                      Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                           guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                  } else {                                      if (File.Exists(tlbName)) {                                          references.Includes.Add(tlbName);                                      } else {                                          Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                      }                                  }                              }                              break;                          case "ExeName32":                              // Store away the built file name so that we can check against it later                              // If the project was never built in the IDE' or the project file wasn't saved                              // after the build occurred' this setting won't exist. In that case' VB uses the                              // ProjectName as the DLL/EXE name                              outputFile = keyValue.Trim('"');                              break;                          case "Type":                              // Store away the project type - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectType = keyValue;                              break;                          case "Name":                              // Store away the project name - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectName = keyValue.Trim('"');                              break;                      }                  }                  reader.Close();              }
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: if (today.Month < StartDate.Month) {                  --years;  // borrow from years                  months = (today.Month + 12) - StartDate.Month;              } else {                  months = today.Month - StartDate.Month;              }
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: months += years * 12;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: return months * 100 + days;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Started:                              Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Bound:                              string hostName = (string) orchestration["HostName"];                              if (hostName.Length == 0) {                                  throw new InvalidOperationException("Cannot enlist"                                      + " the orchestration if the host is not set.");                              }                              // first enlist the orchestration                              Enlist(orchestration' hostName);                              // next' start the orchestration                              goto default;                          default:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                              inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                              inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                              inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                              // start the orchestration                              orchestration.InvokeMethod("Start"' inParams' null);                              // log success                              Log(Level.Info' "Started orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be started."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Started:                              Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Bound:                              string hostName = (string) orchestration["HostName"];                              if (hostName.Length == 0) {                                  throw new InvalidOperationException("Cannot enlist"                                      + " the orchestration if the host is not set.");                              }                              // first enlist the orchestration                              Enlist(orchestration' hostName);                              // next' start the orchestration                              goto default;                          default:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                              inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                              inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                              inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                              // start the orchestration                              orchestration.InvokeMethod("Start"' inParams' null);                              // log success                              Log(Level.Info' "Started orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be started."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Started:                              Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Bound:                              string hostName = (string) orchestration["HostName"];                              if (hostName.Length == 0) {                                  throw new InvalidOperationException("Cannot enlist"                                      + " the orchestration if the host is not set.");                              }                              // first enlist the orchestration                              Enlist(orchestration' hostName);                              // next' start the orchestration                              goto default;                          default:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                              inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                              inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                              inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                              // start the orchestration                              orchestration.InvokeMethod("Start"' inParams' null);                              // log success                              Log(Level.Info' "Started orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be started."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Unbound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not bound."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Bound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not started."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Stopped:                              Log(Level.Verbose' "Orchestration \"{0}\" is already stopped."                                  + " Skipping."' name);                              break;                          default:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Stop");                              inParams["AutoDisableReceiveLocationFlag"] = AutoDisableReceiveLocation ? 2 : 1;                              inParams["AutoSuspendOrchestrationInstanceFlag"] = AutoSuspendOrchestrationInstance ? 2 : 1;                              // stop the orchestration                              orchestration.InvokeMethod("Stop"' inParams' null);                              // log success                              Log(Level.Info' "Stopped orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be stopped."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Unbound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not bound."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Bound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not started."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Stopped:                              Log(Level.Verbose' "Orchestration \"{0}\" is already stopped."                                  + " Skipping."' name);                              break;                          default:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Stop");                              inParams["AutoDisableReceiveLocationFlag"] = AutoDisableReceiveLocation ? 2 : 1;                              inParams["AutoSuspendOrchestrationInstanceFlag"] = AutoSuspendOrchestrationInstance ? 2 : 1;                              // stop the orchestration                              orchestration.InvokeMethod("Stop"' inParams' null);                              // log success                              Log(Level.Info' "Stopped orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be stopped."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: try {                      ServiceStatus status = GetStatus(orchestration);                      switch (status) {                          case ServiceStatus.Bound:                          case ServiceStatus.Unbound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not enlisted."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Started:                          case ServiceStatus.Stopped:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Unenlist");                              inParams["AutoTerminateOrchestrationInstanceFlag"] = AutoTerminateOrchestrationInstance ? 2 : 1;                              // unenlist the orchestration                              orchestration.InvokeMethod("Unenlist"' inParams' null);                              // log success                              Log(Level.Info' "Unenlisted orchestration \"{0}\""' name);                              break;                      }                  } catch (Exception ex) {                      throw new BuildException(string.Format(CultureInfo.InvariantCulture'                          "Orchestration \"{0}\" could not be unenlisted."' name)'                           Location' ex);                  }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,ReorderFiles,The following statement contains a magic number: foreach (string curDirFileName in curFileNames) {                  using (InstallerRecordReader reader = database.FindRecords("File"'                           new InstallerSearchClause("File"' Comparison.Equals' Path.GetFileName(curDirFileName)))) {                        if (reader.Read()) {                          reader.SetValue(7' LastSequence.ToString());                          reader.Commit();                          LastSequence++;                      } else {                          throw new BuildException("File " +                              Path.GetFileName(curDirFileName) +                              " not found during reordering.");                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: if (path.Length > 40) {                  return "..." + path.Substring(path.Length-37' 37);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: if (path.Length > 40) {                  return "..." + path.Substring(path.Length-37' 37);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: if (path.Length > 40) {                  return "..." + path.Substring(path.Length-37' 37);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortFile,The following statement contains a magic number: if (LongFile.Length <= 8) {                  return LongFile;              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortFile,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortPath,The following statement contains a magic number: if (LongPath.Length <= 8) {                  return LongPath;              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortPath,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortDir,The following statement contains a magic number: if (LongPath.Length <= 8) {                  return LongPath;              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortDir,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadTypeLibs,The following statement contains a magic number: using (InstallerTable typeLibTable = database.OpenTable("TypeLib")' registryTable = database.OpenTable("Registry")) {                  for (int i = 0; i < typeLibRecords.Count; i++) {                      TypeLibRecord tlbRecord = (TypeLibRecord)typeLibRecords[i];                        IntPtr pTypeLib = new IntPtr(0);                      int result = LoadTypeLib(tlbRecord.TypeLibFileName' ref pTypeLib);                      if (result != 0)                          continue;                        UCOMITypeLib typeLib = (UCOMITypeLib)Marshal.GetTypedObjectForIUnknown(                          pTypeLib' typeof(UCOMITypeLib));                      if (typeLib == null)                          continue;                        int helpContextId;                      string name' docString' helpFile;                        typeLib.GetDocumentation(                          -1' out name' out docString'                          out helpContextId' out helpFile);                        IntPtr pTypeLibAttr = new IntPtr(0);                      typeLib.GetLibAttr(out pTypeLibAttr);                        TYPELIBATTR typeLibAttr = (TYPELIBATTR)Marshal.PtrToStructure(pTypeLibAttr' typeof(TYPELIBATTR));                        string tlbCompName = (string)typeLibComponents[Path.GetFileName(tlbRecord.TypeLibFileName)];                        typeLibTable.InsertRecord("{"+typeLibAttr.guid.ToString().ToUpper()+"}"' Marshal.GetTypeLibLcid(typeLib)'                          tlbCompName' 256' docString == null ? name : docString' null' tlbRecord.FeatureName' 0);                        typeLib.ReleaseTLibAttr(pTypeLibAttr);                        // If a .NET type library wrapper for an assembly                      if (tlbRecord.AssemblyName == null)                          continue;                        // Get all the types defined in the typelibrary                      // that are not marked "noncreatable"                        int typeCount = typeLib.GetTypeInfoCount();                      for (int j = 0; j < typeCount; j++) {                          UCOMITypeInfo typeInfo = null;                          typeLib.GetTypeInfo(j' out typeInfo);                            if (typeInfo == null)                              continue;                            TYPEATTR typeAttr = GetTypeAttributes(typeInfo);                            if (IsCreatableCoClass(typeAttr)) {                              if (typeInfo is UCOMITypeInfo2) {                                  string className = GetClassName(typeInfo);                                    if (className != null) {                                      string clsid = "{" + typeAttr.guid.ToString().ToUpper() + "}";                                      AddClassToRegistryTable(registryTable' clsid' className' tlbRecord);                                  }                              }                          } else if (IsIDispatchInterface(typeAttr)) {                              string typeName' typeDocString' typeHelpFile;                              int typeHelpContextId;                                typeInfo.GetDocumentation(-1' out typeName'                                  out typeDocString' out typeHelpContextId'                                  out typeHelpFile);                                if (!(typeInfo is UCOMITypeInfo2))                                  continue;                                UCOMITypeInfo2 typeInfo2 = (UCOMITypeInfo2)typeInfo;                              if (typeInfo2 == null)                                  continue;                                object custData;                              Guid g = new Guid("0F21F359-AB84-41E8-9A78-36D110E6D2F9");                              typeInfo2.GetCustData(ref g' out custData);                                if (custData == null)                                  continue;                                string iid = "{" + typeAttr.guid.ToString().ToUpper() + "}";                                // Insert the Interface                                string typeLibComponent = (string)typeLibComponents[Path.GetFileName(tlbRecord.TypeLibFileName)];                                registryTable.InsertRecord(CreateIdentityGuid()' 0' @"Interface\" + iid'                                  null' typeName' typeLibComponent);                                registryTable.InsertRecord(CreateIdentityGuid()' 0' @"Interface\" + iid + @"\TypeLib"'                                  "Version"' "1.0"' typeLibComponent);                                registryTable.InsertRecord(CreateIdentityGuid()' 0' @"Interface\" + iid + @"\TypeLib"'                                  null' "{"+typeLibAttr.guid.ToString().ToUpper()+"}"' typeLibComponent);                                registryTable.InsertRecord(CreateIdentityGuid()' 0' @"Interface\" + iid + @"\ProxyStubClsid32"'                                  null' "{00020424-0000-0000-C000-000000000046}"' typeLibComponent);                                registryTable.InsertRecord(CreateIdentityGuid()' 0' @"Interface\" + iid + @"\ProxyStubClsid"'                                  null' "{00020424-0000-0000-C000-000000000046}"' typeLibComponent);                          }                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following statement contains a magic number: foreach (searchRegistry regKey in msi.search.registry) {                  int rootKey = GetRegistryRootByName(regKey.root.ToString());                    if (regKey.value == null)                      continue;                    foreach (searchRegistryValue value in regKey.value) {                      string signature = "SIG_" + value.setproperty;                      int msidbLocatorTypeRawValue = 1;                      switch (regKey.type) {                          case MSILocatorTypeDirFileReg64.directory:                              msidbLocatorTypeRawValue = 0;                              break;                          case MSILocatorTypeDirFileReg64.file:                              msidbLocatorTypeRawValue = 1;                              break;                          case MSILocatorTypeDirFileReg64.registry:                              msidbLocatorTypeRawValue = 2;                              break;                          case MSILocatorTypeDirFileReg64.Item64bit:                              msidbLocatorTypeRawValue = 16;                              break;                          }                        // Select the "RegLocator" Table                      using (InstallerTable regLocatorTable = database.OpenTable("RegLocator")) {                      // Insert the signature to the RegLocator Table                          regLocatorTable.InsertRecord(signature' rootKey.ToString()' regKey.path'                              value.name' msidbLocatorTypeRawValue);                            Log(Level.Verbose' "\t" + GetDisplayablePath(regKey.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null) ? string.Empty : value.name.Replace("}"' "}}").Replace("{"' "{{")));                      }                  }                                      }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following statement contains a magic number: foreach (searchRegistry regKey in msi.search.registry) {                  int rootKey = GetRegistryRootByName(regKey.root.ToString());                    if (regKey.value == null)                      continue;                    foreach (searchRegistryValue value in regKey.value) {                      string signature = "SIG_" + value.setproperty;                      int msidbLocatorTypeRawValue = 1;                      switch (regKey.type) {                          case MSILocatorTypeDirFileReg64.directory:                              msidbLocatorTypeRawValue = 0;                              break;                          case MSILocatorTypeDirFileReg64.file:                              msidbLocatorTypeRawValue = 1;                              break;                          case MSILocatorTypeDirFileReg64.registry:                              msidbLocatorTypeRawValue = 2;                              break;                          case MSILocatorTypeDirFileReg64.Item64bit:                              msidbLocatorTypeRawValue = 16;                              break;                          }                        // Select the "RegLocator" Table                      using (InstallerTable regLocatorTable = database.OpenTable("RegLocator")) {                      // Insert the signature to the RegLocator Table                          regLocatorTable.InsertRecord(signature' rootKey.ToString()' regKey.path'                              value.name' msidbLocatorTypeRawValue);                            Log(Level.Verbose' "\t" + GetDisplayablePath(regKey.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null) ? string.Empty : value.name.Replace("}"' "}}").Replace("{"' "{{")));                      }                  }                                      }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIniLocators,The following statement contains a magic number: foreach (searchIni iniKey in msi.search.ini) {                  int rootKey = 0;                                        switch (iniKey.type) {                      case MSILocatorTypeDirFileRaw.directory:                          rootKey = 0;                          break;                      case MSILocatorTypeDirFileRaw.file:                          rootKey = 1;                          break;                      case MSILocatorTypeDirFileRaw.raw:                          rootKey = 2;                          break;                  }                  string signature = "SIG_" + iniKey.setproperty;                    using (InstallerTable iniLocatorTable = database.OpenTable("IniLocator")) {                      // Insert the signature to the IniLocator Table                      iniLocatorTable.InsertRecord(signature' iniKey.filename' iniKey.section' iniKey.key' iniKey.field' rootKey);                      Log(Level.Verbose' "\t" + iniKey.filename);                  }                                      }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddRegistryLocaterEntry,The following statement contains a magic number: using (InstallerTable regLocatorTable = database.OpenTable("RegLocator")) {                  int rootKey = GetRegistryRootByName(key.root.ToString());                    if (key.value != null) {                      foreach (searchKeyValue value in key.value) {                          string signature = "SIG_" + value.setproperty;                          const int msidbLocatorTypeRawValue = 2;                            // Insert the signature to the RegLocator Table                          regLocatorTable.InsertRecord(signature' rootKey.ToString()' key.path'                              value.name' msidbLocatorTypeRawValue);                            Log(Level.Verbose' "\t" + GetDisplayablePath(key.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + value.name.Replace("}"' "}}").Replace("{"' "{{"));                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following statement contains a magic number: switch (root) {                  case "dependent":                      rootKey = -1;                      break;                  case "classes":                      rootKey = 0;                      break;                  case "user":                      rootKey = 1;                      break;                  case "machine":                      rootKey = 2;                      break;                  case "users":                      rootKey = 3;                      break;              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following statement contains a magic number: switch (root) {                  case "dependent":                      rootKey = -1;                      break;                  case "classes":                      rootKey = 0;                      break;                  case "user":                      rootKey = 1;                      break;                  case "machine":                      rootKey = 2;                      break;                  case "users":                      rootKey = 3;                      break;              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMinValue,The following statement contains a magic number: switch (category) {                  case MSITableColumnCategoryType.Integer:                      return -32767;                  case MSITableColumnCategoryType.DoubleInteger:                      return -2147483647;                  case MSITableColumnCategoryType.TimeDate:                      return 0;                  default:                      throw new ApplicationException("Unhandled category: "+ category.ToString());              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMinValue,The following statement contains a magic number: switch (category) {                  case MSITableColumnCategoryType.Integer:                      return -32767;                  case MSITableColumnCategoryType.DoubleInteger:                      return -2147483647;                  case MSITableColumnCategoryType.TimeDate:                      return 0;                  default:                      throw new ApplicationException("Unhandled category: "+ category.ToString());              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                  case MSITableColumnCategoryType.Integer:                      return 32767;                  case MSITableColumnCategoryType.DoubleInteger:                      return 2147483647;                  case MSITableColumnCategoryType.TimeDate:                      return 2147483647;                  default:                      throw new ApplicationException("Unhandled category: "+ category.ToString());              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                  case MSITableColumnCategoryType.Integer:                      return 32767;                  case MSITableColumnCategoryType.DoubleInteger:                      return 2147483647;                  case MSITableColumnCategoryType.TimeDate:                      return 2147483647;                  default:                      throw new ApplicationException("Unhandled category: "+ category.ToString());              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                  case MSITableColumnCategoryType.Integer:                      return 32767;                  case MSITableColumnCategoryType.DoubleInteger:                      return 2147483647;                  case MSITableColumnCategoryType.TimeDate:                      return 2147483647;                  default:                      throw new ApplicationException("Unhandled category: "+ category.ToString());              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadBinaryData,The following statement contains a magic number: using (InstallerTable binaryTable = database.OpenTable("Binary")) {                    // Add binary data from Task definition                  foreach (MSIBinary binary in msi.binaries) {                      string filePath = Path.Combine(Project.BaseDirectory' binary.value);                        Log(Level.Verbose' "\t" + filePath);                        int nameColSize = 50;                        if (binary.name.Length > nameColSize) {                          Log(Level.Warning' "Binary key name longer than " + nameColSize + " characters:\n\tName: " +                              binary.name + "\n\tLength: " + binary.name.Length.ToString());                      }                        if (File.Exists(filePath)) {                          binaryTable.InsertRecord(binary.name' new InstallerStream(filePath));                      } else {                          throw new BuildException(string.Format(CultureInfo.InvariantCulture'                               "Unable to open file '{0}'."' filePath)' Location);                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(title)) {                  summaryInfo.set_Property(2' title);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(subject)) {                  summaryInfo.set_Property(3' subject);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(author)) {                  summaryInfo.set_Property(4' author);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(keywords)) {                  summaryInfo.set_Property(5' keywords);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(comments)) {                  summaryInfo.set_Property(6' comments);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(template)) {                  summaryInfo.set_Property(7' template);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(9' revisionNumber);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(14' 200);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(14' 200);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(15' 2);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(15' 2);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: if (!String.IsNullOrEmpty(creatingApplication)) {                  summaryInfo.set_Property(18' creatingApplication);              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddAssemblyManifestRecords,The following statement contains a magic number: string version = asmName.Version.ToString(4);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetKeyFileName,The following statement contains a magic number: if ((component.attr & 4) != 0) {                  keyFileName = component.key.file;              } else if (files.Contains(component.directory + "|" + component.key.file)) {                  keyFileName = (string)files[component.directory + "|" + component.key.file];                  if (keyFileName == "KeyIsDotNetAssembly") {                      throw new BuildException("Cannot specify key '" + component.key.file +                          "' for component '" + component.name + "'. File has been detected as " +                          "being a COM component or Microsoft.NET assembly and is " +                          "being registered with its own component. Please specify " +                          "a different file in the same directory for this component's key.");                  }              } else {                  throw new BuildException("KeyFile \"" + component.key.file +                      "\" not found in Component \"" + component.name + "\".");              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,WriteResourceToFile,The following statement contains a magic number: using (Stream s = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName)) {                  using (FileStream fs = File.Create(fileName)) {                      byte[] buffer = new byte[4096];                      int bytesRead = s.Read(buffer' 0' buffer.Length);                      while (bytesRead > 0) {                          fs.Write(buffer' 0' bytesRead);                          bytesRead = s.Read(buffer' 0' buffer.Length);                      }                      fs.Flush();                  }                  s.Close();              }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerDatabase,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerDatabase.cs,GetSummaryInformation,The following statement contains a magic number: return _database.get_SummaryInformation(200);
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadLicense,The following statement contains a magic number: if (msi.license != null) {                  // Find the License control                  using (InstallerRecordReader recordReader = database.FindRecords("Control"' new InstallerSearchClause("Control"' Comparison.Equals' "AgreementText"))) {                      if (recordReader.Read()) {                          string licFile = Path.Combine(Project.BaseDirectory' msi.license);                          Log(Level.Verbose' "Storing license '{0}'."' licFile);                            // make sure license exists                          if (!File.Exists(licFile)) {                              throw new BuildException(string.Format(CultureInfo.InvariantCulture'                                  "License file '{0}' does not exist."' licFile)'                                  Location);                          }                            StreamReader licenseFileReader = null;                          try {                              licenseFileReader = File.OpenText(licFile);                          } catch (IOException ex) {                              throw new BuildException(string.Format(CultureInfo.InvariantCulture'                                  "Unable to open license file '{0}'."' licFile)'                                   Location' ex);                          }                            try {                              recordReader.SetValue(9' licenseFileReader.ReadToEnd());                              recordReader.Commit();                          } finally {                              licenseFileReader.Close();                          }                      } else {                          throw new BuildException("Couldn't find AgreementText Control in template database."'                               Location);                      }                  }                          }
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The following statement contains a magic number: const int TypicalInstallLevel = 3;
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The following statement contains a magic number: const int NonTypicalInstallLevel = 4;
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The following statement contains a magic number: if (msi.mergemodules != null) {                  MsmMerge2Class mergeClass = new MsmMerge2Class();                    int index = 1;                    Log(Level.Verbose' "Storing Merge Modules:");                    if (!Directory.Exists(TempPath))                      Directory.CreateDirectory(TempPath);                    // Merge module(s) assigned to a specific feature                  foreach (MSIMerge merge in msi.mergemodules) {                      // Get each merge module file name assigned to this feature                      //NAntFileSet modules = merge.modules;                        FileSet mergeSet = new FileSet();                      mergeSet.Parent = this;                      mergeSet.Project = Project;                      mergeSet.NamespaceManager = NamespaceManager;                        XmlElement modulesElem = (XmlElement)((XmlElement)_xmlNode).SelectSingleNode(                          "nant:mergemodules/nant:merge[@feature='" + merge.feature + "']/nant:modules"'                           NamespaceManager);                        mergeSet.Initialize(modulesElem);                        try {                          mergeClass.OpenDatabase(Database);                      } catch (FileLoadException fle) {                          throw new BuildException("Error while opening the database for merging."'                               Location' fle);                      }                        // Iterate each module assigned to this feature                      foreach (string mergeModule in mergeSet.FileNames) {                          Log(Level.Verbose' "\t" + Path.GetFileName(mergeModule));                            // Open the merge module (by Filename)                          try {                              mergeClass.OpenModule(mergeModule' 1033);                          } catch (Exception ex) {                              throw new BuildException(string.Format(CultureInfo.InvariantCulture'                                  "File '{0}' cannot be opened."' mergeModule)' Location' ex);                          }                            // Once the merge is complete' components in the module are attached to the                          // feature identified by Feature. This feature is not created and must be                          // an existing feature. Note that the Merge method gets all the feature                          // references in the module and substitutes the feature reference for all                          // occurrences of the null GUID in the module database.                            if (merge.configurationitems != null) {                              Log(Level.Verbose' "\t\tConfigurable item(s):");                              Hashtable configurations = new Hashtable();                              foreach (MSIConfigurationItem configItem in merge.configurationitems) {                                  if ((configItem.module == null || configItem.module.Equals(String.Empty)) || configItem.module.ToLower().Equals(mergeModule.ToLower()) || configItem.module.ToLower().Equals(Path.GetFileName(mergeModule.ToLower()))) {                                      if (configItem.module == null || configItem.module.Equals(String.Empty)) {                                          if (configurations[configItem.name] == null) {                                              configurations[configItem.name] = configItem.value;                                              Log(Level.Verbose' "\t\t\t{0}\tValue: {1}"'                                                   configItem.name' configItem.value);                                          }                                      } else {                                          configurations[configItem.name] = configItem.value;                                          Log(Level.Verbose' "\t\t\t{0}\tValue: {1}"'                                               configItem.name' configItem.value);                                      }                                  }                              }                              mergeClass.MergeEx(merge.feature' null' new MsmConfigureModule(configurations));                          } else {                              mergeClass.Merge(merge.feature' null);                          }                            string moduleCab = Path.Combine(Path.GetDirectoryName(Database)'                              "mergemodule" + index + ".cab");                            index++;                            mergeClass.ExtractCAB(moduleCab);                            if (File.Exists(moduleCab)) {                              // Extract the cabfile contents to a Temp directory                              try {                                  ExtractCabFileToTempDirectory(moduleCab);                              } finally {                                  File.Delete(moduleCab);                              }                          }                          mergeClass.CloseModule();                      }                      // Close and save the database                      mergeClass.CloseDatabase(true);                    }              }
Magic Number,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following statement contains a magic number: if (msi.moduleconfigurations != null) {                  Log(Level.Verbose' "Adding Module Configurations:");                    using (InstallerTable modConfigurationTable = database.OpenTable("ModuleConfiguration")) {                      // Add properties from Task definition                      foreach (MSMModuleConfiguration configuration in msi.moduleconfigurations) {                          // Insert the Property                            int format = 0;                            switch (configuration.format.ToString()) {                              case "text":                                  format = 0;                                  break;                              case "key":                                  format = 1;                                  break;                              case "integer":                                  format = 2;                                  break;                              case "bitfield":                                  format = 3;                                  break;                          }                            if (configuration.name == null || configuration.name == "") {                              throw new BuildException("Configuration with no name attribute detected."'                                  Location);                          }                            modConfigurationTable.InsertRecord(configuration.name' format' configuration.type'                              configuration.contextdata' configuration.defaultvalue' Convert.ToInt32(configuration.attr)'                              configuration.displayname' configuration.description' configuration.helplocation'                              configuration.helpkeyword);                            Log(Level.Verbose' "\t" + configuration.name);                        }                  }              }
Magic Number,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following statement contains a magic number: if (msi.moduleconfigurations != null) {                  Log(Level.Verbose' "Adding Module Configurations:");                    using (InstallerTable modConfigurationTable = database.OpenTable("ModuleConfiguration")) {                      // Add properties from Task definition                      foreach (MSMModuleConfiguration configuration in msi.moduleconfigurations) {                          // Insert the Property                            int format = 0;                            switch (configuration.format.ToString()) {                              case "text":                                  format = 0;                                  break;                              case "key":                                  format = 1;                                  break;                              case "integer":                                  format = 2;                                  break;                              case "bitfield":                                  format = 3;                                  break;                          }                            if (configuration.name == null || configuration.name == "") {                              throw new BuildException("Configuration with no name attribute detected."'                                  Location);                          }                            modConfigurationTable.InsertRecord(configuration.name' format' configuration.type'                              configuration.contextdata' configuration.defaultvalue' Convert.ToInt32(configuration.attr)'                              configuration.displayname' configuration.description' configuration.helplocation'                              configuration.helpkeyword);                            Log(Level.Verbose' "\t" + configuration.name);                        }                  }              }
Magic Number,NAnt.Contrib.Tasks.Perforce,P4Info,C:\repos\nant_nantcontrib\src\Tasks\Perforce\P4Info.cs,ExecuteTask,The following statement contains a magic number: Project.Properties[Host] = results[2].ToString();
Magic Number,NAnt.Contrib.Tasks.Perforce,P4Info,C:\repos\nant_nantcontrib\src\Tasks\Perforce\P4Info.cs,ExecuteTask,The following statement contains a magic number: Project.Properties[Root] = results[3].ToString();
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateChangelist,The following statement contains a magic number: if ( ( s.Length == 3) && ( s[0] == "Change" ) && ( s[2].StartsWith( "created." ) ) ) {                  return s[ 1 ];              } else {                  throw new BuildException( string.Format( "Unexpected P4 output = {0}"' output));              }
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateChangelist,The following statement contains a magic number: if ( ( s.Length == 3) && ( s[0] == "Change" ) && ( s[2].StartsWith( "created." ) ) ) {                  return s[ 1 ];              } else {                  throw new BuildException( string.Format( "Unexpected P4 output = {0}"' output));              }
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: foreach( string line in lines ) {                  if ( line.IndexOf( SearchPattern ) > -1 ) {                      string[] s2 = line.Split( ' ' );   // poor manz regex                      if(s2.Length > 2) {                          result = s2[2].Trim('\r');                      }                      break;                  }              }
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: foreach( string line in lines ) {                  if ( line.IndexOf( SearchPattern ) > -1 ) {                      string[] s2 = line.Split( ' ' );   // poor manz regex                      if(s2.Length > 2) {                          result = s2[2].Trim('\r');                      }                      break;                  }              }
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: if (SearchPatterns.Length > 0){                  string output = getProcessOutput("p4"'"info"'null);                      string[] lines = output.Split('\n' );                  for (int i = 0;i < SearchPatterns.Length;i++){                      if (SearchPatterns[i].ToString() != ""){                          foreach( string line in lines ) {                              if ( line.IndexOf( SearchPatterns[i].ToString() ) > -1 ) {                                  string[] s2 = line.Split( ' ' );   // poor manz regex                                  if(s2.Length > 2) {                                      results[i] = s2[2].Trim('\r');                                  }                              }                          }                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: if (SearchPatterns.Length > 0){                  string output = getProcessOutput("p4"'"info"'null);                      string[] lines = output.Split('\n' );                  for (int i = 0;i < SearchPatterns.Length;i++){                      if (SearchPatterns[i].ToString() != ""){                          foreach( string line in lines ) {                              if ( line.IndexOf( SearchPatterns[i].ToString() ) > -1 ) {                                  string[] s2 = line.Split( ' ' );   // poor manz regex                                  if(s2.Length > 2) {                                      results[i] = s2[2].Trim('\r');                                  }                              }                          }                      }                  }              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: if (Process.ExitCode < 0) {                  string message;                    switch (Process.ExitCode) {                      case -2:                          message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                          break;                      case -3:                          message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                          break;                      case -6:                          message = "An invalid option was specified for the command.";                          break;                      case -7:                          message = "An argument was specified for an option that does not take an argument.";                          break;                      case -8:                          message = "An argument is required for a flag but was not specified.";                          break;                      case -9:                          message = "The wrong type is specified for an option's argument.";                          break;                      case -10:                          message = "The specified file cannot be read.";                          break;                      case -11:                          message = "A required option for a command was not specified.";                          break;                      case -12:                          message = "There has been a security exception. The necessary privileges for the command are not granted.";                          break;                      default:                          message = "An unknown problem has occurred.";                          break;                  }                    Log(Level.Error' message);              }
Magic Number,NAnt.Contrib.Tasks.SourceSafe,AddTask,C:\repos\nant_nantcontrib\src\Tasks\SourceSafe\AddTask.cs,ExecuteTask,The following statement contains a magic number: const int FILE_ALREADY_ADDED = -2147166572;
Magic Number,NAnt.Contrib.Tasks.SourceSafe,History,C:\repos\nant_nantcontrib\src\Tasks\SourceSafe\History.cs,LogChange,The following statement contains a magic number: const int FILE_OR_PROJECT_DOES_NOT_EXIST = -2147166577;
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: if (null == _rootLocalFolder) {                  InterOpStarTeam.StStatusStaticsClass starTeamStatus = new InterOpStarTeam.StStatusStaticsClass();                  // status is irrelevant to us if we have specified a                  // root local folder.                  b.Append(pad(starTeamStatus.Name(reposFile.Status)' 12) + " ");              }
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name);
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name);
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: string host = bindingParts[2];
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: if (host == _serverName) {                  return 2;              }
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: return siteRunning ? basePriority << 4 : basePriority;
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,IsRunning,The following statement contains a magic number: return 2 == (int)website.Properties["ServerState"].Value;
Magic Number,NAnt.Contrib.Util,FileUtils,C:\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The following statement contains a magic number: if ((int) Environment.OSVersion.Platform != 128) {                  // for simplicity' we'll consider all filesystems on windows                  // to be case-insensitive                  caseInsensitive = true;                    // on windows' paths with different roots are located on different                  // drives' so only absolute names will do                  if (string.Compare(Path.GetPathRoot(fullBasePath)' Path.GetPathRoot(fullAbsolutePath)' caseInsensitive) != 0) {                      return fullAbsolutePath;                  }              }
Magic Number,NAnt.Contrib.Util,IniFile,C:\repos\nant_nantcontrib\src\Util\IniFile.cs,GetString,The following statement contains a magic number: System.Text.StringBuilder objResult = new System.Text.StringBuilder(256);
Missing Default,NAnt.Contrib.Tasks,GacTask,C:\repos\nant_nantcontrib\src\Tasks\GacTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (ActionType) {                  case ActionTypes.install:                      msg = "Installing";                      break;                  case ActionTypes.overwrite:                      msg = "Overwriting";                      break;                  case ActionTypes.uninstall:                      msg = "Uninstalling";                      break;              }
Missing Default,NAnt.Contrib.Tasks,RecordTask,C:\repos\nant_nantcontrib\src\Tasks\RecordTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Action) {                  case ActionType.Start:                      if (recorder == null) {                          recorder = new FileLogListener(LogName.FullName);                          Recorders.Add(recorder);                      }                      recorder.AutoFlush = AutoFlush;                      recorder.Logger.Threshold = ThresholdLevel;                      recorder.Start();                      AttachRecorder(recorder);                      break;                  case ActionType.Stop:                      if (recorder == null) {                          throw new BuildException(string.Format(CultureInfo.InvariantCulture'                              "Tried to stop non-existent recorder '{0}'"' LogName.FullName)'                               Location);                      }                      recorder.Stop();                      break;                  case ActionType.Close:                      if (recorder == null) {                          throw new BuildException(string.Format(CultureInfo.InvariantCulture'                              "Tried to close non-existent recorder '{0}'"' LogName.FullName)'                              Location);                      }                      DetachRecorder(recorder);                      recorder.Close();                      Recorders.Remove(recorder.Name);                      break;                  case ActionType.Flush:                      if (recorder == null) {                          throw new BuildException(string.Format(CultureInfo.InvariantCulture'                              "Tried to flush non-existent recorder '{0}'"' LogName.FullName)'                              Location);                      }                      recorder.Flush();                      break;              }
Missing Default,NAnt.Contrib.Tasks,SlingshotTask,C:\repos\nant_nantcontrib\src\Tasks\SlingshotTask.cs,CreateSolutionWriter,The following switch statement is missing a default case: switch (format) {                  case "nant":                      writer = new NAntWriter();                      break;                  case "nmake":                      writer = new NMakeWriter();                      break;              }
Missing Default,NAnt.Contrib.Tasks,TypedCollectionTask,C:\repos\nant_nantcontrib\src\Tasks\TypedCollectionTask.cs,GenerateCollectionClasses,The following switch statement is missing a default case: switch ( language ) {                          case "CSharp" :                              langExt = ".cs";                              generator = new CSharpCollectionGenerator();                              break;                          case "VB" :                              generator = new VBCollectionGenerator();                              langExt = ".vb";                              break;                      }
Missing Default,NAnt.Contrib.Tasks,ValidateXmlTask,C:\repos\nant_nantcontrib\src\Tasks\ValidateXmlTask.cs,OnValidationError,The following switch statement is missing a default case: switch (args.Severity) {                  case XmlSeverityType.Error:                      // increment error count                      _numErrors++;                      // output error message                      Log(Level.Info' "Validation error: {0}"' args.Message);                      break;                  case XmlSeverityType.Warning:                      // output error message                      Log(Level.Info' "Validation warning: {0}"' args.Message);                      break;              }
Missing Default,NAnt.Contrib.Tasks,Vb6Task,C:\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following switch statement is missing a default case: switch (key) {                          case "Class":                          case "Module":                              // This is a class or module source file - extract the file name and add it to the sources fileset                              // The entry is of the form "Class=ClassName;ClassFile.cls"                              match = codeRegEx.Match(fileLine);                              if (match.Success) {                                  sources.Includes.Add(match.Groups["filename"].Value);                              }                              break;                          case "Designer":                          case "Form":                          case "UserControl":                          case "PropertyPage":                          case "ResFile32":                              // This is a form' control' or property page source file - add the file name to the sources fileset                              // The entry is of the form "Form=Form1.frm"                              sources.Includes.Add(keyValue.Trim('"'));                              break;                          case "Object":                          case "Reference":                              // This is a source file - extract the reference name and add it to the references fileset                              match = referenceRegEx.Match(fileLine);                              if (!match.Success) {                                  break;                              }                                string tlbName = match.Groups["tlbname"].Value;                              if (File.Exists(tlbName)) {                                  references.Includes.Add(tlbName);                              } else {                                  // the tlb filename embedded in the VBP file is just                                  // a hint about where to look for it. If the file isn't                                  // at that location' the typelib ID is used to lookup                                  // the file name                                    string temp = match.Groups["majorver"].Value;                                  ushort majorVer = 0;                                  if (key == "Object") {                                      // for OCX's major is a decimal value                                      majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                  } else {                                      // for dll's major is a hex value                                      majorVer = (ushort) Convert.ToUInt16(temp' 16);                                  }                                                                // minor is considered a hex value                                  temp = match.Groups["minorver"].Value;                                  ushort minorVer16 = Convert.ToUInt16(temp' 16);                                    temp = match.Groups["lcid"].Value;                                  uint lcid = 0;                                                                if (temp.Length != 0) {                                      lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                  }                                                                string tlbGuid = match.Groups["tlbguid"].Value;                                  Guid guid = new Guid(tlbGuid);                                    // find the type library file                                   tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                  if (tlbName == null) {                                      Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                           guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                  } else {                                      if (File.Exists(tlbName)) {                                          references.Includes.Add(tlbName);                                      } else {                                          Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                      }                                  }                              }                              break;                          case "ExeName32":                              // Store away the built file name so that we can check against it later                              // If the project was never built in the IDE' or the project file wasn't saved                              // after the build occurred' this setting won't exist. In that case' VB uses the                              // ProjectName as the DLL/EXE name                              outputFile = keyValue.Trim('"');                              break;                          case "Type":                              // Store away the project type - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectType = keyValue;                              break;                          case "Name":                              // Store away the project name - we may need it to construct the built                              // file name if ExeName32 doesn't exist                              projectName = keyValue.Trim('"');                              break;                      }
Missing Default,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following switch statement is missing a default case: switch (status) {                          case ServiceStatus.Bound:                          case ServiceStatus.Unbound:                              Log(Level.Verbose' "Orchestration \"{0}\" is not enlisted."                                  + " Skipping."' name);                              break;                          case ServiceStatus.Started:                          case ServiceStatus.Stopped:                              // set-up parameters to pass to method                              ManagementBaseObject inParams = orchestration.GetMethodParameters("Unenlist");                              inParams["AutoTerminateOrchestrationInstanceFlag"] = AutoTerminateOrchestrationInstance ? 2 : 1;                              // unenlist the orchestration                              orchestration.InvokeMethod("Unenlist"' inParams' null);                              // log success                              Log(Level.Info' "Unenlisted orchestration \"{0}\""' name);                              break;                      }
Missing Default,NAnt.Contrib.Tasks.BizTalk,ReceiveLocation,C:\repos\nant_nantcontrib\src\Tasks\BizTalk\ReceiveLocation.cs,ExecuteTask,The following switch statement is missing a default case: switch (Action) {                              case ReceiveLocationAction.Disable:                                  Log(Level.Verbose' "Disabling \"{0}\" on \"{1}\"..."'                                      LocationName' Server);                                  try {                                      ManagementBaseObject inParams = receiveLocation.GetMethodParameters("Disable");                                      receiveLocation.InvokeMethod("Disable"' inParams' null);                                  } catch (Exception ex) {                                      ReportActionFailure("disabling"' ex' FailOnError);                                  }                                  break;                              case ReceiveLocationAction.Enable:                                  Log(Level.Verbose' "Enabling \"{0}\" on \"{1}\"..."'                                      LocationName' Server);                                  try {                                      ManagementBaseObject inParams = receiveLocation.GetMethodParameters("Enable");                                      receiveLocation.InvokeMethod("Enable"' inParams' null);                                  } catch (Exception ex) {                                      ReportActionFailure("enabling"' ex' FailOnError);                                  }                                  break;                          }
Missing Default,NAnt.Contrib.Tasks.Mks,ChangesTask,C:\repos\nant_nantcontrib\src\Tasks\Mks\History.cs,GetChanges,The following switch statement is missing a default case: switch (temp[0]) {                                          case "au":                                              hi.Author = temp[1];                                              break;                                          case "dt":                                              hi.RevisionDate = Convert.ToDateTime(temp[1]);                                              break;                                          case "de":                                              hi.Description = temp[1].Replace("\n"'"");                                              break;                                          case "rn":                                              hi.RevisionNumber=temp[1];                                              break;                                          case "mn":                                              memberHistory.MemberName=temp[1];                                              break;                                          case "mr":                                              memberHistory.MemberRevision=temp[1];                                              break;                                      }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following switch statement is missing a default case: switch (regKey.type) {                          case MSILocatorTypeDirFileReg64.directory:                              msidbLocatorTypeRawValue = 0;                              break;                          case MSILocatorTypeDirFileReg64.file:                              msidbLocatorTypeRawValue = 1;                              break;                          case MSILocatorTypeDirFileReg64.registry:                              msidbLocatorTypeRawValue = 2;                              break;                          case MSILocatorTypeDirFileReg64.Item64bit:                              msidbLocatorTypeRawValue = 16;                              break;                          }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadAppLocators,The following switch statement is missing a default case: switch (appKey.type) {                      case MSILocatorTypeDirFile.directory:                          rootKey = 0;                          break;                      case MSILocatorTypeDirFile.file:                          rootKey = 1;                          break;                  }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIniLocators,The following switch statement is missing a default case: switch (iniKey.type) {                      case MSILocatorTypeDirFileRaw.directory:                          rootKey = 0;                          break;                      case MSILocatorTypeDirFileRaw.file:                          rootKey = 1;                          break;                      case MSILocatorTypeDirFileRaw.raw:                          rootKey = 2;                          break;                  }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDepreciatedLocators,The following switch statement is missing a default case: switch (key.type.ToString()) {                      case "registry":                           AddRegistryLocaterEntry(database' key);                          break;                  }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following switch statement is missing a default case: switch (root) {                  case "dependent":                      rootKey = -1;                      break;                  case "classes":                      rootKey = 0;                      break;                  case "user":                      rootKey = 1;                      break;                  case "machine":                      rootKey = 2;                      break;                  case "users":                      rootKey = 3;                      break;              }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadApplicationSearch,The following switch statement is missing a default case: switch (key.type.ToString()) {                          case "registry":                               if (key.value != null) {                                  foreach (searchKeyValue value in key.value) {                                      properties.Add(value.setproperty);                                  }                              }                              break;                      }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSequence,The following switch statement is missing a default case: switch(sequence.type.ToString()) {                          case "installexecute":                              installExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                              break;                          case "installui":                              installUITable.InsertRecord(sequence.action' sequence.condition' sequence.value);                              break;                          case "adminexecute":                              adminExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                              break;                          case "adminui":                              adminUITable.InsertRecord(sequence.action' sequence.condition' sequence.value);                              break;                          case "advtexecute":                              advtExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                              break;                        }
Missing Default,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleSequence,The following switch statement is missing a default case: switch(sequence.type.ToString()) {                              case "installexecute":                                  currentTable = installExecuteTable;                                  break;                              case "installui":                                  currentTable = installUITable;                                  break;                              case "adminexecute":                                  currentTable = adminExecuteTable;                                  break;                              case "adminui":                                  currentTable = adminUITable;                                  break;                              case "advtexecute":                                  currentTable = advtExecuteTable;                                  break;                          }
Missing Default,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following switch statement is missing a default case: switch (configuration.format.ToString()) {                              case "text":                                  format = 0;                                  break;                              case "key":                                  format = 1;                                  break;                              case "integer":                                  format = 2;                                  break;                              case "bitfield":                                  format = 3;                                  break;                          }
Missing Default,NAnt.Contrib.Tasks.SourceSafe,CheckoutTask,C:\repos\nant_nantcontrib\src\Tasks\SourceSafe\CheckoutTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Item.Type) {                      case (int) VSSItemType.VSSITEM_PROJECT:                          Item.Checkout(""' LocalPath.FullName' flags);                          break;                      case (int) VSSItemType.VSSITEM_FILE:                          string filePath = System.IO.Path.Combine(LocalPath.FullName'                               Item.Name);                          Item.Checkout(""' filePath' flags);                          break;                  }
Missing Default,NAnt.Contrib.Tasks.SourceSafe,GetTask,C:\repos\nant_nantcontrib\src\Tasks\SourceSafe\GetTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Item.Type) {                      case (int) VSSItemType.VSSITEM_PROJECT:                          localPath = LocalPath.FullName;                          Item.Get(ref localPath' flags);                          break;                      case (int) VSSItemType.VSSITEM_FILE:                          localPath = System.IO.Path.Combine(LocalPath.FullName'                               Item.Name);                          Item.Get(ref localPath' flags);                          break;                  }
