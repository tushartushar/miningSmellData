Implementation smell,Namespace,Class,File,Method,Description
Long Method,NAnt.Contrib.Tasks,CodeStatsTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\CodeStatsTask.cs,ExecuteTask,The method has 112 lines of code.
Long Method,NAnt.Contrib.Tasks,SchemaValidatedTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SchemaValidatedTask.cs,Initialize,The method has 107 lines of code.
Long Method,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The method has 146 lines of code.
Long Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadTypeLibs,The method has 108 lines of code.
Long Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has 271 lines of code.
Long Method,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The method has 100 lines of code.
Long Method,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The method has 175 lines of code.
Long Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,visit,The method has 116 lines of code.
Long Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMCheckin,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMCheckin.cs,WriteCommandLineArguments,The method has 103 lines of code.
Long Method,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The method has 174 lines of code.
Complex Method,NAnt.Contrib.Tasks,CodeStatsTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\CodeStatsTask.cs,CountFile,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks,COMRegisterTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks,DicsoTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\DiscoTask.cs,ExecuteTask,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks,FxCopTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\FxCopTask.cs,BuildArguments,Cyclomatic complexity of the method is 17
Complex Method,NAnt.Contrib.Tasks,HxCompTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\HxCompTask.cs,ExecuteTask,Cyclomatic complexity of the method is 14
Complex Method,NAnt.Contrib.Tasks,HxRegTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\HxRegTask.cs,ExecuteTask,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks,MgmtClassGenTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\MgmtClassGenTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks,MsbuildTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\MSBuildTask.cs,ExecuteTask,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks,RecordTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\RecordTask.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks,SchemaValidatedTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SchemaValidatedTask.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,Cyclomatic complexity of the method is 20
Complex Method,NAnt.Contrib.Tasks,WsdlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\WsdlTask.cs,ExecuteTask,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks,XsdTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\XsdTask.cs,ExecuteTask,Cyclomatic complexity of the method is 14
Complex Method,NAnt.Contrib.Tasks.BizTalk,Unbind,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Unbind.cs,UnbindSendPorts,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.Mks,ChangesTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Mks\History.cs,GetChanges,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddDirectory,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRelativePath,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadTypeLibs,Cyclomatic complexity of the method is 14
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadApplicationSearch,Cyclomatic complexity of the method is 21
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadUserDefinedTables,Cyclomatic complexity of the method is 9
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetNonNullableMsiColumnType,Cyclomatic complexity of the method is 25
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,Cyclomatic complexity of the method is 15
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,Cyclomatic complexity of the method is 23
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,Cyclomatic complexity of the method is 28
Complex Method,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadComponents,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleSequence,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSAddFilesTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSAddFilesTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSGetTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSGetTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 12
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSProjectDatabaseTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSProjectDatabaseTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSPutTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSPutTask.cs,AddCommandLineArguments,Cyclomatic complexity of the method is 16
Complex Method,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,Cyclomatic complexity of the method is 11
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamAutoLabel,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamAutoLabel.cs,ExecuteTask,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckin,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckin.cs,visit,Cyclomatic complexity of the method is 14
Complex Method,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,visit,Cyclomatic complexity of the method is 17
Complex Method,NAnt.Contrib.Tasks.StarTeam,TreeBasedTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\TreeBasedTask.cs,IsIncluded,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMBranch,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMBranch.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMCheckin,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMCheckin.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 18
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMCheckout,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMCheckout.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 13
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMGet,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMGet.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 17
Complex Method,NAnt.Contrib.Tasks.SurroundSCM,SSCMLabel,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SurroundSCM\SSCMLabel.cs,WriteCommandLineArguments,Cyclomatic complexity of the method is 9
Complex Method,NAnt.Contrib.Tasks.Web,WebBase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,FindServerInstance,Cyclomatic complexity of the method is 9
Complex Method,NAnt.Contrib.Types.ClearCase,TypeKindConverter,C:\research\architectureSmells\repos\nant_nantcontrib\src\Types\ClearCase\TypeKind.cs,ConvertTo,Cyclomatic complexity of the method is 8
Complex Method,NAnt.Contrib.Util,FileUtils,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,Cyclomatic complexity of the method is 10
Complex Method,NAnt.Contrib.Util,SqlStatementList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\SqlStatementList.cs,ParseSql,Cyclomatic complexity of the method is 16
Long Parameter List,NAnt.Contrib.Tasks,COMRegisterTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,UnRegisterTypeLib,The method has 5 parameters. Parameters: libID' wVerMajor' wVerMinor' lCID' tSysKind
Long Parameter List,NAnt.Contrib.Tasks,COMRegisterTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,FormatMessage,The method has 7 parameters. Parameters: flags' source' messageId' languageId' buffer' size' arguments
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddDirectory,The method has 5 parameters. Parameters: database' directoryTable' ParentDirectory' Directory' Depth
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRelativePath,The method has 6 parameters. Parameters: database' Name' Parent' Default' Path' directoryTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,The method has 7 parameters. Parameters: database' fileName' fileAssembly' componentName' assemblyComponentName' classTable' progIdTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has 15 parameters. Parameters: database' directoryTable' Component' fileTable' ComponentDirectory' ComponentName' Sequence' msiAssemblyTable' msiAssemblyNameTable' componentTable' featureComponentTable' classTable' progIdTable' selfRegTable' modComponentTable
Long Parameter List,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The method has 7 parameters. Parameters: featureTable' conditionTable' ParentFeature' database' Feature' Depth' Order
Long Parameter List,NAnt.Contrib.Tasks.Msi,TypeLibRecord,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,TypeLibRecord,The method has 5 parameters. Parameters: LibId' TypeLibFileName' AssemblyName' FeatureName' AssemblyComponent
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDllEntry,The method has 5 parameters. Parameters: memid' invKind' pBstrDllName' pBstrName' pwOrdinal
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDocumentation,The method has 5 parameters. Parameters: index' strName' strDocString' dwHelpContext' strHelpFile
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,Invoke,The method has 7 parameters. Parameters: pvInstance' memid' wFlags' pDispParams' pVarResult' pExcepInfo' puArgErr
Long Parameter List,NAnt.Contrib.Tasks.Msi,UCOMITypeInfo2,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\TypeLibRecord.cs,GetDocumentation2,The method has 5 parameters. Parameters: memid' lcid' pbstrHelpString' pdwHelpStringContext' pbstrHelpStringDll
Long Parameter List,NAnt.Contrib.Util,IniFile,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\IniFile.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: lpApplicationName' lpKeyName' lpDefault' lpReturnedString' nSize' lpFileName
Long Identifier,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoResumeOrchestrationInstance is 32.
Long Identifier,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoSuspendOrchestrationInstance is 33.
Long Identifier,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,,The length of the parameter _autoTerminateOrchestrationInstance is 35.
Long Identifier,NAnt.Contrib.Tasks.SourceSafe,History,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SourceSafe\History.cs,LogChange,The length of the parameter FILE_OR_PROJECT_DOES_NOT_EXIST is 30.
Long Identifier,NAnt.Contrib.Tasks.Web,CreateVirtualDirectory,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\CreateVirtualDirectory.cs,,The length of the parameter _authPersistSingleRequestIfProxy is 32.
Long Identifier,NAnt.Contrib.Tasks.Web,CreateVirtualDirectory,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\CreateVirtualDirectory.cs,,The length of the parameter _authPersistSingleRequestAlwaysIfProxy is 38.
Long Statement,NAnt.Contrib.Tasks,TypedCollectionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\TypedCollectionTask.cs,GenerateCollectionClasses,The length of the statement  "                    string outputFile = Path.GetDirectoryName(path) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension( path ) + langExt;" is 131.
Long Statement,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The length of the statement  "            Regex referenceRegEx = new Regex(@"(Object|Reference)\s*=\s*({|\*\\G{)(?<tlbguid>[0-9\-A-Fa-f]*($^\.)*)}\#(?<majorver>[0-9a-fA-F($^\.)]*)\.(?<minorver>[0-9a-fA-F($^\.)]*)\#(?<lcid>[0-9]($^\.)*)(;|\#)(?<tlbname>[^\#\n\r]*)");" is 224.
Long Statement,NAnt.Contrib.Tasks.Mks,ChangesTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Mks\History.cs,GetChanges,The length of the statement  "                string cmd = "rlog  --filter=changed --headerFormat='¬' --trailerformat='' --format=¦au^{author}~dt^{date}~de^{description}~mn^{membername}~mr^{memberrev}~rn^{revision} -S '" + _sandbox + "'";" is 192.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductName property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productname_property.asp");" is 179.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductCode property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productcode_property.asp");" is 179.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("ProductVersion property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/productversion_property.asp");" is 185.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadProperties,The length of the statement  "                    throw new BuildException("Manufacturer property must be specified.  For more information please visit: http://msdn.microsoft.com/library/en-us/msi/setup/manufacturer_property.asp");" is 181.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The length of the statement  "                        if ((value.name == null || value.name == String.Empty) && (value.value == null || value.value == String.Empty) && (value.Value == null))" is 136.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(key.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null || value.name == String.Empty) ? "(Default)":value.name.Replace("}"' "}}").Replace("{"' "{{")));" is 219.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(regKey.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + ((value.name == null) ? string.Empty : value.name.Replace("}"' "}}").Replace("{"' "{{")));" is 195.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDirFileLocators,The length of the statement  "                        signatureTable.InsertRecord(signature' dirfileKey.file.name' dirfileKey.file.minversion' dirfileKey.file.maxversion' dirfileKey.file.minsize' dirfileKey.file.maxsize' dirfileKey.file.mindate' dirfileKey.file.maxdate' dirfileKey.file.languages);" is 244.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDepreciatedLocators,The length of the statement  "            Log(Level.Info' "* /search/key is depreciated.  Please use /search/app' /search/registry' /search/ini' or /search/dirfile syntax instead.");" is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddRegistryLocaterEntry,The length of the statement  "                        Log(Level.Verbose' "\t" + GetDisplayablePath(key.path.Replace("}"' "}}").Replace("{"' "{{")) + @"#" + value.name.Replace("}"' "}}").Replace("{"' "{{"));" is 152.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIconData,The length of the statement  "                        throw new BuildException(String.Format(CultureInfo.InvariantCulture' "Unable to open file:\n\t{0}"' iconPath)' Location);" is 121.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadUserDefinedTables,The length of the statement  "                    string tableStructureContents = tableStructureColumns + "\n" + tableStructureColumnTypes + "\n" + tableStructureKeys + "\n";" is 124.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,RemoveControlEvent,The length of the statement  "                        controlEvent.dialog' controlEvent.control' controlEvent.name' controlEvent.argument' controlEvent.condition)' Location);" is 120.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CheckAssemblyForCOMInterop,The length of the statement  "                                classTable.InsertRecord(clsid' "InprocServer32"' assemblyComponentName' progId' className' null' null' null' 0' null' null' featureName' 0);" is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                    if (basePath.EndsWith(Path.DirectorySeparatorChar.ToString()) || basePath.EndsWith(Path.AltDirectorySeparatorChar.ToString()))" is 126.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                    throw new BuildException(String.Format(CultureInfo.InvariantCulture' "Could not open file {0}"' filePath)' Location' ex);" is 121.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The length of the statement  "                        bool installToGAC = ((fileOverride == null) || (fileOverride.installtogac == false)) ? Component.installassembliestogac : fileOverride.installtogac;" is 148.
Long Statement,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadComponents,The length of the statement  "                            if (((XmlElement)_xmlNode).SelectSingleNode("registry/key[@component='" + component.name + "']/value[@id='" + keyFileName + "']") == null) {" is 140.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadBannerImage,The length of the statement  "                    using (InstallerRecordReader reader = database.FindRecords("Binary"' new InstallerSearchClause("Name"' Comparison.Equals' "bannrbmp"))) {" is 137.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadBackgroundImage,The length of the statement  "                    using (InstallerRecordReader reader = database.FindRecords("Binary"' new InstallerSearchClause("Name"' Comparison.Equals' "dlgbmp"))) {" is 135.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadLicense,The length of the statement  "                using (InstallerRecordReader recordReader = database.FindRecords("Control"' new InstallerSearchClause("Control"' Comparison.Equals' "AgreementText"))) {" is 152.
Long Statement,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The length of the statement  "                                if ((configItem.module == null || configItem.module.Equals(String.Empty)) || configItem.module.ToLower().Equals(mergeModule.ToLower()) || configItem.module.ToLower().Equals(Path.GetFileName(mergeModule.ToLower()))) {" is 216.
Long Statement,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleSignature,The length of the statement  "                Log(Level.Verbose' "Storing Module Signature:\n\tId:\t\t" + msi.id + "\n\tVersion:\t" + msi.version + "\n\tLanguage:\t" + Convert.ToInt32(msi.language));" is 153.
Long Statement,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The length of the statement  "                        StringReader stream = new StringReader("<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0' >" +" is 123.
Long Statement,NAnt.Contrib.Tasks.NUnit2Report,NUnit2ReportTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,ExecuteTask,The length of the statement  "                                "    <xsl:for-each select=\"//test-suite[@name='"+testSuiteName+"' and ancestor::test-suite[@name='"+parent+"'][position()=last()]]\">" +" is 137.
Long Statement,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetChangelistNumber,The length of the statement  "            string CurrentChangelists = getProcessOutput("p4"' string.Format("-u {0} -c {1} changes -s pending -u {0}"' User' Client )' null );" is 131.
Long Statement,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateClient,The length of the statement  "                "View:\n " + View + " " + Regex.Replace(View' @"//\w+/"' "//" + Clientname + "/") + "\n\n" );   //p4root/... //clientname/..." is 125.
Long Statement,NAnt.Contrib.Tasks.StarTeam,LabelTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\LabelTask.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass();" is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckin,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckin.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass();" is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamCheckout,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamCheckout.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass();" is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,createSnapshotView,The length of the statement  "            InterOpStarTeam.StViewConfigurationStaticsClass starTeamViewConfiguration = new InterOpStarTeam.StViewConfigurationStaticsClass();" is 130.
Long Statement,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The length of the statement  "            b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name);" is 166.
Long Statement,NAnt.Contrib.Tasks.StarTeam,TreeBasedTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\TreeBasedTask.cs,ExecuteTask,The length of the statement  "                        throw new BuildException(string.Format("Could not get handle to root folder ({0}) found."'starTeamRootFolder.Path)'Location'e);" is 127.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspAllowOutOfProcComponents: " + newVirDir.Properties["AspAllowOutOfProcComponents"].Value.ToString());" is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspEnableApplicationRestart: " + newVirDir.Properties["AspEnableApplicationRestart"].Value.ToString());" is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AspScriptErrorSentToBrowser: " + newVirDir.Properties["AspScriptErrorSentToBrowser"].Value.ToString());" is 120.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AuthPersistSingleRequestIfProxy: " + newVirDir.Properties["AuthPersistSingleRequestIfProxy"].Value.ToString());" is 128.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "AuthPersistSingleRequestAlwaysIfProxy: " + newVirDir.Properties["AuthPersistSingleRequestAlwaysIfProxy"].Value.ToString());" is 140.
Long Statement,NAnt.Contrib.Tasks.Web,VirtualDirectoryInfo,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\VirtualDirectoryInfo.cs,ExecuteTask,The length of the statement  "                    Log(Level.Info' "UNCAuthenticationPassthrough: " + newVirDir.Properties["UNCAuthenticationPassthrough"].Value.ToString());" is 122.
Long Statement,NAnt.Contrib.Util,FileUtils,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The length of the statement  "            while (i < absoluteLen && i < baseLen && string.Compare(fullBasePath[i].ToString()' fullAbsolutePath[i].ToString()' caseInsensitive) == 0) {" is 140.
Long Statement,NAnt.Contrib.Util,FileUtils,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The length of the statement  "            if (i == baseLen && (fullAbsolutePath[i] == Path.DirectorySeparatorChar || fullAbsolutePath[i-1] == Path.DirectorySeparatorChar)) {" is 131.
Complex Conditional,NAnt.Contrib.Tasks,XsdTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\XsdTask.cs,Initialize,The conditional expression  "Xdr == null && XmlDoc == null && Assembly == null && Schema == null"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistry,The conditional expression  "(value.name == null || value.name == String.Empty) && (value.value == null || value.value == String.Empty) && (value.Value == null)"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The conditional expression  "(configItem.module == null || configItem.module.Equals(String.Empty)) || configItem.module.ToLower().Equals(mergeModule.ToLower()) || configItem.module.ToLower().Equals(Path.GetFileName(mergeModule.ToLower()))"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.NUnit2Report,LocalResXmlResolver,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\NUnit2Report\NUnit2ReportTask.cs,GetEntity,The conditional expression  "absoluteUri.Scheme == SCHEME_MRES ||                      (absoluteUri.Scheme == "file"                          && ! File.Exists(absoluteUri.AbsolutePath)                         && _resFiles.Contains(filename))"  is complex.
Complex Conditional,NAnt.Contrib.Tasks.PVCS,PVCSCommandArgument,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSCommandArgument.cs,ToString,The conditional expression  "(CommandValue is int) || (CommandValue is long) || (CommandValue is float) || (CommandValue is double)"  is complex.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CleanOutput,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,CleanOutput,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddFiles,The method has an empty catch block.
Empty Catch Block,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetLanguage,The method has an empty catch block.
Magic Number,NAnt.Contrib.Tasks,COMRegisterTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,RegisterExeServer,The following statement contains a magic number: bool exited = process.WaitForExit(5000);
Magic Number,NAnt.Contrib.Tasks,COMRegisterTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\COMRegisterTask.cs,GetWin32ErrorMessage,The following statement contains a magic number: StringBuilder sb = new StringBuilder(1024);
Magic Number,NAnt.Contrib.Tasks,ConcatTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\ConcatTask.cs,AppendFiles,The following statement contains a magic number: const int size = 64*1024;
Magic Number,NAnt.Contrib.Tasks,ConcatTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\ConcatTask.cs,AppendFiles,The following statement contains a magic number: const int size = 64*1024;
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: writer.Write(columnName + new string(' '' 2));
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: totalHeaderSize += columnName.Length + 2;
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: writer.WriteLine(new String('-'' totalHeaderSize - 2));
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: totalHeaderSize > 2
Magic Number,NAnt.Contrib.Tasks,SqlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SqlTask.cs,ProcessResults,The following statement contains a magic number: StringBuilder line = new StringBuilder(100);
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,The following statement contains a magic number: tmpMajor = (ushort) Convert.ToUInt16(parts[0]' 16);
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,VB6GetTypeLibFile,The following statement contains a magic number: tmpMinor16 = Convert.ToUInt16(parts[1]' 16);
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following statement contains a magic number: switch (key) {                         case "Class":                         case "Module":                             // This is a class or module source file - extract the file name and add it to the sources fileset                             // The entry is of the form "Class=ClassName;ClassFile.cls"                             match = codeRegEx.Match(fileLine);                             if (match.Success) {                                 sources.Includes.Add(match.Groups["filename"].Value);                             }                             break;                         case "Designer":                         case "Form":                         case "UserControl":                         case "PropertyPage":                         case "ResFile32":                             // This is a form' control' or property page source file - add the file name to the sources fileset                             // The entry is of the form "Form=Form1.frm"                             sources.Includes.Add(keyValue.Trim('"'));                             break;                         case "Object":                         case "Reference":                             // This is a source file - extract the reference name and add it to the references fileset                             match = referenceRegEx.Match(fileLine);                             if (!match.Success) {                                 break;                             }                              string tlbName = match.Groups["tlbname"].Value;                             if (File.Exists(tlbName)) {                                 references.Includes.Add(tlbName);                             } else {                                 // the tlb filename embedded in the VBP file is just                                 // a hint about where to look for it. If the file isn't                                 // at that location' the typelib ID is used to lookup                                 // the file name                                  string temp = match.Groups["majorver"].Value;                                 ushort majorVer = 0;                                 if (key == "Object") {                                     // for OCX's major is a decimal value                                     majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                 } else {                                     // for dll's major is a hex value                                     majorVer = (ushort) Convert.ToUInt16(temp' 16);                                 }                                                              // minor is considered a hex value                                 temp = match.Groups["minorver"].Value;                                 ushort minorVer16 = Convert.ToUInt16(temp' 16);                                  temp = match.Groups["lcid"].Value;                                 uint lcid = 0;                                                              if (temp.Length != 0) {                                     lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                 }                                                              string tlbGuid = match.Groups["tlbguid"].Value;                                 Guid guid = new Guid(tlbGuid);                                  // find the type library file                                  tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                 if (tlbName == null) {                                     Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                          guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                 } else {                                     if (File.Exists(tlbName)) {                                         references.Includes.Add(tlbName);                                     } else {                                         Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                     }                                 }                             }                             break;                         case "ExeName32":                             // Store away the built file name so that we can check against it later                             // If the project was never built in the IDE' or the project file wasn't saved                             // after the build occurred' this setting won't exist. In that case' VB uses the                             // ProjectName as the DLL/EXE name                             outputFile = keyValue.Trim('"');                             break;                         case "Type":                             // Store away the project type - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectType = keyValue;                             break;                         case "Name":                             // Store away the project name - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectName = keyValue.Trim('"');                             break;                     }
Magic Number,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following statement contains a magic number: switch (key) {                         case "Class":                         case "Module":                             // This is a class or module source file - extract the file name and add it to the sources fileset                             // The entry is of the form "Class=ClassName;ClassFile.cls"                             match = codeRegEx.Match(fileLine);                             if (match.Success) {                                 sources.Includes.Add(match.Groups["filename"].Value);                             }                             break;                         case "Designer":                         case "Form":                         case "UserControl":                         case "PropertyPage":                         case "ResFile32":                             // This is a form' control' or property page source file - add the file name to the sources fileset                             // The entry is of the form "Form=Form1.frm"                             sources.Includes.Add(keyValue.Trim('"'));                             break;                         case "Object":                         case "Reference":                             // This is a source file - extract the reference name and add it to the references fileset                             match = referenceRegEx.Match(fileLine);                             if (!match.Success) {                                 break;                             }                              string tlbName = match.Groups["tlbname"].Value;                             if (File.Exists(tlbName)) {                                 references.Includes.Add(tlbName);                             } else {                                 // the tlb filename embedded in the VBP file is just                                 // a hint about where to look for it. If the file isn't                                 // at that location' the typelib ID is used to lookup                                 // the file name                                  string temp = match.Groups["majorver"].Value;                                 ushort majorVer = 0;                                 if (key == "Object") {                                     // for OCX's major is a decimal value                                     majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                 } else {                                     // for dll's major is a hex value                                     majorVer = (ushort) Convert.ToUInt16(temp' 16);                                 }                                                              // minor is considered a hex value                                 temp = match.Groups["minorver"].Value;                                 ushort minorVer16 = Convert.ToUInt16(temp' 16);                                  temp = match.Groups["lcid"].Value;                                 uint lcid = 0;                                                              if (temp.Length != 0) {                                     lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                 }                                                              string tlbGuid = match.Groups["tlbguid"].Value;                                 Guid guid = new Guid(tlbGuid);                                  // find the type library file                                  tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                 if (tlbName == null) {                                     Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                          guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                 } else {                                     if (File.Exists(tlbName)) {                                         references.Includes.Add(tlbName);                                     } else {                                         Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                     }                                 }                             }                             break;                         case "ExeName32":                             // Store away the built file name so that we can check against it later                             // If the project was never built in the IDE' or the project file wasn't saved                             // after the build occurred' this setting won't exist. In that case' VB uses the                             // ProjectName as the DLL/EXE name                             outputFile = keyValue.Trim('"');                             break;                         case "Type":                             // Store away the project type - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectType = keyValue;                             break;                         case "Name":                             // Store away the project name - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectName = keyValue.Trim('"');                             break;                     }
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: months = (today.Month + 12) - StartDate.Month;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: months += years * 12;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateMonthDayBuildNumber,The following statement contains a magic number: return months * 100 + days;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks,VersionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\VersionTask.cs,CalculateSecondsSinceMidnight,The following statement contains a magic number: return (today.Hour * 3600 + today.Minute * 60 + today.Second) / 10;
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Started:                             Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Bound:                             string hostName = (string) orchestration["HostName"];                             if (hostName.Length == 0) {                                 throw new InvalidOperationException("Cannot enlist"                                     + " the orchestration if the host is not set.");                             }                             // first enlist the orchestration                             Enlist(orchestration' hostName);                             // next' start the orchestration                             goto default;                         default:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                             inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                             inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                             inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                             // start the orchestration                             orchestration.InvokeMethod("Start"' inParams' null);                             // log success                             Log(Level.Info' "Started orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Started:                             Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Bound:                             string hostName = (string) orchestration["HostName"];                             if (hostName.Length == 0) {                                 throw new InvalidOperationException("Cannot enlist"                                     + " the orchestration if the host is not set.");                             }                             // first enlist the orchestration                             Enlist(orchestration' hostName);                             // next' start the orchestration                             goto default;                         default:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                             inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                             inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                             inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                             // start the orchestration                             orchestration.InvokeMethod("Start"' inParams' null);                             // log success                             Log(Level.Info' "Started orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StartOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Started:                             Log(Level.Verbose' "Orchestration \"{0}\" is already started."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Bound:                             string hostName = (string) orchestration["HostName"];                             if (hostName.Length == 0) {                                 throw new InvalidOperationException("Cannot enlist"                                     + " the orchestration if the host is not set.");                             }                             // first enlist the orchestration                             Enlist(orchestration' hostName);                             // next' start the orchestration                             goto default;                         default:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Start");                             inParams["AutoEnableReceiveLocationFlag"] = AutoEnableReceiveLocation ? 2 : 1;                             inParams["AutoResumeOrchestrationInstanceFlag"] = AutoResumeOrchestrationInstance ? 2 : 1;                             inParams["AutoStartSendPortsFlag"] = AutoStartSendPorts ? 2 : 1;                             // start the orchestration                             orchestration.InvokeMethod("Start"' inParams' null);                             // log success                             Log(Level.Info' "Started orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Unbound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not bound."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Bound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not started."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Stopped:                             Log(Level.Verbose' "Orchestration \"{0}\" is already stopped."                                 + " Skipping."' name);                             break;                         default:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Stop");                             inParams["AutoDisableReceiveLocationFlag"] = AutoDisableReceiveLocation ? 2 : 1;                             inParams["AutoSuspendOrchestrationInstanceFlag"] = AutoSuspendOrchestrationInstance ? 2 : 1;                             // stop the orchestration                             orchestration.InvokeMethod("Stop"' inParams' null);                             // log success                             Log(Level.Info' "Stopped orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.BizTalk,StopOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Unbound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not bound."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Bound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not started."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Stopped:                             Log(Level.Verbose' "Orchestration \"{0}\" is already stopped."                                 + " Skipping."' name);                             break;                         default:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Stop");                             inParams["AutoDisableReceiveLocationFlag"] = AutoDisableReceiveLocation ? 2 : 1;                             inParams["AutoSuspendOrchestrationInstanceFlag"] = AutoSuspendOrchestrationInstance ? 2 : 1;                             // stop the orchestration                             orchestration.InvokeMethod("Stop"' inParams' null);                             // log success                             Log(Level.Info' "Stopped orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following statement contains a magic number: switch (status) {                         case ServiceStatus.Bound:                         case ServiceStatus.Unbound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not enlisted."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Started:                         case ServiceStatus.Stopped:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Unenlist");                             inParams["AutoTerminateOrchestrationInstanceFlag"] = AutoTerminateOrchestrationInstance ? 2 : 1;                             // unenlist the orchestration                             orchestration.InvokeMethod("Unenlist"' inParams' null);                             // log success                             Log(Level.Info' "Unenlisted orchestration \"{0}\""' name);                             break;                     }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,ReorderFiles,The following statement contains a magic number: reader.SetValue(7' LastSequence.ToString());
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: return "..." + path.Substring(path.Length-37' 37);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: return "..." + path.Substring(path.Length-37' 37);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetDisplayablePath,The following statement contains a magic number: path.Length > 40
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortFile,The following statement contains a magic number: LongFile.Length <= 8
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortFile,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortPath,The following statement contains a magic number: LongPath.Length <= 8
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortPath,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortDir,The following statement contains a magic number: LongPath.Length <= 8
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetShortDir,The following statement contains a magic number: StringBuilder shortPath = new StringBuilder(255);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadTypeLibs,The following statement contains a magic number: typeLibTable.InsertRecord("{"+typeLibAttr.guid.ToString().ToUpper()+"}"' Marshal.GetTypeLibLcid(typeLib)'                         tlbCompName' 256' docString == null ? name : docString' null' tlbRecord.FeatureName' 0);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following statement contains a magic number: switch (regKey.type) {                         case MSILocatorTypeDirFileReg64.directory:                             msidbLocatorTypeRawValue = 0;                             break;                         case MSILocatorTypeDirFileReg64.file:                             msidbLocatorTypeRawValue = 1;                             break;                         case MSILocatorTypeDirFileReg64.registry:                             msidbLocatorTypeRawValue = 2;                             break;                         case MSILocatorTypeDirFileReg64.Item64bit:                             msidbLocatorTypeRawValue = 16;                             break;                         }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following statement contains a magic number: switch (regKey.type) {                         case MSILocatorTypeDirFileReg64.directory:                             msidbLocatorTypeRawValue = 0;                             break;                         case MSILocatorTypeDirFileReg64.file:                             msidbLocatorTypeRawValue = 1;                             break;                         case MSILocatorTypeDirFileReg64.registry:                             msidbLocatorTypeRawValue = 2;                             break;                         case MSILocatorTypeDirFileReg64.Item64bit:                             msidbLocatorTypeRawValue = 16;                             break;                         }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIniLocators,The following statement contains a magic number: switch (iniKey.type) {                     case MSILocatorTypeDirFileRaw.directory:                         rootKey = 0;                         break;                     case MSILocatorTypeDirFileRaw.file:                         rootKey = 1;                         break;                     case MSILocatorTypeDirFileRaw.raw:                         rootKey = 2;                         break;                 }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddRegistryLocaterEntry,The following statement contains a magic number: const int msidbLocatorTypeRawValue = 2;
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following statement contains a magic number: switch (root) {                 case "dependent":                     rootKey = -1;                     break;                 case "classes":                     rootKey = 0;                     break;                 case "user":                     rootKey = 1;                     break;                 case "machine":                     rootKey = 2;                     break;                 case "users":                     rootKey = 3;                     break;             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following statement contains a magic number: switch (root) {                 case "dependent":                     rootKey = -1;                     break;                 case "classes":                     rootKey = 0;                     break;                 case "user":                     rootKey = 1;                     break;                 case "machine":                     rootKey = 2;                     break;                 case "users":                     rootKey = 3;                     break;             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMinValue,The following statement contains a magic number: switch (category) {                 case MSITableColumnCategoryType.Integer:                     return -32767;                 case MSITableColumnCategoryType.DoubleInteger:                     return -2147483647;                 case MSITableColumnCategoryType.TimeDate:                     return 0;                 default:                     throw new ApplicationException("Unhandled category: "+ category.ToString());             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMinValue,The following statement contains a magic number: switch (category) {                 case MSITableColumnCategoryType.Integer:                     return -32767;                 case MSITableColumnCategoryType.DoubleInteger:                     return -2147483647;                 case MSITableColumnCategoryType.TimeDate:                     return 0;                 default:                     throw new ApplicationException("Unhandled category: "+ category.ToString());             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                 case MSITableColumnCategoryType.Integer:                     return 32767;                 case MSITableColumnCategoryType.DoubleInteger:                     return 2147483647;                 case MSITableColumnCategoryType.TimeDate:                     return 2147483647;                 default:                     throw new ApplicationException("Unhandled category: "+ category.ToString());             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                 case MSITableColumnCategoryType.Integer:                     return 32767;                 case MSITableColumnCategoryType.DoubleInteger:                     return 2147483647;                 case MSITableColumnCategoryType.TimeDate:                     return 2147483647;                 default:                     throw new ApplicationException("Unhandled category: "+ category.ToString());             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetMaxValue,The following statement contains a magic number: switch (category) {                 case MSITableColumnCategoryType.Integer:                     return 32767;                 case MSITableColumnCategoryType.DoubleInteger:                     return 2147483647;                 case MSITableColumnCategoryType.TimeDate:                     return 2147483647;                 default:                     throw new ApplicationException("Unhandled category: "+ category.ToString());             }
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadBinaryData,The following statement contains a magic number: int nameColSize = 50;
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(2' title);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(3' subject);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(4' author);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(5' keywords);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(6' comments);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(7' template);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(9' revisionNumber);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(14' 200);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(14' 200);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(15' 2);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(15' 2);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSummaryInformation,The following statement contains a magic number: summaryInfo.set_Property(18' creatingApplication);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,AddAssemblyManifestRecords,The following statement contains a magic number: string version = asmName.Version.ToString(4);
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetKeyFileName,The following statement contains a magic number: (component.attr & 4) != 0
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,WriteResourceToFile,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,NAnt.Contrib.Tasks.Msi,InstallerDatabase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerDatabase.cs,GetSummaryInformation,The following statement contains a magic number: return _database.get_SummaryInformation(200);
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadLicense,The following statement contains a magic number: recordReader.SetValue(9' licenseFileReader.ReadToEnd());
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The following statement contains a magic number: const int TypicalInstallLevel = 3;
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,AddFeature,The following statement contains a magic number: const int NonTypicalInstallLevel = 4;
Magic Number,NAnt.Contrib.Tasks.Msi,MsiCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsiCreationCommand.cs,LoadMergeModules,The following statement contains a magic number: mergeClass.OpenModule(mergeModule' 1033);
Magic Number,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following statement contains a magic number: switch (configuration.format.ToString()) {                             case "text":                                 format = 0;                                 break;                             case "key":                                 format = 1;                                 break;                             case "integer":                                 format = 2;                                 break;                             case "bitfield":                                 format = 3;                                 break;                         }
Magic Number,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following statement contains a magic number: switch (configuration.format.ToString()) {                             case "text":                                 format = 0;                                 break;                             case "key":                                 format = 1;                                 break;                             case "integer":                                 format = 2;                                 break;                             case "bitfield":                                 format = 3;                                 break;                         }
Magic Number,NAnt.Contrib.Tasks.Perforce,P4Info,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\P4Info.cs,ExecuteTask,The following statement contains a magic number: Project.Properties[Host] = results[2].ToString();
Magic Number,NAnt.Contrib.Tasks.Perforce,P4Info,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\P4Info.cs,ExecuteTask,The following statement contains a magic number: Project.Properties[Root] = results[3].ToString();
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateChangelist,The following statement contains a magic number: ( s.Length == 3) && ( s[0] == "Change" ) && ( s[2].StartsWith( "created." ) )
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,CreateChangelist,The following statement contains a magic number: ( s.Length == 3) && ( s[0] == "Change" ) && ( s[2].StartsWith( "created." ) )
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: result = s2[2].Trim('\r');
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: s2.Length > 2
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: results[i] = s2[2].Trim('\r');
Magic Number,NAnt.Contrib.Tasks.Perforce,Perforce,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Perforce\Perforce.cs,GetP4Info,The following statement contains a magic number: s2.Length > 2
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.PVCS,PVCSTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\PVCS\PVCSTask.cs,process_Exited,The following statement contains a magic number: switch (Process.ExitCode) {                     case -2:                         message = string.Format("The specified PCLI command ({0}) or user function was not found."' PCLICommandName);                         break;                     case -3:                         message = "A non-PCLI related error (eg. file permissions) or a command error occurred.";                         break;                     case -6:                         message = "An invalid option was specified for the command.";                         break;                     case -7:                         message = "An argument was specified for an option that does not take an argument.";                         break;                     case -8:                         message = "An argument is required for a flag but was not specified.";                         break;                     case -9:                         message = "The wrong type is specified for an option's argument.";                         break;                     case -10:                         message = "The specified file cannot be read.";                         break;                     case -11:                         message = "A required option for a command was not specified.";                         break;                     case -12:                         message = "There has been a security exception. The necessary privileges for the command are not granted.";                         break;                     default:                         message = "An unknown problem has occurred.";                         break;                 }
Magic Number,NAnt.Contrib.Tasks.SourceSafe,AddTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SourceSafe\AddTask.cs,ExecuteTask,The following statement contains a magic number: const int FILE_ALREADY_ADDED = -2147166572;
Magic Number,NAnt.Contrib.Tasks.SourceSafe,History,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SourceSafe\History.cs,LogChange,The following statement contains a magic number: const int FILE_OR_PROJECT_DOES_NOT_EXIST = -2147166577;
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: b.Append(pad(starTeamStatus.Name(reposFile.Status)' 12) + " ");
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name);
Magic Number,NAnt.Contrib.Tasks.StarTeam,StarTeamList,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\StarTeam\StarTeamList.cs,list,The following statement contains a magic number: b.Append( pad(getUserName(reposFile.Locker)' 20) + " " + reposFile.ModifiedTime.ToShortDateString() + rpad(reposFile.LocalSize.ToString()' 9) + " " + reposFile.Name);
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: string host = bindingParts[2];
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: return 2;
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,BindingPriority,The following statement contains a magic number: return siteRunning ? basePriority << 4 : basePriority;
Magic Number,NAnt.Contrib.Tasks.Web,WebBase,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Web\WebBase.cs,IsRunning,The following statement contains a magic number: return 2 == (int)website.Properties["ServerState"].Value;
Magic Number,NAnt.Contrib.Util,FileUtils,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\FileUtils.cs,GetRelativePath,The following statement contains a magic number: (int) Environment.OSVersion.Platform != 128
Magic Number,NAnt.Contrib.Util,IniFile,C:\research\architectureSmells\repos\nant_nantcontrib\src\Util\IniFile.cs,GetString,The following statement contains a magic number: System.Text.StringBuilder objResult = new System.Text.StringBuilder(256);
Missing Default,NAnt.Contrib.Tasks,GacTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\GacTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (ActionType) {                 case ActionTypes.install:                     msg = "Installing";                     break;                 case ActionTypes.overwrite:                     msg = "Overwriting";                     break;                 case ActionTypes.uninstall:                     msg = "Uninstalling";                     break;             }
Missing Default,NAnt.Contrib.Tasks,RecordTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\RecordTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Action) {                 case ActionType.Start:                     if (recorder == null) {                         recorder = new FileLogListener(LogName.FullName);                         Recorders.Add(recorder);                     }                     recorder.AutoFlush = AutoFlush;                     recorder.Logger.Threshold = ThresholdLevel;                     recorder.Start();                     AttachRecorder(recorder);                     break;                 case ActionType.Stop:                     if (recorder == null) {                         throw new BuildException(string.Format(CultureInfo.InvariantCulture'                             "Tried to stop non-existent recorder '{0}'"' LogName.FullName)'                              Location);                     }                     recorder.Stop();                     break;                 case ActionType.Close:                     if (recorder == null) {                         throw new BuildException(string.Format(CultureInfo.InvariantCulture'                             "Tried to close non-existent recorder '{0}'"' LogName.FullName)'                             Location);                     }                     DetachRecorder(recorder);                     recorder.Close();                     Recorders.Remove(recorder.Name);                     break;                 case ActionType.Flush:                     if (recorder == null) {                         throw new BuildException(string.Format(CultureInfo.InvariantCulture'                             "Tried to flush non-existent recorder '{0}'"' LogName.FullName)'                             Location);                     }                     recorder.Flush();                     break;             }
Missing Default,NAnt.Contrib.Tasks,SlingshotTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SlingshotTask.cs,CreateSolutionWriter,The following switch statement is missing a default case: switch (format) {                 case "nant":                     writer = new NAntWriter();                     break;                 case "nmake":                     writer = new NMakeWriter();                     break;             }
Missing Default,NAnt.Contrib.Tasks,TypedCollectionTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\TypedCollectionTask.cs,GenerateCollectionClasses,The following switch statement is missing a default case: switch ( language ) {                         case "CSharp" :                             langExt = ".cs";                             generator = new CSharpCollectionGenerator();                             break;                         case "VB" :                             generator = new VBCollectionGenerator();                             langExt = ".vb";                             break;                     }
Missing Default,NAnt.Contrib.Tasks,ValidateXmlTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\ValidateXmlTask.cs,OnValidationError,The following switch statement is missing a default case: switch (args.Severity) {                 case XmlSeverityType.Error:                     // increment error count                     _numErrors++;                     // output error message                     Log(Level.Info' "Validation error: {0}"' args.Message);                     break;                 case XmlSeverityType.Warning:                     // output error message                     Log(Level.Info' "Validation warning: {0}"' args.Message);                     break;             }
Missing Default,NAnt.Contrib.Tasks,Vb6Task,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Vb6Task.cs,ParseProjectFile,The following switch statement is missing a default case: switch (key) {                         case "Class":                         case "Module":                             // This is a class or module source file - extract the file name and add it to the sources fileset                             // The entry is of the form "Class=ClassName;ClassFile.cls"                             match = codeRegEx.Match(fileLine);                             if (match.Success) {                                 sources.Includes.Add(match.Groups["filename"].Value);                             }                             break;                         case "Designer":                         case "Form":                         case "UserControl":                         case "PropertyPage":                         case "ResFile32":                             // This is a form' control' or property page source file - add the file name to the sources fileset                             // The entry is of the form "Form=Form1.frm"                             sources.Includes.Add(keyValue.Trim('"'));                             break;                         case "Object":                         case "Reference":                             // This is a source file - extract the reference name and add it to the references fileset                             match = referenceRegEx.Match(fileLine);                             if (!match.Success) {                                 break;                             }                              string tlbName = match.Groups["tlbname"].Value;                             if (File.Exists(tlbName)) {                                 references.Includes.Add(tlbName);                             } else {                                 // the tlb filename embedded in the VBP file is just                                 // a hint about where to look for it. If the file isn't                                 // at that location' the typelib ID is used to lookup                                 // the file name                                  string temp = match.Groups["majorver"].Value;                                 ushort majorVer = 0;                                 if (key == "Object") {                                     // for OCX's major is a decimal value                                     majorVer = ushort.Parse(temp' CultureInfo.InvariantCulture);                                 } else {                                     // for dll's major is a hex value                                     majorVer = (ushort) Convert.ToUInt16(temp' 16);                                 }                                                              // minor is considered a hex value                                 temp = match.Groups["minorver"].Value;                                 ushort minorVer16 = Convert.ToUInt16(temp' 16);                                  temp = match.Groups["lcid"].Value;                                 uint lcid = 0;                                                              if (temp.Length != 0) {                                     lcid = (uint) double.Parse(temp' CultureInfo.InvariantCulture);                                 }                                                              string tlbGuid = match.Groups["tlbguid"].Value;                                 Guid guid = new Guid(tlbGuid);                                  // find the type library file                                  tlbName = VB6GetTypeLibFile(guid' majorVer' minorVer16' lcid);                                 if (tlbName == null) {                                     Log(Level.Warning' "Type library '{0}' version {1}.{2:x} could not be found."'                                          guid' match.Groups["majorver"].Value' match.Groups["minorver"].Value);                                 } else {                                     if (File.Exists(tlbName)) {                                         references.Includes.Add(tlbName);                                     } else {                                         Log(Level.Warning' "Type library file '{0}' does not exist."' tlbName);                                     }                                 }                             }                             break;                         case "ExeName32":                             // Store away the built file name so that we can check against it later                             // If the project was never built in the IDE' or the project file wasn't saved                             // after the build occurred' this setting won't exist. In that case' VB uses the                             // ProjectName as the DLL/EXE name                             outputFile = keyValue.Trim('"');                             break;                         case "Type":                             // Store away the project type - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectType = keyValue;                             break;                         case "Name":                             // Store away the project name - we may need it to construct the built                             // file name if ExeName32 doesn't exist                             projectName = keyValue.Trim('"');                             break;                     }
Missing Default,NAnt.Contrib.Tasks.BizTalk,UnenlistOrchestrationAction,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\Orchestration.cs,Invoke,The following switch statement is missing a default case: switch (status) {                         case ServiceStatus.Bound:                         case ServiceStatus.Unbound:                             Log(Level.Verbose' "Orchestration \"{0}\" is not enlisted."                                 + " Skipping."' name);                             break;                         case ServiceStatus.Started:                         case ServiceStatus.Stopped:                             // set-up parameters to pass to method                             ManagementBaseObject inParams = orchestration.GetMethodParameters("Unenlist");                             inParams["AutoTerminateOrchestrationInstanceFlag"] = AutoTerminateOrchestrationInstance ? 2 : 1;                             // unenlist the orchestration                             orchestration.InvokeMethod("Unenlist"' inParams' null);                             // log success                             Log(Level.Info' "Unenlisted orchestration \"{0}\""' name);                             break;                     }
Missing Default,NAnt.Contrib.Tasks.BizTalk,ReceiveLocation,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\BizTalk\ReceiveLocation.cs,ExecuteTask,The following switch statement is missing a default case: switch (Action) {                             case ReceiveLocationAction.Disable:                                 Log(Level.Verbose' "Disabling \"{0}\" on \"{1}\"..."'                                     LocationName' Server);                                 try {                                     ManagementBaseObject inParams = receiveLocation.GetMethodParameters("Disable");                                     receiveLocation.InvokeMethod("Disable"' inParams' null);                                 } catch (Exception ex) {                                     ReportActionFailure("disabling"' ex' FailOnError);                                 }                                 break;                             case ReceiveLocationAction.Enable:                                 Log(Level.Verbose' "Enabling \"{0}\" on \"{1}\"..."'                                     LocationName' Server);                                 try {                                     ManagementBaseObject inParams = receiveLocation.GetMethodParameters("Enable");                                     receiveLocation.InvokeMethod("Enable"' inParams' null);                                 } catch (Exception ex) {                                     ReportActionFailure("enabling"' ex' FailOnError);                                 }                                 break;                         }
Missing Default,NAnt.Contrib.Tasks.Mks,ChangesTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Mks\History.cs,GetChanges,The following switch statement is missing a default case: switch (temp[0]) {                                         case "au":                                             hi.Author = temp[1];                                             break;                                         case "dt":                                             hi.RevisionDate = Convert.ToDateTime(temp[1]);                                             break;                                         case "de":                                             hi.Description = temp[1].Replace("\n"'"");                                             break;                                         case "rn":                                             hi.RevisionNumber=temp[1];                                             break;                                         case "mn":                                             memberHistory.MemberName=temp[1];                                             break;                                         case "mr":                                             memberHistory.MemberRevision=temp[1];                                             break;                                     }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadRegistryLocators,The following switch statement is missing a default case: switch (regKey.type) {                         case MSILocatorTypeDirFileReg64.directory:                             msidbLocatorTypeRawValue = 0;                             break;                         case MSILocatorTypeDirFileReg64.file:                             msidbLocatorTypeRawValue = 1;                             break;                         case MSILocatorTypeDirFileReg64.registry:                             msidbLocatorTypeRawValue = 2;                             break;                         case MSILocatorTypeDirFileReg64.Item64bit:                             msidbLocatorTypeRawValue = 16;                             break;                         }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadAppLocators,The following switch statement is missing a default case: switch (appKey.type) {                     case MSILocatorTypeDirFile.directory:                         rootKey = 0;                         break;                     case MSILocatorTypeDirFile.file:                         rootKey = 1;                         break;                 }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadIniLocators,The following switch statement is missing a default case: switch (iniKey.type) {                     case MSILocatorTypeDirFileRaw.directory:                         rootKey = 0;                         break;                     case MSILocatorTypeDirFileRaw.file:                         rootKey = 1;                         break;                     case MSILocatorTypeDirFileRaw.raw:                         rootKey = 2;                         break;                 }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadDepreciatedLocators,The following switch statement is missing a default case: switch (key.type.ToString()) {                     case "registry":                          AddRegistryLocaterEntry(database' key);                         break;                 }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,GetRegistryRootByName,The following switch statement is missing a default case: switch (root) {                 case "dependent":                     rootKey = -1;                     break;                 case "classes":                     rootKey = 0;                     break;                 case "user":                     rootKey = 1;                     break;                 case "machine":                     rootKey = 2;                     break;                 case "users":                     rootKey = 3;                     break;             }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadApplicationSearch,The following switch statement is missing a default case: switch (key.type.ToString()) {                         case "registry":                              if (key.value != null) {                                 foreach (searchKeyValue value in key.value) {                                     properties.Add(value.setproperty);                                 }                             }                             break;                     }
Missing Default,NAnt.Contrib.Tasks.Msi,InstallerCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\InstallerCreationCommand.cs,LoadSequence,The following switch statement is missing a default case: switch(sequence.type.ToString()) {                         case "installexecute":                             installExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                             break;                         case "installui":                             installUITable.InsertRecord(sequence.action' sequence.condition' sequence.value);                             break;                         case "adminexecute":                             adminExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                             break;                         case "adminui":                             adminUITable.InsertRecord(sequence.action' sequence.condition' sequence.value);                             break;                         case "advtexecute":                             advtExecuteTable.InsertRecord(sequence.action' sequence.condition' sequence.value);                             break;                      }
Missing Default,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleSequence,The following switch statement is missing a default case: switch(sequence.type.ToString()) {                             case "installexecute":                                 currentTable = installExecuteTable;                                 break;                             case "installui":                                 currentTable = installUITable;                                 break;                             case "adminexecute":                                 currentTable = adminExecuteTable;                                 break;                             case "adminui":                                 currentTable = adminUITable;                                 break;                             case "advtexecute":                                 currentTable = advtExecuteTable;                                 break;                         }
Missing Default,NAnt.Contrib.Tasks.Msi,MsmCreationCommand,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\Msi\MsmCreationCommand.cs,LoadModuleConfiguration,The following switch statement is missing a default case: switch (configuration.format.ToString()) {                             case "text":                                 format = 0;                                 break;                             case "key":                                 format = 1;                                 break;                             case "integer":                                 format = 2;                                 break;                             case "bitfield":                                 format = 3;                                 break;                         }
Missing Default,NAnt.Contrib.Tasks.SourceSafe,CheckoutTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SourceSafe\CheckoutTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Item.Type) {                     case (int) VSSItemType.VSSITEM_PROJECT:                         Item.Checkout(""' LocalPath.FullName' flags);                         break;                     case (int) VSSItemType.VSSITEM_FILE:                         string filePath = System.IO.Path.Combine(LocalPath.FullName'                              Item.Name);                         Item.Checkout(""' filePath' flags);                         break;                 }
Missing Default,NAnt.Contrib.Tasks.SourceSafe,GetTask,C:\research\architectureSmells\repos\nant_nantcontrib\src\Tasks\SourceSafe\GetTask.cs,ExecuteTask,The following switch statement is missing a default case: switch (Item.Type) {                     case (int) VSSItemType.VSSITEM_PROJECT:                         localPath = LocalPath.FullName;                         Item.Get(ref localPath' flags);                         break;                     case (int) VSSItemType.VSSITEM_FILE:                         localPath = System.IO.Path.Combine(LocalPath.FullName'                              Item.Name);                         Item.Get(ref localPath' flags);                         break;                 }
