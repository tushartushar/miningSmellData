Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PiperProject.Common.Actors,Crypto,C:\repos\silvenga_Piper\PiperProject.Common\Actors\Crypto.cs,Encrypt,Cyclomatic complexity of the method is 11
Complex Method,PiperProject.Common.Actors,Crypto,C:\repos\silvenga_Piper\PiperProject.Common\Actors\Crypto.cs,Decrypt,Cyclomatic complexity of the method is 11
Magic Number,PiperProject.Common.Actors,Crypto,C:\repos\silvenga_Piper\PiperProject.Common\Actors\Crypto.cs,GenerateSalt,The following statement contains a magic number: return Encoding.ASCII.GetBytes (hashed.Substring (0' 16));  
Magic Number,PiperProject.Common.Actors,Crypto,C:\repos\silvenga_Piper\PiperProject.Common\Actors\Crypto.cs,Encrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' salt)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new AesManaged ()) {  		using (var encryptor = symmetricKey.CreateEncryptor (keyBytes' salt)) {  			using (var memoryStream = new MemoryStream ()) {  				using (var cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  					cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  					cryptoStream.FlushFinalBlock ();  					var cipherTextBytes = memoryStream.ToArray ();  					return Convert.ToBase64String (cipherTextBytes);  				}  			}  		}  	}  }  
Magic Number,PiperProject.Common.Actors,Crypto,C:\repos\silvenga_Piper\PiperProject.Common\Actors\Crypto.cs,Decrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' salt)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new AesManaged ()) {  		using (var decryptor = symmetricKey.CreateDecryptor (keyBytes' salt)) {  			using (var memoryStream = new MemoryStream (cipherTextBytes)) {  				using (var cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  					var plainTextBytes = new byte[cipherTextBytes.Length];  					var decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  					return Encoding.UTF8.GetString (plainTextBytes' 0' decryptedByteCount);  				}  			}  		}  	}  }  
