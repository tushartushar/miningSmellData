Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,,The length of the parameter ScenarioExecutionExceptionCtor is 30.
Long Statement,LightBDD.Framework.Configuration,FrameworkConfigurationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Configuration\FrameworkConfigurationExtensions.cs,RegisterFrameworkDefaultReportWriters,The length of the statement  "            return configuration.Add(new ReportFileWriter(new HtmlReportFormatter()' "~" + Path.DirectorySeparatorChar + "Reports" + Path.DirectorySeparatorChar + "FeaturesReport.html")); " is 175.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeBetween,The length of the statement  "            return composer.ComposeSimple<T>(formatter => $"between '{formatter.FormatValue(a)}' and '{formatter.FormatValue(b)}'"' x => x != null && Math.Abs(x.CompareTo(a) + x.CompareTo(b)) < 2); " is 185.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeGreaterThan,The length of the statement  "            return composer.ComposeSimple<T>(formatter => $"greater than '{formatter.FormatValue(value)}'"' x => x != null && x.CompareTo(value) > 0); " is 138.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeLessThan,The length of the statement  "            return composer.ComposeSimple<T>(formatter => $"less than '{formatter.FormatValue(value)}'"' x => x != null && x.CompareTo(value) < 0); " is 135.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeGreaterOrEqual,The length of the statement  "            return composer.ComposeSimple<T>(formatter => $"greater or equal '{formatter.FormatValue(value)}'"' x => x != null && x.CompareTo(value) >= 0); " is 143.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeLessOrEqual,The length of the statement  "            return composer.ComposeSimple<T>(formatter => $"less or equal '{formatter.FormatValue(value)}'"' x => x != null && x.CompareTo(value) <= 0); " is 140.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeAllTrue,The length of the statement  "            return composer.Compose(new AndExpectation<T>("all true "' expectationBuilder.Select(x => x.Invoke(Expect.To)).ToArray())); " is 123.
Long Statement,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeAnyTrue,The length of the statement  "            return composer.Compose(new OrExpectation<T>("any true "' expectationBuilder.Select(x => x.Invoke(Expect.To)).ToArray())); " is 122.
Long Statement,LightBDD.Framework.Expectations.Implementation,CastExpectation<TDerived;TBase>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\Implementation\CastExpectation.cs,Verify,The length of the statement  "            return ExpectationResult.Failure($"value of type '{value.GetType().Name}' cannot be cast to '{typeof(TDerived).Name}'"); " is 120.
Long Statement,LightBDD.Framework.Expectations.Implementation,EqualCollection<T>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\Implementation\EqualCollection.cs,Verify,The length of the statement  "                        details.Add($"[{i}]: expected: '{formattingService.FormatValue(_expected[i])}'' but got: '{formattingService.FormatValue(item)}'"); " is 131.
Long Statement,LightBDD.Framework.Formatting,FormatCollectionAttribute,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Formatting\FormatCollectionAttribute.cs,FormatValue,The length of the statement  "            return string.Join(_separator' ((IEnumerable)value).Cast<object>().Select(o => string.Format(_valueFormat' formattingService.FormatValue(o)))); " is 143.
Long Statement,LightBDD.Framework.Formatting.Values,CollectionFormatter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Formatting\Values\CollectionFormatter.cs,FormatValue,The length of the statement  "            return string.Format(_containerFormat' string.Join(_separator' ((IEnumerable)value).Cast<object>().Select(formattingService.FormatValue))); " is 139.
Long Statement,LightBDD.Framework.Implementation,Reflector,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Implementation\Reflector.cs,GetMemberName,The length of the statement  "            throw new InvalidOperationException($"Expected {nameof(columnExpression)} to be member expression' got: {columnExpression}"); " is 125.
Long Statement,LightBDD.Framework.Notification,DefaultProgressNotifier,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Notification\DefaultProgressNotifier.cs,NotifyStepFinished,The length of the statement  "                $"  STEP {step.Info.GroupPrefix}{step.Info.Number}/{step.Info.GroupPrefix}{step.Info.Total}: {step.Info.Name} ({step.Status} after {step.ExecutionTime.Duration.FormatPretty()})" " is 177.
Long Statement,LightBDD.Framework.Notification.Implementation,ParallelProgressNotifier,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Notification\Implementation\ParallelProgressNotifier.cs,NotifyProgress,The length of the statement  "            var header = $"Fi={progress.FinishedScenarios:D3}'Fa={progress.FailedScenarios:D3}'Pe={progress.PendingScenarios:D3} #{_currentScenarioNumber'3}> "; " is 148.
Long Statement,LightBDD.Framework.Notification.Implementation,StatefulScenarioProgressNotifierProvider<TFixture>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Notification\Implementation\StatefulScenarioProgressNotifierProvider.cs,Provide,The length of the statement  "            throw new InvalidOperationException($"Unable to create {nameof(IScenarioProgressNotifier)}. Expected fixture of type '{typeof(TFixture)}' while got '{fixture.GetType()}'."); " is 173.
Long Statement,LightBDD.Framework.Parameters,TableValidator<TRow>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\TableValidator.cs,GetExpectedRowResults,The length of the statement  "                .Select(c => new ValueResult(c.Expectation.Invoke(null).Format(FormattingService)' ColumnValue.None.Format(FormattingService)' ParameterVerificationStatus.NotProvided' null/*$"{c.Name}: Value not provided"*/)) " is 209.
Long Statement,LightBDD.Framework.Parameters,VerifiableDataTable<TRow>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\VerifiableDataTable.cs,SetActual,The length of the statement  "            SetRows(ExpectedRows.Select(expected => new RowData(TableRowType.Matching' expected' Evaluate(actualRowLookup' expected)))); " is 124.
Long Statement,LightBDD.Framework.Parameters,VerifiableTable<TRow>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\VerifiableTable.cs,GetResultLazily,The length of the statement  "            return _details = new TabularParameterDetails(GetColumnResults()' GetExpectedRowResults()' ParameterVerificationStatus.NotProvided); " is 132.
Long Statement,LightBDD.Framework.Parameters,VerifiableTable<TRow>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\VerifiableTable.cs,ToRowResult,The length of the statement  "                var actual = row.Actual.Exception == null && row.Actual.Value != null ? c.GetValue(row.Actual.Value) : ColumnValue.None; " is 120.
Long Statement,LightBDD.Framework.Parameters,VerifiableTableColumn,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\VerifiableTableColumn.cs,FromColumnInfo,The length of the statement  "            return new VerifiableTableColumn(columnInfo.Name' false' columnInfo.GetValue' expectedColumnValue => Expect.To.Equal(expectedColumnValue)); " is 139.
Long Statement,LightBDD.Framework.Parameters.Implementation,TableColumnProvider,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\Implementation\TableColumnProvider.cs,AsPoco,The length of the statement  "                .Select(property => new ColumnInfo(property.Name' r => r != null ? ColumnValue.From(property.GetValue(r)) : ColumnValue.None)) " is 126.
Long Statement,LightBDD.Framework.Parameters.Implementation,TableColumnProvider,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Parameters\Implementation\TableColumnProvider.cs,AsExpandoColumns,The length of the statement  "                .Select(name => new ColumnInfo(name' row => ((IDictionary<string' object>)row).TryGetValue(name' out var value) ? ColumnValue.From(value) : ColumnValue.None)) " is 158.
Long Statement,LightBDD.Framework.Reporting,ReportFormattablePath,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\ReportFormattablePath.cs,Resolve,The length of the statement  "            var formattedPath = string.Format(CultureInfo.InvariantCulture' FormattablePath' _parameters.Select(p => p.Invoke(results)).ToArray()); " is 135.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetFeatureSummary,The length of the statement  "                GetNumericTagWithOptionalClass(Html5Tag.Td' "bypassedAlert"' feature.CountScenariosWithStatus(ExecutionStatus.Bypassed))' " is 121.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetFeatureDetailsContent,The length of the statement  "            yield return Html.Tag(Html5Tag.H1).Id("featureDetails").Content(Html.Text("Feature details")' GetSmallLink("featureDetails")); " is 126.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetStatusFilter,The length of the statement  "            return Html.Checkbox().Name("statusFilter").Attribute("data-filter-value"' value.ToString().ToLower()).Checked().OnClick("applyFilter()").SpaceBefore(); " is 152.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetFeatureDetails,The length of the statement  "                        Html.Tag(Html5Tag.Label).For("toggle" + index).Content(GetCheckBoxTag()' Html.Text(feature.Info.Name.Format(StepNameDecorator)))' " is 129.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetFeatureClasses,The length of the statement  "            foreach (var result in Enum.GetValues(typeof(ExecutionStatus)).Cast<ExecutionStatus>().Where(result => feature.CountScenariosWithStatus(result) > 0)) " is 149.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetScenario,The length of the statement  "            return Html.Tag(Html5Tag.Div).Class("scenario " + GetStatusClass(scenario.Status)).Attribute("data-categories"' GetScenarioCategories(scenario)).Content( " is 153.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetComments,The length of the statement  "                .Content(from s in steps from c in s.Comments select Html.Tag(Html5Tag.Div).Content($"// Step {s.Info.GroupPrefix}{s.Info.Number}: {c}")); " is 138.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetStep,The length of the statement  "                Html.Text($"{WebUtility.HtmlEncode(step.Info.GroupPrefix)}{step.Info.Number}. {step.Info.Name.Format(StepNameDecorator)}").Trim()' " is 130.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetParameterTable,The length of the statement  "            var columns = table.Columns.Select(col => Html.Tag(Html5Tag.Th).Class(col.IsKey ? "param column key" : "param column value").Content(col.Name)).ToList(); " is 153.
Long Statement,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,Write,The length of the statement  "                        Html.Tag(Html5Tag.Div).Class("footer").Content(Html.Text("Generated with ")' Html.Tag(Html5Tag.A).Content("LightBDD v" + GetLightBddVersion()).Href("https://github.com/LightBDD/LightBDD"))' " is 189.
Long Statement,LightBDD.Framework.Reporting.Implementation,FilePathHelper,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Implementation\FilePathHelper.cs,ResolveAbsolutePath,The length of the statement  "                return GetBaseDirectory().TrimEnd(Separators) + Path.DirectorySeparatorChar + outputPath.Substring(1).TrimStart(Separators); " is 124.
Long Statement,LightBDD.Framework.Scenarios.Implementation,BasicStepCompiler,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\BasicStepCompiler.cs,EnsureNotGenerated,The length of the statement  "                throw new ArgumentException($"The basic step syntax does not support compiler generated methods' such as {methodInfo}' as rendered step name will be unreadable. Please either pass the step method name directly or use other methods for declaring steps."); " is 254.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,ProcessArguments,The length of the statement  "            return methodExpression.Arguments.Select((arg' index) => CompileArgument(arg' contextParameter' methodParameterInfo[index])).ToArray(); " is 135.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,CompileStepAction,The length of the statement  "            var args = methodCall.Arguments.Select((arg' index) => Expression.Convert(Expression.ArrayAccess(argsParam' Expression.Constant(index))' arg.Type)); " is 148.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,CompileStepAction,The length of the statement  "            var stepCallFunction = Expression.Lambda<Func<TContext' object[]' Task<IStepResultDescriptor>>>(body' contextParameter' argsParam).Compile(); " is 141.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,CompileStepAction,The length of the statement  "                    Expression.Invoke(Expression.Constant(stepCallFunction)' Expression.Convert(targetParam' contextParameter.Type)' argsParam)' " is 124.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,WithScenarioExecutionException,The length of the statement  "            return Expression.TryCatch(body' Expression.Catch(exceptionParameter' Expression.Throw(Expression.New(ScenarioExecutionExceptionCtor' exceptionParameter)' body.Type))); " is 168.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,ConvertReturnType,The length of the statement  "                    var specializedConverter = converter.GetMethodInfo().GetGenericMethodDefinition().MakeGenericMethod(currentTypeInfo.GenericTypeArguments[0]); " is 141.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,ConvertReturnType,The length of the statement  "            body = Expression.Block(body' Expression.Call(null' fromResult.GetMethodInfo()' Expression.Constant(DefaultStepResultDescriptor.Instance))); " is 140.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,CompileArgument,The length of the statement  "            var function = Expression.Lambda<Func<TContext' object>>(Expression.Convert(argumentExpression' typeof(object))' contextParameter).Compile(); " is 141.
Long Statement,LightBDD.Framework.Scenarios.Implementation,ExtendedStepCompiler<TContext>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Scenarios\Implementation\ExtendedStepCompiler.cs,CompileArgument,The length of the statement  "            var genericStepArgFunction = Expression.Lambda<Func<object' object>>(Expression.Invoke(Expression.Constant(function)' Expression.Convert(targetParam' contextParameter.Type))' targetParam) " is 187.
Empty Catch Block,LightBDD.Framework.Resources,ResourceHandle<TResource>,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Resources\ResourceHandle.cs,Dispose,The method has an empty catch block.
Magic Number,LightBDD.Framework.Expectations,ExpectationExtensions,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Expectations\ExpectationExtensions.cs,BeBetween,The following statement contains a magic number: return composer.ComposeSimple<T>(formatter => $"between '{formatter.FormatValue(a)}' and '{formatter.FormatValue(b)}'"' x => x != null && Math.Abs(x.CompareTo(a) + x.CompareTo(b)) < 2);
Magic Number,LightBDD.Framework.Notification.Implementation,ParallelProgressNotifier,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Notification\Implementation\ParallelProgressNotifier.cs,NotifyProgress,The following statement contains a magic number: var header = $"Fi={progress.FinishedScenarios:D3}'Fa={progress.FailedScenarios:D3}'Pe={progress.PendingScenarios:D3} #{_currentScenarioNumber'3}> ";
Magic Number,LightBDD.Framework.Reporting.Formatters,PlainTextReportFormatter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\PlainTextReportFormatter.cs,FormatStep,The following statement contains a magic number: var stepIndent = new string('\t'' indent + 2);
Magic Number,LightBDD.Framework.Reporting.Formatters.Html,HtmlResultTextWriter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\Html\HtmlResultTextWriter.cs,GetLightBddVersion,The following statement contains a magic number: return typeof(IBddRunner).GetTypeInfo().Assembly.GetName().Version.ToString(4);
Missing Default,LightBDD.Framework.Reporting.Formatters,TextRow,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\TextTableRenderer.cs,GetStatus,The following switch statement is missing a default case: switch (type)                  {                      case TableRowType.Missing:                          return '-';                      case TableRowType.Surplus:                          return '+';                  }
Missing Default,LightBDD.Framework.Reporting.Formatters,TextRow,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\TextTableRenderer.cs,GetStatus,The following switch statement is missing a default case: switch (status)                  {                      case ParameterVerificationStatus.Success:                          return '=';                      case ParameterVerificationStatus.NotApplicable:                          return ' ';                  }
Missing Default,LightBDD.Framework.Reporting.Formatters,XmlReportFormatter,D:\research\architectureSmells\repos1\Suremaker_LightBDD\src\LightBDD.Framework\Reporting\Formatters\XmlReportFormatter.cs,ToXElement,The following switch statement is missing a default case: switch (parameterVerification)              {                  case IInlineParameterDetails inline:                      return ToXElement((IValueResult)inline);                  case ITabularParameterDetails tabular:                      return ToXElement(tabular);              }
