Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Store.Azure,AzureIndexInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,AzureIndexInput,Cyclomatic complexity of the method is 10
Long Parameter List,Lucene.Net.Store.Azure,AzureDirectory,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,AzureDirectory,The method has 5 parameters. Parameters: storageAccount' cacheDirectoryPath' containerName' compressBlobs' rootFolder
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "        // This will occur because this file is locked' when this is the case' we don't really want to delete it from the master either because " is 135.
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "        // if we do that then this file will never get removed from the cache folder either! This is based on the Deletion Policy which the " is 131.
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "        // IndexFileDeleter uses. We could implement our own one of those to deal with this scenario too but it seems the easiest way it to just  " is 136.
Virtual Method Call from Constructor,Lucene.Net.Store.Azure,AzureIndexInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The constructor "AzureIndexInput" calls a virtual method "ShouldCompressFile".
Empty Catch Block,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,BreakLock,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Store.Azure,StreamInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamInput.cs,Read,The method has an empty catch block.
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: var bytes = new byte[65535];
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: do            {              nRead = decompressor.Read(bytes' 0' 65535);              if (nRead > 0)                fileStream.Write(bytes' 0' nRead);            } while (nRead == 65535);
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: do            {              nRead = decompressor.Read(bytes' 0' 65535);              if (nRead > 0)                fileStream.Write(bytes' 0' nRead);            } while (nRead == 65535);
Magic Number,Lucene.Net.Store.Azure,AzureIndexOutput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexOutput.cs,CompressStream,The following statement contains a magic number: Debug.WriteLine(string.Format("COMPRESSED {0} -> {1} {2}% to {3}"'             originalLength'             compressedStream.Length'             ((float)compressedStream.Length / (float)originalLength) * 100'             _name));
Magic Number,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,IsLocked,The following statement contains a magic number: var tempLease = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);
Magic Number,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,Obtain,The following statement contains a magic number: _leaseid = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);
Magic Number,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,Obtain,The following statement contains a magic number: long interval = (long)TimeSpan.FromSeconds(30).TotalMilliseconds;
Magic Number,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,_handleWebException,The following statement contains a magic number: err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409
Magic Number,Lucene.Net.Store.Azure,AzureLock,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,_handleWebException,The following statement contains a magic number: err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409
Missing Default,Lucene.Net.Store.Azure,StreamInput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamInput.cs,Seek,The following switch statement is missing a default case: switch (origin)        {          case SeekOrigin.Begin:            Input.Seek(offset);            break;          case SeekOrigin.Current:            Input.Seek(Input.GetFilePointer() + offset);            break;          case SeekOrigin.End:            throw new System.NotImplementedException();        }
Missing Default,Lucene.Net.Store.Azure,StreamOutput,D:\research\architectureSmells\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamOutput.cs,Seek,The following switch statement is missing a default case: switch (origin)        {          case SeekOrigin.Begin:            this.Output.Seek(offset);            break;          case SeekOrigin.Current:            this.Output.Seek(Output.GetFilePointer() + offset);            break;          case SeekOrigin.End:            throw new NotImplementedException();        }
