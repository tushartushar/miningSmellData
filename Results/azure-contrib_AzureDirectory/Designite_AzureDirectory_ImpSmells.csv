Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Lucene.Net.Store.Azure,AzureDirectory,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,AzureDirectory,The method has 5 parameters. Parameters: storageAccount' containerName' cacheDirectory' compressBlobs' rootFolder
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // This will occur because this file is locked' when this is the case' we don't really want to delete it from the master either because " is 135.
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // if we do that then this file will never get removed from the cache folder either! This is based on the Deletion Policy which the " is 131.
Long Statement,Lucene.Net.Store.Azure,AzureDirectory,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // IndexFileDeleter uses. We could implement our own one of those to deal with this scenario too but it seems the easiest way it to just  " is 136.
Virtual Method Call from Constructor,Lucene.Net.Store.Azure,AzureIndexInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The constructor "AzureIndexInput" calls a virtual method "ShouldCompressFile".
Empty Catch Block,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,BreakLock,The method has an empty catch block.
Empty Catch Block,Lucene.Net.Store.Azure,StreamInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamInput.cs,Read,The method has an empty catch block.
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The following statement contains a magic number: try              {                  _azureDirectory = azuredirectory;                  _blobContainer = azuredirectory.BlobContainer;                  _blob = blob;                    var fileName = _name;                    var fFileNeeded = false;                  if (!CacheDirectory.FileExists(fileName))                  {                      fFileNeeded = true;                  }                  else                  {                      long cachedLength = CacheDirectory.FileLength(fileName);                      string blobLengthMetadata;                      bool hasMetadataValue = blob.Metadata.TryGetValue("CachedLength"' out blobLengthMetadata);                       long blobLength = blob.Properties.Length;                      if (hasMetadataValue) long.TryParse(blobLengthMetadata' out blobLength);                        string blobLastModifiedMetadata;                      long longLastModified = 0;                      DateTime blobLastModifiedUTC = blob.Properties.LastModified.Value.UtcDateTime;                      if (blob.Metadata.TryGetValue("CachedLastModified"' out blobLastModifiedMetadata)) {                          if (long.TryParse(blobLastModifiedMetadata' out longLastModified))                              blobLastModifiedUTC = new DateTime(longLastModified).ToUniversalTime();                      }                                            if (cachedLength != blobLength)                          fFileNeeded = true;                      else                      {                            // cachedLastModifiedUTC was not ouputting with a date (just time) and the time was always off                          long unixDate = CacheDirectory.FileModified(fileName);                          DateTime start = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                          var cachedLastModifiedUTC = start.AddMilliseconds(unixDate).ToUniversalTime();                                                    if (cachedLastModifiedUTC != blobLastModifiedUTC)                          {                              var timeSpan = blobLastModifiedUTC.Subtract(cachedLastModifiedUTC);                              if (timeSpan.TotalSeconds > 1)                                  fFileNeeded = true;                              else                              {  #if FULLDEBUG                                  Debug.WriteLine(timeSpan.TotalSeconds);  #endif                                  // file not needed                              }                          }                      }                  }                    // if the file does not exist                  // or if it exists and it is older then the lastmodified time in the blobproperties (which always comes from the blob storage)                  if (fFileNeeded)                  {                      if (_azureDirectory.ShouldCompressFile(_name))                      {                          InflateStream(fileName);                      }                      else                      {                          using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                          {                              // get the blob                              _blob.DownloadToStream(fileStream);                                fileStream.Flush();                              Debug.WriteLine(string.Format("GET {0} RETREIVED {1} bytes"' _name' fileStream.Length));                          }                      }                        // and open it as an input                       _indexInput = CacheDirectory.OpenInput(fileName);                  }                  else                  {  #if FULLDEBUG                      Debug.WriteLine(String.Format("Using cached file for {0}"' _name));  #endif                        // open the file in read only mode                      _indexInput = CacheDirectory.OpenInput(fileName);                  }              }              finally              {                  _fileMutex.ReleaseMutex();              }
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);                    Debug.WriteLine(string.Format("GET {0} RETREIVED {1} bytes"' _name' deflatedStream.Length));                    // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);                    Debug.WriteLine(string.Format("GET {0} RETREIVED {1} bytes"' _name' deflatedStream.Length));                    // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Lucene.Net.Store.Azure,AzureIndexInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);                    Debug.WriteLine(string.Format("GET {0} RETREIVED {1} bytes"' _name' deflatedStream.Length));                    // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Lucene.Net.Store.Azure,AzureIndexOutput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureIndexOutput.cs,CompressStream,The following statement contains a magic number: try              {                  using (var indexInput = CacheDirectory.OpenInput(fileName))                  using (var compressor = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      // compress to compressedOutputStream                      byte[] bytes = new byte[indexInput.Length()];                      indexInput.ReadBytes(bytes' 0' (int)bytes.Length);                      compressor.Write(bytes' 0' (int)bytes.Length);                  }                    // seek back to beginning of comrpessed stream                  compressedStream.Seek(0' SeekOrigin.Begin);                    Debug.WriteLine(string.Format("COMPRESSED {0} -> {1} {2}% to {3}"'                     originalLength'                     compressedStream.Length'                     ((float)compressedStream.Length / (float)originalLength) * 100'                     _name));              }              catch              {                  // release the compressed stream resources if an error occurs                  compressedStream.Dispose();                  throw;              }
Magic Number,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,IsLocked,The following statement contains a magic number: try              {                  Debug.Print("IsLocked() : {0}"' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      var tempLease = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      if (String.IsNullOrEmpty(tempLease))                      {                          Debug.Print("IsLocked() : TRUE");                          return true;                      }                      blob.ReleaseLease(new AccessCondition() { LeaseId = tempLease });                  }                  Debug.Print("IsLocked() : {0}"' _leaseid);                  return !string.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return IsLocked();              }
Magic Number,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,Obtain,The following statement contains a magic number: try              {                  Debug.Print("AzureLock:Obtain({0}) : {1}"' _lockFile' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      _leaseid = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      Debug.Print("AzureLock:Obtain({0}): AcquireLease : {1}"' _lockFile' _leaseid);                                            // keep the lease alive by renewing every 30 seconds                      long interval = (long)TimeSpan.FromSeconds(30).TotalMilliseconds;                      _renewTimer = new Timer((obj) =>                           {                              try                              {                                  AzureLock al = (AzureLock)obj;                                  al.Renew();                              }                              catch (Exception err) { Debug.Print(err.ToString()); }                           }' this' interval' interval);                  }                  return !String.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return Obtain();              }
Magic Number,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,Obtain,The following statement contains a magic number: try              {                  Debug.Print("AzureLock:Obtain({0}) : {1}"' _lockFile' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      _leaseid = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      Debug.Print("AzureLock:Obtain({0}): AcquireLease : {1}"' _lockFile' _leaseid);                                            // keep the lease alive by renewing every 30 seconds                      long interval = (long)TimeSpan.FromSeconds(30).TotalMilliseconds;                      _renewTimer = new Timer((obj) =>                           {                              try                              {                                  AzureLock al = (AzureLock)obj;                                  al.Renew();                              }                              catch (Exception err) { Debug.Print(err.ToString()); }                           }' this' interval' interval);                  }                  return !String.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return Obtain();              }
Magic Number,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,_handleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.CreateContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
Magic Number,Lucene.Net.Store.Azure,AzureLock,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\AzureLock.cs,_handleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.CreateContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
Missing Default,Lucene.Net.Store.Azure,StreamInput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamInput.cs,Seek,The following switch statement is missing a default case: switch(origin)              {                  case SeekOrigin.Begin:                      Input.Seek(offset);                       break;                  case SeekOrigin.Current:                      Input.Seek(Input.FilePointer + offset);                      break;                  case SeekOrigin.End:                      throw new System.NotImplementedException();               }
Missing Default,Lucene.Net.Store.Azure,StreamOutput,C:\repos\azure-contrib_AzureDirectory\AzureDirectory\StreamOutput.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      Output.Seek(offset);                      break;                  case SeekOrigin.Current:                      Output.Seek(Output.FilePointer + offset);                      break;                  case SeekOrigin.End:                      throw new NotImplementedException();              }
