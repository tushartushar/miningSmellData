Implementation smell,Namespace,Class,File,Method,Description
Long Method,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The method has 118 lines of code.
Complex Method,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,UrlToString,Cyclomatic complexity of the method is 12
Complex Method,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetRanges,Cyclomatic complexity of the method is 9
Complex Method,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,ServeRequest,Cyclomatic complexity of the method is 12
Complex Method,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,Cyclomatic complexity of the method is 18
Long Parameter List,Talifun.Web,EmbeddedResourceLoader,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\EmbeddedResourceLoader.cs,LoadEmbeddedResource,The method has 6 parameters. Parameters: response' assembly' resourcePath' bufferSize' offset' length
Long Parameter List,Talifun.Web,IEmbeddedResourceLoader,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\IEmbeddedResourceLoader.cs,LoadEmbeddedResource,The method has 6 parameters. Parameters: response' assembly' resourcePath' bufferSize' offset' length
Long Parameter List,Talifun.Web,TransmitEntityStrategyForEmbeddedResource,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForEmbeddedResource.cs,TransmitEntityStrategyForEmbeddedResource,The method has 5 parameters. Parameters: embeddedResourceLoader' entity' assembly' resourcePath' bufferSize
Long Parameter List,Talifun.Web,TransmitEntityStrategyForEmbeddedResource,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForEmbeddedResource.cs,TransmitFile,The method has 6 parameters. Parameters: response' assembly' resourcePath' bufferSize' offset' length
Long Parameter List,Talifun.Web,HttpCacheManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\Cache\HttpCacheManager.cs,Insert,The method has 7 parameters. Parameters: key' value' dependencies' absoluteExpiration' slidingExpiration' priority' onRemoveCallback
Long Parameter List,Talifun.Web,RetryableFileOpener,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileOpener.cs,OpenFileStream,The method has 5 parameters. Parameters: fileInfo' retry' fileMode' fileAccess' fileShare
Long Parameter List,Talifun.Web,IRetryableFileOpener,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\IRetryableFileOpener.cs,OpenFileStream,The method has 5 parameters. Parameters: fileInfo' retry' fileMode' fileAccess' fileShare
Long Parameter List,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,TryParseUrl,The method has 6 parameters. Parameters: input' filePath' fileName' fileExtension' queryString' bookMark
Long Parameter List,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,UrlToString,The method has 5 parameters. Parameters: filePath' fileName' fileExtension' queryString' bookMark
Long Parameter List,Talifun.Web,HttpResponseHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpResponseHeaderHelper.cs,SetResponseCachable,The method has 5 parameters. Parameters: response' now' lastModified' etag' maxAge
Long Parameter List,Talifun.Web,ICacheManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\Cache\ICacheManager.cs,Insert,The method has 7 parameters. Parameters: key' value' dependencies' absoluteExpiration' slidingExpiration' priority' onRemoveCallback
Long Parameter List,Talifun.Web,IHttpResponseHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\IHttpResponseHeaderHelper.cs,SetResponseCachable,The method has 5 parameters. Parameters: response' now' lastModified' etag' maxAge
Long Parameter List,Talifun.Web,EntityResponseMultiPart,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseMultiPart.cs,TransmitMultiPartFile,The method has 5 parameters. Parameters: response' contentType' contentLength' ranges' transmitEntity
Long Parameter List,Talifun.Web,TransmitEntityStrategyForFile,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForFile.cs,TransmitFile,The method has 6 parameters. Parameters: retryableFileOpener' response' file' bufferSize' offset' length
Long Parameter List,Talifun.Web,TransmitEntityStrategyForStream,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForStream.cs,TransmitFile,The method has 5 parameters. Parameters: response' stream' bufferSize' offset' length
Long Parameter List,Talifun.Web.Compress,EmptyMembershipProvider,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\EmptyMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,EmbeddedResourceEntityResponder,The method has 9 parameters. Parameters: cacheManager' mimeTyper' hasher' embeddedResourceLoader' maxFileSizeToServe' bufferSize' mimeSettingProvider' assembly' resourcePath
Long Parameter List,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,FileEntityResponder,The method has 8 parameters. Parameters: cacheManager' retryableFileOpener' mimeTyper' hasher' maxFileSizeToServe' bufferSize' mimeSettingProvider' fileInfo
Long Parameter List,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetUrlEtagHandler,The method has 5 parameters. Parameters: request' response' urlEtagHandlingMethod' urlEtagQuerystringName' etag
Long Identifier,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,CheckIfUnmodifiedSince,The length of the parameter requestHeaderIfUnmodifiedSince is 30.
Long Identifier,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,CheckUnlessModifiedSince,The length of the parameter requestHeaderUnlessModifiedSince is 32.
Long Identifier,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,CheckIfNoneMatch,The length of the parameter requestHeaderIfNoneMatchValues is 30.
Long Identifier,Talifun.Web.Compress,SR,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\SR.cs,,The length of the parameter WebResourceCompressionModuleInvalidRequest is 42.
Long Identifier,Talifun.Web.Compress,SR,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\SR.cs,,The length of the parameter WebResourceCompressionModuleAssemblyNotFound is 44.
Long Identifier,Talifun.Web.Compress,SR,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\SR.cs,,The length of the parameter WebResourceCompressionModuleResourceNotFound is 44.
Long Identifier,Talifun.Web.Compress,SR,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\SR.cs,,The length of the parameter WebResourceCompressionModuleReflectionNotAllowd is 47.
Long Identifier,Talifun.Web.IpAddressAuthentication,IpAddressAuthenticationModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\IpAddressAuthentication\IpAddressAuthenticationModule.cs,,The length of the parameter IpAddressAuthenticationManager is 30.
Long Identifier,Talifun.Web.IpAddressAuthentication,IpAddressAuthenticationModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\IpAddressAuthentication\IpAddressAuthenticationModule.cs,,The length of the parameter GenerateResponseHeadersForHandlerMethod is 39.
Long Identifier,Talifun.Web.RegexUrlAuthorization,RegexUrlAuthorizationModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\RegexUrlAuthorization\RegexUrlAuthorizationModule.cs,,The length of the parameter GenerateResponseHeadersForHandlerMethod is 39.
Long Identifier,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the parameter entityStoredWithCompressionType is 31.
Long Identifier,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,,The length of the parameter EmbeddedResourceEntityResponderType is 35.
Long Identifier,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the parameter entityStoredWithCompressionType is 31.
Long Identifier,Talifun.Web.StaticFile,IEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\IEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the parameter entityStoredWithCompressionType is 31.
Long Identifier,Talifun.Web.StaticFile,StaticFileManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\StaticFileManager.cs,,The length of the parameter ErrorTheRemoteHostClosedTheConnection is 37.
Long Identifier,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,ServeRequest,The length of the parameter entityStoredWithCompressionType is 31.
Long Statement,Talifun.Web.Configuration,CurrentConfigurationManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\Configuration\CurrentConfigurationManager.cs,GetSection,The length of the statement  "            // If we've got this far' it means we didn't find any matching sections in the configuration file. so we raise an exception: " is 124.
Long Statement,Talifun.Web.Configuration,CurrentConfigurationManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\Configuration\CurrentConfigurationManager.cs,GetDesignTimeConfiguration,The length of the statement  "                        configMap.ExeConfigFilename = String.Format(CultureInfo.InvariantCulture' "{0}\\{1}"' info.Directory.FullName' item.Name); " is 122.
Long Statement,Talifun.Web,EmbeddedResourceLoader,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\EmbeddedResourceLoader.cs,LoadEmbeddedResource,The length of the statement  "            var embeddedResourcePath = string.Format("{0}.{1}"' assemblyName' (resourcePath.StartsWith("/") ? resourcePath.Substring(1) : resourcePath).Replace("/"' ".")); " is 159.
Long Statement,Talifun.Web,EmbeddedResourceLoader,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\EmbeddedResourceLoader.cs,LoadEmbeddedResource,The length of the statement  "            var embeddedResourcePath = string.Format("{0}.{1}"' assemblyName' (resourcePath.StartsWith("/") ? resourcePath.Substring(1) : resourcePath).Replace("/"' ".")); " is 159.
Long Statement,Talifun.Web,EmbeddedResourceLoader,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\EmbeddedResourceLoader.cs,LoadEmbeddedResource,The length of the statement  "            var embeddedResourcePath = string.Format("{0}.{1}"' assemblyName' (resourcePath.StartsWith("/") ? resourcePath.Substring(1) : resourcePath).Replace("/"' ".")); " is 159.
Long Statement,Talifun.Web,TransmitEntityStrategyForEmbeddedResource,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForEmbeddedResource.cs,TransmitFile,The length of the statement  "            _embeddedResourceLoader.LoadEmbeddedResource(response.OutputStream' assembly' resourcePath' (int)bufferSize' offset' length); " is 125.
Long Statement,Talifun.Web,EntityResponseMultiPart,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseMultiPart.cs,SendBody,The length of the statement  "            TransmitMultiPartFile(response' transmitEntity.Entity.ContentType' transmitEntity.Entity.ContentLength' Ranges' transmitEntity); " is 128.
Long Statement,Talifun.Web,EntityResponseSinglePart,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseSinglePart.cs,SendHeaders,The length of the statement  "            HttpResponseHeaderHelper.AppendHeader(response' HttpHeaderContentRange' Bytes + " " + Range.StartRange + "-" + Range.EndRange + "/" + entity.ContentLength); " is 156.
Long Statement,Talifun.Web,UriBuilderExtensions,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\UriBuilderExtensions.cs,AddQueryArgument,The length of the statement  "            if (x.AllKeys.Contains(key)) throw new ArgumentOutOfRangeException(key' string.Format("Key '{0}' already exists!"' key)); " is 121.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "            var acceptEncodingValues = GetHttpHeaderWithQValues(request' HttpRequestHeader.AcceptEncoding).OrderByDescending(x => x' HeaderValueQValueComparer); " is 148.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "            var acceptEncodingToUse = acceptEncodingValues.Where(x => (x.Identity.Equals(Deflate' StringComparison.InvariantCultureIgnoreCase) || x.Identity.Equals(Gzip' StringComparison.InvariantCultureIgnoreCase) || x.Identity.Equals(Xgzip' StringComparison.InvariantCultureIgnoreCase) || x.Identity == "*") && (!x.QValue.HasValue || x.QValue.Value > 0)).FirstOrDefault(); " is 362.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "                //Wildcard logic is everything that is not in the list' so we are assuming they can handle what ever we can send to them " is 120.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "                if (!acceptEncodingValues.Any(x => x.Identity.Equals(Deflate' StringComparison.InvariantCultureIgnoreCase))) return ResponseCompressionType.Deflate; " is 148.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "                if (!acceptEncodingValues.Any(x => x.Identity.Equals(Gzip' StringComparison.InvariantCultureIgnoreCase) || x.Identity.Equals(Xgzip' StringComparison.InvariantCultureIgnoreCase))) return ResponseCompressionType.GZip; " is 215.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "                //We tried our best to use wild card but we got no results' so see if we can send based on any other acceptable identities " is 122.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetCompressionMode,The length of the statement  "                acceptEncodingToUse = acceptEncodingValues.Where(x => (x.Identity.Equals(Deflate' StringComparison.InvariantCultureIgnoreCase) || x.Identity.Equals(Gzip' StringComparison.InvariantCultureIgnoreCase) || x.Identity.Equals(Xgzip' StringComparison.InvariantCultureIgnoreCase)) && (!x.QValue.HasValue || x.QValue.Value > 0)).FirstOrDefault(); " is 337.
Long Statement,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,CheckUnlessModifiedSince,The length of the statement  "            var requestHeaderUnlessModifiedSince = GetHttpHeaderValue(request' HttpRequestHeader.UnlessModifiedSince' string.Empty); " is 120.
Long Statement,Talifun.Web.Helper,RetryableFileWriter,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileWriter.cs,SaveContentsToFile,The length of the statement  "            using (var outputFile = RetryableFileOpener.OpenFileStream(outputPath' 5' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))" is 135.
Long Statement,Talifun.Web.Compress,CompressionModuleHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\CompressionModuleHelper.cs,IsAjaxPostBackRequest,The length of the statement  "            return httpContext.Request.Headers["X-MicrosoftAjax"] != null || httpContext.Request.ContentType.ToLower().Contains("application/json"); " is 136.
Long Statement,Talifun.Web.Compress,CompressionModuleHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\CompressionModuleHelper.cs,IsCompressionSupported,The length of the statement  "            if (context.Request.Headers["Accept-encoding"] == null || !(context.Request.Headers["Accept-encoding"].Contains(GZIP) || context.Request.Headers["Accept-encoding"].Contains(DEFLATE))) " is 183.
Long Statement,Talifun.Web.Compress,Quadruplet<TFirst;TSecond;TThird;TFourth>,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\Quadruplet.cs,Equals,The length of the statement  "            return (other != null) && (other.First.Equals(First)) && (other.Second.Equals(Second)) && (other.Third.Equals(Third)) && (other.Forth.Equals(Forth)); " is 149.
Long Statement,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,OnPreRequestHandlerExecute,The length of the statement  "                // If the WebResource needs to perform substitution (WebResource inside WebResource)' we leave it to the original AssemblyResourceLoader handler ;-) " is 148.
Long Statement,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,CompressAndWriteToStream,The length of the statement  "            var compressionType = CompressionModuleHelper.IsSpecificEncodingSupported(context' CompressionModuleHelper.GZIP) ? CompressionModuleHelper.GZIP : CompressionModuleHelper.DEFLATE; " is 178.
Long Statement,Talifun.Web.Compress,PageCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\PageCompressionModule.cs,OnPostAcquireRequestState,The length of the statement  "            // Because there is a problem with async postbacks compression' we check here if the current request if an 'MS AJAX' call. " is 122.
Long Statement,Talifun.Web.Compress,PageCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\PageCompressionModule.cs,OnPostAcquireRequestState,The length of the statement  "            if (!(httpContext.CurrentHandler is Page || httpContext.CurrentHandler.GetType().BaseType.FullName == "System.Web.Mvc.MvcHandler") || CompressionModuleHelper.IsAjaxPostBackRequest(httpContext)) return; " is 201.
Long Statement,Talifun.Web.LogUrl,LogUrlModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\LogUrl\LogUrlModule.cs,OnEndRequest,The length of the statement  "            if (application.Context.Error != null || !(application.Response.StatusCode == (int)HttpStatusCode.Ok || application.Response.StatusCode == (int)HttpStatusCode.NotModified)) return; " is 180.
Long Statement,Talifun.Web.RegexUrlAuthorization.Config,UrlMatchElement,C:\repos\taliesins_talifun-web\src\Talifun.Web\RegexUrlAuthorization\Config\UrlMatchElement.cs,PostDeserialize,The length of the statement  "                this.everyoneAllowed = (rule.Action == AuthorizationRuleAction.Allow) && (bool)everyoneAllowedProperty.GetValue(rule' null); " is 124.
Long Statement,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,GetTransmitEntityStrategy,The length of the statement  "                return new TransmitEntityStrategyForEmbeddedResource(EmbeddedResourceLoader' entityCacheItem' _assembly' _resourcePath' BufferSize); " is 132.
Long Statement,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the statement  "                //When a browser sets the If-Modified-Since field to 13-1-2010 10:30:58' another DateTime instance is created' but this one has a Ticks value of 633989754580000000 " is 163.
Long Statement,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the statement  "                //Put fileHandlerCacheItem into cache with 30 min sliding expiration' also if file changes then remove fileHandlerCacheItem from cache " is 134.
Long Statement,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,GetEntityData,The length of the statement  "            using (var outputStream = (compressionType == ResponseCompressionType.None ? stream : (compressionType == ResponseCompressionType.GZip ? (Stream)new GZipStream(stream' CompressionMode.Compress' true) : (Stream)new DeflateStream(stream' CompressionMode.Compress)))) " is 264.
Long Statement,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the statement  "                //When a browser sets the If-Modified-Since field to 13-1-2010 10:30:58' another DateTime instance is created' but this one has a Ticks value of 633989754580000000 " is 163.
Long Statement,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,TryGetFileHandlerCacheItem,The length of the statement  "                //Put fileHandlerCacheItem into cache with 30 min sliding expiration' also if file changes then remove fileHandlerCacheItem from cache " is 134.
Long Statement,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,GetEntityData,The length of the statement  "            using (var outputStream = (compressionType == ResponseCompressionType.None ? stream : (compressionType == ResponseCompressionType.GZip ? (Stream)new GZipStream(stream' CompressionMode.Compress' true) : (Stream)new DeflateStream(stream' CompressionMode.Compress)))) " is 264.
Long Statement,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,GetEntityData,The length of the statement  "                using (var fileStream = RetryableFileOpener.OpenFileStream(FileInfo' 5' FileMode.Open' FileAccess.Read' FileShare.Read)) " is 120.
Long Statement,Talifun.Web.StaticFile,StaticFileManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\StaticFileManager.cs,ProcessRequest,The length of the statement  "            var fileEntity = new FileEntityResponder(_cacheManager' _retryableFileOpener' _mimeTyper' _hasher' MaxFileSizeToServe' BufferSize' _mimeSettingProvider' file); " is 159.
Long Statement,Talifun.Web.StaticFile,StaticFileManager,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\StaticFileManager.cs,ProcessRequest,The length of the statement  "            var fileEntity = new EmbeddedResourceEntityResponder(_cacheManager' _mimeTyper' _hasher' _embeddedResourceLoader' MaxFileSizeToServe' BufferSize' _mimeSettingProvider' assembly' resourcePath); " is 192.
Long Statement,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,ServeRequest,The length of the statement  "                //If we have cached the properties of the file but its to large to serve from memory then we must check that the file exists each time. " is 135.
Long Statement,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,ServeRequest,The length of the statement  "            var urlEtagHandler = GetUrlEtagHandler(request' response' entityResponder.UrlEtagHandlingMethod' entityResponder.UrlEtagQuerystringName' fileEntityCacheItem.Etag); " is 163.
Long Statement,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,ServeRequest,The length of the statement  "            HttpResponseHeaderHelper.SetResponseCachable(response' DateTime.Now' fileEntityCacheItem.LastModified' fileEntityCacheItem.Etag' entityResponder.Expires); " is 154.
Long Statement,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetUrlEtagHandler,The length of the statement  "            if (urlEtagHandlingMethod == UrlEtagHandlingMethodType.None || !HttpRequestHeaderHelper.HasQuerystringParameter(request' urlEtagQuerystringName)) " is 145.
Long Statement,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,GetWorkerRequestViaReflection,The length of the statement  "            var wrField = request.GetType().GetField("_wr"' bindingFlags) ?? request.GetType().GetField("worker_request"' bindingFlags); " is 124.
Long Statement,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,DetectWebServerType,The length of the statement  "            var worker = (HttpWorkerRequest)provider.GetService(HttpWorkerRequestType) ?? GetWorkerRequestViaReflection(context.Request); " is 125.
Complex Conditional,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The conditional expression  "!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value)"  is complex.
Empty Catch Block,Talifun.Web.Module,HttpModuleRegistry,C:\repos\taliesins_talifun-web\src\Talifun.Web\Module\HttpModuleRegistry.cs,GetModules,The method has an empty catch block.
Magic Number,Talifun.Web,RetryableFileOpener,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileOpener.cs,OpenFileStream,The following statement contains a magic number: for (var i = 0; i < retry; i++)              {                  try                  {                      var stream = new FileStream(fileInfo.FullName' fileMode' fileAccess' fileShare);                      return stream;                  }                  catch(FileNotFoundException)                  {                      throw;                  }                  catch (IOException)                  {                      delay += 100;                      if (i == retry) throw;                  }                    Thread.Sleep(delay);              }
Magic Number,Talifun.Web,RetryableFileOpener,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileOpener.cs,OpenTextStreamReader,The following statement contains a magic number: for (var i = 0; i < retry; i++)              {                  try                  {                      var stream = new StreamReader(fileInfo.FullName' Encoding.UTF8);                      return stream;                  }                  catch (FileNotFoundException)                  {                      throw;                  }                  catch (IOException)                  {                      delay += 100;                      if (i == retry) throw;                  }                    Thread.Sleep(delay);              }
Magic Number,Talifun.Web,RetryableFileOpener,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileOpener.cs,ReadAllText,The following statement contains a magic number: using (var stream = OpenTextStreamReader(fileInfo' 5))              {                  return stream.ReadToEnd();              }
Magic Number,Talifun.Web,Md5Hasher,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\Md5Hasher.cs,Hash,The following statement contains a magic number: using (var stream = RetryableFileOpener.OpenFileStream(fileInfo' 5' FileMode.Open ' FileAccess.Read' FileShare.Read))              {                  // Now that we have a byte array we can ask the CSP to hash it                  var md5 = new MD5CryptoServiceProvider();                  var hashBytes = md5.ComputeHash(stream);                  return Convert.ToBase64String(hashBytes' Base64FormattingOptions.None);              }
Magic Number,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,TryParseUrl,The following statement contains a magic number: fileName = matchForUrl.Groups[2].Value;
Magic Number,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,TryParseUrl,The following statement contains a magic number: fileExtension = matchForUrl.Groups[3].Value;
Magic Number,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,TryParseUrl,The following statement contains a magic number: queryString = HttpUtility.ParseQueryString(matchForUrl.Groups[5].Value);
Magic Number,Talifun.Web,UrlHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\UrlHelper.cs,TryParseUrl,The following statement contains a magic number: bookMark = matchForUrl.Groups[7].Value;
Magic Number,Talifun.Web,TransmitEntityStrategyForFile,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForFile.cs,TransmitFile,The following statement contains a magic number: using (var stream = retryableFileOpener.OpenFileStream(file' 5' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  var buffer = new byte[bufferSize];                  var readCount = 0;                  while ((readCount = stream.Read(buffer' 0' bufferSize)) > 0)                  {                      response.OutputStream.Write(buffer' 0' readCount);                  }              }
Magic Number,Talifun.Web,TransmitEntityStrategyForFile,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\TransmitEntityStrategyForFile.cs,TransmitFile,The following statement contains a magic number: using (var stream = retryableFileOpener.OpenFileStream(file' 5' FileMode.Open' FileAccess.Read' FileShare.Read))              {                  stream.Seek(offset' SeekOrigin.Begin);                    var buffer = new byte[bufferSize];                  while (length > 0)                  {                      var lengthOfReadChunk = stream.Read(buffer' 0' (int)Math.Min(bufferSize' length));                        // Write the data to the current output stream.                      response.OutputStream.Write(buffer' 0' lengthOfReadChunk);                        // Reduce BytesToRead                      length -= lengthOfReadChunk;                  }              }
Magic Number,Talifun.Web,HttpRequestHeaderHelper,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\HttpRequestHeaderHelper.cs,GetRanges,The following statement contains a magic number: foreach (var rangeString in rangesString)              {                  // Split this range request by the dash character'                   // currentRange[0] contains the requested begin-value'                  // currentRange[1] contains the requested end-value...                  var currentRangeString = rangeString.Split("-".ToCharArray());                    if (currentRangeString.Length != 2)                  {                      ranges = null;                      return false;                  }                    var currentRange = new RangeItem();                    // Determine the end of the requested range                  if (string.IsNullOrEmpty(currentRangeString[1]))                  {                      // No end was specified' take the entire range                      currentRange.EndRange = contentLength - 1;                  }                  else                  {                      // An end was specified...                      int endRangeValue;                      if (!int.TryParse(currentRangeString[1]' out endRangeValue))                      {                          ranges = null;                          return false;                      }                        currentRange.EndRange = endRangeValue;                  }                    // Determine the begin of the requested range                  if (string.IsNullOrEmpty(currentRangeString[0]))                  {                      // No begin was specified' which means that                      // the end value indicated to return the last n                      // bytes of the file:                        // Calculate the begin                      currentRange.StartRange = contentLength - currentRange.EndRange;                      // ... to the end of the file...                      currentRange.EndRange = contentLength - 1;                  }                  else                  {                      // A normal begin value was indicated...                      int beginRangeValue;                      if (!int.TryParse(currentRangeString[0]' out beginRangeValue))                      {                          ranges = null;                          return false;                      }                        currentRange.StartRange = beginRangeValue;                  }                    // Check if the requested range values are valid'                   // return False if they are not.                    // Note:                  // Do not clean invalid values up by fitting them into                  // valid parameters using Math.Min and Math.Max' because                  // some download clients (like Go!Zilla) might send invalid                   // (e.g. too large) range requests to determine the file limits!                    // Begin and end must not exceed the file size                  if ((currentRange.StartRange > (contentLength - 1)) | (currentRange.EndRange > (contentLength - 1)))                  {                      ranges = null;                      return false;                  }                    // Begin and end cannot be < 0                  if ((currentRange.StartRange < 0) | (currentRange.EndRange < 0))                  {                      ranges = null;                      return false;                  }                    // End must be larger or equal to begin value                  if (currentRange.EndRange < currentRange.StartRange)                  {                      // The requested Range is invalid...                      ranges = null;                      return false;                  }                    //We reached here so its a valid range' so add it to the list of ranges                  rangesResult.Add(currentRange);              }
Magic Number,Talifun.Web.Helper,ParallelExecute,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\ParallelExecute.cs,EachParallel,The following statement contains a magic number: foreach (var item in list)              {                  ThreadPool.QueueUserWorkItem((object data) =>                      {                          var manualResetEvent = (CountdownEvent)((object[])data)[0];                          var actionToExecute = (Action<T>)((object[])data)[1];                          var itemForAction = (T)((object[])data)[2];                            // Execute the method and pass in the enumerated item                          actionToExecute(itemForAction);                            // Tell the calling thread that we're done                          manualResetEvent.Signal();                      }' new object[] { countdownEvents' action' item });              }
Magic Number,Talifun.Web.Helper,RetryableFileWriter,C:\repos\taliesins_talifun-web\src\Talifun.Web\Helper\RetryableFileWriter.cs,SaveContentsToFile,The following statement contains a magic number: using (var outputFile = RetryableFileOpener.OpenFileStream(outputPath' 5' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))             {                 var overwrite = true;                 if (outputFile.Length > 0)                 {                     etag = Hasher.Hash(outputStream);                     var outputFileHash = Hasher.Hash(outputFile);                      overwrite = (etag != outputFileHash);                 }                  if (overwrite)                 {                     outputStream.Seek(0' SeekOrigin.Begin);                     outputFile.SetLength(outputStream.Length); //Truncate current file                     outputFile.Seek(0' SeekOrigin.Begin);                      var bufferSize = Convert.ToInt32(Math.Min(outputStream.Length' BufferSize));                     var buffer = new byte[bufferSize];                      int bytesRead;                     while ((bytesRead = outputStream.Read(buffer' 0' bufferSize)) > 0)                     {                         outputFile.Write(buffer' 0' bytesRead);                     }                     outputFile.Flush();                 }             }
Magic Number,Talifun.Web.Compress,Quadruplet<TFirst;TSecond;TThird;TFourth>,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\Quadruplet.cs,GetHashCode,The following statement contains a magic number: var ab = ((a << 5) + a) ^ Second.GetHashCode();
Magic Number,Talifun.Web.Compress,Quadruplet<TFirst;TSecond;TThird;TFourth>,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\Quadruplet.cs,GetHashCode,The following statement contains a magic number: var cd = ((c << 5) + a) ^ Third.GetHashCode();
Magic Number,Talifun.Web.Compress,Quadruplet<TFirst;TSecond;TThird;TFourth>,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\Quadruplet.cs,GetHashCode,The following statement contains a magic number: return ((ab << 5) + ab) ^ cd.GetHashCode();
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,OnPreRequestHandlerExecute,The following statement contains a magic number: try              {                  // Parse the QueryString into parts                  var urlInfo = GetDataFromQuery(httpApplication.Context.Request.QueryString);                    // Load the assembly                  var assembly = GetAssembly(urlInfo.First' urlInfo.Second);                    if (assembly == null) ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' urlInfo.Forth);                    //var lastModified = File.GetLastWriteTimeUtc(assembly.Location);                    // Get the resource info from assembly.                  var resourceInfo = GetResourceInfo(assembly' urlInfo.Third);                    if (!resourceInfo.First) ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' urlInfo.Forth);                    // If the WebResource needs to perform substitution (WebResource inside WebResource)' we leave it to the original AssemblyResourceLoader handler ;-)                  if (resourceInfo.Second) return;                    response.Clear();                    // Set the response cache headers                  SetCachingHeadersForWebResource(response.Cache' etag' Expires);                    // Set the response content type                  response.ContentType = resourceInfo.Third;                    // Write content with compression                  if (resourceInfo.Forth && CompressionModuleHelper.IsCompressionSupported(httpContext' false))                  {                      using (var resourceStream = new StreamReader(assembly.GetManifestResourceStream(urlInfo.Third)' true))                      {                          CompressAndWriteToStream(resourceStream' httpApplication.Context);                      }                  }                      // Write content without compression                  else                  {                      using (var resourceStream = assembly.GetManifestResourceStream(urlInfo.Third))                      {                          WriteToStream(resourceStream' response.OutputStream);                      }                  }                  response.OutputStream.Flush();                  httpApplication.CompleteRequest();              }              catch (ArgumentNullException)              {                  return;              }              catch (TargetInvocationException)              {                  return;              }              catch (System.Security.Cryptography.CryptographicException)              {                  return;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,OnPreRequestHandlerExecute,The following statement contains a magic number: try              {                  // Parse the QueryString into parts                  var urlInfo = GetDataFromQuery(httpApplication.Context.Request.QueryString);                    // Load the assembly                  var assembly = GetAssembly(urlInfo.First' urlInfo.Second);                    if (assembly == null) ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' urlInfo.Forth);                    //var lastModified = File.GetLastWriteTimeUtc(assembly.Location);                    // Get the resource info from assembly.                  var resourceInfo = GetResourceInfo(assembly' urlInfo.Third);                    if (!resourceInfo.First) ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' urlInfo.Forth);                    // If the WebResource needs to perform substitution (WebResource inside WebResource)' we leave it to the original AssemblyResourceLoader handler ;-)                  if (resourceInfo.Second) return;                    response.Clear();                    // Set the response cache headers                  SetCachingHeadersForWebResource(response.Cache' etag' Expires);                    // Set the response content type                  response.ContentType = resourceInfo.Third;                    // Write content with compression                  if (resourceInfo.Forth && CompressionModuleHelper.IsCompressionSupported(httpContext' false))                  {                      using (var resourceStream = new StreamReader(assembly.GetManifestResourceStream(urlInfo.Third)' true))                      {                          CompressAndWriteToStream(resourceStream' httpApplication.Context);                      }                  }                      // Write content without compression                  else                  {                      using (var resourceStream = assembly.GetManifestResourceStream(urlInfo.Third))                      {                          WriteToStream(resourceStream' response.OutputStream);                      }                  }                  response.OutputStream.Flush();                  httpApplication.CompleteRequest();              }              catch (ArgumentNullException)              {                  return;              }              catch (TargetInvocationException)              {                  return;              }              catch (System.Security.Cryptography.CryptographicException)              {                  return;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,StreamCopy,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetAssembly,The following statement contains a magic number: switch (signal)              {                  case 's':                      assembly = typeof(AssemblyResourceLoader).Assembly;                      break;                  case 'p':                      assembly = Assembly.Load(assemblyName);                      break;                  case 'f':                      {                          var strArray = assemblyName.Split(new char[] { ''' });                          if (strArray.Length != 4)                          {                              ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                          }                          var assemblyRef = new AssemblyName                                                {                                                    Name = strArray[0]'                                                    Version = new Version(strArray[1])                                                };                          var name = strArray[2];                          assemblyRef.CultureInfo = name.Length > 0 ? new CultureInfo(name) : CultureInfo.InvariantCulture;                          var tokens = strArray[3];                          var publicKeyToken = new byte[tokens.Length / 2];                          for (var i = 0; i < publicKeyToken.Length; i++)                          {                              publicKeyToken[i] = byte.Parse(tokens.Substring(i * 2' 2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                          }                          assemblyRef.SetPublicKeyToken(publicKeyToken);                          assembly = Assembly.Load(assemblyRef);                          break;                      }                  default:                      ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);                      break;              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: if (string.IsNullOrEmpty(queryParam))              {                  ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: try              {                  decryptedParam = Decryptor.DecryptString(queryParam);              }              catch (MethodAccessException mae)              {                  ThrowHttpException(403' SR.WebResourceCompressionModuleReflectionNotAllowd' mae);              }              catch (Exception ex)              {                  ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest' ex);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: try              {                  decryptedParam = Decryptor.DecryptString(queryParam);              }              catch (MethodAccessException mae)              {                  ThrowHttpException(403' SR.WebResourceCompressionModuleReflectionNotAllowd' mae);              }              catch (Exception ex)              {                  ThrowHttpException(400' SR.WebResourceCompressionModuleInvalidRequest' ex);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: if (pipeIndex < 1 || pipeIndex > (decryptedParam.Length - 2))              {                  ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' decryptedParam);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: if (pipeIndex < 1 || pipeIndex > (decryptedParam.Length - 2))              {                  ThrowHttpException(404' SR.WebResourceCompressionModuleAssemblyNotFound' decryptedParam);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: if (pipeIndex > (decryptedParam.Length - 2))              {                  ThrowHttpException(404' SR.WebResourceCompressionModuleResourceNotFound' decryptedParam);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,GetDataFromQuery,The following statement contains a magic number: if (pipeIndex > (decryptedParam.Length - 2))              {                  ThrowHttpException(404' SR.WebResourceCompressionModuleResourceNotFound' decryptedParam);              }
Magic Number,Talifun.Web.Compress,WebResourceCompressionModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\Compress\WebResourceCompressionModule.cs,CombineHashCodes,The following statement contains a magic number: return (((hash1 << 5) + hash1) ^ hash2);
Magic Number,Talifun.Web.IpAddressAuthentication,IpAddressAuthenticationModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\IpAddressAuthentication\IpAddressAuthenticationModule.cs,OnEnter,The following statement contains a magic number: context.Response.StatusCode = 403;
Magic Number,Talifun.Web.RegexUrlAuthorization,RegexUrlAuthorizationModule,C:\repos\taliesins_talifun-web\src\Talifun.Web\RegexUrlAuthorization\RegexUrlAuthorizationModule.cs,OnEnter,The following statement contains a magic number: context.Response.StatusCode = 401;
Magic Number,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,EmbeddedResourceEntityResponder,The following statement contains a magic number: ResourceLastModified = new DateTime(2000' 1' 1)                  .AddDays(version.Build)                  .AddSeconds(version.Revision * 2)                  .ToUniversalTime();
Magic Number,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,EmbeddedResourceEntityResponder,The following statement contains a magic number: ResourceLastModified = new DateTime(2000' 1' 1)                  .AddDays(version.Build)                  .AddSeconds(version.Revision * 2)                  .ToUniversalTime();
Magic Number,Talifun.Web.StaticFile,EmbeddedResourceEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\EmbeddedResourceEntityResponder.cs,TryGetFileHandlerCacheItem,The following statement contains a magic number: if (cachedValue != null)              {                  entityCacheItem = cachedValue;              }              else              {                  //File does not exist                  if (!DoesEntityExists)                  {                      return false;                  }                    //File too large to send                  if (ResourceSize > MaxFileSizeToServe)                  {                      return false;                  }                    var etag = string.Empty;                  var lastModifiedFileTime = ResourceLastModified;                  //When a browser sets the If-Modified-Since field to 13-1-2010 10:30:58' another DateTime instance is created' but this one has a Ticks value of 633989754580000000                  //But the time from the file system is accurate to a tick. So it might be 633989754586086250.                  var lastModified = new DateTime(lastModifiedFileTime.Year' lastModifiedFileTime.Month'                                                  lastModifiedFileTime.Day' lastModifiedFileTime.Hour'                                                  lastModifiedFileTime.Minute' lastModifiedFileTime.Second);                  var contentType = MimeTyper.GetMimeType(ResourceExtension);                  var contentLength = ResourceSize;                    //ETAG is always calculated from uncompressed entity data                  switch (MimeSetting.EtagMethod)                  {                      case EtagMethodType.MD5:                          using (var resourceStream = _assembly.GetManifestResourceStream(ResourcePath))                          {                              etag = Hasher.Hash(resourceStream);                          }                          break;                      case EtagMethodType.LastModified:                          etag = lastModified.ToString("r");                          break;                      default:                          throw new Exception("Unknown etag method generation");                  }                    entityCacheItem = new EntityCacheItem                  {                      Etag = etag'                      LastModified = lastModified'                      ContentLength = contentLength'                      ContentType = contentType'                      CompressionType = ResponseCompressionType.None                  };                    if (MimeSetting.ServeFromMemory                      && (contentLength <= MimeSetting.MaxMemorySize))                  {                      // When not compressed' buffer is the size of the file but when compressed'                       // initial buffer size is one third of the file size. Assuming' compression                       // will give us less than 1/3rd of the size                      using (var memoryStream = new MemoryStream(                          entityStoredWithCompressionType == ResponseCompressionType.None                              ?                                  Convert.ToInt32(ResourceSize)                              :                                  Convert.ToInt32((double)ResourceSize / 3)))                      {                          GetEntityData(entityStoredWithCompressionType' memoryStream);                          var entityData = memoryStream.ToArray();                          var entityDataLength = entityData.LongLength;                            entityCacheItem.EntityData = entityData;                          entityCacheItem.ContentLength = entityDataLength;                          entityCacheItem.CompressionType = entityStoredWithCompressionType;                      }                  }                    //Put fileHandlerCacheItem into cache with 30 min sliding expiration' also if file changes then remove fileHandlerCacheItem from cache                  CacheManager.Insert(                      cacheKey'                      entityCacheItem'                      null'                      Cache.NoAbsoluteExpiration'                      MimeSetting.MemorySlidingExpiration'                      CacheItemPriority.BelowNormal'                      null);              }
Magic Number,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,TryGetFileHandlerCacheItem,The following statement contains a magic number: if (cachedValue != null)              {                  fileEntityCacheItem = cachedValue;              }              else              {                  //File does not exist                  if (!FileInfo.Exists)                  {                      return false;                  }                    //File too large to send                  if (FileInfo.Length > MaxFileSizeToServe)                  {                      return false;                  }                    var etag = string.Empty;                  var lastModifiedFileTime = FileInfo.LastWriteTime.ToUniversalTime();                  //When a browser sets the If-Modified-Since field to 13-1-2010 10:30:58' another DateTime instance is created' but this one has a Ticks value of 633989754580000000                  //But the time from the file system is accurate to a tick. So it might be 633989754586086250.                  var lastModified = new DateTime(lastModifiedFileTime.Year' lastModifiedFileTime.Month'                                                  lastModifiedFileTime.Day' lastModifiedFileTime.Hour'                                                  lastModifiedFileTime.Minute' lastModifiedFileTime.Second);                  var contentType = MimeTyper.GetMimeType(FileInfo.Extension);                  var contentLength = FileInfo.Length;                    //ETAG is always calculated from uncompressed entity data                  switch (MimeSetting.EtagMethod)                  {                      case EtagMethodType.MD5:                          etag = Hasher.Hash(FileInfo);                          break;                      case EtagMethodType.LastModified:                          etag = lastModified.ToString();                          break;                      default:                          throw new Exception("Unknown etag method generation");                  }                    fileEntityCacheItem = new EntityCacheItem                  {                      Etag = etag'                      LastModified = lastModified'                      ContentLength = contentLength'                      ContentType = contentType'                      CompressionType = ResponseCompressionType.None                  };                    if (MimeSetting.ServeFromMemory                      && (contentLength <= MimeSetting.MaxMemorySize))                  {                      // When not compressed' buffer is the size of the file but when compressed'                       // initial buffer size is one third of the file size. Assuming' compression                       // will give us less than 1/3rd of the size                      using (var memoryStream = new MemoryStream(                          entityStoredWithCompressionType == ResponseCompressionType.None                              ?                                  Convert.ToInt32(FileInfo.Length)                              :                                  Convert.ToInt32((double)FileInfo.Length / 3)))                      {                          GetEntityData(entityStoredWithCompressionType' memoryStream);                          var entityData = memoryStream.ToArray();                          var entityDataLength = entityData.LongLength;                            fileEntityCacheItem.EntityData = entityData;                          fileEntityCacheItem.ContentLength = entityDataLength;                          fileEntityCacheItem.CompressionType = entityStoredWithCompressionType;                      }                  }                    //Put fileHandlerCacheItem into cache with 30 min sliding expiration' also if file changes then remove fileHandlerCacheItem from cache                  CacheManager.Insert(                      cacheKey'                      fileEntityCacheItem'                      new CacheDependency(FileInfo.FullName)'                      Cache.NoAbsoluteExpiration'                      MimeSetting.MemorySlidingExpiration'                      CacheItemPriority.BelowNormal'                      null);              }
Magic Number,Talifun.Web.StaticFile,FileEntityResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\FileEntityResponder.cs,GetEntityData,The following statement contains a magic number: using (var outputStream = (compressionType == ResponseCompressionType.None ? stream : (compressionType == ResponseCompressionType.GZip ? (Stream)new GZipStream(stream' CompressionMode.Compress' true) : (Stream)new DeflateStream(stream' CompressionMode.Compress))))              {                  // We can compress and cache this file                  using (var fileStream = RetryableFileOpener.OpenFileStream(FileInfo' 5' FileMode.Open' FileAccess.Read' FileShare.Read))                  {                      var bufferSize = Convert.ToInt32(Math.Min(FileInfo.Length' BufferSize));                      var buffer = new byte[bufferSize];                        int bytesRead;                      while ((bytesRead = fileStream.Read(buffer' 0' bufferSize)) > 0)                      {                          outputStream.Write(buffer' 0' bytesRead);                      }                  }                    outputStream.Flush();              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  //If there no matches then we do not want a cached response                  ifNoneMatch = HttpRequestHeaderHelper.CheckIfNoneMatch(request' etag' true);                  if (ifNoneMatch.HasValue)                  {                      if (ifNoneMatch.Value && responseCode == HttpStatusCode.NotModified)                      {                          responseCode = HttpStatusCode.Ok;                      }                      else                      {                          //If the request would' without the If-None-Match header field' result in                           //anything other than a 2xx or 304 status' then the If-None-Match header MUST be ignored.                          responseCode = HttpStatusCode.NotModified;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  //If there no matches then we do not want a cached response                  ifNoneMatch = HttpRequestHeaderHelper.CheckIfNoneMatch(request' etag' true);                  if (ifNoneMatch.HasValue)                  {                      if (ifNoneMatch.Value && responseCode == HttpStatusCode.NotModified)                      {                          responseCode = HttpStatusCode.Ok;                      }                      else                      {                          //If the request would' without the If-None-Match header field' result in                           //anything other than a 2xx or 304 status' then the If-None-Match header MUST be ignored.                          responseCode = HttpStatusCode.NotModified;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  //If there no matches then we do not want a cached response                  ifNoneMatch = HttpRequestHeaderHelper.CheckIfNoneMatch(request' etag' true);                  if (ifNoneMatch.HasValue)                  {                      if (ifNoneMatch.Value && responseCode == HttpStatusCode.NotModified)                      {                          responseCode = HttpStatusCode.Ok;                      }                      else                      {                          //If the request would' without the If-None-Match header field' result in                           //anything other than a 2xx or 304 status' then the If-None-Match header MUST be ignored.                          responseCode = HttpStatusCode.NotModified;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  ifMatch = HttpRequestHeaderHelper.CheckIfMatch(request' etag' true);                  if (ifMatch.HasValue && !ifMatch.Value)                  {                      //If none of the entity tags match' or if "*" is given and no current                       //entity exists' the server MUST NOT perform the requested method' and                       //MUST return a 412 (Precondition Failed) response                        //If the request would' without the If-Match header field' result in                       //anything other than a 2xx or 412 status' then the If-Match header MUST be ignored.                      responseCode = HttpStatusCode.PreconditionFailed;                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  ifMatch = HttpRequestHeaderHelper.CheckIfMatch(request' etag' true);                  if (ifMatch.HasValue && !ifMatch.Value)                  {                      //If none of the entity tags match' or if "*" is given and no current                       //entity exists' the server MUST NOT perform the requested method' and                       //MUST return a 412 (Precondition Failed) response                        //If the request would' without the If-Match header field' result in                       //anything other than a 2xx or 412 status' then the If-Match header MUST be ignored.                      responseCode = HttpStatusCode.PreconditionFailed;                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))              {                  ifMatch = HttpRequestHeaderHelper.CheckIfMatch(request' etag' true);                  if (ifMatch.HasValue && !ifMatch.Value)                  {                      //If none of the entity tags match' or if "*" is given and no current                       //entity exists' the server MUST NOT perform the requested method' and                       //MUST return a 412 (Precondition Failed) response                        //If the request would' without the If-Match header field' result in                       //anything other than a 2xx or 412 status' then the If-Match header MUST be ignored.                      responseCode = HttpStatusCode.PreconditionFailed;                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if (!(ifNoneMatch.HasValue && ifNoneMatch.Value) || !(ifMatch.HasValue && !ifMatch.Value))              {                  //Only use weakly typed etags headers if strong ones are valid                    bool? unlessModifiedSince = null;                  bool? ifUnmodifiedSince = null;                  bool? ifModifiedSince = null;                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      unlessModifiedSince = HttpRequestHeaderHelper.CheckUnlessModifiedSince(request' lastModified);                      if (unlessModifiedSince.HasValue && !unlessModifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                            //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifUnmodifiedSince = HttpRequestHeaderHelper.CheckIfUnmodifiedSince(request' lastModified);                      if (ifUnmodifiedSince.HasValue && !ifUnmodifiedSince.Value)                      {                          //If the requested variant has been modified since the specified time'                           //the server MUST NOT perform the requested operation' and MUST return                           //a 412 (Precondition Failed). Otherwise header is ignored.                             //If the request normally (i.e.' without the If-Unmodified-Since header)                           //would result in anything other than a 2xx or 412 status'                           //the If-Unmodified-Since header SHOULD be ignored.                          responseCode = HttpStatusCode.PreconditionFailed;                      }                  }                    if ((((int)responseCode >= 200 && (int)responseCode <= 299 || (int)responseCode == 304)))                  {                      ifModifiedSince = HttpRequestHeaderHelper.CheckIfModifiedSince(request' lastModified);                      if (ifModifiedSince.HasValue)                      {                          if (ifModifiedSince.Value && responseCode == HttpStatusCode.NotModified)                          {                              //ifNoneMatch must be ignored if ifModifiedSince does not match so return entire entity                              responseCode = HttpStatusCode.Ok;                          }                          else                          {                              responseCode = HttpStatusCode.NotModified;                          }                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299)))              {                  var ifRange = HttpRequestHeaderHelper.CheckIfRange(request' etag' lastModified);                  if (ifRange.HasValue)                  {                      //GET /foo HTTP/1.1                      //Range: 500-1000                      //If-Match: "abc"' "xyz"                      //If-Range: "xyz"                        //This clearly says: if the entity is "abc"' send me the whole thing' if                      //it's "xyz"' send me the second 500 bytes' otherwise' send me a 412.                        //if the entity is unchanged' send me the part(s) that I am missing; otherwise' send me the entire new entity                      if (ifRange.Value)                      {                          responseCode = HttpStatusCode.PartialContent;                      }                      else                      {                          responseCode = HttpStatusCode.Ok;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,HttpRequestResponder,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\HttpRequestResponder.cs,GetResponseHttpStatus,The following statement contains a magic number: if ((((int)responseCode >= 200 && (int)responseCode <= 299)))              {                  var ifRange = HttpRequestHeaderHelper.CheckIfRange(request' etag' lastModified);                  if (ifRange.HasValue)                  {                      //GET /foo HTTP/1.1                      //Range: 500-1000                      //If-Match: "abc"' "xyz"                      //If-Range: "xyz"                        //This clearly says: if the entity is "abc"' send me the whole thing' if                      //it's "xyz"' send me the second 500 bytes' otherwise' send me a 412.                        //if the entity is unchanged' send me the part(s) that I am missing; otherwise' send me the entire new entity                      if (ifRange.Value)                      {                          responseCode = HttpStatusCode.PartialContent;                      }                      else                      {                          responseCode = HttpStatusCode.Ok;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,DetectWebServerType,The following statement contains a magic number: if (worker != null)              {                  var workerType = worker.GetType();                  if (workerType != null)                  {                      switch (workerType.FullName)                      {                          case "System.Web.Hosting.ISAPIWorkerRequest":                              //IIS 7 in Classic mode gets lumped in here too                              WebServerType = WebServerType.IIS6orIIS7ClassicMode;                              break;                          case "Microsoft.VisualStudio.WebHost.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version >= 11)                                  {                                      WebServerType = WebServerType.VisualStudio2012;                                  }                                  else if (version > 10)                                  {                                      WebServerType = WebServerType.VisualStudio2010;                                  }                                  else if (version > 9)                                  {                                      WebServerType = WebServerType.VisualStudio2008;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "Cassini.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version > 9)                                  {                                      WebServerType = WebServerType.IIS7;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "System.Web.Hosting.IIS7WorkerRequest":                              WebServerType = WebServerType.IIS7;                              break;                          default:                              WebServerType = WebServerType.Unknown;                              break;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,DetectWebServerType,The following statement contains a magic number: if (worker != null)              {                  var workerType = worker.GetType();                  if (workerType != null)                  {                      switch (workerType.FullName)                      {                          case "System.Web.Hosting.ISAPIWorkerRequest":                              //IIS 7 in Classic mode gets lumped in here too                              WebServerType = WebServerType.IIS6orIIS7ClassicMode;                              break;                          case "Microsoft.VisualStudio.WebHost.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version >= 11)                                  {                                      WebServerType = WebServerType.VisualStudio2012;                                  }                                  else if (version > 10)                                  {                                      WebServerType = WebServerType.VisualStudio2010;                                  }                                  else if (version > 9)                                  {                                      WebServerType = WebServerType.VisualStudio2008;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "Cassini.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version > 9)                                  {                                      WebServerType = WebServerType.IIS7;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "System.Web.Hosting.IIS7WorkerRequest":                              WebServerType = WebServerType.IIS7;                              break;                          default:                              WebServerType = WebServerType.Unknown;                              break;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,DetectWebServerType,The following statement contains a magic number: if (worker != null)              {                  var workerType = worker.GetType();                  if (workerType != null)                  {                      switch (workerType.FullName)                      {                          case "System.Web.Hosting.ISAPIWorkerRequest":                              //IIS 7 in Classic mode gets lumped in here too                              WebServerType = WebServerType.IIS6orIIS7ClassicMode;                              break;                          case "Microsoft.VisualStudio.WebHost.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version >= 11)                                  {                                      WebServerType = WebServerType.VisualStudio2012;                                  }                                  else if (version > 10)                                  {                                      WebServerType = WebServerType.VisualStudio2010;                                  }                                  else if (version > 9)                                  {                                      WebServerType = WebServerType.VisualStudio2008;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "Cassini.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version > 9)                                  {                                      WebServerType = WebServerType.IIS7;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "System.Web.Hosting.IIS7WorkerRequest":                              WebServerType = WebServerType.IIS7;                              break;                          default:                              WebServerType = WebServerType.Unknown;                              break;                      }                  }              }
Magic Number,Talifun.Web.StaticFile,WebServerDetector,C:\repos\taliesins_talifun-web\src\Talifun.Web\StaticFile\WebServerDetector.cs,DetectWebServerType,The following statement contains a magic number: if (worker != null)              {                  var workerType = worker.GetType();                  if (workerType != null)                  {                      switch (workerType.FullName)                      {                          case "System.Web.Hosting.ISAPIWorkerRequest":                              //IIS 7 in Classic mode gets lumped in here too                              WebServerType = WebServerType.IIS6orIIS7ClassicMode;                              break;                          case "Microsoft.VisualStudio.WebHost.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version >= 11)                                  {                                      WebServerType = WebServerType.VisualStudio2012;                                  }                                  else if (version > 10)                                  {                                      WebServerType = WebServerType.VisualStudio2010;                                  }                                  else if (version > 9)                                  {                                      WebServerType = WebServerType.VisualStudio2008;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "Cassini.Request":                              {                                  var version = workerType.Assembly.GetName().Version.Major;                                  if (version > 9)                                  {                                      WebServerType = WebServerType.IIS7;                                  }                                  else                                  {                                      WebServerType = WebServerType.Cassini;                                  }                                  break;                              }                          case "System.Web.Hosting.IIS7WorkerRequest":                              WebServerType = WebServerType.IIS7;                              break;                          default:                              WebServerType = WebServerType.Unknown;                              break;                      }                  }              }
Missing Default,Talifun.Web,EntityResponseMultiPart,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseMultiPart.cs,SendHeaders,The following switch statement is missing a default case: switch (compressionType)              {                  case ResponseCompressionType.None:                      var partialContentLength = GetMultipartPartialRequestLength(Ranges' entity.ContentType' entity.ContentLength);                      HttpResponseHeaderHelper.AppendHeader(response' HttpHeaderContentLength' partialContentLength.ToString());                      break;                  case ResponseCompressionType.GZip:                      response.BufferOutput = true;                      response.Filter = new GZipStream(response.Filter' CompressionMode.Compress);                      //This means that the output stream will be chunked' so we don't have to worry about content length                      break;                  case ResponseCompressionType.Deflate:                      response.BufferOutput = true;                      response.Filter = new DeflateStream(response.Filter' CompressionMode.Compress);                      //This means that the output stream will be chunked' so we don't have to worry about content length                      break;              }
Missing Default,Talifun.Web,EntityResponseFull,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseFull.cs,SendHeaders,The following switch statement is missing a default case: switch (compressionType)                  {                      case ResponseCompressionType.GZip:                          response.BufferOutput = true;                          response.Filter = new GZipStream(response.Filter' CompressionMode.Compress' true);                          //This means that the output stream will be chunked' so we don't have to worry about content length                          break;                      case ResponseCompressionType.Deflate:                          response.BufferOutput = true;                          response.Filter = new DeflateStream(response.Filter' CompressionMode.Compress' true);                          //This means that the output stream will be chunked' so we don't have to worry about content length                          break;                  }
Missing Default,Talifun.Web,EntityResponseSinglePart,C:\repos\taliesins_talifun-web\src\Talifun.Web\Http\EntityResponseSinglePart.cs,SendHeaders,The following switch statement is missing a default case: switch (compressionType)              {                  case ResponseCompressionType.None:                      var contentLength = Range.EndRange - Range.StartRange + 1;                      HttpResponseHeaderHelper.AppendHeader(response' HttpHeaderContentLength' contentLength.ToString());                      break;                  case ResponseCompressionType.GZip:                      response.BufferOutput = true;                      response.Filter = new GZipStream(response.Filter' CompressionMode.Compress);                      //This means that the output stream will be chunked' so we don't have to worry about content length                      break;                  case ResponseCompressionType.Deflate:                      response.BufferOutput = true;                      response.Filter = new DeflateStream(response.Filter' CompressionMode.Compress);                      //This means that the output stream will be chunked' so we don't have to worry about content length                      break;              }
