Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHapiTools.Base.IO,MultipleFilesStream,C:\repos\dib0_NHapiTools\Base\IO\MultipleFilesStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 19
Long Parameter List,NHapiTools.Base,Extensions,C:\repos\dib0_NHapiTools\Base\Extensions.cs,GenerateAck,The method has 5 parameters.
Long Statement,NHapiTools.Base.CustomImplementation.V21.Messages,ACK,C:\repos\dib0_NHapiTools\Base\CustomImplementation\V21\Messages\ACK.cs,init,The length of the statement  "		HapiLogFactory.GetHapiLog (this.GetType ()).Error ((object)"Unexpected error creating ACK - this is probably a bug in the source code generator."' (Exception)ex); " is 162.
Long Statement,NHapiTools.Base.CustomImplementation.V22.Messages,ACK,C:\repos\dib0_NHapiTools\Base\CustomImplementation\V22\Messages\ACK.cs,init,The length of the statement  "		HapiLogFactory.GetHapiLog (this.GetType ()).Error ((object)"Unexpected error creating ACK - this is probably a bug in the source code generator."' (Exception)ex); " is 162.
Long Statement,NHapiTools.Base.IO,HL7FilterBase64AttachmentsStream,C:\repos\dib0_NHapiTools\Base\IO\HL7FilterBase64AttachmentsStream.cs,Read,The length of the statement  "			if (subBuffer [i] != '|' && subBuffer [i] != '\r' && subBuffer [i] != '\n' && subBuffer [i] != '^' && subBuffer [i] != '~' && subBuffer [i] != '&') { " is 149.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	bool exists = messagesOutput.ToString ().Contains (string.Format ("public static IEnumerable Get{1}Records(this {0} message)"' typeName' name)); " is 144.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("        public static IEnumerable Get{1}Records(this {0} message)\n"' typeName' name)); " is 126.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("            object[] result = message.GetRecords(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name)); " is 136.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("        public static List<{0}> GetAll{1}Records(this {2} message)\n"' returnType' name' typeName)); " is 139.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("            return message.GetAllRecords<{1}>(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name' returnType)); " is 145.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("        public static {0} Add{1}(this {2} message)\n"' returnType' name' typeName)); " is 123.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateMessageMethods,The length of the statement  "	messagesOutput.Append (string.Format ("            return message.Get{0}(message.{0}RepetitionsUsed);\n"' name' returnType)); " is 125.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	bool exists = segmentOutput.ToString ().Contains (string.Format ("public static IEnumerable Get{1}Records(this {0} message)"' typeName' name)); " is 143.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("        public static IEnumerable Get{1}Records(this {0} message)\n"' typeName' name)); " is 125.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("            object[] result = message.GetRecords(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name)); " is 135.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("        public static List<{0}> GetAll{1}Records(this {2} message)\n"' returnType' name' typeName)); " is 138.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("            return message.GetAllRecords<{1}>(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name' returnType)); " is 144.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("        public static {0} Add{1}(this {2} message)\n"' returnType' name' typeName)); " is 122.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateSegmentMethods,The length of the statement  "	segmentOutput.Append (string.Format ("            return message.Get{0}(message.{0}RepetitionsUsed);\n"' name' returnType)); " is 124.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	bool exists = groupOutput.ToString ().Contains (string.Format ("public static IEnumerable Get{1}Records(this {0} message)"' typeName' name)); " is 141.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("        public static IEnumerable Get{1}Records(this {0} message)\n"' typeName' name)); " is 123.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("            object[] result = message.GetRecords(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name)); " is 133.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("        public static List<{0}> GetAll{1}Records(this {2} message)\n"' returnType' name' typeName)); " is 136.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("            return message.GetAllRecords<{1}>(\"{0}RepetitionsUsed\"' \"Get{0}\");\n"' name' returnType)); " is 142.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("        public static {0} Add{1}(this {2} message)\n"' returnType' name' typeName)); " is 120.
Long Statement,NHapiTools.Base.ModelToolsGenerator,Generator,C:\repos\dib0_NHapiTools\Base\ModelToolsGenerator\Generator.cs,GenerateGroupMethods,The length of the statement  "	groupOutput.Append (string.Format ("            return message.Get{0}(message.{0}RepetitionsUsed);\n"' name' returnType)); " is 122.
Long Statement,NHapiTools.Base.Net,SimpleMLLPClient,C:\repos\dib0_NHapiTools\Base\Net\SimpleMLLPClient.cs,EnableSsl,The length of the statement  "	SslStream sslStream = new SslStream (clientStream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate)' null); " is 133.
Long Statement,NHapiTools.Base.Net,SimpleMLLPClient,C:\repos\dib0_NHapiTools\Base\Net\SimpleMLLPClient.cs,EnableSsl,The length of the statement  "		sslStream.AuthenticateAsClient (serverHostname' cCollection' System.Security.Authentication.SslProtocols.Default' true); " is 120.
Long Statement,NHapiTools.Base.Util,Ack,C:\repos\dib0_NHapiTools\Base\Util\Ack.cs,MakeACK,The length of the statement  "	string ackClassType = string.Format ("NHapi.Model.V{0}.Message.ACK' NHapi.Model.V{0}"' inboundMessage.Version.Replace ("."' "")); " is 129.
Long Statement,NHapiTools.Base.Validation,ConfigurableContext,C:\repos\dib0_NHapiTools\Base\Validation\ConfigurableContext.cs,Init,The length of the statement  "	ValidationSection section = (ValidationSection)ConfigurationManager.GetSection ("hl7ValidationRulesGroup/hl7ValidationRules"); " is 126.
Long Statement,NHapiTools.Base.Validation.Rule,MessageRegExRule,C:\repos\dib0_NHapiTools\Base\Validation\Rule\MessageRegExRule.cs,test,The length of the statement  "					new ValidationException (string.Format ("Value '{0}' in '{1}' doesn't match regex '{2}'."' value' rule.FieldIndicator' rule.RegEx)) " is 131.
Complex Conditional,NHapiTools.Base.IO,HL7FilterBase64AttachmentsStream,C:\repos\dib0_NHapiTools\Base\IO\HL7FilterBase64AttachmentsStream.cs,Read,The conditional expression  "subBuffer [i] != '|' && subBuffer [i] != '\r' && subBuffer [i] != '\n' && subBuffer [i] != '^' && subBuffer [i] != '~' && subBuffer [i] != '&'"  is complex.
Complex Conditional,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The conditional expression  "nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')"  is complex.
Virtual Method Call from Constructor,NHapiTools.Base.Validation,BaseContext,C:\repos\dib0_NHapiTools\Base\Validation\BaseContext.cs,BaseContext,The constructor "BaseContext" calls a virtual method "Init".
Empty Catch Block,NHapiTools.Base.Model,GenericMessageWrapper,C:\repos\dib0_NHapiTools\Base\Model\GenericMessageWrapper.cs,Unwrap,The method has an empty catch block.
Empty Catch Block,NHapiTools.Base.Net,SimpleMLLPClient,C:\repos\dib0_NHapiTools\Base\Net\SimpleMLLPClient.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NHapiTools.Base.Validation,AutomatedContext,C:\repos\dib0_NHapiTools\Base\Validation\AutomatedContext.cs,Init,The method has an empty catch block.
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myNext == null) {  	int next;  	int prev = -1;  	int endOfBuffer = -1;  	bool inComment = false;  	while (true) {  		try {  			next = inputStream.ReadByte ();  		}  		catch (IOException e) {  			throw new Exception ("IOException reading from input"' e);  		}  		if (next == -1) {  			break;  		}  		char nextChar = (char)next;  		if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  			inComment = true;  			continue;  		}  		// Convert '\n' or "\r\n" to '\r'  		if (nextChar == 10) {  			if (myBuffer.Length > 0) {  				if (myBuffer [myBuffer.Length - 1] == 13) {  					// don't append  				}  				else {  					myBuffer.Append ((char)13);  				}  			}  		}  		else if (inComment) {  			if (nextChar == 10 || nextChar == 13) {  				inComment = false;  			}  		}  		else {  			myBuffer.Append (nextChar);  		}  		prev = next;  		int bLength = myBuffer.Length;  		if (nextChar == 'H' && bLength >= 3) {  			if (myBuffer [bLength - 2] == 'S') {  				if (myBuffer [bLength - 3] == 'M') {  					if (myFoundMessageInBuffer) {  						if (myBuffer [bLength - 4] < 32) {  							endOfBuffer = bLength - 3;  							break;  						}  					}  					else {  						// Delete any whitespace or other stuff before  						// the first message  						myBuffer.Remove (0' bLength - 3);  						myFoundMessageInBuffer = true;  					}  				}  			}  		}  	}  	// while(true)  	if (!myFoundMessageInBuffer) {  		myHasNext = false;  		return myHasNext;  	}  	String msgString;  	if (endOfBuffer > -1) {  		msgString = myBuffer.ToString ().Substring (0' endOfBuffer);  		myBuffer.Remove (0' endOfBuffer);  	}  	else {  		msgString = myBuffer.ToString ();  		myBuffer.Clear ();  	}  	if (!msgString.StartsWith ("MSH")) {  		myHasNext = false;  		return myHasNext;  	}  	myNext = msgString;  	myHasNext = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: while (true) {  	try {  		next = inputStream.ReadByte ();  	}  	catch (IOException e) {  		throw new Exception ("IOException reading from input"' e);  	}  	if (next == -1) {  		break;  	}  	char nextChar = (char)next;  	if (nextChar == '#' && myIgnoreComments && (prev == -1 || prev == '\n' || prev == '\r')) {  		inComment = true;  		continue;  	}  	// Convert '\n' or "\r\n" to '\r'  	if (nextChar == 10) {  		if (myBuffer.Length > 0) {  			if (myBuffer [myBuffer.Length - 1] == 13) {  				// don't append  			}  			else {  				myBuffer.Append ((char)13);  			}  		}  	}  	else if (inComment) {  		if (nextChar == 10 || nextChar == 13) {  			inComment = false;  		}  	}  	else {  		myBuffer.Append (nextChar);  	}  	prev = next;  	int bLength = myBuffer.Length;  	if (nextChar == 'H' && bLength >= 3) {  		if (myBuffer [bLength - 2] == 'S') {  			if (myBuffer [bLength - 3] == 'M') {  				if (myFoundMessageInBuffer) {  					if (myBuffer [bLength - 4] < 32) {  						endOfBuffer = bLength - 3;  						break;  					}  				}  				else {  					// Delete any whitespace or other stuff before  					// the first message  					myBuffer.Remove (0' bLength - 3);  					myFoundMessageInBuffer = true;  				}  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10) {  	if (myBuffer.Length > 0) {  		if (myBuffer [myBuffer.Length - 1] == 13) {  			// don't append  		}  		else {  			myBuffer.Append ((char)13);  		}  	}  }  else if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10) {  	if (myBuffer.Length > 0) {  		if (myBuffer [myBuffer.Length - 1] == 13) {  			// don't append  		}  		else {  			myBuffer.Append ((char)13);  		}  	}  }  else if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10) {  	if (myBuffer.Length > 0) {  		if (myBuffer [myBuffer.Length - 1] == 13) {  			// don't append  		}  		else {  			myBuffer.Append ((char)13);  		}  	}  }  else if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10) {  	if (myBuffer.Length > 0) {  		if (myBuffer [myBuffer.Length - 1] == 13) {  			// don't append  		}  		else {  			myBuffer.Append ((char)13);  		}  	}  }  else if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10) {  	if (myBuffer.Length > 0) {  		if (myBuffer [myBuffer.Length - 1] == 13) {  			// don't append  		}  		else {  			myBuffer.Append ((char)13);  		}  	}  }  else if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer.Length > 0) {  	if (myBuffer [myBuffer.Length - 1] == 13) {  		// don't append  	}  	else {  		myBuffer.Append ((char)13);  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer.Length > 0) {  	if (myBuffer [myBuffer.Length - 1] == 13) {  		// don't append  	}  	else {  		myBuffer.Append ((char)13);  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [myBuffer.Length - 1] == 13) {  	// don't append  }  else {  	myBuffer.Append ((char)13);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [myBuffer.Length - 1] == 13) {  	// don't append  }  else {  	myBuffer.Append ((char)13);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: myBuffer.Append ((char)13);  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (inComment) {  	if (nextChar == 10 || nextChar == 13) {  		inComment = false;  	}  }  else {  	myBuffer.Append (nextChar);  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10 || nextChar == 13) {  	inComment = false;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 10 || nextChar == 13) {  	inComment = false;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (nextChar == 'H' && bLength >= 3) {  	if (myBuffer [bLength - 2] == 'S') {  		if (myBuffer [bLength - 3] == 'M') {  			if (myFoundMessageInBuffer) {  				if (myBuffer [bLength - 4] < 32) {  					endOfBuffer = bLength - 3;  					break;  				}  			}  			else {  				// Delete any whitespace or other stuff before  				// the first message  				myBuffer.Remove (0' bLength - 3);  				myFoundMessageInBuffer = true;  			}  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 2] == 'S') {  	if (myBuffer [bLength - 3] == 'M') {  		if (myFoundMessageInBuffer) {  			if (myBuffer [bLength - 4] < 32) {  				endOfBuffer = bLength - 3;  				break;  			}  		}  		else {  			// Delete any whitespace or other stuff before  			// the first message  			myBuffer.Remove (0' bLength - 3);  			myFoundMessageInBuffer = true;  		}  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 3] == 'M') {  	if (myFoundMessageInBuffer) {  		if (myBuffer [bLength - 4] < 32) {  			endOfBuffer = bLength - 3;  			break;  		}  	}  	else {  		// Delete any whitespace or other stuff before  		// the first message  		myBuffer.Remove (0' bLength - 3);  		myFoundMessageInBuffer = true;  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 3] == 'M') {  	if (myFoundMessageInBuffer) {  		if (myBuffer [bLength - 4] < 32) {  			endOfBuffer = bLength - 3;  			break;  		}  	}  	else {  		// Delete any whitespace or other stuff before  		// the first message  		myBuffer.Remove (0' bLength - 3);  		myFoundMessageInBuffer = true;  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 3] == 'M') {  	if (myFoundMessageInBuffer) {  		if (myBuffer [bLength - 4] < 32) {  			endOfBuffer = bLength - 3;  			break;  		}  	}  	else {  		// Delete any whitespace or other stuff before  		// the first message  		myBuffer.Remove (0' bLength - 3);  		myFoundMessageInBuffer = true;  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 3] == 'M') {  	if (myFoundMessageInBuffer) {  		if (myBuffer [bLength - 4] < 32) {  			endOfBuffer = bLength - 3;  			break;  		}  	}  	else {  		// Delete any whitespace or other stuff before  		// the first message  		myBuffer.Remove (0' bLength - 3);  		myFoundMessageInBuffer = true;  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 3] == 'M') {  	if (myFoundMessageInBuffer) {  		if (myBuffer [bLength - 4] < 32) {  			endOfBuffer = bLength - 3;  			break;  		}  	}  	else {  		// Delete any whitespace or other stuff before  		// the first message  		myBuffer.Remove (0' bLength - 3);  		myFoundMessageInBuffer = true;  	}  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myFoundMessageInBuffer) {  	if (myBuffer [bLength - 4] < 32) {  		endOfBuffer = bLength - 3;  		break;  	}  }  else {  	// Delete any whitespace or other stuff before  	// the first message  	myBuffer.Remove (0' bLength - 3);  	myFoundMessageInBuffer = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myFoundMessageInBuffer) {  	if (myBuffer [bLength - 4] < 32) {  		endOfBuffer = bLength - 3;  		break;  	}  }  else {  	// Delete any whitespace or other stuff before  	// the first message  	myBuffer.Remove (0' bLength - 3);  	myFoundMessageInBuffer = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myFoundMessageInBuffer) {  	if (myBuffer [bLength - 4] < 32) {  		endOfBuffer = bLength - 3;  		break;  	}  }  else {  	// Delete any whitespace or other stuff before  	// the first message  	myBuffer.Remove (0' bLength - 3);  	myFoundMessageInBuffer = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myFoundMessageInBuffer) {  	if (myBuffer [bLength - 4] < 32) {  		endOfBuffer = bLength - 3;  		break;  	}  }  else {  	// Delete any whitespace or other stuff before  	// the first message  	myBuffer.Remove (0' bLength - 3);  	myFoundMessageInBuffer = true;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 4] < 32) {  	endOfBuffer = bLength - 3;  	break;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 4] < 32) {  	endOfBuffer = bLength - 3;  	break;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: if (myBuffer [bLength - 4] < 32) {  	endOfBuffer = bLength - 3;  	break;  }  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: endOfBuffer = bLength - 3;  
Magic Number,NHapiTools.Base.IO,HL7InputStreamMessageStringEnumerator,C:\repos\dib0_NHapiTools\Base\IO\HL7InputStreamMessageStringEnumerator.cs,MoveNext,The following statement contains a magic number: myBuffer.Remove (0' bLength - 3);  
Magic Number,NHapiTools.Base.Util,Ack,C:\repos\dib0_NHapiTools\Base\Util\Ack.cs,MakeACK,The following statement contains a magic number: try {  	version = Terser.Get (inboundHeader' 12' 0' 1' 1);  }  catch (NHapi.Base.HL7Exception) {  	// I'm not happy to proceed if we can't identify the inbound  	// message version.  	throw new NHapi.Base.HL7Exception ("Failed to get valid HL7 version from inbound MSH-12-1");  }  
Magic Number,NHapiTools.Base.Util,Ack,C:\repos\dib0_NHapiTools\Base\Util\Ack.cs,MakeACK,The following statement contains a magic number: version = Terser.Get (inboundHeader' 12' 0' 1' 1);  
Magic Number,NHapiTools.Base.Util,Ack,C:\repos\dib0_NHapiTools\Base\Util\Ack.cs,MakeACK,The following statement contains a magic number: terser.Set ("/MSA-2"' Terser.Get (inboundHeader' 10' 0' 1' 1));  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,StripMLLPContainer,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,StripMLLPContainer,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,ValidateMLLPMessage,The following statement contains a magic number: if (sb.Length > 3) {  	if (((int)sb [0] == MLLP_START_CHARACTER)) {  		if (((int)sb [sb.Length - 2] == MLLP_FIRST_END_CHARACTER) && ((int)sb [sb.Length - 1] == MLLP_LAST_END_CHARACTER))  			result = true;  	}  }  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,ValidateMLLPMessage,The following statement contains a magic number: if (sb.Length > 3) {  	if (((int)sb [0] == MLLP_START_CHARACTER)) {  		if (((int)sb [sb.Length - 2] == MLLP_FIRST_END_CHARACTER) && ((int)sb [sb.Length - 1] == MLLP_LAST_END_CHARACTER))  			result = true;  	}  }  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,ValidateMLLPMessage,The following statement contains a magic number: if (((int)sb [0] == MLLP_START_CHARACTER)) {  	if (((int)sb [sb.Length - 2] == MLLP_FIRST_END_CHARACTER) && ((int)sb [sb.Length - 1] == MLLP_LAST_END_CHARACTER))  		result = true;  }  
Magic Number,NHapiTools.Base.Util,MLLP,C:\repos\dib0_NHapiTools\Base\Util\MLLP.cs,ValidateMLLPMessage,The following statement contains a magic number: if (((int)sb [sb.Length - 2] == MLLP_FIRST_END_CHARACTER) && ((int)sb [sb.Length - 1] == MLLP_LAST_END_CHARACTER))  	result = true;  
