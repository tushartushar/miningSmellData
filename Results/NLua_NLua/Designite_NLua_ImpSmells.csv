Implementation smell,Namespace,Class,File,Method,Description
Magic Number,NLua,LuaNetRunner,C:\repos\NLua_NLua\Applications\LuaRunner\LuaNetRunner.cs,Main,The following statement contains a magic number: try {    				using (Lua lua = new Lua ()) {  					//lua.OpenLibs();			// steffenj: Lua 5.1.1 API change (all libs already opened in Lua constructor!)  					lua.NewTable ("arg");  					LuaTable argc = (LuaTable)lua ["arg"];  					  					argc [0] = "NLua";  					  					for (int i = 0; i < args.Length; i++) {  						argc [i + 1] = args [i];  					}    					argc ["n"] = args.Length;    					lua.LoadCLRPackage ();  					  					try {  						lua.DoString (lua_script'"lua");  					} catch (Exception e) {  						// limit size of stack traceback message to roughly 1 console screen height  						string trace = e.StackTrace;    						if (e.StackTrace.Length > 1300)  							trace = e.StackTrace.Substring (0' 1300) + " [...] (traceback cut short)";    						Console.WriteLine ();  						Console.WriteLine (e.Message);  						Console.WriteLine (e.Source + " raised a " + e.GetType ().ToString ());  						Console.WriteLine (trace);    						// wait for key press if there is an error  						Console.ReadKey ();  					}  				}  			} catch (Exception e) {  				Console.WriteLine ();  				Console.WriteLine (e.Message);  				Console.WriteLine (e.Source + " raised a " + e.GetType ().ToString ());    				Console.ReadKey ();  			}
Magic Number,NLua,LuaNetRunner,C:\repos\NLua_NLua\Applications\LuaRunner\LuaNetRunner.cs,Main,The following statement contains a magic number: try {    				using (Lua lua = new Lua ()) {  					//lua.OpenLibs();			// steffenj: Lua 5.1.1 API change (all libs already opened in Lua constructor!)  					lua.NewTable ("arg");  					LuaTable argc = (LuaTable)lua ["arg"];  					  					argc [0] = "NLua";  					  					for (int i = 0; i < args.Length; i++) {  						argc [i + 1] = args [i];  					}    					argc ["n"] = args.Length;    					lua.LoadCLRPackage ();  					  					try {  						lua.DoString (lua_script'"lua");  					} catch (Exception e) {  						// limit size of stack traceback message to roughly 1 console screen height  						string trace = e.StackTrace;    						if (e.StackTrace.Length > 1300)  							trace = e.StackTrace.Substring (0' 1300) + " [...] (traceback cut short)";    						Console.WriteLine ();  						Console.WriteLine (e.Message);  						Console.WriteLine (e.Source + " raised a " + e.GetType ().ToString ());  						Console.WriteLine (trace);    						// wait for key press if there is an error  						Console.ReadKey ();  					}  				}  			} catch (Exception e) {  				Console.WriteLine ();  				Console.WriteLine (e.Message);  				Console.WriteLine (e.Source + " raised a " + e.GetType ().ToString ());    				Console.ReadKey ();  			}
