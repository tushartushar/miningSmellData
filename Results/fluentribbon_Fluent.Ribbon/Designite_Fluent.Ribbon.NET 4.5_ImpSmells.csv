Implementation smell,Namespace,Class,File,Method,Description
Long Method,Fluent,RibbonToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonToolBar.cs,CustomLayout,The method has 107 lines of code.
Long Method,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The method has 139 lines of code.
Long Method,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The method has 130 lines of code.
Long Method,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The method has 208 lines of code.
Complex Method,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,Cyclomatic complexity of the method is 12
Complex Method,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Hide,Cyclomatic complexity of the method is 11
Complex Method,Fluent,ColorGradientItemTemplateSelector,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,SelectTemplate,Cyclomatic complexity of the method is 10
Complex Method,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,OnApplyTemplate,Cyclomatic complexity of the method is 17
Complex Method,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,OnMoreColorsClick,Cyclomatic complexity of the method is 10
Complex Method,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,Cyclomatic complexity of the method is 20
Complex Method,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,Cyclomatic complexity of the method is 11
Complex Method,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,OnLostMouseCapture,Cyclomatic complexity of the method is 8
Complex Method,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,OnDismissPopup,Cyclomatic complexity of the method is 8
Complex Method,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,OnItemsChanged,Cyclomatic complexity of the method is 20
Complex Method,Fluent,StatusBarPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBarPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 12
Complex Method,Fluent,Gallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Gallery.cs,OnFilterCollectionChanged,Cyclomatic complexity of the method is 20
Complex Method,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnFilterCollectionChanged,Cyclomatic complexity of the method is 21
Complex Method,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnApplyTemplate,Cyclomatic complexity of the method is 15
Complex Method,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnDropDownOpened,Cyclomatic complexity of the method is 10
Complex Method,Fluent,RibbonToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonToolBar.cs,CustomLayout,Cyclomatic complexity of the method is 21
Complex Method,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,Cyclomatic complexity of the method is 9
Complex Method,Fluent,TwoLineLabel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\TwoLineLabel.cs,UpdateTextRun,Cyclomatic complexity of the method is 8
Complex Method,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,Cyclomatic complexity of the method is 42
Complex Method,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnKeyDown,Cyclomatic complexity of the method is 19
Complex Method,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,Cyclomatic complexity of the method is 15
Complex Method,Fluent,MenuItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\MenuItem.cs,OnKeyDown,Cyclomatic complexity of the method is 12
Complex Method,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,OnQuickAccessItemsCollectionChanged,Cyclomatic complexity of the method is 19
Complex Method,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,OnApplyTemplate,Cyclomatic complexity of the method is 15
Complex Method,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,MeasureOverride,Cyclomatic complexity of the method is 9
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnContextMenuOpened,Cyclomatic complexity of the method is 14
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnContextualGroupsCollectionChanged,Cyclomatic complexity of the method is 17
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnTabsCollectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnToolbarItemsCollectionChanged,Cyclomatic complexity of the method is 14
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnQuickAccessItemsCollectionChanged,Cyclomatic complexity of the method is 14
Complex Method,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnApplyTemplate,Cyclomatic complexity of the method is 14
Complex Method,Fluent,RibbonContextualGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonContextualGroupsContainer.cs,MeasureOverride,Cyclomatic complexity of the method is 13
Complex Method,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,Cyclomatic complexity of the method is 30
Complex Method,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,Cyclomatic complexity of the method is 35
Complex Method,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,OnToolbarItemsCollectionChanged,Cyclomatic complexity of the method is 20
Complex Method,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,OnKeyDown,Cyclomatic complexity of the method is 20
Complex Method,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,ProcessMouseWheel,Cyclomatic complexity of the method is 11
Complex Method,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,MeasureOverride,Cyclomatic complexity of the method is 10
Complex Method,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnGroupsCollectionChanged,Cyclomatic complexity of the method is 20
Complex Method,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnPreviewGotKeyboardFocus,Cyclomatic complexity of the method is 8
Complex Method,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnMouseLeftButtonDown,Cyclomatic complexity of the method is 8
Complex Method,Fluent.Converters,InvertNumericConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\InvertNumericConverter.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,Fluent.Metro.Behaviours,StylizedBehaviors,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Metro\Behaviours\StylizedBehaviors.cs,OnPropertyChanged,Cyclomatic complexity of the method is 9
Long Parameter List,Fluent,NativeMethods,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\NativeMethods.cs,LoadImage,The method has 6 parameters.
Long Parameter List,Fluent,NativeMethods,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\NativeMethods.cs,TrackPopupMenuEx,The method has 6 parameters.
Long Parameter List,Fluent,NativeMethods,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\NativeMethods.cs,ToUnicode,The method has 6 parameters.
Long Parameter List,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The method has 5 parameters.
Long Parameter List,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,Bind,The method has 5 parameters.
Long Parameter List,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,Bind,The method has 6 parameters.
Long Parameter List,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,Bind,The method has 5 parameters.
Long Parameter List,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,Bind,The method has 6 parameters.
Long Identifier,Fluent,RibbonToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonToolBar.cs,CustomLayout,The length of the parameter ribbonToolBarControlDefinition is 30.
Long Identifier,Fluent,RibbonToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonToolBar.cs,CustomLayout,The length of the parameter ribbonToolBarControlGroupDefinition is 35.
Long Statement,Fluent,BackstageAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\BackstageAdorner.cs,MeasureOverride,The length of the statement  "	this.backstageContent.Measure (new Size (this.AdornedElement.RenderSize.Width' Math.Max (0' this.AdornedElement.RenderSize.Height))); " is 133.
Long Statement,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,CreateAndAttachBackstageAdorner,The length of the statement  "	layer.CommandBindings.Add (new CommandBinding (RibbonCommands.OpenBackstage' HandleOpenBackstageCommandExecuted' HandleOpenBackstageCommandCanExecute)); " is 152.
Long Statement,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,OnDelayedShow,The length of the statement  "	// If we don't run this in the background setting IsOpen=true on application start we don't have access to the Bastage from the BackstageTabControl. " is 148.
Long Statement,Fluent,BackstageTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\BackstageTabControl.cs,UpdateSelectedContent,The length of the statement  "		if (selectedTabItem.ContentTemplate != null || selectedTabItem.ContentTemplateSelector != null || selectedTabItem.ContentStringFormat != null) { " is 144.
Long Statement,Fluent,BackstageTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\BackstageTabItem.cs,OnIsSelectedChanged,The length of the statement  "		if (container.TabControlParent != null && ReferenceEquals (container.TabControlParent.ItemContainerGenerator.ContainerFromItem (container.TabControlParent.SelectedItem)' container) == false) { " is 192.
Long Statement,Fluent,BackstageTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\BackstageTabItem.cs,OnIsSelectedChanged,The length of the statement  "			container.TabControlParent.SelectedItem = container.TabControlParent.ItemContainerGenerator.ItemFromContainer (container); " is 122.
Long Statement,Fluent,BackstageTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\BackstageTabItem.cs,UnselectSelectedItem,The length of the statement  "	var backstageTabItem = backstageTabControl.ItemContainerGenerator.ContainerFromItem (backstageTabControl.SelectedItem) as BackstageTabItem; " is 139.
Long Statement,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The length of the statement  "	var result = Color.FromRgb ((byte)(color.R + (byte)(redAvailability * needToBeAdded))' (byte)(color.G + (byte)(greenAvailability * needToBeAdded))' (byte)(color.B + (byte)(blueAvailability * needToBeAdded))); " is 208.
Long Statement,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Darker,The length of the statement  "	var result = Color.FromRgb ((byte)(color.R - (byte)(redAvailability * needToBeAdded))' (byte)(color.G - (byte)(greenAvailability * needToBeAdded))' (byte)(color.B - (byte)(blueAvailability * needToBeAdded))); " is 208.
Long Statement,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Rebright,The length of the statement  "	var power = DoubleUtil.AreClose (currentBrightness' 0.0) == false ? newBrightness / currentBrightness : 1.0 + newBrightness; " is 124.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,BringSelectedItemIntoView,The length of the statement  "	var containerFromItem = this.quickAccessCombo.ItemContainerGenerator.ContainerFromItem (this.quickAccessCombo.SelectedItem) as FrameworkElement; " is 144.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnFocusedElementLostKeyboardFocus,The length of the statement  "		if (this.IsEditable && this.Items.Contains (this.ItemContainerGenerator.ItemFromContainer ((DependencyObject)Keyboard.FocusedElement))) { " is 137.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "		if (this.Menu != null && this.Menu.Items.Contains (this.Menu.ItemContainerGenerator.ItemFromContainer ((DependencyObject)Keyboard.FocusedElement))) { " is 149.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "			var indexOfMSelectedItem = this.Menu.ItemContainerGenerator.IndexFromContainer ((DependencyObject)Keyboard.FocusedElement); " is 123.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "		} else if (this.Items.Contains (this.ItemContainerGenerator.ItemFromContainer ((DependencyObject)Keyboard.FocusedElement))) { " is 125.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "		if (this.Menu != null && this.Menu.Items.Contains (this.Menu.ItemContainerGenerator.ItemFromContainer ((DependencyObject)Keyboard.FocusedElement))) { " is 149.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "			var indexOfMSelectedItem = this.Menu.ItemContainerGenerator.IndexFromContainer ((DependencyObject)Keyboard.FocusedElement); " is 123.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnKeyDown,The length of the statement  "		} else if (this.Items.Contains (this.ItemContainerGenerator.ItemFromContainer ((DependencyObject)Keyboard.FocusedElement))) { " is 125.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnResizeBothDelta,The length of the statement  "		this.scrollViewer.Width = Math.Max (0' Math.Max (this.scrollViewer.Width + e.HorizontalChange' this.ActualWidth - deltaBorders)); " is 129.
Long Statement,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnResizeBothDelta,The length of the statement  "		this.scrollViewer.Width = Math.Max (0' Math.Max (monitorRight - this.PointToScreen (new Point ()).X - deltaX' this.ActualWidth - deltaBorders)); " is 144.
Long Statement,Fluent,RibbonStateStorage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonStateStorage.cs,Save,The length of the statement  "		using (var stream = new IsolatedStorageFileStream (this.IsolatedStorageFileName' FileMode.Create' FileAccess.Write' storage)) { " is 127.
Long Statement,Fluent,RibbonStateStorage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonStateStorage.cs,CreateStateData,The length of the statement  "			var controlName = control != null && string.IsNullOrEmpty (control.Name) == false ? string.Format (CultureInfo.InvariantCulture' " (name of the control is {0})"' control.Name) : string.Empty; " is 191.
Long Statement,Fluent,RibbonStateStorage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonStateStorage.cs,Load,The length of the statement  "			using (var stream = new IsolatedStorageFileStream (this.IsolatedStorageFileName' FileMode.Open' FileAccess.Read' storage)) { " is 124.
Long Statement,Fluent,ContextMenuService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ContextMenuService.cs,Attach,The length of the statement  "	System.Windows.Controls.ContextMenuService.ShowOnDisabledProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (BooleanBoxes.TrueBox)); " is 144.
Long Statement,Fluent,ContextMenuService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ContextMenuService.cs,Attach,The length of the statement  "	FrameworkElement.ContextMenuProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (OnContextMenuChanged' CoerceContextMenu)); " is 134.
Long Statement,Fluent,GalleryGroupContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryGroupContainer.cs,UpdateMinAndMaxWidth,The length of the statement  "			Debug.WriteLine ("Panel with IsItemsHost = true is not found in GalleryGroupContainer (probably the style is not correct or haven't attached yet)"); " is 148.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			propertyValue = this.ItemContainerGenerator == null ? this.GetPropertyValueAsString (item) : this.GetPropertyValueAsString (this.ItemContainerGenerator.ItemFromContainer (item)); " is 178.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			propertyValue = this.ItemContainerGenerator == null ? this.GroupByAdvanced (item) : this.GroupByAdvanced (this.ItemContainerGenerator.ItemFromContainer (item)); " is 160.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			RibbonControl.Bind (this' galleryGroupContainer' nameof (this.Orientation)' GalleryGroupContainer.OrientationProperty' BindingMode.OneWay); " is 139.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			RibbonControl.Bind (this' galleryGroupContainer' nameof (this.ItemWidth)' GalleryGroupContainer.ItemWidthProperty' BindingMode.OneWay); " is 135.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			RibbonControl.Bind (this' galleryGroupContainer' nameof (this.ItemHeight)' GalleryGroupContainer.ItemHeightProperty' BindingMode.OneWay); " is 137.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			RibbonControl.Bind (this' galleryGroupContainer' nameof (this.MaxItemsInRow)' GalleryGroupContainer.MaxItemsInRowProperty' BindingMode.OneWay); " is 143.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "			RibbonControl.Bind (this' galleryGroupContainer' nameof (this.MinItemsInRow)' GalleryGroupContainer.MinItemsInRowProperty' BindingMode.OneWay); " is 143.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The length of the statement  "	if ((this.IsGrouped == false || (this.GroupBy == null && this.GroupByAdvanced == null)) && this.galleryGroupContainers.Count != 0) { " is 132.
Long Statement,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,ArrangeOverride,The length of the statement  "			placeholder.Target.Arrange (new Rect (leftTop.X' leftTop.Y' placeholder.ArrangedSize.Width' placeholder.ArrangedSize.Height)); " is 126.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,Attach,The length of the statement  "	EventManager.RegisterClassHandler (classType' Mouse.PreviewMouseDownOutsideCapturedElementEvent' new MouseButtonEventHandler (OnClickThroughThunk)); " is 148.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,Attach,The length of the statement  "	EventManager.RegisterClassHandler (classType' DismissPopupEvent' new EventHandler<DismissPopupEventArgs> (OnDismissPopup)); " is 123.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,Attach,The length of the statement  "	EventManager.RegisterClassHandler (classType' FrameworkElement.ContextMenuOpeningEvent' new ContextMenuEventHandler (OnContextMenuOpened)' true); " is 145.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,Attach,The length of the statement  "	EventManager.RegisterClassHandler (classType' FrameworkElement.ContextMenuClosingEvent' new ContextMenuEventHandler (OnContextMenuClosed)' true); " is 145.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,Attach,The length of the statement  "	EventManager.RegisterClassHandler (classType' UIElement.LostMouseCaptureEvent' new MouseEventHandler (OnLostMouseCapture)); " is 123.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,OnClickThroughThunk,The length of the statement  "	////Debug.WriteLine(string.Format("OnClickThroughThunk: sender = {0}; originalSource = {1}; mouse capture = {2}"' sender' e.OriginalSource' Mouse.Captured)); " is 157.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,OnLostMouseCapture,The length of the statement  "		if (e.OriginalSource != null && Mouse.Captured == null && (IsPopupRoot (e.OriginalSource) || IsAncestorOf (popup.Child' e.OriginalSource as DependencyObject))) { " is 161.
Long Statement,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,IsMousePhysicallyOver,The length of the statement  "	return position.X >= 0.0 && position.Y >= 0.0 && position.X <= element.RenderSize.Width && position.Y <= element.RenderSize.Height; " is 131.
Long Statement,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,OnLoaded,The length of the statement  "		if ((this.ownerWindow.ResizeMode == ResizeMode.CanResizeWithGrip) && (this.ownerWindow.WindowState == WindowState.Maximized)) { " is 127.
Long Statement,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,OnWindowStateChanged,The length of the statement  "	if ((this.ownerWindow.ResizeMode == ResizeMode.CanResizeWithGrip) && (this.ownerWindow.WindowState == WindowState.Maximized)) { " is 127.
Long Statement,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,OnItemsChanged,The length of the statement  "	if (this.ItemContainerGenerator.Status != GeneratorStatus.ContainersGenerated || this.waitingForItemContainerGenerator) { " is 121.
Long Statement,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,RecreateMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' this.contextMenu.Items [0] as FrameworkElement' nameof (RibbonLocalizationBase.CustomizeStatusBar)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 218.
Long Statement,Fluent,SeparatorTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\SeparatorTabItem.cs,OnIsSelectedChanged,The length of the statement  "	tabControl.SelectedIndex = tabControl.SelectedIndex == tabControl.Items.Count - 1 ? tabControl.SelectedIndex - 1 : tabControl.SelectedIndex + 1; " is 144.
Long Statement,Fluent,StatusBarPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBarPanel.cs,ArrangeOverride,The length of the statement  "			this.rightChildren [i].Arrange (new Rect (finalSize.Width - rightShift' 0' this.rightChildren [i].DesiredSize.Width' finalSize.Height)); " is 136.
Long Statement,Fluent,TextBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\TextBox.cs,ForwardBindingsForQAT,The length of the statement  "	RibbonControl.Bind (source' target' nameof (this.Text)' TextProperty' BindingMode.TwoWay' UpdateSourceTrigger.PropertyChanged); " is 127.
Long Statement,Fluent,Gallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Gallery.cs,GetFilterMenuItem,The length of the statement  "	return this.groupsMenuButton.Items.Cast<MenuItem> ().FirstOrDefault (item => (item != null) && (item.Header.ToString () == filter.Title)); " is 138.
Long Statement,Fluent,GalleryItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryItem.cs,OnMouseLeftButtonUp,The length of the statement  "	if (position.X >= 0.0 && position.X <= this.ActualWidth && position.Y >= 0.0 && position.Y <= this.ActualHeight && e.ClickCount == 1) { " is 135.
Long Statement,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,Convert,The length of the statement  "		if (Application.Current != null && Application.Current.CheckAccess () && Application.Current.MainWindow != null && Application.Current.MainWindow.CheckAccess ()) { " is 163.
Long Statement,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,Convert,The length of the statement  "			return GetDefaultIcon (p.MainWindowHandle/*(new WindowInteropHelper(Application.Current.MainWindow)).Handle*/) as BitmapFrame; " is 126.
Long Statement,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The length of the statement  "		if (frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)) { " is 152.
Long Statement,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The length of the statement  "				zero = NativeMethods.LoadImage (IntPtr.Zero' new IntPtr (0x7f00)' 1' (int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight' 0x8000); " is 154.
Long Statement,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The length of the statement  "				return BitmapFrame.Create (Imaging.CreateBitmapSourceFromHIcon (zero' Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight ((int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight))); " is 204.
Long Statement,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,GetFilterMenuItem,The length of the statement  "	return this.groupsMenuButton.Items.Cast<MenuItem> ().FirstOrDefault (item => item != null && item.Header.ToString () == filter.Title); " is 134.
Long Statement,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnDropDownClosed,The length of the statement  "		if (this.quickAccessGallery == null || (this.quickAccessGallery != null && this.quickAccessGallery.IsDropDownOpen == false)) { " is 126.
Long Statement,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnResizeVerticalDelta,The length of the statement  "	this.scrollViewer.Height = Math.Max (this.layoutRoot.ActualHeight' Math.Min (Math.Max (this.galleryPanel.GetItemSize ().Height' this.scrollViewer.Height + e.VerticalChange)' this.MaxDropDownHeight)); " is 199.
Long Statement,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' gallery' nameof (this.MinItemsInDropDownRow)' MinItemsInDropDownRowProperty' BindingMode.OneWay); " is 123.
Long Statement,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' gallery' nameof (this.MaxItemsInDropDownRow)' MaxItemsInDropDownRowProperty' BindingMode.OneWay); " is 123.
Long Statement,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,The length of the statement  "			WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e' this.PointToScreen (new Point (0' this.TitleBarHeight))); " is 122.
Long Statement,Fluent,Spinner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Spinner.cs,OnValueChanged,The length of the statement  "	spinner.ValueChanged.Invoke (spinner' new RoutedPropertyChangedEventArgs<double> ((double)e.OldValue' (double)e.NewValue)); " is 123.
Long Statement,Fluent,Spinner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Spinner.cs,ValueToTextBoxText,The length of the statement  "	var newText = (string)this.TextToValueConverter.ConvertBack (this.Value' typeof(string)' this.Format' CultureInfo.CurrentCulture); " is 130.
Long Statement,Fluent,Spinner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Spinner.cs,TextBoxTextToValue,The length of the statement  "	var newValue = (double)this.TextToValueConverter.Convert (this.textBox.Text' typeof(double)' converterParam' CultureInfo.CurrentCulture); " is 137.
Long Statement,Fluent,SplitButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\SplitButton.cs,OnClick,The length of the statement  "	if (ReferenceEquals (e.OriginalSource' this) == false && ReferenceEquals (e.OriginalSource' this.quickAccessButton) == false) { " is 127.
Long Statement,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The length of the statement  "	System.Windows.Controls.ToolTipService.ShowOnDisabledProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (BooleanBoxes.TrueBox)); " is 140.
Long Statement,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The length of the statement  "	System.Windows.Controls.ToolTipService.InitialShowDelayProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (900)); " is 125.
Long Statement,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The length of the statement  "	System.Windows.Controls.ToolTipService.BetweenShowDelayProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (IntBoxes.Zero)); " is 135.
Long Statement,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The length of the statement  "	System.Windows.Controls.ToolTipService.ShowDurationProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (20000)); " is 123.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,GenerateAndAddGroupBoxKeyTipInformation,The length of the statement  "	this.Log ("Found KeyTipped RibbonGroupBox \"{0}\" with keys \"{1}\"."' keyTipInformation.AssociatedElement' keyTipInformation.Keys); " is 132.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,GenerateAndAddRegularKeyTipInformations,The length of the statement  "		this.Log ("Found KeyTipped element \"{0}\" with keys \"{1}\"."' keyTipInformation.AssociatedElement' keyTipInformation.Keys); " is 125.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,Forward,The length of the statement  "	// Panels aren't good elements to adorn. For example' trying to display KeyTips on MenuItems in SplitButton fails if using a panel. " is 131.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,Forward,The length of the statement  "	this.childAdorner = ReferenceEquals (GetTopLevelElement (validChild)' GetTopLevelElement (element)) == false ? new KeyTipAdorner (validChild' element' this) : new KeyTipAdorner (element' element' this); " is 202.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,TryGetKeyTipInformation,The length of the statement  "	return this.keyTipInformations.FirstOrDefault (x => x.IsEnabled && x.Visibility == Visibility.Visible && keys.Equals (x.Keys' StringComparison.CurrentCultureIgnoreCase)); " is 170.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,FilterKeyTips,The length of the statement  "			keyTipInformation.Visibility = content.StartsWith (keys' StringComparison.CurrentCultureIgnoreCase) ? keyTipInformation.BackupVisibility : Visibility.Collapsed; " is 160.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "	var groupBox = this.oneOfAssociatedElements as RibbonGroupBox ?? UIHelper.GetParent<RibbonGroupBox> (this.oneOfAssociatedElements); " is 131.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "		keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed; " is 125.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement); " is 162.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "		} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) { " is 139.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement); " is 156.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement); " is 205.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement); " is 169.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement); " is 157.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The length of the statement  "			if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) { " is 160.
Long Statement,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,IsTextBoxShapedControl,The length of the statement  "	return element is Spinner || element is System.Windows.Controls.ComboBox || element is System.Windows.Controls.TextBox || element is System.Windows.Controls.CheckBox; " is 166.
Long Statement,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnDropDownPopupMouseDown,The length of the statement  "	if (this.ClosePopupOnMouseDown && this.resizeBothThumb.IsMouseOver == false && this.resizeVerticalThumb.IsMouseOver == false) { " is 127.
Long Statement,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnKeyDown,The length of the statement  "		if (this.HasItems && this.IsDropDownOpen == false)// Only handle this for initial navigation. Further navigation is handled by the dropdown itself " is 146.
Long Statement,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnKeyDown,The length of the statement  "		if (this.HasItems && this.IsDropDownOpen == false)// Only handle this for initial navigation. Further navigation is handled by the dropdown itself " is 146.
Long Statement,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnResizeBothDelta,The length of the statement  "	this.scrollViewer.Height = Math.Min (Math.Max (this.ActualHeight' this.scrollViewer.Height + e.VerticalChange)' this.MaxDropDownHeight); " is 136.
Long Statement,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnResizeVerticalDelta,The length of the statement  "	this.scrollViewer.Height = Math.Min (Math.Max (this.ActualHeight' this.scrollViewer.Height + e.VerticalChange)' this.MaxDropDownHeight); " is 136.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The length of the statement  "		if (this.activeAdornerChain == null || this.activeAdornerChain.IsAdornerChainAlive == false || this.activeAdornerChain.AreAnyKeyTipsVisible == false) { " is 151.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The length of the statement  "		if ((e.Key != Key.System && this.activeAdornerChain == null) || e.SystemKey == Key.Escape || (e.KeyboardDevice.Modifiers != ModifierKeys.Alt && this.activeAdornerChain == null)) { " is 179.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The length of the statement  "			// In office: If you navigate by keyboard (in menus) and keytips are shown they are shown or hidden based on the menu you are in. " is 129.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The length of the statement  "			// Implementing navigation the way office does would require complex focus/state tracking etc. so i decided to just terminate keytips and not restore focus. " is 156.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The length of the statement  "		if (this.activeAdornerChain == null || this.activeAdornerChain.IsAdornerChainAlive == false || this.activeAdornerChain.AreAnyKeyTipsVisible == false) { " is 151.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,IsShowOrHideKey,The length of the statement  "	return e.Key == Key.System && !Keyboard.IsKeyDown (Key.LeftShift) && !Keyboard.IsKeyDown (Key.RightShift) && (e.SystemKey == Key.LeftAlt || e.SystemKey == Key.RightAlt || e.SystemKey == Key.F10 || e.SystemKey == Key.Space); " is 223.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,GetBackstage,The length of the statement  "	var control = this.ribbon.Menu as Backstage ?? UIHelper.FindImmediateVisualChild<Backstage> (this.ribbon.Menu' obj => obj.Visibility == Visibility.Visible); " is 156.
Long Statement,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,GetApplicationMenu,The length of the statement  "	var control = this.ribbon.Menu as ApplicationMenu ?? UIHelper.FindImmediateVisualChild<ApplicationMenu> (this.ribbon.Menu' obj => obj.Visibility == Visibility.Visible); " is 168.
Long Statement,Fluent,MenuItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\MenuItem.cs,OnResizeBothDelta,The length of the statement  "		this.menuPanel.Height = Math.Min (Math.Max (this.menuPanel.MinHeight' this.menuPanel.Height + e.VerticalChange)' this.MaxDropDownHeight); " is 137.
Long Statement,Fluent,MenuItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\MenuItem.cs,OnResizeVerticalDelta,The length of the statement  "		this.menuPanel.Height = Math.Min (Math.Max (this.menuPanel.MinHeight' this.menuPanel.Height + e.VerticalChange)' this.MaxDropDownHeight); " is 137.
Long Statement,Fluent,QuickAccessMenuItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessMenuItem.cs,OnTargetChanged,The length of the statement  "		RibbonControl.Bind (ribbonControl' quickAccessMenuItem' nameof (IRibbonControl.Header)' HeaderProperty' BindingMode.OneWay); " is 124.
Long Statement,Fluent,QuickAccessItemsProvider,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessMenuItem.cs,GetQuickAccessItem,The length of the statement  "		throw new ArgumentException ("The contol " + element.GetType ().Name + " is not able to provide a quick access toolbar item"); " is 126.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' AddToQuickAccessMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuAddItem)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 202.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' AddToQuickAccessMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 206.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	addGroupToQuickAccessMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 121.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' AddGroupToQuickAccessMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuAddGroup)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 208.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' AddGroupToQuickAccessMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 211.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	addMenuToQuickAccessMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 120.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' AddMenuToQuickAccessMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuAddMenu)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 206.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' AddMenuToQuickAccessMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 210.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	addGalleryToQuickAccessMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 123.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' AddGalleryToQuickAccessMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuAddGallery)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 212.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' AddGalleryToQuickAccessMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 213.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	removeFromQuickAccessMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 121.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' RemoveFromQuickAccessMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuRemoveItem)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 210.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' RemoveFromQuickAccessMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 211.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	customizeQuickAccessToolbarMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 127.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' CustomizeQuickAccessToolbarMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuCustomizeQuickAccessToolBar)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 233.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' CustomizeQuickAccessToolbarMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 217.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	showQuickAccessToolbarBelowTheRibbonMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 136.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' ShowQuickAccessToolbarBelowTheRibbonMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuShowBelow)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 224.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' ShowQuickAccessToolbarBelowTheRibbonMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 226.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	showQuickAccessToolbarAboveTheRibbonMenuItemDictionary.Add (Thread.CurrentThread.ManagedThreadId' new System.Windows.Controls.MenuItem { " is 136.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' ShowQuickAccessToolbarAboveTheRibbonMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuShowAbove)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 224.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' ShowQuickAccessToolbarAboveTheRibbonMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 226.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' CustomizeTheRibbonMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuCustomizeRibbon)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 212.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' CustomizeTheRibbonMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 208.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonLocalization.Current.Localization' MinimizeTheRibbonMenuItem' nameof (RibbonLocalizationBase.RibbonContextMenuMinimizeRibbon)' HeaderedItemsControl.HeaderProperty' BindingMode.OneWay); " is 210.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,InitRibbonContextMenu,The length of the statement  "	RibbonControl.Bind (RibbonContextMenu' MinimizeTheRibbonMenuItem' nameof (System.Windows.Controls.ContextMenu.PlacementTarget)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 207.
Long Statement,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnAddToQuickAccessCommandCanExecute,The length of the statement  "	if (ribbon != null && ribbon.IsQuickAccessToolBarVisible && QuickAccessItemsProvider.IsSupported (e.Parameter as UIElement) && ribbon.IsInQuickAccessToolBar (e.Parameter as UIElement) == false) { " is 195.
Long Statement,Fluent,RibbonContextualTabGroup,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonContextualTabGroup.cs,UpdateInnerVisibility,The length of the statement  "	this.InnerVisibility = this.Visibility == Visibility.Visible && this.Items.Any (item => item.Visibility == Visibility.Visible) ? Visibility.Visible : Visibility.Collapsed; " is 171.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,OnApplyTemplate,The length of the statement  "	this.isAtLeastOneRequiredControlPresent = this.quickAccessToolbarHolder != null || this.headerHolder != null || this.itemsContainer != null; " is 140.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,MeasureOverride,The length of the statement  "	var maxHeight = Math.Max (Math.Max (this.itemsRect.Height' this.headerRect.Height)' this.quickAccessToolbarRect.Height); " is 120.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "	var visibleGroups = this.Items.OfType<RibbonContextualTabGroup> ().Where (group => group.InnerVisibility == Visibility.Visible && group.Items.Count > 0).ToList (); " is 163.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "			this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height); " is 133.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "			this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height); " is 145.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 161.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 236.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 228.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "		var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX)); " is 128.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "		this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height); " is 140.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "			this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height); " is 145.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 147.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 147.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "				var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width; " is 141.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "				if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) { " is 211.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 227.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 244.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 228.
Long Statement,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The length of the statement  "					this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height); " is 214.
Long Statement,Fluent,ScreenTip,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ScreenTip.cs,CustomPopupPlacementMethod,The length of the statement  "	if (notQuickAccessItem && this.IsRibbonAligned && notContextMenuChild && topLevelElement is Window == false && decoratorChild != null) { " is 136.
Long Statement,Fluent,ScreenTip,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ScreenTip.cs,CustomPopupPlacementMethod,The length of the statement  "		var belowY = decoratorChild.TranslatePoint (new Point (0' ((FrameworkElement)decoratorChild).ActualHeight)' this.PlacementTarget).Y; " is 132.
Long Statement,Fluent,ScreenTip,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ScreenTip.cs,CustomPopupPlacementMethod,The length of the statement  "		new CustomPopupPlacement (new Point (rightToLeftOffset' this.PlacementTarget.RenderSize.Height + 1)' PopupPrimaryAxis.Horizontal)' " is 130.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The length of the statement  "	var contextualTabs = this.InternalChildren.Cast<RibbonTabItem> ().Where (x => x.IsContextual && (x.Visibility != Visibility.Collapsed) && (x.Group.Visibility != Visibility.Collapsed)).ToList (); " is 194.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The length of the statement  "	var regularTabs = this.InternalChildren.Cast<RibbonTabItem> ().Where (x => !x.IsContextual && (x.Visibility != Visibility.Collapsed)).ToList (); " is 144.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,SetHorizontalOffset,The length of the statement  "	var newValue = CoerceOffset (ValidateInputOffset (offset' nameof (this.HorizontalOffset))' this.scrollData.ExtentWidth' this.scrollData.ViewportWidth); " is 151.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,ComputeScrollOffsetWithMinimalScroll,The length of the statement  "            bool fBelow = DoubleUtil.GreaterThan(bottomChild' bottomView) && DoubleUtil.GreaterThan(topChild' topView);*/var fAbove = (topChild < topView) && (bottomChild < bottomView); " is 173.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,VerifyScrollData,The length of the statement  "	// To fix 20762 we are manipulating the extentWidth by checking if all regular (non contextual) tabs are at their minimum width. " is 128.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,VerifyScrollData,The length of the statement  "	var visibleRegularTabs = this.InternalChildren.Cast<RibbonTabItem> ().Where (item => item.IsContextual == false && item.Visibility != Visibility.Collapsed).ToList (); " is 166.
Long Statement,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,VerifyScrollData,The length of the statement  "	if (visibleRegularTabs.Any () && visibleRegularTabs.All (item => DoubleUtil.AreClose (item.DesiredSize.Width' MinimumRegularTabWidth))) { " is 137.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The length of the statement  "			Bind (source' element' nameof (ICommandSource.CommandParameter)' System.Windows.Controls.MenuItem.CommandParameterProperty' BindingMode.OneWay); " is 144.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The length of the statement  "			Bind (source' element' nameof (ICommandSource.CommandTarget)' System.Windows.Controls.MenuItem.CommandTargetProperty' BindingMode.OneWay); " is 138.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The length of the statement  "			Bind (source' element' nameof (ICommandSource.Command)' System.Windows.Controls.MenuItem.CommandProperty' BindingMode.OneWay); " is 126.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The length of the statement  "			Bind (source' element' nameof (ICommandSource.CommandParameter)' ButtonBase.CommandParameterProperty' BindingMode.OneWay); " is 122.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The length of the statement  "	Bind (source' element' new PropertyPath (FocusManager.IsFocusScopeProperty)' FocusManager.IsFocusScopeProperty' BindingMode.OneWay); " is 132.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,GetControlWorkArea,The length of the statement  "		return new Rect (monitorInfo.rcWork.left' monitorInfo.rcWork.top' monitorInfo.rcWork.right - monitorInfo.rcWork.left' monitorInfo.rcWork.bottom - monitorInfo.rcWork.top); " is 170.
Long Statement,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,GetControlMonitor,The length of the statement  "		return new Rect (monitorInfo.rcMonitor.left' monitorInfo.rcMonitor.top' monitorInfo.rcMonitor.right - monitorInfo.rcMonitor.left' monitorInfo.rcMonitor.bottom - monitorInfo.rcMonitor.top); " is 188.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,OnKeyDown,The length of the statement  "			startIndex = this.ItemContainerGenerator.IndexFromContainer (this.ItemContainerGenerator.ContainerFromItem (this.SelectedItem)); " is 128.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,ProcessMouseWheel,The length of the statement  "	var tabs = this.ItemContainerGenerator.Items.OfType<RibbonTabItem> ().Where (x => x.Visibility == Visibility.Visible && (x.IsContextual == false || (x.IsContextual && x.Group.Visibility == Visibility.Visible))).OrderBy (x => x.IsContextual).ToList (); " is 251.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,ProcessMouseWheel,The length of the statement  "	            var tabs = this.Items.OfType<object>().Select(x => this.ItemContainerGenerator.ContainerFromItem(x)).OfType<RibbonTabItem>()" is 124.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,ProcessMouseWheel,The length of the statement  "                .Where(x => x.Visibility == Visibility.Visible && (x.IsContextual == false || (x.IsContextual && x.Group.Visibility == Visibility.Visible)))" is 140.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,GetSelectedTabItem,The length of the statement  "	var item = selectedItem as RibbonTabItem ?? this.ItemContainerGenerator.ContainerFromIndex (this.SelectedIndex) as RibbonTabItem; " is 129.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,CustomPopupPlacementMethod,The length of the statement  "		new CustomPopupPlacement (new Point (startPoint.X - tabItemPos.X + offset.X' targetsize.Height + offset.Y)' PopupPrimaryAxis.Vertical)' " is 135.
Long Statement,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,CustomPopupPlacementMethod,The length of the statement  "		new CustomPopupPlacement (new Point (startPoint.X - tabItemPos.X + offset.X' -1 * (targetsize.Height + offset.Y + ((ScrollViewer)this.SelectedContent).ActualHeight))' PopupPrimaryAxis.Vertical) " is 193.
Long Statement,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' groupBox' nameof (this.ItemTemplateSelector)' ItemTemplateSelectorProperty' BindingMode.OneWay); " is 122.
Long Statement,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' groupBox' nameof (this.LauncherCommandParameter)' LauncherCommandParameterProperty' BindingMode.OneWay); " is 130.
Long Statement,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' groupBox' nameof (this.LauncherCommandTarget)' LauncherCommandTargetProperty' BindingMode.OneWay); " is 124.
Long Statement,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The length of the statement  "	RibbonControl.Bind (this' groupBox' nameof (this.LauncherKeys)' DialogLauncherButtonKeyTipKeysProperty' BindingMode.OneWay); " is 124.
Long Statement,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,IncreaseGroupBoxSize,The length of the statement  "		groupBox.StateIntermediate = groupBox.StateIntermediate != RibbonGroupBoxState.Large ? groupBox.StateIntermediate - 1 : RibbonGroupBoxState.Large; " is 146.
Long Statement,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,DecreaseGroupBoxSize,The length of the statement  "		groupBox.StateIntermediate = groupBox.StateIntermediate != RibbonGroupBoxState.Collapsed ? groupBox.StateIntermediate + 1 : groupBox.StateIntermediate; " is 151.
Long Statement,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,SetHorizontalOffset,The length of the statement  "	var newValue = CoerceOffset (ValidateInputOffset (offset' "HorizontalOffset")' this.scrollData.ExtentWidth' this.scrollData.ViewportWidth); " is 139.
Long Statement,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,ComputeScrollOffsetWithMinimalScroll,The length of the statement  "            bool fBelow = DoubleUtil.GreaterThan(bottomChild' bottomView) && DoubleUtil.GreaterThan(topChild' topView);*/var fAbove = (topChild < topView) && (bottomChild < bottomView); " is 173.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,SetFocus,The length of the statement  "	bool setFocusOnContent = ReferenceEquals (currentFocus' this) || currentFocus == null || ReferenceEquals (currentFocus.TabControlParent' this.TabControlParent) == false; " is 169.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The length of the statement  "	this.contentContainer.Padding = new Thickness (this.Indent' this.contentContainer.Padding.Top' this.Indent' this.contentContainer.Padding.Bottom); " is 146.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The length of the statement  "	var totalWidth = this.contentContainer.DesiredSize.Width - this.contentContainer.Margin.Left - this.contentContainer.Margin.Right; " is 130.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The length of the statement  "		this.contentContainer.Padding = new Thickness (newPaddings' this.contentContainer.Padding.Top' newPaddings' this.contentContainer.Padding.Bottom); " is 146.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The length of the statement  "				baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right; " is 126.
Long Statement,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnIsSelectedChanged,The length of the statement  "		if (container.TabControlParent.SelectedItem is RibbonTabItem && ReferenceEquals (container.TabControlParent.SelectedItem' container) == false) { " is 144.
Long Statement,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,CreateImage,The length of the statement  "		Source = new BitmapImage (new Uri (imagePath' UriKind.RelativeOrAbsolute)' new RequestCachePolicy (RequestCacheLevel.NoCacheNoStore)) " is 133.
Long Statement,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,CreateImage,The length of the statement  "	if (double.IsNaN (desiredSize) == false && imageUri.AbsolutePath.EndsWith (".ico"' StringComparison.OrdinalIgnoreCase)) { " is 121.
Long Statement,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,ExtractImageFromIcoFile,The length of the statement  "	return ExtractImageFromIcoFile (new Uri ("pack://application:'''" + imagePath' UriKind.RelativeOrAbsolute)' desiredSize); " is 121.
Long Statement,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,ExtractImageFromIcoFile,The length of the statement  "	var decoder = BitmapDecoder.Create (imageUri' BitmapCreateOptions.DelayCreation | BitmapCreateOptions.IgnoreImageCache' BitmapCacheOption.None); " is 144.
Long Statement,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,ExtractImage,The length of the statement  "	if (Application.Current != null && Application.Current.CheckAccess () && Application.Current.MainWindow != null && Application.Current.MainWindow.CheckAccess ()) { " is 163.
Long Statement,Fluent.Helpers,WindowSteeringHelper,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Helpers\WindowSteeringHelper.cs,ShowSystemMenuPhysicalCoordinates,The length of the statement  "	var cmd = NativeMethods.TrackPopupMenuEx (hmenu' Constants.TPM_LEFTBUTTON | Constants.TPM_RETURNCMD' (int)physicalScreenLocation.X' (int)physicalScreenLocation.Y' hwnd' IntPtr.Zero); " is 182.
Long Statement,Fluent.Internal,InvokeCommand,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\InvokeCommand.cs,Invoke,The length of the statement  "	var commandParameter = BindingOperations.IsDataBound (this' CommandParameterProperty) ? this.CommandParameter : parameter; " is 122.
Complex Conditional,Fluent,ComboBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ComboBox.cs,OnPreviewKeyDown,The conditional expression  "this.IsEditable && ((e.Key == Key.Down) || (e.Key == Key.Up)) && !this.IsDropDownOpen"  is complex.
Complex Conditional,Fluent,GalleryPanel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryPanel.cs,Refresh,The conditional expression  "(this.IsGrouped == false || (this.GroupBy == null && this.GroupByAdvanced == null)) && this.galleryGroupContainers.Count != 0"  is complex.
Complex Conditional,Fluent,PopupService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\PopupService.cs,OnLostMouseCapture,The conditional expression  "e.OriginalSource != null && Mouse.Captured == null && (IsPopupRoot (e.OriginalSource) || IsAncestorOf (popup.Child' e.OriginalSource as DependencyObject))"  is complex.
Complex Conditional,Fluent,GalleryItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryItem.cs,OnMouseLeftButtonUp,The conditional expression  "position.X >= 0.0 && position.X <= this.ActualWidth && position.Y >= 0.0 && position.Y <= this.ActualHeight && e.ClickCount == 1"  is complex.
Complex Conditional,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,Convert,The conditional expression  "Application.Current != null && Application.Current.CheckAccess () && Application.Current.MainWindow != null && Application.Current.MainWindow.CheckAccess ()"  is complex.
Complex Conditional,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The conditional expression  "frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)"  is complex.
Complex Conditional,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The conditional expression  "msg == Constants.WM_NCACTIVATE // mouse clicks in non client area  || (msg == Constants.WM_ACTIVATE && wParam == IntPtr.Zero) // the window is deactivated  // >= WM_NCLBUTTONDOWN <= WM_NCXBUTTONDBLCLK  || (msg >= 161 && msg <= 173) // mouse click (non client area)  || (msg >= 513 && msg <= 521)"  is complex.
Complex Conditional,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,OnWindowPreviewKeyDown,The conditional expression  "(e.Key != Key.System && this.activeAdornerChain == null) || e.SystemKey == Key.Escape || (e.KeyboardDevice.Modifiers != ModifierKeys.Alt && this.activeAdornerChain == null)"  is complex.
Complex Conditional,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnAddToQuickAccessCommandCanExecute,The conditional expression  "ribbon != null && ribbon.IsQuickAccessToolBarVisible && QuickAccessItemsProvider.IsSupported (e.Parameter as UIElement) && ribbon.IsInQuickAccessToolBar (e.Parameter as UIElement) == false"  is complex.
Complex Conditional,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The conditional expression  "((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)"  is complex.
Complex Conditional,Fluent,ScreenTip,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ScreenTip.cs,CustomPopupPlacementMethod,The conditional expression  "notQuickAccessItem && this.IsRibbonAligned && notContextMenuChild && topLevelElement is Window == false && decoratorChild != null"  is complex.
Complex Conditional,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MakeVisible,The conditional expression  "rectangle.IsEmpty || visual == null || ReferenceEquals (visual' this) || this.IsAncestorOf (visual) == false"  is complex.
Complex Conditional,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,ComputeScrollOffsetWithMinimalScroll,The conditional expression  "(fAbove && !fLarger) || (fBelow && fLarger)"  is complex.
Complex Conditional,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,MakeVisible,The conditional expression  "rectangle.IsEmpty || visual == null || ReferenceEquals (visual' this) || !this.IsAncestorOf (visual)"  is complex.
Complex Conditional,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,ComputeScrollOffsetWithMinimalScroll,The conditional expression  "(fAbove && !fLarger) || (fBelow && fLarger)"  is complex.
Complex Conditional,Fluent.Converters,SpinnerTextToValueConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\SpinnerTextToValueConverter.cs,TextToDouble,The conditional expression  "char.IsDigit (symbol) || symbol == ''' || symbol == '.' || (symbol == '-' && stringBuilder.Length == 0)"  is complex.
Complex Conditional,Fluent.Converters,ObjectToImageConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\ObjectToImageConverter.cs,ExtractImage,The conditional expression  "Application.Current != null && Application.Current.CheckAccess () && Application.Current.MainWindow != null && Application.Current.MainWindow.CheckAccess ()"  is complex.
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (window != null) {  	window.KeyDown += this.HandleWindowKeyDown;  	if (this.savedWindowMinWidth < 500) {  		window.MinWidth = 500;  	}  	if (this.savedWindowMinHeight < 400) {  		window.MinHeight = 400;  	}  	window.SizeChanged += this.OnWindowSizeChanged;  	// We have to collapse WindowsFormsHost while Backstage is open  	this.CollapseWindowsFormsHosts (window);  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (window != null) {  	window.KeyDown += this.HandleWindowKeyDown;  	if (this.savedWindowMinWidth < 500) {  		window.MinWidth = 500;  	}  	if (this.savedWindowMinHeight < 400) {  		window.MinHeight = 400;  	}  	window.SizeChanged += this.OnWindowSizeChanged;  	// We have to collapse WindowsFormsHost while Backstage is open  	this.CollapseWindowsFormsHosts (window);  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (window != null) {  	window.KeyDown += this.HandleWindowKeyDown;  	if (this.savedWindowMinWidth < 500) {  		window.MinWidth = 500;  	}  	if (this.savedWindowMinHeight < 400) {  		window.MinHeight = 400;  	}  	window.SizeChanged += this.OnWindowSizeChanged;  	// We have to collapse WindowsFormsHost while Backstage is open  	this.CollapseWindowsFormsHosts (window);  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (window != null) {  	window.KeyDown += this.HandleWindowKeyDown;  	if (this.savedWindowMinWidth < 500) {  		window.MinWidth = 500;  	}  	if (this.savedWindowMinHeight < 400) {  		window.MinHeight = 400;  	}  	window.SizeChanged += this.OnWindowSizeChanged;  	// We have to collapse WindowsFormsHost while Backstage is open  	this.CollapseWindowsFormsHosts (window);  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (this.savedWindowMinWidth < 500) {  	window.MinWidth = 500;  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (this.savedWindowMinWidth < 500) {  	window.MinWidth = 500;  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: window.MinWidth = 500;  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (this.savedWindowMinHeight < 400) {  	window.MinHeight = 400;  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: if (this.savedWindowMinHeight < 400) {  	window.MinHeight = 400;  }  
Magic Number,Fluent,Backstage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Backstage.cs,Show,The following statement contains a magic number: window.MinHeight = 400;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,ConvertFromWin32Color,The following statement contains a magic number: return Color.FromArgb (255' (byte)r' (byte)g' (byte)b);  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,GetBrightness,The following statement contains a magic number: return summ / (255.0 * 3.0);  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,GetBrightness,The following statement contains a magic number: return summ / (255.0 * 3.0);  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: if (color.R + color.G + color.B == 0) {  	redAvailability = 1.0 / 3.0;  	greenAvailability = 1.0 / 3.0;  	blueAvailability = 1.0 / 3.0;  	needToBeAdded = power * 255.0 * 3.0;  } else {  	redAvailability = (255.0 - color.R) / totalAvailability;  	greenAvailability = (255.0 - color.G) / totalAvailability;  	blueAvailability = (255.0 - color.B) / totalAvailability;  	needToBeAdded = ((double)color.R + color.G + color.B) * (power - 1);  }  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: redAvailability = 1.0 / 3.0;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: greenAvailability = 1.0 / 3.0;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: blueAvailability = 1.0 / 3.0;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: needToBeAdded = power * 255.0 * 3.0;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: needToBeAdded = power * 255.0 * 3.0;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: redAvailability = (255.0 - color.R) / totalAvailability;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: greenAvailability = (255.0 - color.G) / totalAvailability;  
Magic Number,Fluent,ColorGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\ColorGallery.cs,Lighter,The following statement contains a magic number: blueAvailability = (255.0 - color.B) / totalAvailability;  
Magic Number,Fluent,RibbonStateStorage,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonStateStorage.cs,LoadState,The following statement contains a magic number: if (splitted.Length != 2) {  	return;  }  
Magic Number,Fluent,GalleryGroupContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryGroupContainer.cs,UpdateMinAndMaxWidth,The following statement contains a magic number: this.RealItemsPanel.MinWidth = Math.Min (this.Items.Count' this.MinItemsInRow) * itemWidth + 0.1;  
Magic Number,Fluent,GalleryGroupContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\GalleryGroupContainer.cs,UpdateMinAndMaxWidth,The following statement contains a magic number: this.RealItemsPanel.MaxWidth = Math.Min (this.Items.Count' this.MaxItemsInRow) * itemWidth + 0.1;  
Magic Number,Fluent,RibbonControlSizeDefinition,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonControlSizeDefinition.cs,RibbonControlSizeDefinition,The following statement contains a magic number: this.Small = ToRibbonControlSize (splitted [2]);  
Magic Number,Fluent,RibbonControlSizeDefinition,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonControlSizeDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = (int)this.Large;  	hashCode = (hashCode * 397) ^ (int)this.Middle;  	hashCode = (hashCode * 397) ^ (int)this.Small;  	return hashCode;  }  
Magic Number,Fluent,RibbonControlSizeDefinition,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonControlSizeDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = (int)this.Large;  	hashCode = (hashCode * 397) ^ (int)this.Middle;  	hashCode = (hashCode * 397) ^ (int)this.Small;  	return hashCode;  }  
Magic Number,Fluent,RibbonControlSizeDefinition,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonControlSizeDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)this.Middle;  
Magic Number,Fluent,RibbonControlSizeDefinition,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\RibbonControlSizeDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)this.Small;  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The following statement contains a magic number: try {  	if (frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)) {  		return frame;  	}  	return null;  } catch (Exception) {  	return null;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The following statement contains a magic number: try {  	if (frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)) {  		return frame;  	}  	return null;  } catch (Exception) {  	return null;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The following statement contains a magic number: if (frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)) {  	return frame;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetThumbnail,The following statement contains a magic number: if (frame != null && frame.PixelWidth == 16 && frame.PixelHeight == 16 && (frame.Format == PixelFormats.Bgra32 || frame.Format == PixelFormats.Bgr24)) {  	return frame;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: if (hwnd != IntPtr.Zero) {  	try {  		var zero = NativeMethods.SendMessage (hwnd' WM.GETICON' new IntPtr (2)' IntPtr.Zero);  		if (zero == IntPtr.Zero) {  			zero = NativeMethods.GetClassLong (hwnd' -34);  		}  		if (zero == IntPtr.Zero) {  			zero = NativeMethods.LoadImage (IntPtr.Zero' new IntPtr (0x7f00)' 1' (int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight' 0x8000);  		}  		if (zero != IntPtr.Zero) {  			return BitmapFrame.Create (Imaging.CreateBitmapSourceFromHIcon (zero' Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight ((int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight)));  		}  	} catch {  		return null;  	}  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: if (hwnd != IntPtr.Zero) {  	try {  		var zero = NativeMethods.SendMessage (hwnd' WM.GETICON' new IntPtr (2)' IntPtr.Zero);  		if (zero == IntPtr.Zero) {  			zero = NativeMethods.GetClassLong (hwnd' -34);  		}  		if (zero == IntPtr.Zero) {  			zero = NativeMethods.LoadImage (IntPtr.Zero' new IntPtr (0x7f00)' 1' (int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight' 0x8000);  		}  		if (zero != IntPtr.Zero) {  			return BitmapFrame.Create (Imaging.CreateBitmapSourceFromHIcon (zero' Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight ((int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight)));  		}  	} catch {  		return null;  	}  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: try {  	var zero = NativeMethods.SendMessage (hwnd' WM.GETICON' new IntPtr (2)' IntPtr.Zero);  	if (zero == IntPtr.Zero) {  		zero = NativeMethods.GetClassLong (hwnd' -34);  	}  	if (zero == IntPtr.Zero) {  		zero = NativeMethods.LoadImage (IntPtr.Zero' new IntPtr (0x7f00)' 1' (int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight' 0x8000);  	}  	if (zero != IntPtr.Zero) {  		return BitmapFrame.Create (Imaging.CreateBitmapSourceFromHIcon (zero' Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight ((int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight)));  	}  } catch {  	return null;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: try {  	var zero = NativeMethods.SendMessage (hwnd' WM.GETICON' new IntPtr (2)' IntPtr.Zero);  	if (zero == IntPtr.Zero) {  		zero = NativeMethods.GetClassLong (hwnd' -34);  	}  	if (zero == IntPtr.Zero) {  		zero = NativeMethods.LoadImage (IntPtr.Zero' new IntPtr (0x7f00)' 1' (int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight' 0x8000);  	}  	if (zero != IntPtr.Zero) {  		return BitmapFrame.Create (Imaging.CreateBitmapSourceFromHIcon (zero' Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight ((int)SystemParameters.SmallIconWidth' (int)SystemParameters.SmallIconHeight)));  	}  } catch {  	return null;  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: if (zero == IntPtr.Zero) {  	zero = NativeMethods.GetClassLong (hwnd' -34);  }  
Magic Number,Fluent,IconConverter,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Converters\IconConverter.cs,GetDefaultIcon,The following statement contains a magic number: zero = NativeMethods.GetClassLong (hwnd' -34);  
Magic Number,Fluent,NativeMethods,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\NativeMethods.cs,IsDwmEnabled,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6) {  	idDwmDllNotFound = true;  	return false;  }  
Magic Number,Fluent,NativeMethods,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Internal\NativeMethods.cs,GetClassLong,The following statement contains a magic number: if (IntPtr.Size == 4) {  	return new IntPtr (GetClassLong32 (hWnd' nIndex));  }  
Magic Number,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,The following statement contains a magic number: switch (e.ChangedButton) {  case MouseButton.Left:  	if (e.ClickCount == 1) {  		e.Handled = true;  		WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e' this.PointToScreen (new Point (0' this.TitleBarHeight)));  	} else if (e.ClickCount == 2) {  		e.Handled = true;  		this.Close ();  	}  	break;  case MouseButton.Right:  	e.Handled = true;  	this.RunInDispatcherAsync (() => WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e));  	break;  }  
Magic Number,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,The following statement contains a magic number: if (e.ClickCount == 1) {  	e.Handled = true;  	WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e' this.PointToScreen (new Point (0' this.TitleBarHeight)));  } else if (e.ClickCount == 2) {  	e.Handled = true;  	this.Close ();  }  
Magic Number,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,The following statement contains a magic number: if (e.ClickCount == 2) {  	e.Handled = true;  	this.Close ();  }  
Magic Number,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The following statement contains a magic number: System.Windows.Controls.ToolTipService.InitialShowDelayProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (900));  
Magic Number,Fluent,ToolTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\ToolTipService.cs,Attach,The following statement contains a magic number: System.Windows.Controls.ToolTipService.ShowDurationProperty.OverrideMetadata (type' new FrameworkPropertyMetadata (20000));  
Magic Number,Fluent,TwoLineLabel,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\TwoLineLabel.cs,UpdateTextRun,The following statement contains a magic number: if (hyphenIndex >= 0) {  	this.textRun.Text = text.Substring (0' hyphenIndex) + "-";  	this.textRun2.Text = text.Substring (hyphenIndex) + " ";  } else {  	var centerIndex = this.Text.Length / 2;  	// Find spaces nearest to center from left and right  	var leftSpaceIndex = text.LastIndexOf (" "' centerIndex' centerIndex' StringComparison.CurrentCulture);  	var rightSpaceIndex = text.IndexOf (" "' centerIndex' StringComparison.CurrentCulture);  	if (leftSpaceIndex == -1 && rightSpaceIndex == -1) {  		this.textRun.Text = this.Text;  		this.textRun2.Text = string.Empty;  	} else if (leftSpaceIndex == -1) {  		// Finds only space from right. New line adds on it  		this.textRun.Text = text.Substring (0' rightSpaceIndex);  		this.textRun2.Text = text.Substring (rightSpaceIndex) + " ";  	} else if (rightSpaceIndex == -1) {  		// Finds only space from left. New line adds on it  		this.textRun.Text = text.Substring (0' leftSpaceIndex);  		this.textRun2.Text = text.Substring (leftSpaceIndex) + " ";  	} else {  		// Find nearest to center space and add new line on it  		if (Math.Abs (centerIndex - leftSpaceIndex) < Math.Abs (centerIndex - rightSpaceIndex)) {  			this.textRun.Text = text.Substring (0' leftSpaceIndex);  			this.textRun2.Text = text.Substring (leftSpaceIndex) + " ";  		} else {  			this.textRun.Text = text.Substring (0' rightSpaceIndex);  			this.textRun2.Text = text.Substring (rightSpaceIndex) + " ";  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (panel != null) {  	var height = groupBox.GetLayoutRoot ().DesiredSize.Height;  	rows = new[] {  		groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' 0)' this.AdornedElement).Y'  		groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' panel.DesiredSize.Height / 2.0)' this.AdornedElement).Y'  		groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' panel.DesiredSize.Height)' this.AdornedElement).Y'  		groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' height + 1)' this.AdornedElement).Y  	};  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: rows = new[] {  	groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' 0)' this.AdornedElement).Y'  	groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' panel.DesiredSize.Height / 2.0)' this.AdornedElement).Y'  	groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' panel.DesiredSize.Height)' this.AdornedElement).Y'  	groupBox.GetLayoutRoot ().TranslatePoint (new Point (0' height + 1)' this.AdornedElement).Y  };  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: foreach (var keyTipInformation in this.keyTipInformations) {  	// Skip invisible keytips  	if (keyTipInformation.Visibility != Visibility.Visible) {  		continue;  	}  	// Update KeyTip Visibility  	var visualTargetIsVisible = keyTipInformation.VisualTarget.IsVisible;  	var visualTargetInVisualTree = VisualTreeHelper.GetParent (keyTipInformation.VisualTarget) != null;  	keyTipInformation.Visibility = visualTargetIsVisible && visualTargetInVisualTree ? Visibility.Visible : Visibility.Collapsed;  	keyTipInformation.KeyTip.Margin = KeyTip.GetMargin (keyTipInformation.AssociatedElement);  	if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  			switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  			case HorizontalAlignment.Left:  				x = 0;  				break;  			case HorizontalAlignment.Right:  				x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  				break;  			}  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  		// Dialog Launcher Button Exclusive Placement   		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  	} else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		double x = 0' y = 0;  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			break;  		case HorizontalAlignment.Right:  			x = elementSize.Width - keyTipSize.Width;  			break;  		case HorizontalAlignment.Center:  		case HorizontalAlignment.Stretch:  			x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  			break;  		}  		switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  		case VerticalAlignment.Top:  			break;  		case VerticalAlignment.Bottom:  			y = elementSize.Height - keyTipSize.Height;  			break;  		case VerticalAlignment.Center:  		case VerticalAlignment.Stretch:  			y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  			break;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  		// InRibbonGallery Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		if (rows == null) {  			continue;  		}  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  		keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  	} else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  		// Ribbon Tab Item Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.RenderSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement is MenuItem) {  		// MenuItem Exclusive Placement                      		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  	} else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  		// Backstage Items Exclusive Placement  		var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  		var elementSize = keyTipInformation.VisualTarget.DesiredSize;  		var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  		var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  		keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  	} else {  		if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  			var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  			var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			// Snapping to rows if it present  			if (rows != null) {  				var index = 0;  				var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  				for (var j = 1; j < rows.Length; j++) {  					if (withinRibbonToolbar && j == 1) {  						continue;  					}  					var distance = Math.Abs (rows [j] - translatedPoint.Y);  					if (distance < mindistance) {  						mindistance = distance;  						index = j;  					}  				}  				translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		} else {  			var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  			var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  			var point = new Point (x' y);  			var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  			if (rows != null) {  				translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  			}  			keyTipInformation.Position = translatedPoint;  		}  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (IsWithinQuickAccessToolbar (keyTipInformation.AssociatedElement)) {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  		switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  		case HorizontalAlignment.Left:  			x = 0;  			break;  		case HorizontalAlignment.Right:  			x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  			break;  		}  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Name == "PART_DialogLauncherButton") {  	// Dialog Launcher Button Exclusive Placement   	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  } else if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [3]);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (KeyTip.GetAutoPlacement (keyTipInformation.AssociatedElement) == false) {  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	double x = 0' y = 0;  	switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		x = elementSize.Width - keyTipSize.Width;  		break;  	case HorizontalAlignment.Center:  	case HorizontalAlignment.Stretch:  		x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  		break;  	}  	switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  	case VerticalAlignment.Top:  		break;  	case VerticalAlignment.Bottom:  		y = elementSize.Height - keyTipSize.Height;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  		break;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (x' y)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  case HorizontalAlignment.Left:  	break;  case HorizontalAlignment.Right:  	x = elementSize.Width - keyTipSize.Width;  	break;  case HorizontalAlignment.Center:  case HorizontalAlignment.Stretch:  	x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  	break;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  case HorizontalAlignment.Left:  	break;  case HorizontalAlignment.Right:  	x = elementSize.Width - keyTipSize.Width;  	break;  case HorizontalAlignment.Center:  case HorizontalAlignment.Stretch:  	x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  	break;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  case VerticalAlignment.Top:  	break;  case VerticalAlignment.Bottom:  	y = elementSize.Height - keyTipSize.Height;  	break;  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  	break;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  case VerticalAlignment.Top:  	break;  case VerticalAlignment.Bottom:  	y = elementSize.Height - keyTipSize.Height;  	break;  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  	break;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is InRibbonGallery && !((InRibbonGallery)keyTipInformation.AssociatedElement).IsCollapsed) {  	// InRibbonGallery Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	if (rows == null) {  		continue;  	}  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  	keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  } else if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width - keyTipSize.Width / 2.0' 0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = new Point (keyTipInformation.Position.X' rows [2] - keyTipSize.Height / 2);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is RibbonTabItem || keyTipInformation.AssociatedElement is Backstage) {  	// Ribbon Tab Item Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.RenderSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Width / 2.0 - keyTipSize.Width / 2.0' elementSize.Height - keyTipSize.Height / 2.0)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement is MenuItem) {  	// MenuItem Exclusive Placement                      	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  } else if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = keyTipInformation.VisualTarget.TranslatePoint (new Point (elementSize.Height / 3.0 + 2' elementSize.Height / 4.0 + 2)' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (keyTipInformation.AssociatedElement.Parent is BackstageTabControl) {  	// Backstage Items Exclusive Placement  	var keyTipSize = keyTipInformation.KeyTip.DesiredSize;  	var elementSize = keyTipInformation.VisualTarget.DesiredSize;  	var parent = (UIElement)keyTipInformation.VisualTarget.Parent;  	var positionInParent = keyTipInformation.VisualTarget.TranslatePoint (default(Point)' parent);  	keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  } else {  	if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  		var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  		var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		// Snapping to rows if it present  		if (rows != null) {  			var index = 0;  			var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  			for (var j = 1; j < rows.Length; j++) {  				if (withinRibbonToolbar && j == 1) {  					continue;  				}  				var distance = Math.Abs (rows [j] - translatedPoint.Y);  				if (distance < mindistance) {  					mindistance = distance;  					index = j;  				}  			}  			translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	} else {  		var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  		var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  		var point = new Point (x' y);  		var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  		if (rows != null) {  			translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  		}  		keyTipInformation.Position = translatedPoint;  	}  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: keyTipInformation.Position = parent.TranslatePoint (new Point (5' positionInParent.Y + (elementSize.Height / 2.0 - keyTipSize.Height))' this.AdornedElement);  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (RibbonProperties.GetSize (keyTipInformation.AssociatedElement) != RibbonControlSize.Large || IsTextBoxShapedControl (keyTipInformation.AssociatedElement)) {  	var withinRibbonToolbar = IsWithinRibbonToolbarInTwoLine (keyTipInformation.VisualTarget);  	var x = keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	// Snapping to rows if it present  	if (rows != null) {  		var index = 0;  		var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  		for (var j = 1; j < rows.Length; j++) {  			if (withinRibbonToolbar && j == 1) {  				continue;  			}  			var distance = Math.Abs (rows [j] - translatedPoint.Y);  			if (distance < mindistance) {  				mindistance = distance;  				index = j;  			}  		}  		translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  } else {  	var x = keyTipInformation.VisualTarget.DesiredSize.Width / 2.0 - keyTipInformation.KeyTip.DesiredSize.Width / 2.0;  	var y = keyTipInformation.VisualTarget.DesiredSize.Height - 8;  	var point = new Point (x' y);  	var translatedPoint = keyTipInformation.VisualTarget.TranslatePoint (point' this.AdornedElement);  	if (rows != null) {  		translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  	}  	keyTipInformation.Position = translatedPoint;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (rows != null) {  	var index = 0;  	var mindistance = Math.Abs (rows [0] - translatedPoint.Y);  	for (var j = 1; j < rows.Length; j++) {  		if (withinRibbonToolbar && j == 1) {  			continue;  		}  		var distance = Math.Abs (rows [j] - translatedPoint.Y);  		if (distance < mindistance) {  			mindistance = distance;  			index = j;  		}  	}  	translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: translatedPoint.Y = rows [index] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (rows != null) {  	translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: if (rows != null) {  	translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following statement contains a magic number: translatedPoint.Y = rows [2] - keyTipInformation.KeyTip.DesiredSize.Height / 2.0;  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,IsWithinRibbonToolbarInTwoLine,The following statement contains a magic number: if (definition.RowCount == 2 || definition.Rows.Count == 2) {  	return true;  }  
Magic Number,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,IsWithinRibbonToolbarInTwoLine,The following statement contains a magic number: if (definition.RowCount == 2 || definition.Rows.Count == 2) {  	return true;  }  
Magic Number,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,KeyTipService,The following statement contains a magic number: this.timer = new DispatcherTimer (TimeSpan.FromSeconds (0.7)' DispatcherPriority.SystemIdle' this.OnDelayedShow' Dispatcher.CurrentDispatcher);  
Magic Number,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The following statement contains a magic number: if (msg == Constants.WM_NCACTIVATE // mouse clicks in non client area  || (msg == Constants.WM_ACTIVATE && wParam == IntPtr.Zero) // the window is deactivated  // >= WM_NCLBUTTONDOWN <= WM_NCXBUTTONDBLCLK  || (msg >= 161 && msg <= 173) // mouse click (non client area)  || (msg >= 513 && msg <= 521)// mouse click  ) {  	if (this.activeAdornerChain != null && this.activeAdornerChain.IsAdornerChainAlive) {  		this.Terminate ();  	}  }  
Magic Number,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The following statement contains a magic number: if (msg == Constants.WM_NCACTIVATE // mouse clicks in non client area  || (msg == Constants.WM_ACTIVATE && wParam == IntPtr.Zero) // the window is deactivated  // >= WM_NCLBUTTONDOWN <= WM_NCXBUTTONDBLCLK  || (msg >= 161 && msg <= 173) // mouse click (non client area)  || (msg >= 513 && msg <= 521)// mouse click  ) {  	if (this.activeAdornerChain != null && this.activeAdornerChain.IsAdornerChainAlive) {  		this.Terminate ();  	}  }  
Magic Number,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The following statement contains a magic number: if (msg == Constants.WM_NCACTIVATE // mouse clicks in non client area  || (msg == Constants.WM_ACTIVATE && wParam == IntPtr.Zero) // the window is deactivated  // >= WM_NCLBUTTONDOWN <= WM_NCXBUTTONDBLCLK  || (msg >= 161 && msg <= 173) // mouse click (non client area)  || (msg >= 513 && msg <= 521)// mouse click  ) {  	if (this.activeAdornerChain != null && this.activeAdornerChain.IsAdornerChainAlive) {  		this.Terminate ();  	}  }  
Magic Number,Fluent,KeyTipService,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Services\KeyTipService.cs,WindowProc,The following statement contains a magic number: if (msg == Constants.WM_NCACTIVATE // mouse clicks in non client area  || (msg == Constants.WM_ACTIVATE && wParam == IntPtr.Zero) // the window is deactivated  // >= WM_NCLBUTTONDOWN <= WM_NCXBUTTONDBLCLK  || (msg >= 161 && msg <= 173) // mouse click (non client area)  || (msg >= 513 && msg <= 521)// mouse click  ) {  	if (this.activeAdornerChain != null && this.activeAdornerChain.IsAdornerChainAlive) {  		this.Terminate ();  	}  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 0; i < Math.Min (9' this.Items.Count); i++) {  	// 1' 2' 3' ... ' 9  	KeyTip.SetKeys (this.Items [i]' (i + 1).ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 9; i < Math.Min (18' this.Items.Count); i++) {  	// 09' 08' 07' ... ' 01  	KeyTip.SetKeys (this.Items [i]' "0" + (18 - i).ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 9; i < Math.Min (18' this.Items.Count); i++) {  	// 09' 08' 07' ... ' 01  	KeyTip.SetKeys (this.Items [i]' "0" + (18 - i).ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 9; i < Math.Min (18' this.Items.Count); i++) {  	// 09' 08' 07' ... ' 01  	KeyTip.SetKeys (this.Items [i]' "0" + (18 - i).ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: KeyTip.SetKeys (this.Items [i]' "0" + (18 - i).ToString (CultureInfo.InvariantCulture));  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 18; i < Math.Min (9 + 9 + 26' this.Items.Count); i++) {  	// 0A' 0B' 0C' ... ' 0Z  	KeyTip.SetKeys (this.Items [i]' "0" + startChar++);  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 18; i < Math.Min (9 + 9 + 26' this.Items.Count); i++) {  	// 0A' 0B' 0C' ... ' 0Z  	KeyTip.SetKeys (this.Items [i]' "0" + startChar++);  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 18; i < Math.Min (9 + 9 + 26' this.Items.Count); i++) {  	// 0A' 0B' 0C' ... ' 0Z  	KeyTip.SetKeys (this.Items [i]' "0" + startChar++);  }  
Magic Number,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,UpdateKeyTips,The following statement contains a magic number: for (var i = 18; i < Math.Min (9 + 9 + 26' this.Items.Count); i++) {  	// 0A' 0B' 0C' ... ' 0Z  	KeyTip.SetKeys (this.Items [i]' "0" + startChar++);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.IsCollapsed) {  	// Collapse QuickAccessToolbar  	this.quickAccessToolbarRect = new Rect (0' 0' 0' 0);  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	this.headerHolder.Measure (new Size (constraint.Width' constraint.Height));  	this.headerRect = new Rect (0' 0' this.headerHolder.DesiredSize.Width' constraint.Height);  } else if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (visibleGroups.Count == 0 || canRibbonTabControlScroll) {  	// Collapse itemRect  	this.itemsRect = new Rect (0' 0' 0' 0);  	// Set quick launch toolbar and header position and size  	this.quickAccessToolbarHolder.Measure (infinity);  	if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  	}  	if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		this.headerHolder.Measure (infinity);  		var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  		if (this.HeaderAlignment == HorizontalAlignment.Left) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  		}  	} else {  		this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  	}  } else {  	var pointZero = new Point ();  	// get initial StartX value  	var startX = visibleGroups.First ().FirstVisibleItem.TranslatePoint (pointZero' this).X;  	var endX = 0D;  	//Get minimum x point (workaround)  	foreach (var group in visibleGroups) {  		var currentStartX = group.FirstVisibleItem.TranslatePoint (pointZero' this).X;  		if (currentStartX < startX) {  			startX = currentStartX;  		}  		var lastItem = group.LastVisibleItem;  		var currentEndX = lastItem.TranslatePoint (new Point (lastItem.DesiredSize.Width' 0)' this).X;  		if (currentEndX > endX) {  			endX = currentEndX;  		}  	}  	// Ensure that startX and endX are never negative  	startX = Math.Max (0' startX);  	endX = Math.Max (0' endX);  	// Ensure that startX respect min width of QuickAccessToolBar  	startX = Math.Max (startX' this.QuickAccessToolBar.MinWidth ?? 0);  	// Set contextual groups position and size   	this.itemsContainer.Measure (infinity);  	var itemsRectWidth = Math.Min (this.itemsContainer.DesiredSize.Width' Math.Max (0' Math.Min (endX' constraint.Width) - startX));  	this.itemsRect = new Rect (startX' 0' itemsRectWidth' constraint.Height);  	// Set quick launch toolbar position and size   	this.quickAccessToolbarHolder.Measure (infinity);  	var quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Min (quickAccessToolbarWidth' startX)' this.quickAccessToolbarHolder.DesiredSize.Height);  	if (quickAccessToolbarWidth > startX) {  		this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  		this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  		quickAccessToolbarWidth = this.quickAccessToolbarHolder.DesiredSize.Width;  	}  	// Set header  	this.headerHolder.Measure (infinity);  	switch (this.HeaderAlignment) {  	case HorizontalAlignment.Left:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Center:  		{  			var allTextWidthRight = Math.Max (0' constraint.Width - endX);  			var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  			var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  			if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Right:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  				this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  			}  		}  		break;  	case HorizontalAlignment.Stretch:  		{  			if (startX - quickAccessToolbarWidth > 150) {  				var allTextWidth = startX - quickAccessToolbarWidth;  				this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  			} else {  				var allTextWidth = Math.Max (0' constraint.Width - endX);  				this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  			}  		}  		break;  	}  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width <= this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.quickAccessToolbarHolder.Measure (this.quickAccessToolbarRect.Size);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.quickAccessToolbarRect = new Rect (0' 0' Math.Max (0' constraint.Width - 50)' this.quickAccessToolbarHolder.DesiredSize.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.headerHolder.Measure (infinity);  	var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  	if (this.HeaderAlignment == HorizontalAlignment.Left) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  	}  } else {  	this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.headerHolder.Measure (infinity);  	var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  	if (this.HeaderAlignment == HorizontalAlignment.Left) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  	}  } else {  	this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.headerHolder.Measure (infinity);  	var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  	if (this.HeaderAlignment == HorizontalAlignment.Left) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  	}  } else {  	this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.headerHolder.Measure (infinity);  	var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  	if (this.HeaderAlignment == HorizontalAlignment.Left) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  	}  } else {  	this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (constraint.Width > this.quickAccessToolbarHolder.DesiredSize.Width + 50) {  	this.quickAccessToolbarRect = new Rect (0' 0' this.quickAccessToolbarHolder.DesiredSize.Width' this.quickAccessToolbarHolder.DesiredSize.Height);  	this.headerHolder.Measure (infinity);  	var allTextWidth = constraint.Width - this.quickAccessToolbarHolder.DesiredSize.Width;  	if (this.HeaderAlignment == HorizontalAlignment.Left) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Center) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Right) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  	} else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  		this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  	}  } else {  	this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.HeaderAlignment == HorizontalAlignment.Left) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Center) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Right) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.HeaderAlignment == HorizontalAlignment.Left) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Center) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Right) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.HeaderAlignment == HorizontalAlignment.Center) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Right) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (this.HeaderAlignment == HorizontalAlignment.Center) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Right) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else if (this.HeaderAlignment == HorizontalAlignment.Stretch) {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width' 0' allTextWidth' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (Math.Max (0' constraint.Width - 50)' 0' 50' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (startX - quickAccessToolbarWidth > 150) {  	var allTextWidth = startX - quickAccessToolbarWidth;  	this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	var allTextWidth = Math.Max (0' constraint.Width - endX);  	this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (startX - quickAccessToolbarWidth > 150) {  	var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  	this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  } else {  	var allTextWidth = Math.Max (0' constraint.Width - endX);  	this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: if (startX - quickAccessToolbarWidth > 150) {  	var allTextWidth = startX - quickAccessToolbarWidth;  	this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  } else {  	var allTextWidth = Math.Max (0' constraint.Width - endX);  	this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  }  
Magic Number,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following statement contains a magic number: this.headerRect.Width = this.headerRect.Width + 2;  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: if (overflowWidth < regularTabsCount * whitespace * 2) {  	var decreaseValue = overflowWidth / regularTabsCount;  	foreach (var tab in regularTabs)  		tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - decreaseValue)' tab.DesiredSize.Height));  	// tab.Width = Math.Max(0' tab.ActualWidth - decreaseValue);  	desiredSize = this.GetChildrenDesiredSize ();  	if (desiredSize.Width > availableSize.Width)  		desiredSize.Width = availableSize.Width;  	// Add separator lines between   	// tabs to assist readability  	this.UpdateSeparators (false' false);  	this.VerifyScrollData (availableSize.Width' desiredSize.Width);  	return desiredSize;  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: if (overflowWidth < childrenCount * whitespace * 2) {  	var regularTabsWhitespace = regularTabsCount * whitespace * 2.0;  	var decreaseValue = (overflowWidth - regularTabsWhitespace) / contextualTabsCount;  	foreach (var tab in regularTabs) {  		//if (!tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  		}  	}  	foreach (var tab in contextualTabs.Reverse<RibbonTabItem> ()) {  		//if (tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - decreaseValue)' tab.DesiredSize.Height));  			// Contextual tabs may overreduce' so check that  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  			if (overflowWidth < 0) {  				break;  			}  		}  	}  	desiredSize = this.GetChildrenDesiredSize ();  	if (desiredSize.Width > availableSize.Width) {  		desiredSize.Width = availableSize.Width;  	}  	// Add separator lines between   	// tabs to assist readability  	this.UpdateSeparators (true' false);  	this.VerifyScrollData (availableSize.Width' desiredSize.Width);  	return desiredSize;  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: if (overflowWidth < childrenCount * whitespace * 2) {  	var regularTabsWhitespace = regularTabsCount * whitespace * 2.0;  	var decreaseValue = (overflowWidth - regularTabsWhitespace) / contextualTabsCount;  	foreach (var tab in regularTabs) {  		//if (!tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  		}  	}  	foreach (var tab in contextualTabs.Reverse<RibbonTabItem> ()) {  		//if (tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - decreaseValue)' tab.DesiredSize.Height));  			// Contextual tabs may overreduce' so check that  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  			if (overflowWidth < 0) {  				break;  			}  		}  	}  	desiredSize = this.GetChildrenDesiredSize ();  	if (desiredSize.Width > availableSize.Width) {  		desiredSize.Width = availableSize.Width;  	}  	// Add separator lines between   	// tabs to assist readability  	this.UpdateSeparators (true' false);  	this.VerifyScrollData (availableSize.Width' desiredSize.Width);  	return desiredSize;  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: if (overflowWidth < childrenCount * whitespace * 2) {  	var regularTabsWhitespace = regularTabsCount * whitespace * 2.0;  	var decreaseValue = (overflowWidth - regularTabsWhitespace) / contextualTabsCount;  	foreach (var tab in regularTabs) {  		//if (!tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  		}  	}  	foreach (var tab in contextualTabs.Reverse<RibbonTabItem> ()) {  		//if (tab.IsContextual)  		{  			var widthBeforeMeasure = tab.DesiredSize.Width;  			tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - decreaseValue)' tab.DesiredSize.Height));  			// Contextual tabs may overreduce' so check that  			overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  			if (overflowWidth < 0) {  				break;  			}  		}  	}  	desiredSize = this.GetChildrenDesiredSize ();  	if (desiredSize.Width > availableSize.Width) {  		desiredSize.Width = availableSize.Width;  	}  	// Add separator lines between   	// tabs to assist readability  	this.UpdateSeparators (true' false);  	this.VerifyScrollData (availableSize.Width' desiredSize.Width);  	return desiredSize;  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: foreach (var tab in regularTabs) {  	//if (!tab.IsContextual)  	{  		var widthBeforeMeasure = tab.DesiredSize.Width;  		tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  		overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  	}  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: foreach (var tab in regularTabs) {  	//if (!tab.IsContextual)  	{  		var widthBeforeMeasure = tab.DesiredSize.Width;  		tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  		overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  	}  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: foreach (var tab in contextualTabs.Reverse<RibbonTabItem> ()) {  	//if (tab.IsContextual)  	{  		var widthBeforeMeasure = tab.DesiredSize.Width;  		tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  		// Contextual tabs may overreduce' so check that  		overflowWidth -= widthBeforeMeasure - tab.DesiredSize.Width;  		if (overflowWidth < 0) {  			desiredSize = this.GetChildrenDesiredSize ();  			if (desiredSize.Width > availableSize.Width) {  				desiredSize.Width = availableSize.Width;  			}  			// Add separator lines between   			// tabs to assist readability  			this.UpdateSeparators (true' false);  			this.VerifyScrollData (availableSize.Width' desiredSize.Width);  			return desiredSize;  		}  	}  }  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,MeasureOverride,The following statement contains a magic number: tab.Measure (new Size (Math.Max (0' tab.DesiredSize.Width - whitespace * 2.0)' tab.DesiredSize.Height));  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,LineLeft,The following statement contains a magic number: this.SetHorizontalOffset (this.HorizontalOffset - 16.0);  
Magic Number,Fluent,RibbonTabsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabsContainer.cs,LineRight,The following statement contains a magic number: this.SetHorizontalOffset (this.HorizontalOffset + 16.0);  
Magic Number,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The following statement contains a magic number: if (ribbonControl.Icon != null) {  	var iconVisual = ribbonControl.Icon as Visual;  	if (iconVisual != null) {  		var rect = new Rectangle {  			Width = 16'  			Height = 16'  			Fill = new VisualBrush (iconVisual)  		};  		((IRibbonControl)element).Icon = rect;  	} else {  		Bind (source' element' nameof (IRibbonControl.Icon)' IconProperty' BindingMode.OneWay);  	}  }  
Magic Number,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The following statement contains a magic number: if (ribbonControl.Icon != null) {  	var iconVisual = ribbonControl.Icon as Visual;  	if (iconVisual != null) {  		var rect = new Rectangle {  			Width = 16'  			Height = 16'  			Fill = new VisualBrush (iconVisual)  		};  		((IRibbonControl)element).Icon = rect;  	} else {  		Bind (source' element' nameof (IRibbonControl.Icon)' IconProperty' BindingMode.OneWay);  	}  }  
Magic Number,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The following statement contains a magic number: if (iconVisual != null) {  	var rect = new Rectangle {  		Width = 16'  		Height = 16'  		Fill = new VisualBrush (iconVisual)  	};  	((IRibbonControl)element).Icon = rect;  } else {  	Bind (source' element' nameof (IRibbonControl.Icon)' IconProperty' BindingMode.OneWay);  }  
Magic Number,Fluent,RibbonControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonControl.cs,BindQuickAccessItem,The following statement contains a magic number: if (iconVisual != null) {  	var rect = new Rectangle {  		Width = 16'  		Height = 16'  		Fill = new VisualBrush (iconVisual)  	};  	((IRibbonControl)element).Icon = rect;  } else {  	Bind (source' element' nameof (IRibbonControl.Icon)' IconProperty' BindingMode.OneWay);  }  
Magic Number,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The following statement contains a magic number: if (this.Icon != null) {  	var iconVisual = this.Icon as Visual;  	if (iconVisual != null) {  		var rect = new Rectangle {  			Width = 16'  			Height = 16'  			Fill = new VisualBrush (iconVisual)  		};  		groupBox.Icon = rect;  	} else {  		RibbonControl.Bind (this' groupBox' nameof (this.Icon)' RibbonControl.IconProperty' BindingMode.OneWay);  	}  }  
Magic Number,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The following statement contains a magic number: if (this.Icon != null) {  	var iconVisual = this.Icon as Visual;  	if (iconVisual != null) {  		var rect = new Rectangle {  			Width = 16'  			Height = 16'  			Fill = new VisualBrush (iconVisual)  		};  		groupBox.Icon = rect;  	} else {  		RibbonControl.Bind (this' groupBox' nameof (this.Icon)' RibbonControl.IconProperty' BindingMode.OneWay);  	}  }  
Magic Number,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The following statement contains a magic number: if (iconVisual != null) {  	var rect = new Rectangle {  		Width = 16'  		Height = 16'  		Fill = new VisualBrush (iconVisual)  	};  	groupBox.Icon = rect;  } else {  	RibbonControl.Bind (this' groupBox' nameof (this.Icon)' RibbonControl.IconProperty' BindingMode.OneWay);  }  
Magic Number,Fluent,RibbonGroupBox,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupBox.cs,CreateQuickAccessItem,The following statement contains a magic number: if (iconVisual != null) {  	var rect = new Rectangle {  		Width = 16'  		Height = 16'  		Fill = new VisualBrush (iconVisual)  	};  	groupBox.Icon = rect;  } else {  	RibbonControl.Bind (this' groupBox' nameof (this.Icon)' RibbonControl.IconProperty' BindingMode.OneWay);  }  
Magic Number,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,FindGroup,The following statement contains a magic number: if (name.StartsWith ("("' StringComparison.OrdinalIgnoreCase)) {  	name = name.Substring (1' name.Length - 2);  }  
Magic Number,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,FindGroup,The following statement contains a magic number: name = name.Substring (1' name.Length - 2);  
Magic Number,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,LineLeft,The following statement contains a magic number: this.SetHorizontalOffset (this.HorizontalOffset - 16.0);  
Magic Number,Fluent,RibbonGroupsContainer,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonGroupsContainer.cs,LineRight,The following statement contains a magic number: this.SetHorizontalOffset (this.HorizontalOffset + 16.0);  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: if (totalWidth < headerWidth + this.Indent * 2) {  	var newPaddings = Math.Max (0' (totalWidth - headerWidth) / 2);  	this.contentContainer.Padding = new Thickness (newPaddings' this.contentContainer.Padding.Top' newPaddings' this.contentContainer.Padding.Bottom);  } else {  	if (DoubleUtil.AreClose (this.desiredWidth' 0) == false) {  		// If header width is larger then tab increase tab width  		if (constraint.Width > this.desiredWidth && this.desiredWidth > totalWidth) {  			baseConstraint.Width = this.desiredWidth;  		} else {  			baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  		}  	}  }  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: if (totalWidth < headerWidth + this.Indent * 2) {  	var newPaddings = Math.Max (0' (totalWidth - headerWidth) / 2);  	this.contentContainer.Padding = new Thickness (newPaddings' this.contentContainer.Padding.Top' newPaddings' this.contentContainer.Padding.Bottom);  } else {  	if (DoubleUtil.AreClose (this.desiredWidth' 0) == false) {  		// If header width is larger then tab increase tab width  		if (constraint.Width > this.desiredWidth && this.desiredWidth > totalWidth) {  			baseConstraint.Width = this.desiredWidth;  		} else {  			baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  		}  	}  }  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: if (totalWidth < headerWidth + this.Indent * 2) {  	var newPaddings = Math.Max (0' (totalWidth - headerWidth) / 2);  	this.contentContainer.Padding = new Thickness (newPaddings' this.contentContainer.Padding.Top' newPaddings' this.contentContainer.Padding.Bottom);  } else {  	if (DoubleUtil.AreClose (this.desiredWidth' 0) == false) {  		// If header width is larger then tab increase tab width  		if (constraint.Width > this.desiredWidth && this.desiredWidth > totalWidth) {  			baseConstraint.Width = this.desiredWidth;  		} else {  			baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  		}  	}  }  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: if (DoubleUtil.AreClose (this.desiredWidth' 0) == false) {  	// If header width is larger then tab increase tab width  	if (constraint.Width > this.desiredWidth && this.desiredWidth > totalWidth) {  		baseConstraint.Width = this.desiredWidth;  	} else {  		baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  	}  }  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: if (constraint.Width > this.desiredWidth && this.desiredWidth > totalWidth) {  	baseConstraint.Width = this.desiredWidth;  } else {  	baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  }  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,MeasureOverride,The following statement contains a magic number: baseConstraint.Width = headerWidth + this.Indent * 2 + this.contentContainer.Margin.Left + this.contentContainer.Margin.Right;  
Magic Number,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnMouseLeftButtonDown,The following statement contains a magic number: if (ReferenceEquals (e.Source' this) && e.ClickCount == 2) {  	e.Handled = true;  	if (this.TabControlParent != null) {  		var canMinimize = this.TabControlParent.CanMinimize;  		if (canMinimize) {  			this.TabControlParent.IsMinimized = !this.TabControlParent.IsMinimized;  		}  	}  } else if (ReferenceEquals (e.Source' this) || this.IsSelected == false) {  	if (this.Visibility == Visibility.Visible) {  		if (this.TabControlParent != null) {  			var newItem = this.TabControlParent.ItemContainerGenerator.ItemFromContainer (this);  			if (ReferenceEquals (this.TabControlParent.SelectedTabItem' newItem)) {  				this.TabControlParent.IsDropDownOpen = !this.TabControlParent.IsDropDownOpen;  			} else {  				this.TabControlParent.SelectedItem = newItem;  			}  			this.TabControlParent.RaiseRequestBackstageClose ();  		} else {  			this.IsSelected = true;  		}  		this.SetFocus ();  		e.Handled = true;  	}  }  
Magic Number,Fluent.Helpers,WindowSteeringHelper,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Helpers\WindowSteeringHelper.cs,HandleMouseLeftButtonDown,The following statement contains a magic number: if (handleDragMove && e.ClickCount == 1) {  	e.Handled = true;  	// tage from DragMove internal code  	window.VerifyAccess ();  	// for the touch usage  	UnsafeNativeMethods.ReleaseCapture ();  	var criticalHandle = (IntPtr)criticalHandlePropertyInfo.GetValue (window' emptyObjectArray);  	// DragMove works too' but not on maximized windows  	NativeMethods.SendMessage (criticalHandle' WM.SYSCOMMAND' (IntPtr)SC.MOUSEMOVE' IntPtr.Zero);  	NativeMethods.SendMessage (criticalHandle' WM.LBUTTONUP' IntPtr.Zero' IntPtr.Zero);  } else if (handleStateChange && e.ClickCount == 2 && window.ResizeMode != ResizeMode.NoResize) {  	e.Handled = true;  	window.WindowState = window.WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;  }  
Magic Number,Fluent.Helpers,WindowSteeringHelper,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Helpers\WindowSteeringHelper.cs,HandleMouseLeftButtonDown,The following statement contains a magic number: if (handleStateChange && e.ClickCount == 2 && window.ResizeMode != ResizeMode.NoResize) {  	e.Handled = true;  	window.WindowState = window.WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;  }  
Missing Default,Fluent,StatusBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\StatusBar.cs,OnItemsChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add: {  	foreach (var newItem in e.NewItems) {  		var container = this.ItemContainerGenerator.ContainerFromItem (newItem);  		var containerIndex = this.ItemContainerGenerator.IndexFromContainer (container);  		var item = container as StatusBarItem;  		if (item != null) {  			item.Checked += this.OnItemChecked;  			item.Unchecked += this.OnItemUnchecked;  			this.contextMenu.Items.Insert (containerIndex' new StatusBarMenuItem (item));  		} else {  			this.contextMenu.Items.Insert (containerIndex' new Separator ());  		}  	}  	break;  }  case NotifyCollectionChangedAction.Move: {  	for (var i = 0; i < e.NewItems.Count; i++) {  		var menuItem = this.contextMenu.Items [e.OldStartingIndex + 1];  		this.contextMenu.Items.Remove (e.OldStartingIndex + 1);  		this.contextMenu.Items.Insert (e.NewStartingIndex + i + 1' menuItem);  	}  	break;  }  case NotifyCollectionChangedAction.Remove: {  	for (var i = 0; i < e.OldItems.Count; i++) {  		var menuItem = this.contextMenu.Items [e.OldStartingIndex + 1] as StatusBarMenuItem;  		if (menuItem != null) {  			menuItem.StatusBarItem.Checked += this.OnItemChecked;  			menuItem.StatusBarItem.Unchecked += this.OnItemUnchecked;  		}  		this.contextMenu.Items.RemoveAt (e.OldStartingIndex + 1);  	}  	break;  }  case NotifyCollectionChangedAction.Replace: {  	for (var i = 0; i < e.OldItems.Count; i++) {  		var menuItem = this.contextMenu.Items [e.OldStartingIndex + 1] as StatusBarMenuItem;  		if (menuItem != null) {  			menuItem.StatusBarItem.Checked += this.OnItemChecked;  			menuItem.StatusBarItem.Unchecked += this.OnItemUnchecked;  		}  		this.contextMenu.Items.RemoveAt (e.OldStartingIndex + 1);  	}  	for (var i = 0; i < e.NewItems.Count; i++) {  		var item = this.ItemContainerGenerator.ContainerFromItem (e.NewItems [i]) as StatusBarItem;  		if (item != null) {  			item.Checked += this.OnItemChecked;  			item.Unchecked += this.OnItemUnchecked;  			this.contextMenu.Items.Insert (e.NewStartingIndex + i + 1' new StatusBarMenuItem (item));  		} else {  			this.contextMenu.Items.Insert (e.NewStartingIndex + i + 1' new Separator ());  		}  	}  	break;  }  case NotifyCollectionChangedAction.Reset: {  	this.RecreateMenu ();  	break;  }  }  
Missing Default,Fluent,Gallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Gallery.cs,OnFilterCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		if (this.groupsMenuButton != null) {  			var filter = (GalleryGroupFilter)e.NewItems [i];  			var menuItem = new MenuItem {  				Header = filter.Title'  				Tag = filter  			};  			if (ReferenceEquals (filter' this.SelectedFilter)) {  				menuItem.IsChecked = true;  			}  			menuItem.Click += this.OnFilterMenuItemClick;  			this.groupsMenuButton.Items.Insert (e.NewStartingIndex + i' menuItem);  		}  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems) {  		if (this.groupsMenuButton != null) {  			this.groupsMenuButton.Items.Remove (this.GetFilterMenuItem (item as GalleryGroupFilter));  		}  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems) {  		if (this.groupsMenuButton != null) {  			this.groupsMenuButton.Items.Remove (this.GetFilterMenuItem (item as GalleryGroupFilter));  		}  	}  	foreach (var item in e.NewItems.OfType<GalleryGroupFilter> ()) {  		if (this.groupsMenuButton != null) {  			var filter = item;  			var menuItem = new MenuItem {  				Header = filter.Title'  				Tag = filter  			};  			if (ReferenceEquals (filter' this.SelectedFilter)) {  				menuItem.IsChecked = true;  			}  			menuItem.Click += this.OnFilterMenuItemClick;  			this.groupsMenuButton.Items.Add (menuItem);  		}  	}  	break;  }  
Missing Default,Fluent,InRibbonGallery,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\InRibbonGallery.cs,OnFilterCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	foreach (var item in e.NewItems.OfType<GalleryGroupFilter> ()) {  		if (this.groupsMenuButton != null) {  			var filter = item;  			var menuItem = new MenuItem {  				Header = filter.Title'  				Tag = filter'  				IsDefinitive = false  			};  			if (ReferenceEquals (filter' this.SelectedFilter)) {  				menuItem.IsChecked = true;  			}  			menuItem.Click += this.OnFilterMenuItemClick;  			this.groupsMenuButton.Items.Add (menuItem);  		}  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems.OfType<GalleryGroupFilter> ()) {  		this.groupsMenuButton.Items.Remove (this.GetFilterMenuItem (item));  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems.OfType<GalleryGroupFilter> ()) {  		this.groupsMenuButton.Items.Remove (this.GetFilterMenuItem (item));  	}  	foreach (var item in e.NewItems.OfType<GalleryGroupFilter> ()) {  		if (this.groupsMenuButton != null) {  			var filter = item;  			var menuItem = new MenuItem {  				Header = filter.Title'  				Tag = filter'  				IsDefinitive = false  			};  			if (ReferenceEquals (filter' this.SelectedFilter)) {  				menuItem.IsChecked = true;  			}  			menuItem.Click += this.OnFilterMenuItemClick;  			this.groupsMenuButton.Items.Add (menuItem);  		}  	}  	break;  case NotifyCollectionChangedAction.Reset:  	this.groupsMenuButton.Items.Clear ();  	break;  }  
Missing Default,Fluent,RibbonWindow,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonWindow.cs,HandleIconMouseDown,The following switch statement is missing a default case: switch (e.ChangedButton) {  case MouseButton.Left:  	if (e.ClickCount == 1) {  		e.Handled = true;  		WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e' this.PointToScreen (new Point (0' this.TitleBarHeight)));  	} else if (e.ClickCount == 2) {  		e.Handled = true;  		this.Close ();  	}  	break;  case MouseButton.Right:  	e.Handled = true;  	this.RunInDispatcherAsync (() => WindowSteeringHelper.ShowSystemMenuPhysicalCoordinates (this' e));  	break;  }  
Missing Default,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following switch statement is missing a default case: switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  case HorizontalAlignment.Left:  	x = 0;  	break;  case HorizontalAlignment.Right:  	x = keyTipInformation.VisualTarget.DesiredSize.Width - keyTipInformation.KeyTip.DesiredSize.Width;  	break;  }  
Missing Default,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following switch statement is missing a default case: switch (KeyTip.GetHorizontalAlignment (keyTipInformation.AssociatedElement)) {  case HorizontalAlignment.Left:  	break;  case HorizontalAlignment.Right:  	x = elementSize.Width - keyTipSize.Width;  	break;  case HorizontalAlignment.Center:  case HorizontalAlignment.Stretch:  	x = elementSize.Width / 2.0 - keyTipSize.Width / 2.0;  	break;  }  
Missing Default,Fluent,KeyTipAdorner,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Adorners\KeyTipAdorner.cs,UpdateKeyTipPositions,The following switch statement is missing a default case: switch (KeyTip.GetVerticalAlignment (keyTipInformation.AssociatedElement)) {  case VerticalAlignment.Top:  	break;  case VerticalAlignment.Bottom:  	y = elementSize.Height - keyTipSize.Height;  	break;  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	y = elementSize.Height / 2.0 - keyTipSize.Height / 2.0;  	break;  }  
Missing Default,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnDropDownPopupKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Escape:  	this.IsDropDownOpen = false;  	handled = true;  	break;  }  
Missing Default,Fluent,DropDownButton,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\DropDownButton.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Down:  	if (this.HasItems && this.IsDropDownOpen == false)// Only handle this for initial navigation. Further navigation is handled by the dropdown itself  	 {  		this.IsDropDownOpen = true;  		var container = this.ItemContainerGenerator.ContainerFromIndex (0);  		NavigateToContainer (container);  		handled = true;  	}  	break;  case Key.Up:  	if (this.HasItems && this.IsDropDownOpen == false)// Only handle this for initial navigation. Further navigation is handled by the dropdown itself  	 {  		this.IsDropDownOpen = true;  		var container = this.ItemContainerGenerator.ContainerFromIndex (this.Items.Count - 1);  		NavigateToContainer (container);  		handled = true;  	}  	break;  case Key.Escape:  	if (this.IsDropDownOpen) {  		this.IsDropDownOpen = false;  		handled = true;  	}  	break;  case Key.Enter:  case Key.Space:  	this.IsDropDownOpen = !this.IsDropDownOpen;  	handled = true;  	break;  }  
Missing Default,Fluent,QuickAccessToolBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\QuickAccessToolBar.cs,OnQuickAccessItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		if (this.menuDownButton != null) {  			this.menuDownButton.Items.Insert (e.NewStartingIndex + i + 1' e.NewItems [i]);  		} else {  			this.AddLogicalChild (e.NewItems [i]);  		}  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems) {  		if (this.menuDownButton != null) {  			this.menuDownButton.Items.Remove (item);  		} else {  			this.RemoveLogicalChild (item);  		}  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems) {  		if (this.menuDownButton != null) {  			this.menuDownButton.Items.Remove (item);  		} else {  			this.RemoveLogicalChild (item);  		}  	}  	var ii = 0;  	foreach (var item in e.NewItems) {  		if (this.menuDownButton != null) {  			this.menuDownButton.Items.Insert (e.NewStartingIndex + ii + 1' item);  		} else {  			this.AddLogicalChild (item);  		}  		ii++;  	}  	break;  }  
Missing Default,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnContextualGroupsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		this.TitleBar.Items.Insert (e.NewStartingIndex + i' e.NewItems [i]);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems) {  		this.TitleBar.Items.Remove (item);  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems) {  		this.TitleBar.Items.Remove (item);  	}  	foreach (var item in e.NewItems) {  		this.TitleBar.Items.Add (item);  	}  	break;  case NotifyCollectionChangedAction.Reset:  	this.TitleBar.Items.Clear ();  	break;  }  
Missing Default,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnTabsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		this.TabControl.Items.Insert (e.NewStartingIndex + i' e.NewItems [i]);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems) {  		this.TabControl.Items.Remove (item);  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems) {  		this.TabControl.Items.Remove (item);  	}  	foreach (var item in e.NewItems) {  		this.TabControl.Items.Add (item);  	}  	break;  case NotifyCollectionChangedAction.Reset:  	this.TabControl.Items.Clear ();  	break;  }  
Missing Default,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnToolbarItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		this.TabControl.ToolBarItems.Insert (e.NewStartingIndex + i' (UIElement)e.NewItems [i]);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems) {  		this.TabControl.ToolBarItems.Remove (item as UIElement);  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems) {  		this.TabControl.ToolBarItems.Remove (item as UIElement);  	}  	foreach (var item in e.NewItems) {  		this.TabControl.ToolBarItems.Add (item as UIElement);  	}  	break;  }  
Missing Default,Fluent,Ribbon,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\Ribbon.cs,OnQuickAccessItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		var menuItem = (QuickAccessMenuItem)e.NewItems [i];  		this.QuickAccessToolBar.QuickAccessItems.Insert (e.NewStartingIndex + i' menuItem);  		menuItem.Ribbon = this;  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems.OfType<QuickAccessMenuItem> ()) {  		var menuItem = item;  		this.QuickAccessToolBar.QuickAccessItems.Remove (menuItem);  		menuItem.Ribbon = null;  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems.OfType<QuickAccessMenuItem> ()) {  		var menuItem = item;  		this.QuickAccessToolBar.QuickAccessItems.Remove (menuItem);  		menuItem.Ribbon = null;  	}  	foreach (var item in e.NewItems.OfType<QuickAccessMenuItem> ()) {  		var menuItem = item;  		this.QuickAccessToolBar.QuickAccessItems.Add (menuItem);  		menuItem.Ribbon = this;  	}  	break;  }  
Missing Default,Fluent,RibbonTitleBar,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTitleBar.cs,Update,The following switch statement is missing a default case: switch (this.HeaderAlignment) {  case HorizontalAlignment.Left:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Center:  	{  		var allTextWidthRight = Math.Max (0' constraint.Width - endX);  		var allTextWidthLeft = Math.Max (0' startX - quickAccessToolbarWidth);  		var fitsRightButNotLeft = allTextWidthRight >= this.headerHolder.DesiredSize.Width && allTextWidthLeft < this.headerHolder.DesiredSize.Width;  		if (((startX - quickAccessToolbarWidth < 150 || fitsRightButNotLeft) && (startX - quickAccessToolbarWidth > 0) && (startX - quickAccessToolbarWidth < constraint.Width - endX)) || (endX < constraint.Width / 2)) {  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width / 2 - this.headerHolder.DesiredSize.Width / 2)' constraint.Width)' 0' Math.Min (allTextWidthRight' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidthLeft / 2 - this.headerHolder.DesiredSize.Width / 2)' 0' Math.Min (allTextWidthLeft' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Right:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = Math.Max (0' startX - quickAccessToolbarWidth);  			this.headerRect = new Rect (this.quickAccessToolbarHolder.DesiredSize.Width + Math.Max (0' allTextWidth - this.headerHolder.DesiredSize.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (Math.Max (endX' constraint.Width - this.headerHolder.DesiredSize.Width)' constraint.Width)' 0' Math.Min (allTextWidth' this.headerHolder.DesiredSize.Width)' constraint.Height);  		}  	}  	break;  case HorizontalAlignment.Stretch:  	{  		if (startX - quickAccessToolbarWidth > 150) {  			var allTextWidth = startX - quickAccessToolbarWidth;  			this.headerRect = new Rect (this.quickAccessToolbarRect.Width' 0' allTextWidth' constraint.Height);  		} else {  			var allTextWidth = Math.Max (0' constraint.Width - endX);  			this.headerRect = new Rect (Math.Min (endX' constraint.Width)' 0' allTextWidth' constraint.Height);  		}  	}  	break;  }  
Missing Default,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,OnToolbarItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		this.ToolbarPanel.Children.Insert (e.NewStartingIndex + i' (UIElement)e.NewItems [i]);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var obj3 in e.OldItems.OfType<UIElement> ()) {  		this.ToolbarPanel.Children.Remove (obj3);  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var obj4 in e.OldItems.OfType<UIElement> ()) {  		this.ToolbarPanel.Children.Remove (obj4);  	}  	foreach (var obj5 in e.NewItems.OfType<UIElement> ()) {  		this.ToolbarPanel.Children.Add (obj5);  	}  	break;  case NotifyCollectionChangedAction.Reset:  	this.ToolbarPanel.Children.Clear ();  	foreach (var toolBarItem in this.ToolBarItems) {  		this.ToolbarPanel.Children.Add (toolBarItem);  	}  	break;  }  
Missing Default,Fluent,RibbonTabControl,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabControl.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Escape:  	if (this.IsDropDownOpen) {  		this.IsDropDownOpen = false;  	}  	break;  case Key.Tab:  	if ((e.KeyboardDevice.Modifiers & ModifierKeys.Control) == ModifierKeys.Control) {  		startIndex = this.ItemContainerGenerator.IndexFromContainer (this.ItemContainerGenerator.ContainerFromItem (this.SelectedItem));  		if ((e.KeyboardDevice.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift) {  			direction = -1;  		} else {  			direction = 1;  		}  	}  	break;  case Key.Home:  	direction = 1;  	startIndex = -1;  	break;  case Key.End:  	direction = -1;  	startIndex = this.Items.Count;  	break;  }  
Missing Default,Fluent,RibbonTabItem,F:\newReposMay17\fluentribbon_Fluent.Ribbon\Fluent.Ribbon\Controls\RibbonTabItem.cs,OnGroupsCollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	for (var i = 0; i < e.NewItems.Count; i++) {  		this.groupsInnerContainer.Children.Insert (e.NewStartingIndex + i' (UIElement)e.NewItems [i]);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var item in e.OldItems.OfType<UIElement> ()) {  		this.groupsInnerContainer.Children.Remove (item);  	}  	break;  case NotifyCollectionChangedAction.Replace:  	foreach (var item in e.OldItems.OfType<UIElement> ()) {  		this.groupsInnerContainer.Children.Remove (item);  	}  	foreach (var item in e.NewItems.OfType<UIElement> ()) {  		this.groupsInnerContainer.Children.Add (item);  	}  	break;  case NotifyCollectionChangedAction.Reset:  	this.groupsInnerContainer.Children.Clear ();  	foreach (var group in this.groups) {  		this.groupsInnerContainer.Children.Add (group);  	}  	break;  }  
