Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GLSLShader,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindow.xib.designer.cs,MyDisplayLinkOutputCallback,The method has 5 parameters. Parameters: displayLink' inNow' inOutputTime' flagsIn' flagsOut
Long Statement,GLSLShader,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindow.xib.designer.cs,DrawView,The length of the statement  "			// This method will be called on both the main thread (through -drawRect:) and a secondary thread (through the display link rendering loop) " is 139.
Long Statement,GLSLShader,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindow.xib.designer.cs,UpdateView,The length of the statement  "			// This method will be called on the main thread when resizing' but we may be drawing on a secondary thread through the display link " is 132.
Magic Number,GLSLShader,MainWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindowController.cs,KeyDown,The following statement contains a magic number: switch (c) {    			// [Esc] exits full-screen mode  			case (char)27:  				if (isInFullScreenMode)  					goWindow ();  				break;  			default:  				break;    			}
Magic Number,GLSLShader,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindow.xib.designer.cs,MyOpenGLView,The following statement contains a magic number: var attribs = new object [] {  				NSOpenGLPixelFormatAttribute.Accelerated'  				NSOpenGLPixelFormatAttribute.NoRecovery'  				NSOpenGLPixelFormatAttribute.DoubleBuffer'  				NSOpenGLPixelFormatAttribute.ColorSize' 24'  				NSOpenGLPixelFormatAttribute.DepthSize' 16 };
Magic Number,GLSLShader,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\MainWindow.xib.designer.cs,MyOpenGLView,The following statement contains a magic number: var attribs = new object [] {  				NSOpenGLPixelFormatAttribute.Accelerated'  				NSOpenGLPixelFormatAttribute.NoRecovery'  				NSOpenGLPixelFormatAttribute.DoubleBuffer'  				NSOpenGLPixelFormatAttribute.ColorSize' 24'  				NSOpenGLPixelFormatAttribute.DepthSize' 16 };
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: int[] viewport = new int[4];
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: GL.Vertex2 (viewport [2] / 2' 0);
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: GL.Vertex2 (viewport [2] / 2' 0);
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: GL.Vertex2 (viewport [2] / 2' viewport [3]);
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: GL.Vertex2 (viewport [2] / 2' viewport [3]);
Magic Number,GLSLShader,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLSLShader\Scene.cs,DrawGLScene,The following statement contains a magic number: GL.Vertex2 (viewport [2] / 2' viewport [3]);
