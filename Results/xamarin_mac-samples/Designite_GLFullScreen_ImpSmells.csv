Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GLFullScreen,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindow.xib.designer.cs,MyDisplayLinkOutputCallback,The method has 5 parameters. Parameters: displayLink' inNow' inOutputTime' flagsIn' flagsOut
Long Statement,GLFullScreen,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindow.xib.designer.cs,DrawView,The length of the statement  "			// This method will be called on both the main thread (through -drawRect:) and a secondary thread (through the display link rendering loop) " is 139.
Long Statement,GLFullScreen,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindow.xib.designer.cs,UpdateView,The length of the statement  "			// This method will be called on the main thread when resizing' but we may be drawing on a secondary thread through the display link " is 132.
Long Statement,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The length of the statement  "			// Since we are sharing OpenGL objects between the full-screen and non-fullscreen contexts' we only need to do this once " is 120.
Long Statement,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,LoadTexture,The length of the statement  "                        GL.BufferData (BufferTarget.PixelUnpackBuffer' new IntPtr (TEXTURE_WIDTH * TEXTURE_HEIGHT * 4 * sizeof(byte))' data' BufferUsageHint.StaticDraw); " is 145.
Long Statement,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,LoadTexture,The length of the statement  "                        GL.TexImage2D (TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba' TEXTURE_WIDTH' TEXTURE_HEIGHT' 0' PixelFormat.Rgba' PixelType.UnsignedByte' IntPtr.Zero); " is 158.
Magic Number,GLFullScreen,MainWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindowController.cs,KeyDown,The following statement contains a magic number: switch (c) {  			// [Esc] exits full-screen mode  			case (char)27:  				if (isInFullScreenMode)  					goWindow ();  				break;  			// [space] toggles rotation of the globe  			case (char)32:  				toggleAnimation ();  				break;  			case 'w':  			case 'W':  				Scene.toggleWireFrame ();  				break;  			default:  				  				break;  				  			}
Magic Number,GLFullScreen,MainWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindowController.cs,KeyDown,The following statement contains a magic number: switch (c) {  			// [Esc] exits full-screen mode  			case (char)27:  				if (isInFullScreenMode)  					goWindow ();  				break;  			// [space] toggles rotation of the globe  			case (char)32:  				toggleAnimation ();  				break;  			case 'w':  			case 'W':  				Scene.toggleWireFrame ();  				break;  			default:  				  				break;  				  			}
Magic Number,GLFullScreen,MainWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindowController.cs,MouseDown,The following statement contains a magic number: switch (theEvent.Type) {  					  				case NSEventType.LeftMouseUp:  					dragging = false;  					break;  				case NSEventType.LeftMouseDragged:  					dx = (float)windowPoint.X - (float)lastWindowPoint.X;  					dy = (float)windowPoint.Y - (float)lastWindowPoint.Y;  					Scene.SunAngle = Scene.SunAngle - 1 * dx;  				    Scene.RollAngle = Scene.RollAngle - 0.5f * dy;  					lastWindowPoint = windowPoint;  					  					if (isInFullScreenMode) {  						fullScreenView.Display ();  					}  					else {  						openGLView.Display ();	      					}  					break;  				default:  					break;  				}
Magic Number,GLFullScreen,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindow.xib.designer.cs,MyOpenGLView,The following statement contains a magic number: var attribs = new object [] {  				NSOpenGLPixelFormatAttribute.Accelerated'  				NSOpenGLPixelFormatAttribute.NoRecovery'  				NSOpenGLPixelFormatAttribute.DoubleBuffer'  				NSOpenGLPixelFormatAttribute.ColorSize' 24'  				NSOpenGLPixelFormatAttribute.DepthSize' 16 };
Magic Number,GLFullScreen,MyOpenGLView,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\MainWindow.xib.designer.cs,MyOpenGLView,The following statement contains a magic number: var attribs = new object [] {  				NSOpenGLPixelFormatAttribute.Accelerated'  				NSOpenGLPixelFormatAttribute.NoRecovery'  				NSOpenGLPixelFormatAttribute.DoubleBuffer'  				NSOpenGLPixelFormatAttribute.ColorSize' 24'  				NSOpenGLPixelFormatAttribute.DepthSize' 16 };
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,Scene,The following statement contains a magic number: sunAngle = 135;
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,advanceTimeBy,The following statement contains a magic number: float newAnimationPhase = (float)(animationPhase + 0.000500 * phaseDelta);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,setViewportRect,The following statement contains a magic number: Geometry.Perspective (30' bounds.Size.Width / bounds.Size.Height' 0.1' 100);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,setViewportRect,The following statement contains a magic number: Geometry.Perspective (30' bounds.Size.Width / bounds.Size.Height' 0.1' 100);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,setViewportRect,The following statement contains a magic number: Geometry.Perspective (30' bounds.Size.Width / bounds.Size.Height' 0.1' 100);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,setupSphere,The following statement contains a magic number: sphere = new Sphere (radius' 48' 24' true);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,setupSphere,The following statement contains a magic number: sphere = new Sphere (radius' 48' 24' true);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The following statement contains a magic number: lightDirection[2] = (float)Math.Sin (degreesToRadians (SunAngle));
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The following statement contains a magic number: GL.Translate (0' 0' -1.5f);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The following statement contains a magic number: GL.Rotate (-23.45' 0' 0' 1);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The following statement contains a magic number: GL.Rotate ((animationPhase * 360)' 0' 1' 0);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,render,The following statement contains a magic number: GL.Rotate (-90' 1' 0' 0);
Magic Number,GLFullScreen,Scene,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Scene.cs,degreesToRadians,The following statement contains a magic number: return degrees * Math.PI / 180.0;
Magic Number,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,GetImagaDataFromPath,The following statement contains a magic number: data = new byte[TEXTURE_WIDTH * TEXTURE_HEIGHT * 4];
Magic Number,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,GetImagaDataFromPath,The following statement contains a magic number: context = new CGBitmapContext (data' width' height' 8' 4 * width' image.ColorSpace' ai);
Magic Number,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,GetImagaDataFromPath,The following statement contains a magic number: context = new CGBitmapContext (data' width' height' 8' 4 * width' image.ColorSpace' ai);
Magic Number,GLFullScreen,Texture,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Texture.cs,LoadTexture,The following statement contains a magic number: GL.BufferData (BufferTarget.PixelUnpackBuffer' new IntPtr (TEXTURE_WIDTH * TEXTURE_HEIGHT * 4 * sizeof(byte))' data' BufferUsageHint.StaticDraw);
Magic Number,GLFullScreen,Geometry,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Geometry.cs,Perspective,The following statement contains a magic number: const double DEG2RAD = Math.PI / 180;
Magic Number,GLFullScreen,Geometry,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Geometry.cs,Perspective,The following statement contains a magic number: double tangent = Math.Tan (fovY/2 * DEG2RAD);
Magic Number,GLFullScreen,Sphere,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Shapes\Sphere.cs,Sphere,The following statement contains a magic number: slices < 2 || stacks < 1 || radius < 0.0
Magic Number,GLFullScreen,Sphere,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Shapes\Sphere.cs,Sphere,The following statement contains a magic number: Vertices = new Vertex[(slices * stacks) * 3];
Magic Number,GLFullScreen,Sphere,D:\research\architectureSmells\repos\xamarin_mac-samples\GLFullScreen\GLFullScreen\Shapes\Sphere.cs,InitSphere,The following statement contains a magic number: angle = 2 * Math.PI * i / slices;
