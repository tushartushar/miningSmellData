Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,AnimatingViews,AppDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AppDelegate.cs,,The length of the parameter animatingViewsWindowController is 30.
Magic Number,AnimatingViews,AnimatingViewsWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AnimatingViewsWindowController.cs,layout,The following statement contains a magic number: switch (LayoutStyle){  			case Layout.ColumnLayout:  				curPoint = new CGPoint(simpleView.Bounds.Size.Width / 2.0f' 0.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X - BOX_WIDTH /2.0f' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.Y += frame.Size.Height + SEPARATION;  				}  				break;    			case Layout.RowLayout:  				curPoint = new CGPoint(0.0f ' simpleView.Bounds.Size.Height / 2.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y - BOX_HEIGHT /2.0f' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  				}  				break;    			case Layout.GridLayout:  				curPoint = new CGPoint(0.0f' 0.0f);  				int viewsPerSide = (int)Math.Ceiling( Math.Sqrt(subviews.Count()) );   				  				int idx = 0;  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  					  					if (++idx % viewsPerSide == 0) {  						curPoint.X = 0;  						curPoint.Y += BOX_HEIGHT + SEPARATION;  					}  				}  				break;  				  			}
Magic Number,AnimatingViews,AnimatingViewsWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AnimatingViewsWindowController.cs,layout,The following statement contains a magic number: switch (LayoutStyle){  			case Layout.ColumnLayout:  				curPoint = new CGPoint(simpleView.Bounds.Size.Width / 2.0f' 0.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X - BOX_WIDTH /2.0f' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.Y += frame.Size.Height + SEPARATION;  				}  				break;    			case Layout.RowLayout:  				curPoint = new CGPoint(0.0f ' simpleView.Bounds.Size.Height / 2.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y - BOX_HEIGHT /2.0f' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  				}  				break;    			case Layout.GridLayout:  				curPoint = new CGPoint(0.0f' 0.0f);  				int viewsPerSide = (int)Math.Ceiling( Math.Sqrt(subviews.Count()) );   				  				int idx = 0;  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  					  					if (++idx % viewsPerSide == 0) {  						curPoint.X = 0;  						curPoint.Y += BOX_HEIGHT + SEPARATION;  					}  				}  				break;  				  			}
Magic Number,AnimatingViews,AnimatingViewsWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AnimatingViewsWindowController.cs,layout,The following statement contains a magic number: switch (LayoutStyle){  			case Layout.ColumnLayout:  				curPoint = new CGPoint(simpleView.Bounds.Size.Width / 2.0f' 0.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X - BOX_WIDTH /2.0f' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.Y += frame.Size.Height + SEPARATION;  				}  				break;    			case Layout.RowLayout:  				curPoint = new CGPoint(0.0f ' simpleView.Bounds.Size.Height / 2.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y - BOX_HEIGHT /2.0f' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  				}  				break;    			case Layout.GridLayout:  				curPoint = new CGPoint(0.0f' 0.0f);  				int viewsPerSide = (int)Math.Ceiling( Math.Sqrt(subviews.Count()) );   				  				int idx = 0;  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  					  					if (++idx % viewsPerSide == 0) {  						curPoint.X = 0;  						curPoint.Y += BOX_HEIGHT + SEPARATION;  					}  				}  				break;  				  			}
Magic Number,AnimatingViews,AnimatingViewsWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AnimatingViewsWindowController.cs,layout,The following statement contains a magic number: switch (LayoutStyle){  			case Layout.ColumnLayout:  				curPoint = new CGPoint(simpleView.Bounds.Size.Width / 2.0f' 0.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X - BOX_WIDTH /2.0f' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.Y += frame.Size.Height + SEPARATION;  				}  				break;    			case Layout.RowLayout:  				curPoint = new CGPoint(0.0f ' simpleView.Bounds.Size.Height / 2.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y - BOX_HEIGHT /2.0f' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  				}  				break;    			case Layout.GridLayout:  				curPoint = new CGPoint(0.0f' 0.0f);  				int viewsPerSide = (int)Math.Ceiling( Math.Sqrt(subviews.Count()) );   				  				int idx = 0;  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  					  					if (++idx % viewsPerSide == 0) {  						curPoint.X = 0;  						curPoint.Y += BOX_HEIGHT + SEPARATION;  					}  				}  				break;  				  			}
Missing Default,AnimatingViews,AnimatingViewsWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\AnimatingViews\AnimatingViewsWindowController.cs,layout,The following switch statement is missing a default case: switch (LayoutStyle){  			case Layout.ColumnLayout:  				curPoint = new CGPoint(simpleView.Bounds.Size.Width / 2.0f' 0.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X - BOX_WIDTH /2.0f' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.Y += frame.Size.Height + SEPARATION;  				}  				break;    			case Layout.RowLayout:  				curPoint = new CGPoint(0.0f ' simpleView.Bounds.Size.Height / 2.0f);  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y - BOX_HEIGHT /2.0f' BOX_WIDTH' BOX_HEIGHT);  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  				}  				break;    			case Layout.GridLayout:  				curPoint = new CGPoint(0.0f' 0.0f);  				int viewsPerSide = (int)Math.Ceiling( Math.Sqrt(subviews.Count()) );   				  				int idx = 0;  				foreach (NSView subview in subviews) {  					CGRect frame = new CGRect(curPoint.X' curPoint.Y' BOX_WIDTH' BOX_HEIGHT);  					  					animateView(subview' frame);  					curPoint.X += frame.Size.Width + SEPARATION;  					  					if (++idx % viewsPerSide == 0) {  						curPoint.X = 0;  						curPoint.Y += BOX_HEIGHT + SEPARATION;  					}  				}  				break;  				  			}
