Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,MouseDown,The method has 101 lines of code.
Long Method,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,The method has 111 lines of code.
Complex Method,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,MouseDown,Cyclomatic complexity of the method is 19
Complex Method,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,Cyclomatic complexity of the method is 20
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: SetBoundsOrigin (new CGPoint (-108.0f'-108.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: SetBoundsOrigin (new CGPoint (-108.0f'-108.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: aRect = new CGRect (30.0f' 45.0f' 57.0f' 118.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: aRect = new CGRect (30.0f' 45.0f' 57.0f' 118.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: aRect = new CGRect (30.0f' 45.0f' 57.0f' 118.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: aRect = new CGRect (30.0f' 45.0f' 57.0f' 118.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: upArray = new NSNumber[] { NSNumber.FromDouble (2.0) };
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: downArray = new NSNumber[] { NSNumber.FromDouble (0.5)'  										NSNumber.FromDouble (0.2)};
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: downArray = new NSNumber[] { NSNumber.FromDouble (0.5)'  										NSNumber.FromDouble (0.2)};
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,Initialize,The following statement contains a magic number: NSRulerView.RegisterUnit ("MyCustomRulerUnits"' "mcru"' 100.0f' upArray' downArray);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,DrawRect,The following statement contains a magic number: NSBezierPath.StrokeLine (new CGPoint (-10.0f'0.0f)' new CGPoint (10.0f'0.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,DrawRect,The following statement contains a magic number: NSBezierPath.StrokeLine (new CGPoint (-10.0f'0.0f)' new CGPoint (10.0f'0.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,DrawRect,The following statement contains a magic number: NSBezierPath.StrokeLine (new CGPoint (0.0f'-10.0f)' new CGPoint (0.0f'10.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,DrawRect,The following statement contains a magic number: NSBezierPath.StrokeLine (new CGPoint (0.0f'-10.0f)' new CGPoint (0.0f'10.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,MouseDown,The following statement contains a magic number: switch (theEvent.Type){					  				case NSEventType.Periodic:  					if (autoScrollEvent != null)  						Autoscroll(autoScrollEvent);  					moveSelectedItemWithEvent (autoScrollEvent' mouseOffset);  					break;  					  				case NSEventType.LeftMouseDragged:  					if (!dragged)  						drawRulerLinesWithRect (selectedItem.Frame);  					  					dragged = true;  					mouseLoc = ConvertPointFromView (theEvent.LocationInWindow' null);  					  					moveSelectedItemWithEvent (theEvent' mouseOffset);  					  					if (!IsMouseInRect (mouseLoc' visibleRect)){  						if (!timerOn){  							NSEvent.StartPeriodicEventsAfterDelay (0.1'0.1);  							timerOn = true;  						}  						  						autoScrollEvent = theEvent;  						break;						  					} else {  						if (timerOn){   							NSEvent.StopPeriodicEvents ();  							timerOn = false;  							autoScrollEvent = null;  						}  						  					}  					DisplayIfNeeded ();  					break;  					  				case NSEventType.LeftMouseUp:  					if (timerOn){  						NSEvent.StopPeriodicEvents ();  						timerOn = false;  						autoScrollEvent = null;  					}  					if (dragged)  						eraseRulerLinesWithRect (selectedItem.Frame);  					updateRulers ();  					return;    				default:  					break;  				}
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,MouseDown,The following statement contains a magic number: switch (theEvent.Type){					  				case NSEventType.Periodic:  					if (autoScrollEvent != null)  						Autoscroll(autoScrollEvent);  					moveSelectedItemWithEvent (autoScrollEvent' mouseOffset);  					break;  					  				case NSEventType.LeftMouseDragged:  					if (!dragged)  						drawRulerLinesWithRect (selectedItem.Frame);  					  					dragged = true;  					mouseLoc = ConvertPointFromView (theEvent.LocationInWindow' null);  					  					moveSelectedItemWithEvent (theEvent' mouseOffset);  					  					if (!IsMouseInRect (mouseLoc' visibleRect)){  						if (!timerOn){  							NSEvent.StartPeriodicEventsAfterDelay (0.1'0.1);  							timerOn = true;  						}  						  						autoScrollEvent = theEvent;  						break;						  					} else {  						if (timerOn){   							NSEvent.StopPeriodicEvents ();  							timerOn = false;  							autoScrollEvent = null;  						}  						  					}  					DisplayIfNeeded ();  					break;  					  				case NSEventType.LeftMouseUp:  					if (timerOn){  						NSEvent.StopPeriodicEvents ();  						timerOn = false;  						autoScrollEvent = null;  					}  					if (dragged)  						eraseRulerLinesWithRect (selectedItem.Frame);  					updateRulers ();  					return;    				default:  					break;  				}
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateHorizontalRuler,The following statement contains a magic number: rightMarker = new NSRulerMarker (horizRuler' MaxX(selectedItem.Frame)'  			                                 rightImage' new CGPoint(7.0f'0.0f));
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateVerticalRuler,The following statement contains a magic number: thePoint = new CGPoint (8.0f' 1.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateVerticalRuler,The following statement contains a magic number: thePoint = new CGPoint (8.0f' 8.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateVerticalRuler,The following statement contains a magic number: thePoint = new CGPoint (8.0f' 8.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateSelectedRectFromRulers,The following statement contains a magic number: markers.Count() != 2
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,updateSelectedRectFromRulers,The following statement contains a magic number: markers.Length != 2
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,The following statement contains a magic number: dirtyRect.Size = setRectWidth (dirtyRect'(float)rect.Width + 2.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,The following statement contains a magic number: dirtyRect.Size = setRectHeight (dirtyRect' (float)rect.Height + 2.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewDidAddMarker,The following statement contains a magic number: theOtherCoord = MaxY (visibleRect) - 165.0f;
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewDidAddMarker,The following statement contains a magic number: newRect = new CGRect (aMarker.MarkerLocation' theOtherCoord' 115.0f' 115.0f);
Magic Number,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewDidAddMarker,The following statement contains a magic number: newRect = new CGRect (aMarker.MarkerLocation' theOtherCoord' 115.0f' 115.0f);
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,DrawRect,The following statement contains a magic number: NSGraphics.FrameRectWithWidth (Frame' 4.0f);
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,DrawRect,The following statement contains a magic number: float xSize = (Frame.Width > 10.0f) ? 5.0f : 3.0f;
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,DrawRect,The following statement contains a magic number: float xSize = (Frame.Width > 10.0f) ? 5.0f : 3.0f;
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,DrawRect,The following statement contains a magic number: float xSize = (Frame.Width > 10.0f) ? 5.0f : 3.0f;
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,DrawRect,The following statement contains a magic number: path.LineWidth = 3.0f;
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,MidX,The following statement contains a magic number: return (float)rect.X + ((float)rect.Width / 2);
Magic Number,Rulers,ColorRect,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\ColorRect.cs,MidY,The following statement contains a magic number: return (float)rect.Y + ((float)rect.Height / 2);
Missing Default,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,The following switch statement is missing a default case: switch (theEdge.ToString()){  				case STR_LEFT:  					if (location > MaxX(rect) - MIN_SIZE)  						location = MaxX(rect) - MIN_SIZE;  					  					rect.Size = setRectWidth(rect' MaxX(rect) - location);  					rect.Location = setOriginX(rect'location);  					break;    				case STR_RIGHT:  					if (location < MinX(rect) + MIN_SIZE)  						location = MinX(rect) + MIN_SIZE;  					  					rect.Size = setRectWidth(rect' location - MinX(rect));  					break;	    				case STR_TOP:  					if (this.IsFlipped) {  						if (location > MaxY(rect) - MIN_SIZE)  							location = MaxY(rect) - MIN_SIZE;  					  						rect.Size = setRectHeight(rect' MaxY(rect) - location);  						rect.Location = setOriginY(rect'location);  					} else {  						if (location < MinY(rect) + MIN_SIZE)  							location = MinY(rect) + MIN_SIZE;  					  						rect.Size = setRectHeight(rect' location - MinY(rect));  					}  					break;						    				case STR_BOTTOM:  					if (this.IsFlipped) {  						if (location < MinY(rect) + MIN_SIZE)  							location = MinY(rect) + MIN_SIZE;  					  						rect.Size = setRectHeight(rect' location - MinY(rect));  					} else {  						if (location > MaxY(rect) - MIN_SIZE)  							location = MaxY(rect) - MIN_SIZE;  					  						rect.Size = setRectHeight(rect' MaxY(rect) - location);  						rect.Location = setOriginY(rect'location);  					}  					break;						  				}
Missing Default,Rulers,RectsView,D:\research\architectureSmells\repos\xamarin_mac-samples\Rulers\RectsView.cs,rulerViewWillMoveMarker,The following switch statement is missing a default case: switch (theEdge.ToString ())  				{  				case STR_LEFT:  					rect.Location = setOriginX (rect' location);  					otherMarker.MarkerLocation = MaxX (rect);  					break;  				case STR_RIGHT:  					rect.Location = setOriginX (rect' location - (float)rect.Width);  					otherMarker.MarkerLocation = MinX (rect);  					break;  				case STR_TOP:  					if (this.IsFlipped)   					{  						rect.Location = setOriginY (rect'location);  						otherMarker.MarkerLocation = MaxY (rect);  					} else {  						rect.Location = setOriginY (rect' location - (float)rect.Height);  						otherMarker.MarkerLocation = MinY (rect);  					}  					break;						  				case STR_BOTTOM:  					if (this.IsFlipped)  {  						rect.Location = setOriginY (rect' location - (float)rect.Height);  						otherMarker.MarkerLocation = MinY (rect);  					} else {  						rect.Location = setOriginY (rect'location);  						otherMarker.MarkerLocation = MaxY (rect);  					}  					break;								  				}
