Implementation smell,Namespace,Class,File,Method,Description
Long Method,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The method has 177 lines of code.
Long Method,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntaxRegion,The method has 116 lines of code.
Long Method,AppKit.TextKit.Formatter,SourceTextView,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\SourceTextView.cs,KeyDown,The method has 105 lines of code.
Long Method,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,GetBlockPattern,The method has 127 lines of code.
Complex Method,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntaxRegion,Cyclomatic complexity of the method is 21
Complex Method,AppKit.TextKit.Formatter,SourceTextView,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\SourceTextView.cs,KeyDown,Cyclomatic complexity of the method is 17
Complex Method,AppKit.TextKit.Formatter,SourceTextViewDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\SourceTextViewDelegate.cs,GetCompletions,Cyclomatic complexity of the method is 8
Complex Method,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,handleTrailingParens,Cyclomatic complexity of the method is 9
Complex Method,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,Normalize,Cyclomatic complexity of the method is 12
Long Identifier,AppKit.TextKit.Formatter,SourceTextView,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\SourceTextView.cs,,The length of the parameter _defaultWordsOnlyIfKeywordsEmpty is 32.
Long Statement,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,PreviewContents,The length of the statement  "			App.PreviewWindow.DisplayPreview (View.Window.Title' Formatter.Language.FormatForPreview (TextEditor.TextStorage.Value)' this' FilePath); " is 137.
Long Statement,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The length of the statement  "				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue)); " is 157.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("bool"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "It is used to declare variables to store the Boolean values' true and false.")); " is 163.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("byte"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The byte keyword denotes an integral type that stores values between 0 to 255.")); " is 165.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("char"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The char keyword is used to declare an instance of the System.Char structure that the .NET Framework uses to represent a Unicode character.")); " is 226.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("decimal"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The decimal keyword denotes an integral type that stores values between (-7.9 x 10^28 to 7.9 x 10^28) / (10^(0 to 28)).")); " is 209.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("double"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The double keyword signifies a simple type that stores 64-bit floating-point values.")); " is 173.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("enum"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The enum keyword is used to declare an enumeration' a distinct type that consists of a set of named constants called the enumerator list.")); " is 224.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("float"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The float keyword signifies a simple type that stores 32-bit floating-point values. ")); " is 172.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("int"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The int keyword denotes an integral type that stores values between -2'147'483'648 to 2'147'483'647.")); " is 186.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("long"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The long keyword denotes an integral type that stores values between â€“9'223'372'036'854'775'808 to 9'223'372'036'854'775'807.")); " is 212.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("sbyte"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The sbyte keyword indicates an integral type that stores values between -128 to 127.")); " is 172.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("short"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The short keyword denotes an integral data type that stores values between -32'768 to 32'767.")); " is 181.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("struct"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "A struct type is a value type that is typically used to encapsulate small groups of related variables' such as the coordinates of a rectangle or the characteristics of an item in an inventory.")); " is 281.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("uint"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The uint keyword signifies an integral type that stores values between 0 to 4'294'967'295.")); " is 177.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("ulong"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The ulong keyword denotes an integral type that stores values between 0 to 18'446'744'073'709'551'615.")); " is 190.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("ushort"' new KeywordDescriptor(KeywordType.ValueType' ValueTypeColor' "The ushort keyword indicates an integral data type that stores values between 0 to 65'535.")); " is 179.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("class"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "Classes are declared using the keyword class.")); " is 141.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("delegate"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "The declaration of a delegate type is similar to a method signature. It has a return value and any number of parameters of any type.")); " is 231.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("dynamic"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "The dynamic type enables the operations in which it occurs to bypass compile-time type checking. Instead' these operations are resolved at run time.")); " is 246.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("interface"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "An interface contains only the signatures of methods' properties' events or indexers. ")); " is 186.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("object"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "In the unified type system of C#' all types' predefined and user-defined' reference types and value types' inherit directly or indirectly from Object. You can assign values of any type to variables of type object. ")); " is 311.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("string"' new KeywordDescriptor(KeywordType.ReferenceType' ReferenceTypeColor' "The string type represents a sequence of zero or more Unicode characters. string is an alias for String in the .NET Framework.")); " is 223.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("void"' new KeywordDescriptor(KeywordType.Type' TypeColor' "When used as the return type for a method' void specifies that the method doesn't return a value.")); " is 174.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("var"' new KeywordDescriptor(KeywordType.Type' TypeColor' "An implicitly typed local variable is strongly typed just as if you had declared the type yourself' but the compiler determines the type.")); " is 213.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("public"' new KeywordDescriptor(KeywordType.AccessModifier' AccessModifierColor' "The public keyword is an access modifier for types and type members. There are no restrictions on accessing public members.")); " is 222.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("private"' new KeywordDescriptor(KeywordType.AccessModifier' AccessModifierColor' "Private members are accessible only within the body of the class or the struct in which they are declared.")); " is 206.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("internal"' new KeywordDescriptor(KeywordType.AccessModifier' AccessModifierColor' "Internal types or members are accessible only within files in the same assembly.")); " is 181.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("protected"' new KeywordDescriptor(KeywordType.AccessModifier' AccessModifierColor' "A protected member is accessible within its class and by derived class instances.")); " is 183.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("abstract"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The abstract modifier indicates that the thing being modified has a missing or incomplete implementation.")); " is 194.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("async"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "Use the async modifier to specify that a method' lambda expression' or anonymous method is asynchronous. ")); " is 191.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("const"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "You use the const keyword to declare a constant field or a constant local. Constant fields and locals aren't variables and may not be modified. ")); " is 230.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("event"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The event keyword is used to declare an event in a publisher class.")); " is 153.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("extern"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The extern modifier is used to declare a method that is implemented externally. ")); " is 167.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("in"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "For generic type parameters' the in keyword specifies that the type parameter is contravariant. You can use the in keyword in generic interfaces and delegates.")); " is 242.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("override"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The override modifier is required to extend or modify the abstract or virtual implementation of an inherited method' property' indexer' or event.")); " is 234.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("readonly"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "When a field declaration includes a readonly modifier' assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class.")); " is 280.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("sealed"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "When applied to a class' the sealed modifier prevents other classes from inheriting from it.")); " is 179.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("static"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "Use the static modifier to declare a static member' which belongs to the type itself rather than to a specific object. ")); " is 206.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("unsafe"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The unsafe keyword denotes an unsafe context' which is required for any operation involving pointers.")); " is 188.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("virtual"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The virtual keyword is used to modify a method' property' indexer' or event declaration and allow for it to be overridden in a derived class. ")); " is 230.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("volatile"' new KeywordDescriptor(KeywordType.Modifier' ModifierColor' "The volatile keyword indicates that a field might be modified by multiple threads that are executing at the same time. ")); " is 208.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("if"' new KeywordDescriptor(KeywordType.SelectionStatement' SelectionStatementColor' "An if statement identifies which statement to run based on the value of a Boolean expression.")); " is 196.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("else"' new KeywordDescriptor(KeywordType.SelectionStatement' SelectionStatementColor' "In an if-else statement' if condition evaluates to true' the then-statement runs. If condition is false' the else-statement runs. ")); " is 235.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("switch"' new KeywordDescriptor(KeywordType.SelectionStatement' SelectionStatementColor' "The switch statement is a control statement that selects a switch section to execute from a list of candidates.")); " is 218.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("case"' new KeywordDescriptor(KeywordType.SelectionStatement' SelectionStatementColor' "Each case label specifies a constant value.")); " is 148.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("default"' new KeywordDescriptor(KeywordType.SelectionStatement' SelectionStatementColor' "f no case label contains a matching value' control is transferred to the default section' if there is one.")); " is 214.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("do"' new KeywordDescriptor(KeywordType.IterationStatement' IterationStatementColor' "The do statement executes a statement or a block of statements repeatedly until a specified expression evaluates to false. ")); " is 226.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("for"' new KeywordDescriptor(KeywordType.IterationStatement' IterationStatementColor' "By using a for loop' you can run a statement or a block of statements repeatedly until a specified expression evaluates to false.")); " is 233.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("foreach"' new KeywordDescriptor(KeywordType.IterationStatement' IterationStatementColor' "The foreach statement repeats a group of embedded statements for each element in an array or an object collection that implements the System.Collections.IEnumerable or System.Collections.Generic.IEnumerable<T> interface. ")); " is 329.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("while"' new KeywordDescriptor(KeywordType.IterationStatement' IterationStatementColor' "The while statement executes a statement or a block of statements until a specified expression evaluates to false.")); " is 220.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("break"' new KeywordDescriptor(KeywordType.JumpStatement' JumpStatementColor' "The break statement terminates the closest enclosing loop or switch statement in which it appears. Control is passed to the statement that follows the terminated statement' if any.")); " is 276.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("continue"' new KeywordDescriptor(KeywordType.JumpStatement' JumpStatementColor' "The continue statement passes control to the next iteration of the enclosing while' do' for' or foreach statement in which it appears.")); " is 233.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("goto"' new KeywordDescriptor(KeywordType.JumpStatement' JumpStatementColor' "The goto statement transfers the program control directly to a labeled statement.")); " is 176.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("return"' new KeywordDescriptor(KeywordType.JumpStatement' JumpStatementColor' "The return statement terminates execution of the method in which it appears and returns control to the calling method. It can also return an optional value.")); " is 253.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("throw"' new KeywordDescriptor(KeywordType.ExceptionHandlingStatement' ExceptionHandlingColor' "The throw statement is used to signal the occurrence of an anomalous situation (exception) during the program execution.")); " is 233.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("try"' new KeywordDescriptor(KeywordType.ExceptionHandlingStatement' ExceptionHandlingColor' "The try-catch statement consists of a try block followed by one or more catch clauses' which specify handlers for different exceptions.")); " is 246.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("catch"' new KeywordDescriptor(KeywordType.ExceptionHandlingStatement' ExceptionHandlingColor' "The try-catch statement consists of a try block followed by one or more catch clauses' which specify handlers for different exceptions.")); " is 248.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("finally"' new KeywordDescriptor(KeywordType.ExceptionHandlingStatement' ExceptionHandlingColor' "A common usage of catch and finally together is to obtain and use resources in a try block' deal with exceptional circumstances in a catch block' and release the resources in the finally block.")); " is 308.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("checked"' new KeywordDescriptor(KeywordType.Statement' StatementColor' "The checked keyword is used to explicitly enable overflow checking for integral-type arithmetic operations and conversions.")); " is 213.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("unchecked"' new KeywordDescriptor(KeywordType.Statement' StatementColor' "The unchecked keyword is used to suppress overflow-checking for integral-type arithmetic operations and conversions.")); " is 208.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("fixed"' new KeywordDescriptor(KeywordType.Statement' StatementColor' "The fixed statement prevents the garbage collector from relocating a movable variable. The fixed statement is only permitted in an unsafe context.")); " is 234.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("lock"' new KeywordDescriptor(KeywordType.Statement' StatementColor' "The lock keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object' executing a statement' and then releasing the lock.")); " is 260.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("params"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "By using the params keyword' you can specify a method parameter that takes a variable number of arguments.")); " is 208.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("ref"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "The ref keyword causes an argument to be passed by reference' not by value.")); " is 174.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("out"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "The out keyword causes arguments to be passed by reference. This is like the ref keyword' except that ref requires that the variable be initialized before it is passed. ")); " is 268.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("namespace"' new KeywordDescriptor(KeywordType.NamespaceKeyword' NamespaceColor' "The namespace keyword is used to declare a scope that contains a set of related objects.")); " is 187.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("using"' new KeywordDescriptor(KeywordType.MethodParameters' NamespaceColor' "Allows the use of types in a namespace so that you do not have to qualify the use of a type in that namespace.")); " is 205.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("as"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "You can use the as operator to perform certain types of conversions between compatible reference types or nullable types.")); " is 218.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("await"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "The await operator is applied to a task in an asynchronous method to suspend the execution of the method until the awaited task completes.")); " is 238.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("is"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Checks if an object is compatible with a given type.")); " is 149.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("new"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Used to create objects and invoke constructors.")); " is 145.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("sizeof"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Used to obtain the size in bytes for an unmanaged type.")); " is 156.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("typeof"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Used to obtain the System.Type object for a type.")); " is 150.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("true"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Represents the boolean value true.")); " is 133.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("false"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Represents the boolean value false.")); " is 135.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("stackalloc"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "The stackalloc keyword is used in an unsafe code context to allocate a block of memory on the stack.")); " is 205.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("nameof"' new KeywordDescriptor(KeywordType.OperatorKeyword' OperatorKeywordColor' "Used to obtain the simple (unqualified) string name of a variable' type' or member. ")); " is 185.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("explicit"' new KeywordDescriptor(KeywordType.ConversionKeyword' ConversionKeywordColor' "The explicit keyword declares a user-defined type conversion operator that must be invoked with a cast. ")); " is 211.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("implicit"' new KeywordDescriptor(KeywordType.ConversionKeyword' ConversionKeywordColor' "The implicit keyword is used to declare an implicit user-defined type conversion operator. ")); " is 198.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("operator"' new KeywordDescriptor(KeywordType.ConversionKeyword' ConversionKeywordColor' "Use the operator keyword to overload a built-in operator or to provide a user-defined conversion in a class or struct declaration.")); " is 237.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("base"' new KeywordDescriptor(KeywordType.AccessKeywords' AccessKeywordColor' "Accesses the members of the base class.")); " is 135.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("this"' new KeywordDescriptor(KeywordType.AccessKeywords' AccessKeywordColor' "Refers to the current instance of the class.")); " is 140.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("null"' new KeywordDescriptor(KeywordType.LiteralKeywords' LiteralKeywordColor' "The null keyword is a literal that represents a null reference' one that does not refer to any object. null is the default value of reference-type variables.")); " is 255.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("add"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The add contextual keyword is used to define a custom event accessor that is invoked when client code subscribes to your event.")); " is 230.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("get"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The get keyword defines an accessor method in a property or indexer that retrieves the value of the property or the indexer element.")); " is 235.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("global"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The global contextual keyword' when it comes before the :: operator' refers to the global namespace' which is the default namespace for any C# program and is otherwise unnamed.")); " is 282.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("partial"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "Partial type definitions allow for the definition of a class' struct' interface or method to be split into multiple files or definitions.")); " is 244.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("remove"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The remove contextual keyword is used to define a custom event accessor that is invoked when client code unsubscribes from your event.")); " is 240.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("set"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The set keyword defines an accessor method in a property or indexer that assigns the value of the property or the indexer element.")); " is 233.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("where"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "In a generic type definition' the where clause is used to specify constraints on the types that can be used as arguments for a type parameter defined in a generic declaration.")); " is 280.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("value"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "The contextual keyword value is used in the set accessor in ordinary property declarations. It is similar to an input parameter on a method. ")); " is 246.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("yield"' new KeywordDescriptor(KeywordType.ContextualKeywords' ContextualKeywordColor' "When you use the yield keyword in a statement' you indicate that the method' operator' or get accessor in which it appears is an iterator. ")); " is 244.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("from"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "A query expression must begin with a from clause. Additionally' a query expression can contain sub-queries' which also begin with a from clause. ")); " is 239.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("select"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "In a query expression' the select clause specifies the type of values that will be produced when the query is executed.")); " is 215.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("group"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The group clause returns a sequence of IGrouping<TKey'TElement> objects that contain zero or more items that match the key value for the group.")); " is 238.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("into"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The into contextual keyword can be used to create a temporary identifier to store the results of a group' join or select clause into a new identifier.")); " is 244.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("orderby"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "In a query expression' the orderby clause causes the returned sequence or subsequence (group) to be sorted in either ascending or descending order.")); " is 244.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("join"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The join clause is useful for associating elements from different source sequences that have no direct relationship in the object model.")); " is 230.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("let"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "In a query expression' it is sometimes useful to store the result of a sub-expression in order to use it in subsequent clauses. You can do this with the let keyword.")); " is 258.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("ascending"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The ascending contextual keyword is used in the orderby clause in query expressions to specify that the sort order is from smallest to largest.")); " is 242.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("descending"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The descending contextual keyword is used in the orderby clause in query expressions to specify that the sort order is from largest to smallest.")); " is 244.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("on"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The on contextual keyword is used in the join clause of a query expression to specify the join condition.")); " is 197.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("equals"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The equals contextual keyword is used in a join clause in a query expression to compare the elements of two sequences.")); " is 214.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("by"' new KeywordDescriptor(KeywordType.QueryKeywords' QueryKeywordColor' "The by contextual keyword is used in the group clause in a query expression to specify how the returned items should be grouped.")); " is 220.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#if"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "When the C# compiler encounters an #if directive' followed eventually by an #endif directive' it will compile the code between the directives only if the specified symbol is defined.")); " is 292.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#else"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#else lets you create a compound conditional directive' so that' if none of the expressions in the preceding #if or (optional) #elif directives to true' the compiler will evaluate all code between #else and the subsequent #endif.")); " is 341.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#elif"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#elif lets you create a compound conditional directive. The #elif expression will be evaluated if neither the preceding #if (C# Reference) nor any preceding' optional' #elif directive expressions evaluate to true.")); " is 325.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#endif"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#endif specifies the end of a conditional directive' which began with the #if directive.")); " is 201.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#define"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "You use #define to define a symbol.")); " is 149.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#undef"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#undef lets you undefine a symbol' such that' by using the symbol as the expression in a #if directive' the expression will evaluate to false.")); " is 255.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#warning"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#warning lets you generate a level one warning from a specific location in your code.")); " is 200.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#error"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#error lets you generate an error from a specific location in your code.")); " is 185.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#line"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#line lets you modify the compiler's line number and (optionally) the file name output for errors and warnings. This example shows how to report two warnings associated with line numbers.")); " is 299.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#region"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#region lets you specify a block of code that you can expand or collapse when using the outlining feature.")); " is 220.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#endregion"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#endregion marks the end of a #region block.")); " is 161.
Long Statement,AppKit.TextKit.Formatter,CSharpDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\CSharpDescriptor.cs,Define,The length of the statement  "			Keywords.Add("#pragma"' new KeywordDescriptor(KeywordType.PreprocessorDirective' PreprocessorDirectiveColor' "#pragma gives the compiler special instructions for the compilation of the file in which it appears.")); " is 214.
Long Statement,AppKit.TextKit.Formatter,XMLDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\XMLDescriptor.cs,Define,The length of the statement  "			Keywords.Add("xml"' new KeywordDescriptor(KeywordType.Keyword' KeywordColor' "The XML prolog is optional. If it exists' it must come first in the document.")); " is 159.
Long Statement,AppKit.TextKit.Formatter,XMLDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\XMLDescriptor.cs,Define,The length of the statement  "			Keywords.Add("xsl"' new KeywordDescriptor(KeywordType.Keyword' KeywordColor' "XSL stands for EXtensible Stylesheet Language' and is a style sheet language for XML documents.")); " is 177.
Long Statement,AppKit.TextKit.Formatter,XMLDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\XMLDescriptor.cs,Define,The length of the statement  "			Keywords.Add("version"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "Specifies the XML version.")); " is 129.
Long Statement,AppKit.TextKit.Formatter,XMLDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\XMLDescriptor.cs,Define,The length of the statement  "			Keywords.Add("encoding"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "Specifies the files encoding type.")); " is 138.
Long Statement,AppKit.TextKit.Formatter,XMLDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormats\XMLDescriptor.cs,Define,The length of the statement  "			Keywords.Add("xmlns"' new KeywordDescriptor(KeywordType.MethodParameters' MethodParameterColor' "The namespace can be defined by an xmlns attribute in the start tag of an element.")); " is 183.
Long Statement,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The length of the statement  "				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue)); " is 157.
Long Statement,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntax,The length of the statement  "					TextEditor.LayoutManager.SetTemporaryAttributes(new NSDictionary(NSStringAttributeKey.ForegroundColor' info.Color)'range); " is 122.
Long Statement,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntaxRegion,The length of the statement  "								TextEditor.LayoutManager.SetTemporaryAttributes(new NSDictionary(NSStringAttributeKey.ForegroundColor'inFormat.Color)'segment); " is 127.
Long Statement,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntaxRegion,The length of the statement  "									TextEditor.LayoutManager.SetTemporaryAttributes(new NSDictionary(NSStringAttributeKey.ForegroundColor'inFormat.Color)'segment); " is 127.
Long Statement,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntaxRegion,The length of the statement  "					TextEditor.LayoutManager.SetTemporaryAttributes(new NSDictionary(NSStringAttributeKey.ForegroundColor'inFormat.Color)'segment); " is 127.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorRefShortcutEvaluator,The length of the statement  "            string linkID = Regex.Replace(linkText.ToLowerInvariant()' @"[ ]*\n[ ]*"' " ");  // lower case and remove newlines / extra spaces " is 129.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ProcessListItems,The length of the statement  "                    if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones " is 133.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,BlockQuoteEvaluator,The length of the statement  "            bq = Regex.Replace(bq' @"(\s*<pre>.+?</pre>)"' new MatchEvaluator(BlockQuoteEvaluator2)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline); " is 153.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,handleTrailingParens,The length of the statement  "            // We're not using a *real* lookbehind' because of links with in links' like <a href="http://web.archive.org/web/20121130000728/http://www.google.com/"> " is 152.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,DoAutoLinks,The length of the statement  "                text = Regex.Replace(text' pattern' new MatchEvaluator(EmailEvaluator)' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 136.
Long Statement,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,EscapeSpecialCharsWithinTagAttributes,The length of the statement  "                    if (_autoHyperlink && value.StartsWith("<!")) // escape slashes in comments to prevent autolinking there -- http://meta.stackoverflow.com/questions/95987/html-comment-containing-url-breaks-if-followed-by-another-html-comment " is 224.
Empty Catch Block,AppKit.TextKit.Formatter,LanguageFormatter,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageFormatter.cs,HighlightSyntax,The method has an empty catch block.
Magic Number,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,ViewWillAppear,The following statement contains a magic number: switch(DefaultLanguage) {  			case 0:  				Formatter = new LanguageFormatter (TextEditor' new CSharpDescriptor ());  				StatusLanguage.StringValue = "C# Code";  				break;  			case 1:  				Formatter = new LanguageFormatter (TextEditor' new HTMLDescriptor ());  				StatusLanguage.StringValue = "HTML";  				break;  			case 2:  				Formatter = new LanguageFormatter (TextEditor' new MarkDownDescriptor ());  				StatusLanguage.StringValue = "MarkDown";  				break;  			case 3:  				Formatter = new LanguageFormatter (TextEditor' new XMLDescriptor ());  				StatusLanguage.StringValue = "XML";  				break;  			}
Magic Number,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,ViewWillAppear,The following statement contains a magic number: switch(DefaultLanguage) {  			case 0:  				Formatter = new LanguageFormatter (TextEditor' new CSharpDescriptor ());  				StatusLanguage.StringValue = "C# Code";  				break;  			case 1:  				Formatter = new LanguageFormatter (TextEditor' new HTMLDescriptor ());  				StatusLanguage.StringValue = "HTML";  				break;  			case 2:  				Formatter = new LanguageFormatter (TextEditor' new MarkDownDescriptor ());  				StatusLanguage.StringValue = "MarkDown";  				break;  			case 3:  				Formatter = new LanguageFormatter (TextEditor' new XMLDescriptor ());  				StatusLanguage.StringValue = "XML";  				break;  			}
Magic Number,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,UnpopulateFormattingMenu,The following statement contains a magic number: n > 4
Magic Number,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,ConfigureEditor,The following statement contains a magic number: switch (App.Preferences.SearchType) {  			case 0:  				// None  				TextEditor.UsesFindBar = false;  				TextEditor.UsesFindPanel = false;  				break;  			case 1:  				// Uses bar  				TextEditor.UsesFindBar = true;  				break;  			case 2:  				// Uses panel  				TextEditor.UsesFindPanel = true;  				break;  			}
Magic Number,SourceWriter,EditorWidowDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\EditorWidowDelegate.cs,WindowShouldClose,The following statement contains a magic number: switch (result) {  				case 1000:  					// Grab controller  					var viewController = Window.ContentViewController as ViewController;    					// Already saved?  					if (Window.RepresentedUrl != null) {  						var path = Window.RepresentedUrl.Path;    						// Save changes to file  						File.WriteAllText (path' viewController.Text);  						return true;  					} else {  						var dlg = new NSSavePanel ();  						dlg.Title = "Save Document";  						dlg.BeginSheet (Window' (rslt) => {  							// File selected?  							if (rslt == 1) {  								var path = dlg.Url.Path;  								File.WriteAllText (path' viewController.Text);  								Window.DocumentEdited = false;  								viewController.View.Window.SetTitleWithRepresentedFilename (Path.GetFileName(path));  								viewController.View.Window.RepresentedUrl = dlg.Url;  								Window.Close();  							}  						});  						return true;  					}  				case 1001:  					// Lose Changes  					return true;  				case 1002:  					// Cancel  					return false;  				}
Magic Number,SourceWriter,EditorWidowDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\EditorWidowDelegate.cs,WindowShouldClose,The following statement contains a magic number: switch (result) {  				case 1000:  					// Grab controller  					var viewController = Window.ContentViewController as ViewController;    					// Already saved?  					if (Window.RepresentedUrl != null) {  						var path = Window.RepresentedUrl.Path;    						// Save changes to file  						File.WriteAllText (path' viewController.Text);  						return true;  					} else {  						var dlg = new NSSavePanel ();  						dlg.Title = "Save Document";  						dlg.BeginSheet (Window' (rslt) => {  							// File selected?  							if (rslt == 1) {  								var path = dlg.Url.Path;  								File.WriteAllText (path' viewController.Text);  								Window.DocumentEdited = false;  								viewController.View.Window.SetTitleWithRepresentedFilename (Path.GetFileName(path));  								viewController.View.Window.RepresentedUrl = dlg.Url;  								Window.Close();  							}  						});  						return true;  					}  				case 1001:  					// Lose Changes  					return true;  				case 1002:  					// Cancel  					return false;  				}
Magic Number,SourceWriter,EditorWidowDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\EditorWidowDelegate.cs,WindowShouldClose,The following statement contains a magic number: switch (result) {  				case 1000:  					// Grab controller  					var viewController = Window.ContentViewController as ViewController;    					// Already saved?  					if (Window.RepresentedUrl != null) {  						var path = Window.RepresentedUrl.Path;    						// Save changes to file  						File.WriteAllText (path' viewController.Text);  						return true;  					} else {  						var dlg = new NSSavePanel ();  						dlg.Title = "Save Document";  						dlg.BeginSheet (Window' (rslt) => {  							// File selected?  							if (rslt == 1) {  								var path = dlg.Url.Path;  								File.WriteAllText (path' viewController.Text);  								Window.DocumentEdited = false;  								viewController.View.Window.SetTitleWithRepresentedFilename (Path.GetFileName(path));  								viewController.View.Window.RepresentedUrl = dlg.Url;  								Window.Close();  							}  						});  						return true;  					}  				case 1001:  					// Lose Changes  					return true;  				case 1002:  					// Cancel  					return false;  				}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorToHexString,The following statement contains a magic number: alpha *= 255;
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorToHexString,The following statement contains a magic number: red *= 255;
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorToHexString,The following statement contains a magic number: green *= 255;
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorToHexString,The following statement contains a magic number: blue *= 255;
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,AppPreferences,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\AppPreferences.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,ViewWillAppear,The following statement contains a magic number: switch (DefaultLanguage) {  			case 0:  				CSharpFile.Bordered = true;  				break;  			case 1:  				HTMLFile.Bordered = true;  				break;  			case 2:  				MarkDownFile.Bordered = true;  				break;  			case 3:  				XMLFile.Bordered = true;  				break;  			}
Magic Number,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,ViewWillAppear,The following statement contains a magic number: switch (DefaultLanguage) {  			case 0:  				CSharpFile.Bordered = true;  				break;  			case 1:  				HTMLFile.Bordered = true;  				break;  			case 2:  				MarkDownFile.Bordered = true;  				break;  			case 3:  				XMLFile.Bordered = true;  				break;  			}
Magic Number,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,SelectMarkDown,The following statement contains a magic number: DefaultLanguage = 2;
Magic Number,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,SelectXML,The following statement contains a magic number: DefaultLanguage = 3;
Magic Number,SourceWriter,PreviewVIewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\PreviewVIewController.cs,DisplayZoomLevel,The following statement contains a magic number: var level = Scroll.Magnification * 100.0f;
Magic Number,SourceWriter,PreviewVIewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\PreviewVIewController.cs,ZoomIn,The following statement contains a magic number: Scroll.Magnification += 0.10f;
Magic Number,SourceWriter,PreviewVIewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\PreviewVIewController.cs,ZoomOut,The following statement contains a magic number: Scroll.Magnification -= 0.10f;
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorToHexString,The following statement contains a magic number: alpha *= 255;
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorToHexString,The following statement contains a magic number: red *= 255;
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorToHexString,The following statement contains a magic number: green *= 255;
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorToHexString,The following statement contains a magic number: blue *= 255;
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,AppKit.TextKit.Formatter,LanguageDescriptor,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\LanguageDescriptor.cs,NSColorFromHexString,The following statement contains a magic number: switch (colorString.Length) {  			case 3 : // #RGB  				red = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(0' 1))' 16) / 255f;  				green = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(1' 1))' 16) / 255f;  				blue = Convert.ToInt32(string.Format("{0}{0}"' colorString.Substring(2' 1))' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 6 : // #RRGGBB  				red = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' 1.0f);  			case 8 : // #AARRGGBB  				alpha = Convert.ToInt32(colorString.Substring(0' 2)' 16) / 255f;  				red = Convert.ToInt32(colorString.Substring(2' 2)' 16) / 255f;  				green = Convert.ToInt32(colorString.Substring(4' 2)' 16) / 255f;  				blue = Convert.ToInt32(colorString.Substring(6' 2)' 16) / 255f;  				return NSColor.FromRgba(red' green' blue' alpha);  			default :  				throw new ArgumentOutOfRangeException(string.Format("Invalid color value '{0}'. It should be a hex value of the form #RBG' #RRGGBB or #AARRGGBB"' hexValue));  			}
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,FormParagraphs,The following statement contains a magic number: int sanityCheck = 50;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _urls[linkID] = EncodeAmpsAndAngles(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,LinkEvaluator,The following statement contains a magic number: _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,LinkEvaluator,The following statement contains a magic number: match.Groups[3] != null && match.Groups[3].Length > 0
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,LinkEvaluator,The following statement contains a magic number: match.Groups[3] != null && match.Groups[3].Length > 0
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorRefShortcutEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AnchorInlineEvaluator,The following statement contains a magic number: url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageReferenceEvaluator,The following statement contains a magic number: string altText = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageReferenceEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string alt = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ImageInlineEvaluator,The following statement contains a magic number: url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,AtxHeaderEvaluator,The following statement contains a magic number: string header = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,GetListEvaluator,The following statement contains a magic number: return new MatchEvaluator(match =>                  {                      string list = match.Groups[1].Value;                      string listType = Regex.IsMatch(match.Groups[3].Value' _markerUL) ? "ul" : "ol";                      string result;                        result = ProcessListItems(list' listType == "ul" ? _markerUL : _markerOL' isInsideParagraphlessListItem);                        result = string.Format("<{0}>\n{1}</{0}>\n"' listType' result);                      return result;                  });
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,ProcessListItems,The following statement contains a magic number: MatchEvaluator ListItemEvaluator = (Match match) =>              {                  string item = match.Groups[3].Value;                    bool endsWithDoubleNewline = item.EndsWith("\n\n");                  bool containsDoubleNewline = endsWithDoubleNewline || item.Contains("\n\n");                    if (containsDoubleNewline || lastItemHadADoubleNewline)                      // we could correct any bad indentation here..                      item = RunBlockGamut(Outdent(item) + "\n"' unhash: false);                  else                  {                      // recursion for sub-lists                      item = DoLists(Outdent(item)' isInsideParagraphlessListItem: true);                      item = item.TrimEnd('\n');                      if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones                          item = RunSpanGamut(item);                  }                  lastItemHadADoubleNewline = endsWithDoubleNewline;                  return string.Format("<li>{0}</li>\n"' item);              };
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,CodeSpanEvaluator,The following statement contains a magic number: string span = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,handleTrailingParens,The following statement contains a magic number: var protocol = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,handleTrailingParens,The following statement contains a magic number: var link = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: var sb = new StringBuilder(addr.Length * 5);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: r = rand.Next(1' 100);
Magic Number,MarkdownSharp,Markdown,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\Markdown.cs,EncodeEmailAddress,The following statement contains a magic number: (r > 90 || c == ':') && c != '@'
Missing Default,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,ViewWillAppear,The following switch statement is missing a default case: switch(DefaultLanguage) {  			case 0:  				Formatter = new LanguageFormatter (TextEditor' new CSharpDescriptor ());  				StatusLanguage.StringValue = "C# Code";  				break;  			case 1:  				Formatter = new LanguageFormatter (TextEditor' new HTMLDescriptor ());  				StatusLanguage.StringValue = "HTML";  				break;  			case 2:  				Formatter = new LanguageFormatter (TextEditor' new MarkDownDescriptor ());  				StatusLanguage.StringValue = "MarkDown";  				break;  			case 3:  				Formatter = new LanguageFormatter (TextEditor' new XMLDescriptor ());  				StatusLanguage.StringValue = "XML";  				break;  			}
Missing Default,SourceWriter,ViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\ViewController.cs,ConfigureEditor,The following switch statement is missing a default case: switch (App.Preferences.SearchType) {  			case 0:  				// None  				TextEditor.UsesFindBar = false;  				TextEditor.UsesFindPanel = false;  				break;  			case 1:  				// Uses bar  				TextEditor.UsesFindBar = true;  				break;  			case 2:  				// Uses panel  				TextEditor.UsesFindPanel = true;  				break;  			}
Missing Default,SourceWriter,EditorWindowController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\EditorWindowController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segue.Identifier) {  			case "DefinitionSegue":  				var dialog = segue.DestinationController as DefinitionViewController;  				dialog.Keyword = ContentController.Keyword;  				dialog.KeywordInfo = ContentController.KeywordInfo;  				dialog.Presentor = ContentController;  				break;  			}
Missing Default,SourceWriter,EditorWidowDelegate,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\Classes\EditorWidowDelegate.cs,WindowShouldClose,The following switch statement is missing a default case: switch (result) {  				case 1000:  					// Grab controller  					var viewController = Window.ContentViewController as ViewController;    					// Already saved?  					if (Window.RepresentedUrl != null) {  						var path = Window.RepresentedUrl.Path;    						// Save changes to file  						File.WriteAllText (path' viewController.Text);  						return true;  					} else {  						var dlg = new NSSavePanel ();  						dlg.Title = "Save Document";  						dlg.BeginSheet (Window' (rslt) => {  							// File selected?  							if (rslt == 1) {  								var path = dlg.Url.Path;  								File.WriteAllText (path' viewController.Text);  								Window.DocumentEdited = false;  								viewController.View.Window.SetTitleWithRepresentedFilename (Path.GetFileName(path));  								viewController.View.Window.RepresentedUrl = dlg.Url;  								Window.Close();  							}  						});  						return true;  					}  				case 1001:  					// Lose Changes  					return true;  				case 1002:  					// Cancel  					return false;  				}
Missing Default,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,ViewWillAppear,The following switch statement is missing a default case: switch (DefaultLanguage) {  			case 0:  				CSharpFile.Bordered = true;  				break;  			case 1:  				HTMLFile.Bordered = true;  				break;  			case 2:  				MarkDownFile.Bordered = true;  				break;  			case 3:  				XMLFile.Bordered = true;  				break;  			}
Missing Default,SourceWriter,TemplateViewController,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\TemplateViewController.cs,PrepareForSegue,The following switch statement is missing a default case: switch (segue.Identifier) {  			case "OpenEditorSegue":  				// Inform window of its type  				var controller = segue.DestinationController as EditorWindowController;  				controller.ContentController.DefaultLanguage = DefaultLanguage;  				break;  			}
Missing Default,AppKit.TextKit.Formatter,SourceTextView,D:\research\architectureSmells\repos\xamarin_mac-samples\SourceWriter\SourceWriter\LanguageFormatter\SourceTextView.cs,KeyDown,The following switch statement is missing a default case: switch(charCode) {  				case EnterKey:  					// Tab indent the new line to the same level  					if (indentLevel >0) {  						var indent = TabIndent(indentLevel);  						TextStorage.BeginEditing();  						InsertText(new NSString(indent));  						TextStorage.EndEditing();  					}  					break;  				}
