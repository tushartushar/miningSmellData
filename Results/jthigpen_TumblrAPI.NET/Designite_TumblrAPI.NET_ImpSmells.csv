Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TumblrAPI,Authentication,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\Authentication.cs,ParseRequest,Cyclomatic complexity of the method is 68
Complex Method,TumblrAPI,HttpHelper,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,PostData,Cyclomatic complexity of the method is 9
Long Statement,TumblrAPI,Authentication,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\Authentication.cs,Authenticate,The length of the statement  "	Status = result.PostStatus == PostStatus.Created ? Status = AuthenticationStatus.Valid : Status = AuthenticationStatus.Invalid; " is 127.
Long Statement,TumblrAPI,FormUpload,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,GetMultipartFormData,The length of the statement  "			string header = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n"' boundary' param.Key' fileToUpload.FileName ?? param.Key' fileToUpload.ContentType ?? "application/octet-stream"); " is 249.
Long Statement,TumblrAPI,FormUpload,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,GetMultipartFormData,The length of the statement  "			string postData = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}\r\n"' boundary' param.Key' param.Value); " is 139.
Long Statement,TumblrAPI.PostItems,PostItemBase,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\PostItems\PostItemBase.cs,Publish,The length of the statement  "	throw new InvalidOperationException ("You are not authenticated.  You can call the Connect method or the Publish method and pass in your credentials."); " is 152.
Magic Number,TumblrAPI,FormUpload,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,GetMultipartFormData,The following statement contains a magic number: foreach (var param in postParameters) {  	if (param.Value is FileParameter) {  		var fileToUpload = (FileParameter)param.Value;  		// Add just the first part of this param' since we will write the file data directly to the Stream  		string header = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n"' boundary' param.Key' fileToUpload.FileName ?? param.Key' fileToUpload.ContentType ?? "application/octet-stream");  		formDataStream.Write (encoding.GetBytes (header)' 0' header.Length);  		// Write the file data directly to the Stream' rather than serializing it to a string.  		formDataStream.Write (fileToUpload.File' 0' fileToUpload.File.Length);  		// Thanks to feedback from commenters' add a CRLF to allow multiple files to be uploaded  		formDataStream.Write (encoding.GetBytes ("\r\n")' 0' 2);  	}  	else {  		string postData = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}\r\n"' boundary' param.Key' param.Value);  		formDataStream.Write (encoding.GetBytes (postData)' 0' postData.Length);  	}  }  
Magic Number,TumblrAPI,FormUpload,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,GetMultipartFormData,The following statement contains a magic number: if (param.Value is FileParameter) {  	var fileToUpload = (FileParameter)param.Value;  	// Add just the first part of this param' since we will write the file data directly to the Stream  	string header = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n"' boundary' param.Key' fileToUpload.FileName ?? param.Key' fileToUpload.ContentType ?? "application/octet-stream");  	formDataStream.Write (encoding.GetBytes (header)' 0' header.Length);  	// Write the file data directly to the Stream' rather than serializing it to a string.  	formDataStream.Write (fileToUpload.File' 0' fileToUpload.File.Length);  	// Thanks to feedback from commenters' add a CRLF to allow multiple files to be uploaded  	formDataStream.Write (encoding.GetBytes ("\r\n")' 0' 2);  }  else {  	string postData = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}\r\n"' boundary' param.Key' param.Value);  	formDataStream.Write (encoding.GetBytes (postData)' 0' postData.Length);  }  
Magic Number,TumblrAPI,FormUpload,C:\repos\jthigpen_TumblrAPI.NET\TumblrAPI.NET\HttpHelper.cs,GetMultipartFormData,The following statement contains a magic number: formDataStream.Write (encoding.GetBytes ("\r\n")' 0' 2);  
