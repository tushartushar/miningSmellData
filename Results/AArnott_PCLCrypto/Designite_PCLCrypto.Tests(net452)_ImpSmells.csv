Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                Modulus = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("a4d5f49f3298500af851b031d27754fd63b8df7f37508b2bea15794ae706abc4cc790d5c8f4bac7ac46ac770b53830a28e97fd3bd9d2afdd18b8db9266965413")' " is 194.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                P = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("e6505d775acbc8077462f0cdbe22a59fc6c75758a9a097211bc4e071c963e415")' " is 124.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                D = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("6b87270cb2f4a9427ebacb35b516235b28b271198bfbfecda6e65b39817bd8907b0e7051b74ddb728f1f29220cef00095d63c224d5a148e14e15a9cb4c6849")' " is 186.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                Q = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("b73823d2929601f4f95050e17de1587841cbdc4152444f2352d9f83f54d71987")' " is 124.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                DP = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("200f81e352855994081499d6da27f28c5a5c77814523b0c6101a88efee0bf4bd")' " is 125.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                DQ = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("1471d6457c07f325f3e00b766e068449bf05d1891475fce2b32f116d77b91ce7")' " is 125.
Long Statement,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,CreateRSAParametersWithShortD,The length of the statement  "                InverseQ = WinRTCrypto.CryptographicBuffer.DecodeFromHexString("c7e4c27f6596dec9f8d18eb3ccead992ca2ad7241a4abffdecaa5ad5bf965895")' " is 131.
Magic Number,PCLCrypto.Formatters,Asn,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto\Formatters\Asn.cs,ReadAsn1Elements,The following statement contains a magic number: length <<= 8;
Magic Number,PCLCrypto.Formatters,Asn,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto\Formatters\Asn.cs,ReadAsn1Elements,The following statement contains a magic number: length > 8 * 1024
Magic Number,PCLCrypto.Formatters,Asn,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto\Formatters\Asn.cs,ReadAsn1Elements,The following statement contains a magic number: length > 8 * 1024
Magic Number,PCLCrypto.Formatters,Asn,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto\Formatters\Asn.cs,WriteAsn1Element,The following statement contains a magic number: element.Content.Length < 128
Magic Number,PCLCrypto.Formatters,Asn,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto\Formatters\Asn.cs,GetMinimumBytesRequiredToRepresent,The following statement contains a magic number: return 4;
Magic Number,PCLCrypto,KeyFormatterTests,D:\research\architectureSmells\repos\AArnott_PCLCrypto\src\PCLCrypto.Tests.Shared\KeyFormatterTests.cs,KeyFormatterTests,The following statement contains a magic number: rsaParameters = new Lazy<RSAParameters>(() =>              {                  var algorithm = WinRTCrypto.AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithm.RsaOaepSha1);                  using (var key = algorithm.CreateKeyPair(512))                  {                      const CryptographicPrivateKeyBlobType keyBlobFormat = CryptographicPrivateKeyBlobType.BCryptFullPrivateKey;                      byte[] bcryptNative = key.Export(keyBlobFormat);                      var rsaParameters = KeyFormatter.GetFormatter(keyBlobFormat).Read(bcryptNative);                      return rsaParameters;                  }              });
