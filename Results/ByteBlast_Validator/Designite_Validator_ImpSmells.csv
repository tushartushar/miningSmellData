Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsFqdn,Cyclomatic complexity of the method is 10
Long Statement,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsCreditCard,The length of the statement  "	var sumOfDigits = input.Where (e => e >= '0' && e <= '9').Reverse ().Select ((e' i) => (e - 48) * (i % 2 == 0 ? 1 : 2)).Sum (e => e / 10 + e % 10); " is 147.
Long Statement,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsUrl,The length of the statement  "	if (string.IsNullOrEmpty (url) || url.Length >= 2083 || url.StartsWith ("mailto:"' StringComparison.InvariantCultureIgnoreCase)) { " is 130.
Long Statement,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsUrl,The length of the statement  "	// as we trim down the url string to verify. In other words' most of these methods remove the portion of the string that they validate " is 134.
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsBase64,The following statement contains a magic number: if (input.Length == 0 || input.Length % 4 != 0) {  	return false;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsBase64,The following statement contains a magic number: if (input.Length - valueWithoutPadding.Length > 2) {  	return false;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsCreditCard,The following statement contains a magic number: return sumOfDigits % 10 == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: for (var i = 0; i < 12; i++) {  	checksum += factor [i % 2] * int.Parse (input [i].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: for (var i = 0; i < 12; i++) {  	checksum += factor [i % 2] * int.Parse (input [i].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: checksum += factor [i % 2] * int.Parse (input [i].ToString ());  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: return int.Parse (input [12].ToString ()) - ((10 - (checksum % 10)) % 10) == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: return int.Parse (input [12].ToString ()) - ((10 - (checksum % 10)) % 10) == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: return int.Parse (input [12].ToString ()) - ((10 - (checksum % 10)) % 10) == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn13,The following statement contains a magic number: return int.Parse (input [12].ToString ()) - ((10 - (checksum % 10)) % 10) == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: for (var i = 0; i < 9; i++) {  	checksum += (i + 1) * int.Parse (input [i].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: if (input [9] == 'X') {  	checksum += 10 * 10;  } else {  	checksum += 10 * int.Parse (input [9].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: if (input [9] == 'X') {  	checksum += 10 * 10;  } else {  	checksum += 10 * int.Parse (input [9].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: if (input [9] == 'X') {  	checksum += 10 * 10;  } else {  	checksum += 10 * int.Parse (input [9].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: if (input [9] == 'X') {  	checksum += 10 * 10;  } else {  	checksum += 10 * int.Parse (input [9].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: if (input [9] == 'X') {  	checksum += 10 * 10;  } else {  	checksum += 10 * int.Parse (input [9].ToString ());  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: checksum += 10 * 10;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: checksum += 10 * 10;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: checksum += 10 * int.Parse (input [9].ToString ());  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: checksum += 10 * int.Parse (input [9].ToString ());  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn10,The following statement contains a magic number: return checksum % 11 == 0;  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsUrl,The following statement contains a magic number: if (string.IsNullOrEmpty (url) || url.Length >= 2083 || url.StartsWith ("mailto:"' StringComparison.InvariantCultureIgnoreCase)) {  	return false;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,CheckProtocol,The following statement contains a magic number: if (protocolEndIndex > -1) {  	var protocol = url.Substring (0' protocolEndIndex);  	// this is not a one character indexof' so need to account for all three character we were looking for  	output.NewUrl = url.Substring (protocolEndIndex + 3);  	output.IsValid = options.Protocols.Contains (protocol);  } else {  	output.NewUrl = url;  	output.IsValid = !options.RequireProtocol;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,CheckProtocol,The following statement contains a magic number: output.NewUrl = url.Substring (protocolEndIndex + 3);  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,CheckHost,The following statement contains a magic number: if (colonIndex == -1)  	host = hostName;  else {  	host = hostName.Substring (0' colonIndex);  	int port;  	TryParse (hostName.Substring (colonIndex + 1)' out port);  	if (port <= 0 || port > 65535) {  		output.IsValid = false;  		return output;  	}  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,CheckHost,The following statement contains a magic number: if (port <= 0 || port > 65535) {  	output.IsValid = false;  	return output;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIp,The following statement contains a magic number: if (version == IpVersion.Four) {  	if (!Validator.Matches (input' ipv4MaybePattern)) {  		return false;  	}  	var parts = input.Split ('.').Select (p => Convert.ToInt32 (p));  	return parts.Max () <= 255;  }  
Magic Number,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIp,The following statement contains a magic number: return parts.Max () <= 255;  
Missing Default,Validator,Validator,F:\newReposMay17\ByteBlast_Validator\Validator\IsBase64.cs,IsIsbn,The following switch statement is missing a default case: switch (version) {  case IsbnVersion.Any:  	return IsIsbn10 (input) || IsIsbn13 (input);  case IsbnVersion.Thirteen:  	return IsIsbn13 (input);  case IsbnVersion.Ten:  	return IsIsbn10 (input);  }  
