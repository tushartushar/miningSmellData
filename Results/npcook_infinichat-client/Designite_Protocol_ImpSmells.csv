Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,HandleMessage,Cyclomatic complexity of the method is 12
Complex Method,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,Cyclomatic complexity of the method is 10
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,LogIn,The method has 6 parameters.
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,Chat,The method has 9 parameters.
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,ChatUser,The method has 5 parameters.
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,ChatGroup,The method has 5 parameters.
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,ChangeDisplayName,The method has 5 parameters.
Long Parameter List,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,ChangeStatus,The method has 5 parameters.
Long Parameter List,Client.Protocol,GroupChatEventArgs,C:\repos\npcook_infinichat-client\Protocol\ClientTypes.cs,GroupChatEventArgs,The method has 5 parameters.
Long Statement,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,HandleChatUser,The length of the statement  "	var args = new UserChatEventArgs (user' ParseFont (message ["font"])' new UTF8Encoding (false' true).GetString (Convert.FromBase64String (Convert.ToString (message ["body"])))' DateTime.Parse (message ["timestamp"].ToString ()' null' System.Globalization.DateTimeStyles.RoundtripKind)); " is 286.
Long Statement,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,HandleChatGroup,The length of the statement  "	var args = new GroupChatEventArgs (group' user' ParseFont (message ["font"])' new UTF8Encoding (false' true).GetString (Convert.FromBase64String (Convert.ToString (message ["body"])))' DateTime.Parse (message ["timestamp"].ToString ()' null' System.Globalization.DateTimeStyles.RoundtripKind)); " is 294.
Long Statement,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,Chat,The length of the statement  "	string colorString = string.Format ("#{0}{1}{2}"' font.Color.R.ToString ("x2")' font.Color.G.ToString ("x2")' font.Color.B.ToString ("x2")); " is 140.
Long Statement,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,Chat,The length of the statement  "	message ["font"] ["style"] = (font.Style.HasFlag (FontStyle.Bold) ? "b" : "") + (font.Style.HasFlag (FontStyle.Italic) ? "i" : "") + (font.Style.HasFlag (FontStyle.Underline) ? "u" : ""); " is 187.
Long Statement,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,ParseFont,The length of the statement  "	var color = ColorConverter.ConvertFromString (Convert.ToString (rawFont ["color"])) as Color? ?? DefaultFontOptions.Color; " is 122.
Magic Number,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,LogIn,The following statement contains a magic number: using (var algorithm = SHA256.Create ()) {  	algorithm.ComputeHash (Encoding.UTF8.GetBytes (password));  	var sb = new StringBuilder (32);  	foreach (byte b in algorithm.Hash)  		sb.Append (b.ToString ("x2"));  	hashedPassword = sb.ToString ();  }  
Magic Number,Client.Protocol,ReplyEventArgs,C:\repos\npcook_infinichat-client\Protocol\ClientTypes.cs,ReplyEventArgs,The following statement contains a magic number: Success = (RawResult >= 200 && RawResult < 300);  
Magic Number,Client.Protocol,ReplyEventArgs,C:\repos\npcook_infinichat-client\Protocol\ClientTypes.cs,ReplyEventArgs,The following statement contains a magic number: Success = (RawResult >= 200 && RawResult < 300);  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: while (!stop) {  	string rawPacket;  	try {  		rawPacket = reader.ReadLine ();  	}  	catch (IOException ex) {  		StreamError.SafeInvoke (this' new StreamErrorEventArgs (ex));  		break;  	}  	catch (ObjectDisposedException) {  		break;  	}  	log.Debug (rawPacket);  	var packet = Message.Parse (rawPacket);  	JToken rawTag;  	bool hasTag = packet.TryGetValue ("tag"' out rawTag);  	string messageName = (packet ["message"] ?? "").ToString ();  	string replyName = (packet ["reply"] ?? "").ToString ();  	if (messageName != "") {  		MessageReceived.SafeInvoke (this' new MessageEventArgs (packet));  	}  	else if (replyName != "") {  		if (CheckObjectFields ("reply"' packet' "tag"' "result"' "result_message")) {  			string tag = packet ["tag"].ToString ();  			var callback = outstandingCallbacks.SingleOrDefault (_callback => _callback.Tag == tag);  			if (callback.Callback != null) {  				callback.Callback (callback.MessageName' ReplyResult.Success' packet);  				outstandingCallbacks.Remove (callback);  			}  		}  		else  			log.Debug ("Discarding reply");  	}  	else {  		log.Info ("Received an invalid packet: not a message or a reply");  	}  	if (Environment.TickCount > nextPruneTick) {  		PruneCallbacks ();  		nextPruneTick += 60 * 1000;  	}  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: while (!stop) {  	string rawPacket;  	try {  		rawPacket = reader.ReadLine ();  	}  	catch (IOException ex) {  		StreamError.SafeInvoke (this' new StreamErrorEventArgs (ex));  		break;  	}  	catch (ObjectDisposedException) {  		break;  	}  	log.Debug (rawPacket);  	var packet = Message.Parse (rawPacket);  	JToken rawTag;  	bool hasTag = packet.TryGetValue ("tag"' out rawTag);  	string messageName = (packet ["message"] ?? "").ToString ();  	string replyName = (packet ["reply"] ?? "").ToString ();  	if (messageName != "") {  		MessageReceived.SafeInvoke (this' new MessageEventArgs (packet));  	}  	else if (replyName != "") {  		if (CheckObjectFields ("reply"' packet' "tag"' "result"' "result_message")) {  			string tag = packet ["tag"].ToString ();  			var callback = outstandingCallbacks.SingleOrDefault (_callback => _callback.Tag == tag);  			if (callback.Callback != null) {  				callback.Callback (callback.MessageName' ReplyResult.Success' packet);  				outstandingCallbacks.Remove (callback);  			}  		}  		else  			log.Debug ("Discarding reply");  	}  	else {  		log.Info ("Received an invalid packet: not a message or a reply");  	}  	if (Environment.TickCount > nextPruneTick) {  		PruneCallbacks ();  		nextPruneTick += 60 * 1000;  	}  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: if (Environment.TickCount > nextPruneTick) {  	PruneCallbacks ();  	nextPruneTick += 60 * 1000;  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: if (Environment.TickCount > nextPruneTick) {  	PruneCallbacks ();  	nextPruneTick += 60 * 1000;  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: nextPruneTick += 60 * 1000;  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,ReadFromSource,The following statement contains a magic number: nextPruneTick += 60 * 1000;  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,SendMessage,The following statement contains a magic number: if (replyCallback != null) {  	outstandingCallbacks.Add (new MessageCallbackInfo () {  		MessageName = message ["message"].ToString ()'  		Callback = replyCallback'  		ExpireTick = Environment.TickCount + 1000 * 10'  		Tag = message ["tag"].ToString ()'  	});  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,SendMessage,The following statement contains a magic number: if (replyCallback != null) {  	outstandingCallbacks.Add (new MessageCallbackInfo () {  		MessageName = message ["message"].ToString ()'  		Callback = replyCallback'  		ExpireTick = Environment.TickCount + 1000 * 10'  		Tag = message ["tag"].ToString ()'  	});  }  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,SendMessage,The following statement contains a magic number: outstandingCallbacks.Add (new MessageCallbackInfo () {  	MessageName = message ["message"].ToString ()'  	Callback = replyCallback'  	ExpireTick = Environment.TickCount + 1000 * 10'  	Tag = message ["tag"].ToString ()'  });  
Magic Number,Client.Protocol,Network,C:\repos\npcook_infinichat-client\Protocol\Network.cs,SendMessage,The following statement contains a magic number: outstandingCallbacks.Add (new MessageCallbackInfo () {  	MessageName = message ["message"].ToString ()'  	Callback = replyCallback'  	ExpireTick = Environment.TickCount + 1000 * 10'  	Tag = message ["tag"].ToString ()'  });  
Missing Default,Client.Protocol,ChatClient,C:\repos\npcook_infinichat-client\Protocol\ChatClient.cs,HandleMessage,The following switch statement is missing a default case: switch (e.MessageName) {  case "detail.users":  	HandleDetailUsers (e.Message);  	break;  case "detail.groups":  	HandleDetailGroups (e.Message);  	break;  case "chat.user":  	HandleChatUser (e.Message);  	break;  case "chat.group":  	HandleChatGroup (e.Message);  	break;  }  
